{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/beian.png","path":"img/beian.png","modified":0,"renderable":0},{"_id":"source/img/01.jpg","path":"img/01.jpg","modified":0,"renderable":0},{"_id":"source/img/19.jpg","path":"img/19.jpg","modified":0,"renderable":0},{"_id":"source/img/17.jpg","path":"img/17.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/allon.jpeg","path":"img/header_img/allon.jpeg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/syntax.css","path":"css/syntax.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/02.jpg","path":"img/02.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/13.jpg","path":"img/13.jpg","modified":0,"renderable":0},{"_id":"source/img/16.jpg","path":"img/16.jpg","modified":0,"renderable":0},{"_id":"source/img/18.jpg","path":"img/18.jpg","modified":0,"renderable":0},{"_id":"source/img/23.jpg","path":"img/23.jpg","modified":0,"renderable":0},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/03.jpg","path":"img/03.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/04.jpg","path":"img/04.jpg","modified":0,"renderable":0},{"_id":"source/img/05.jpg","path":"img/05.jpg","modified":0,"renderable":0},{"_id":"source/img/24.jpg","path":"img/24.jpg","modified":0,"renderable":0},{"_id":"source/img/06.jpg","path":"img/06.jpg","modified":0,"renderable":0},{"_id":"source/img/22.jpg","path":"img/22.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":0,"renderable":0},{"_id":"source/img/21.jpg","path":"img/21.jpg","modified":0,"renderable":0},{"_id":"source/img/07.jpg","path":"img/07.jpg","modified":0,"renderable":0},{"_id":"source/img/08.jpg","path":"img/08.jpg","modified":0,"renderable":0},{"_id":"source/img/09.jpg","path":"img/09.jpg","modified":0,"renderable":0},{"_id":"source/img/20.jpg","path":"img/20.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":0,"renderable":0},{"_id":"source/img/10.jpg","path":"img/10.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":0,"renderable":0},{"_id":"source/img/11.jpg","path":"img/11.jpg","modified":0,"renderable":0},{"_id":"source/img/12.jpg","path":"img/12.jpg","modified":0,"renderable":0},{"_id":"source/img/14.jpg","path":"img/14.jpg","modified":0,"renderable":0},{"_id":"source/img/15.jpg","path":"img/15.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"5012ea393524373dadb8c166278dfe186d2c1160","modified":1528380024000},{"_id":"themes/beantech/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1528380025000},{"_id":"themes/beantech/_config.yml","hash":"d6c50638eb54009037290a3c1999b6166d49c692","modified":1528380025000},{"_id":"source/about/index.md","hash":"a0089339a1cbd4153dbc5d86f74512b8fe936e18","modified":1528380024000},{"_id":"source/archive/index.md","hash":"a508fa64c7a36bd17ba1ecabcd7ca0c37ebfc6d0","modified":1528380024000},{"_id":"source/img/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1528380025000},{"_id":"source/tags/index.md","hash":"1e3467d2fbac0c9b837306c336a98315d638b64c","modified":1528380025000},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1528380025000},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1528380025000},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"0f4870d3248b91fdd799a27cc288b97d430c39d0","modified":1528380025000},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1528380025000},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1528380025000},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1528380025000},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1528380025000},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1528380025000},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1528380025000},{"_id":"themes/beantech/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1528380025000},{"_id":"themes/beantech/layout/about.ejs","hash":"edcf8fa3bf7093c974d418ffef42ac89c19af128","modified":1528380025000},{"_id":"themes/beantech/layout/archive.ejs","hash":"7c2ce1e1ae70f0c8c69ad7a5c97aaa40186cb94a","modified":1528380025000},{"_id":"themes/beantech/layout/index.ejs","hash":"3b9118830addb54f8eb8836ddd9ebd2a2924ab85","modified":1528380025000},{"_id":"themes/beantech/layout/keynote.ejs","hash":"fae2e777f13541e7d20e8cf2cf26c84ddbfc85ac","modified":1528380025000},{"_id":"themes/beantech/layout/layout.ejs","hash":"4f77b8271b2ba0300b2a9ff1fb08123a7685ae3e","modified":1528380025000},{"_id":"themes/beantech/layout/page.ejs","hash":"eb0ab2b3ac11710e966caa558609e109faf55e3a","modified":1528380025000},{"_id":"themes/beantech/layout/tags.ejs","hash":"2c72eb2e89130658aa068d80d27b561b509c5dcd","modified":1528380025000},{"_id":"themes/beantech/layout/post.ejs","hash":"4bb37e8038ed5bc2a2195e552c5b8cdf9d8d4101","modified":1528380025000},{"_id":"source/img/01.jpg","hash":"c2f53433423932da7518525a792d2d3ced43a9aa","modified":1528380024000},{"_id":"source/img/19.jpg","hash":"4798e62aa0f996c9c38c794f2f8e635331d9cb4d","modified":1528380025000},{"_id":"source/_posts/scala/Chapter-01-the-basics.md","hash":"07633584e19502cda5ae0b7a5a763076de92f37a","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-02-control-structures-and-functions.md","hash":"27a073ad4d5796e1da21d340b4023fbbee50c2b3","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-03-working-with-arrays.md","hash":"7f9bc6806aa1544d8aeed4a0407395709f9a8013","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-04-Map和元组.md","hash":"4be09270a0ddc6335872fd27b8f44dae15c418e3","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-05-类.md","hash":"fc8b1304e6c634bb5b0f42f8b797d44260ed977e","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-06-对象.md","hash":"519a08738d2f34b9664f46d466bb4381d64f018c","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-07-包和引入.md","hash":"820a9b77411603d8b45cffab59abf59de3e8c5e0","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-08-继承.md","hash":"61a9cbacc8dd8c80a4f5c766a0edb04a3efcee20","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-09-文件和正则表达式.md","hash":"a9358900cddd9fb2fde67d561d35040a01888674","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-10-特质.md","hash":"e3b6f8b5c828779f7e8b435bd27ac6399638e351","modified":1528380024000},{"_id":"source/_posts/scala/Chapter-11-operators.md","hash":"1d53781b1906d48887dfed1f2e74a9b4bacfa6d5","modified":1528380024000},{"_id":"source/_posts/书法/书法-基础理论.md","hash":"a331d8359647328b2a6a371ed79e62fa326c0478","modified":1528380024000},{"_id":"source/_posts/书法/书法-尖峰和侧峰.md","hash":"b7ca28301bfbab73303cf0ff3961f2fac6bd8d16","modified":1528380024000},{"_id":"source/_posts/书法/书法-工具.md","hash":"64812ac1683622dbdd9ea3d6c33496896ef3928f","modified":1528380024000},{"_id":"source/_posts/书法/书法-横竖撇捺.md","hash":"fc4e0589a3fc9ffc74bb2e49f6c97f312b2f4f1f","modified":1528380024000},{"_id":"source/_posts/书法/书法-笔心.md","hash":"4309c229b1adf4a130b9fff7802f25ef75ea52f5","modified":1528380024000},{"_id":"source/_posts/八卦/八卦.md","hash":"6c98d3ebd8ee12e63350c2dcaa42f79650ad45cc","modified":1528380024000},{"_id":"source/_posts/数学/微积分.md","hash":"9da4d3e40ebf35da37be84c4d9f6c2e37a5613aa","modified":1528380024000},{"_id":"source/_posts/数学/线性代数.md","hash":"8500c0bc2dd8be6b9ffbf9d08051b51a6338b695","modified":1528380024000},{"_id":"source/_posts/深入理解计算机系统/第01章 计算机系统漫游.md","hash":"e39350e79cdc57981fc483ce0b2c8064cd2cc04d","modified":1528380024000},{"_id":"source/_posts/深入理解计算机系统/第02章 程序结构和执行.md","hash":"c8604640dd6628f1d2aab578741cd3312b31fa1b","modified":1528380024000},{"_id":"source/_posts/深入理解计算机系统/第03章 程序的机器级表示.md","hash":"3102526aa19bf2d1f9fd18b4bb5209c4c6508549","modified":1528380024000},{"_id":"source/_posts/游记/邺城游记.md","hash":"0407ffeeea564072f6e30ae6e12c4d94fbc840e3","modified":1528380024000},{"_id":"source/_posts/資治通鑑/資治通鑑總覽.md","hash":"1791eea42c6b4227145104dc0e739a52547fec68","modified":1528380024000},{"_id":"source/_posts/資治通鑑/资治通鉴小结001-005卷-周纪.md","hash":"7377ae279b106e588c088b93a6ece7709f2cbb7e","modified":1528380024000},{"_id":"source/_posts/資治通鑑/资治通鉴小结006-008卷-秦纪.md","hash":"afb0e9599d4bb94d70e0aa9a5396a03f02e62609","modified":1528380024000},{"_id":"source/_posts/資治通鑑/资治通鉴小结069-078卷-魏纪.md","hash":"4c4cd5b73d685e6e7ecc2c5f5ed9de39d92e7c79","modified":1528380024000},{"_id":"source/_posts/資治通鑑/资治通鉴小结079-118卷-晋纪.md","hash":"cc588879572be49801f91072792113aa1b44d826","modified":1528380024000},{"_id":"source/img/17.jpg","hash":"a7882f3125e5655a89e3cc39976621a73e7e7dba","modified":1528380025000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1528380025000},{"_id":"source/img/header_img/allon.jpeg","hash":"b143ecf896f94ee88fc1b3c61beb895b1a742c22","modified":1528380025000},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"0620ca41a730ac106501248d61d7ff8e00d0e4c6","modified":1528380025000},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"edca3ad1d61e8b817b28dc322f3e94cb1b685fc6","modified":1528380025000},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"28e768ba924fdb758ba8d862a6e11600a08e0e22","modified":1528380025000},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"242b3e23b3fcc185fd0194a48b088b57691a0c05","modified":1528380025000},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1528380025000},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1528380025000},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"837f01e8a20e5023b4b292d1b3141a399567da65","modified":1528380025000},{"_id":"themes/beantech/layout/_widget/.friends-blog.ejs.swp","hash":"e5a19238ab9c0417706100626f7f75d89f9884c2","modified":1530923494434},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"1dbf5a6c465ac7eadbd0643d3c55bbcca699e20a","modified":1528380025000},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"1cf485def07dc06e870dc9613767c6c614bcf428","modified":1528380025000},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"bf9809f20becab1ffe6194e2c5be74e501763a30","modified":1528380025000},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"105710bdeb4e555d2ab0d7edab8ba60425b09342","modified":1530923490428},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"97983b186b5737e0d7b1fcde22f34d047e44d20e","modified":1528380025000},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"850b18e4b5aaa10ad5fb4b37dd96c4b7fd6e6740","modified":1528380025000},{"_id":"themes/beantech/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1528380025000},{"_id":"themes/beantech/source/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1528380025000},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"06a73fac70dc52adb9f7d1d0e9bbcad7da132541","modified":1528380025000},{"_id":"themes/beantech/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1528380025000},{"_id":"themes/beantech/source/css/hux-blog.css","hash":"2e8520c16e39dce6cc5c99ab3e267b2e2d6bc0c5","modified":1528380025000},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"8ed9da2013cddd8bf119ff740342a5c2c8b1f3e7","modified":1528380025000},{"_id":"themes/beantech/source/css/rocket.styl","hash":"e15c51c8566ecd943112e57592888dd318b6fa6a","modified":1528380025000},{"_id":"themes/beantech/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1528380025000},{"_id":"themes/beantech/source/css/syntax.css","hash":"ddb061122db565f14b3018d07e31d12be0b5914b","modified":1528380025000},{"_id":"themes/beantech/source/css/toc.styl","hash":"6c9a2d5f6f981624e0c4b64323493e8614efea29","modified":1528380025000},{"_id":"themes/beantech/source/css/widget.styl","hash":"7a9f735f5ef323dc2950fbd9d76daa16c9a0f1a9","modified":1528380025000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1528380025000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1528380025000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1528380025000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1528380025000},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1528380025000},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1528380025000},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1528380025000},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1528380025000},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1528380025000},{"_id":"themes/beantech/source/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1528380025000},{"_id":"themes/beantech/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1528380025000},{"_id":"source/_posts/資治通鑑/资治通鉴小结009-068卷-汉纪.md","hash":"370b141ff3a87b1787d5cfe00a339d7dc428008c","modified":1528380024000},{"_id":"source/img/02.jpg","hash":"dfe50b46afb7ed966e40119a301a66ee88f31df4","modified":1528380024000},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1528380025000},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1528380025000},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1528380025000},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1528380025000},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528380025000},{"_id":"source/img/13.jpg","hash":"37b130047ad19e31a44c88a929b8c738b9010342","modified":1528380024000},{"_id":"source/img/16.jpg","hash":"fea570eb9e4a6e12090201ce3a9c1e11410b86a5","modified":1528380025000},{"_id":"source/img/18.jpg","hash":"f84495b6dcadc61ec84c2e1cc0dc72485729b459","modified":1528380025000},{"_id":"source/img/23.jpg","hash":"6e53045f68871962c84408c0bb832b8064536a55","modified":1528380025000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1528380025000},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1528380025000},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1528380025000},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1528380025000},{"_id":"source/img/03.jpg","hash":"0c5a71083cecfca277257b912f9243e39ce85094","modified":1528380024000},{"_id":"themes/beantech/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1528380025000},{"_id":"source/img/04.jpg","hash":"695b52e10134f4eb5d4a9267aedc6cf9922fe5c6","modified":1528380024000},{"_id":"source/img/05.jpg","hash":"1265dc75b3f60a1dd666c687994189aed01c8de7","modified":1528380024000},{"_id":"source/img/24.jpg","hash":"558a6d9da654c1a52b0ab6e6a890f24383b74f44","modified":1528380025000},{"_id":"source/img/06.jpg","hash":"149d868cac9081b99725117b5cb4ff67e9e8eff3","modified":1528380024000},{"_id":"source/img/22.jpg","hash":"733b9efedd0dba17d6aba23ec31deea961215152","modified":1528380025000},{"_id":"source/img/header_img/tag-bg.png","hash":"94c3942bdcb1a6c4ac64bd6365e2066302380847","modified":1528380025000},{"_id":"source/img/21.jpg","hash":"80b1c92eb899088bf4b57199a78ccd8557cbd4c7","modified":1528380025000},{"_id":"source/img/07.jpg","hash":"9adcca2d2867c8248b684621f8619a5c42d6cfb1","modified":1528380024000},{"_id":"source/img/08.jpg","hash":"81e19c82746fcf2248e5d46cdf40849a5b59fe84","modified":1528380024000},{"_id":"source/img/09.jpg","hash":"1f218120eca78cbecf2bb25eab2cec0eb3d7471a","modified":1528380024000},{"_id":"source/img/20.jpg","hash":"2d1d14147da98693877b3196a30356c7b9f13f38","modified":1528380025000},{"_id":"source/img/header_img/archive-bg.png","hash":"f4345d8edd7167fe1500b122aec4922893630fd3","modified":1528380025000},{"_id":"source/img/10.jpg","hash":"2f9c052795706dd236dd7e224d0517425024bc17","modified":1528380024000},{"_id":"source/img/header_img/home-bg-o.png","hash":"e9ba54c513f0a37bbccddfdf7841570f86cdc6a5","modified":1528380025000},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"74d23c05e93a2e4bb469737f69d1714d1074bcf9","modified":1528380025000},{"_id":"source/img/11.jpg","hash":"7c28c0188909f209048bf952ad3812d14d846a65","modified":1528380024000},{"_id":"source/img/12.jpg","hash":"a767f6baecc43ba0b21cc76d281dafbfaa156c3d","modified":1528380024000},{"_id":"source/img/14.jpg","hash":"7bdf575736fd75247687f2e4de37c528a2fd7b69","modified":1528380025000},{"_id":"source/img/15.jpg","hash":"2e22c73b122f4e4a1140ad05035c5d7c6b30abec","modified":1528380025000},{"_id":"public/post-sitemap.xml","hash":"55118a72d24f54bcbca2308aba6da32e775d104b","modified":1530923504695},{"_id":"public/page-sitemap.xml","hash":"56d7eb3de76e43d4e36fa133bbe31926f820257a","modified":1530923504829},{"_id":"public/tag-sitemap.xml","hash":"8057c93303e611ca75f56b79caea838e2b20a79a","modified":1530923504868},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1530923504875},{"_id":"public/sitemap.xml","hash":"e395764c8796f16672f8352c4a0a51508e2155ad","modified":1530923504875},{"_id":"public/tags/index.html","hash":"bf1e48c3fef9cd922a3e7f6702be611ad0148812","modified":1530923504890},{"_id":"public/2018/03/25/书法/书法-横竖撇捺/index.html","hash":"3b750839be3bbc212c88c626d5275c4f9f49d4e8","modified":1530923504890},{"_id":"public/2018/03/25/书法/书法-笔心/index.html","hash":"7a880c00627c09def1c688be993ff4e571b61a4f","modified":1530923504890},{"_id":"public/2018/03/18/书法/书法-尖峰和侧峰/index.html","hash":"909aa56ac0e1c27e8ae9504abba8fc8df4d5760f","modified":1530923504890},{"_id":"public/2018/03/07/資治通鑑/资治通鉴小结079-118卷-晋纪/index.html","hash":"693a0695b1c4fd2dc745bc158bb6a82627824201","modified":1530923504890},{"_id":"public/2017/12/20/游记/邺城游记/index.html","hash":"9e53ae5d059e07819bbd8402a6033e921ae0eed3","modified":1530923504890},{"_id":"public/2017/12/10/資治通鑑/资治通鉴小结069-078卷-魏纪/index.html","hash":"8f82a3c189ba8f3cd8e03bf69cbb1e39585c67f2","modified":1530923504890},{"_id":"public/2017/12/09/資治通鑑/资治通鉴小结009-068卷-汉纪/index.html","hash":"0d1342b03b64f31a715c5646518f28f09ea29465","modified":1530923504890},{"_id":"public/2017/12/08/資治通鑑/资治通鉴小结006-008卷-秦纪/index.html","hash":"42bf0db183015a29ddb6c2dc0cc74302ab1331b9","modified":1530923504890},{"_id":"public/2017/12/07/資治通鑑/资治通鉴小结001-005卷-周纪/index.html","hash":"0cfcf94f9e26e3edae8ba21c636f8be6c30767ee","modified":1530923504890},{"_id":"public/2017/11/27/資治通鑑/資治通鑑總覽/index.html","hash":"8e6b6a1369859d444a1c6ae424191003d21b6c98","modified":1530923504891},{"_id":"public/2017/11/22/书法/书法-基础理论/index.html","hash":"13ccf22c9d1652b799609cd67362165726f35885","modified":1530923504891},{"_id":"public/2017/11/22/书法/书法-工具/index.html","hash":"905d8fcb345ee77bdde6dca0912154438d6ed23d","modified":1530923504891},{"_id":"public/2017/11/22/数学/微积分/index.html","hash":"333c6cf2c9a30560f83baf760dd67cd9b4d0ad26","modified":1530923504891},{"_id":"public/2017/11/21/数学/线性代数/index.html","hash":"a2dc01980e4df999e6c2bd1878a8bec501032bb0","modified":1530923504891},{"_id":"public/2017/02/22/深入理解计算机系统/第01章 计算机系统漫游/index.html","hash":"a4bcf010eca09149e434dbd8c788749eb0007eeb","modified":1530923504891},{"_id":"public/2017/02/22/深入理解计算机系统/第03章 程序的机器级表示/index.html","hash":"eab13d71acf018c1629ad29230bb9471abc37099","modified":1530923504891},{"_id":"public/2017/02/22/深入理解计算机系统/第02章 程序结构和执行/index.html","hash":"334434259a037408f9f03d81a520cc2e05d24cc5","modified":1530923504891},{"_id":"public/2015/06/22/scala/Chapter-08-继承/index.html","hash":"d2f6386ca0b5448ffa977ceea7cf98d236960204","modified":1530923504891},{"_id":"public/2015/06/22/scala/Chapter-09-文件和正则表达式/index.html","hash":"fc8890db83d3a0e41047c354bfc590d4c35e507f","modified":1530923504891},{"_id":"public/2015/06/22/scala/Chapter-11-operators/index.html","hash":"3f4dafcf3a76e3ff1006a56fc9cd5455696e0aec","modified":1530923504891},{"_id":"public/2015/06/22/scala/Chapter-02-control-structures-and-functions/index.html","hash":"6123981ccc6ea2b15508ed0cfda5bb7a54a451e7","modified":1530923504891},{"_id":"public/2015/06/22/scala/Chapter-03-working-with-arrays/index.html","hash":"91a811e1707ddd15068c16baa403afd827292081","modified":1530923504892},{"_id":"public/2015/06/22/scala/Chapter-04-Map和元组/index.html","hash":"c2d97b7107b284fa6689bd34d56c8a62c37a6d29","modified":1530923504892},{"_id":"public/2015/06/22/scala/Chapter-05-类/index.html","hash":"5253af88fbef9d79736544434880a2697be80efb","modified":1530923504892},{"_id":"public/2015/06/22/scala/Chapter-10-特质/index.html","hash":"11fa36392e4a6ffda8c4168d1a98c78d4febde74","modified":1530923504892},{"_id":"public/2015/06/22/scala/Chapter-01-the-basics/index.html","hash":"3737a101bdf24b194675342a0b45acc80ad1f323","modified":1530923504892},{"_id":"public/2015/06/22/scala/Chapter-07-包和引入/index.html","hash":"d94fefeb782f966677682828f640898bb80feba8","modified":1530923504892},{"_id":"public/2015/06/22/scala/Chapter-06-对象/index.html","hash":"af2b3985adf6e6560bfba25c809126c45dee74a9","modified":1530923504893},{"_id":"public/2010/12/26/八卦/八卦/index.html","hash":"dfb8e7cbdfedb9a94e2950d5cdeb4f4529eb85a9","modified":1530923504893},{"_id":"public/about/index.html","hash":"cc641cfe3829c28ec5b654e493edaf9f339120e0","modified":1530923504893},{"_id":"public/archive/index.html","hash":"195385365f591c37811a1f2ab300ef2a6f7d6393","modified":1530923504893},{"_id":"public/archives/index.html","hash":"3800ad64d0ff6e38b58fed6a7973b30621a2f412","modified":1530923504893},{"_id":"public/archives/archives/2/index.html","hash":"06eb086798d7215d1fdef63c9a4f92d620bd1675","modified":1530923504893},{"_id":"public/archives/archives/3/index.html","hash":"a392b2efd40ea01831a2777d4b2b66e715540c1f","modified":1530923504893},{"_id":"public/archives/2010/index.html","hash":"c05cdab2e2ac3d0cd06160dfb996c862c41c188b","modified":1530923504893},{"_id":"public/archives/2010/12/index.html","hash":"84b5a4173986a3809d13f5ed84e123b46312a3d2","modified":1530923504893},{"_id":"public/archives/2015/index.html","hash":"2e283c6b76a9337b553e04d530089956bb73c4c6","modified":1530923504893},{"_id":"public/archives/2015/archives/2/index.html","hash":"1601b3eda886ecd347efc7e749d5c3336669caa0","modified":1530923504893},{"_id":"public/archives/2015/06/index.html","hash":"22162409266ff4d32437306ed4c21dccc3f54cec","modified":1530923504893},{"_id":"public/archives/2015/06/archives/2/index.html","hash":"f3dd2cc272b2b73a1e2a47188acf1b8be421f1e2","modified":1530923504893},{"_id":"public/archives/2017/index.html","hash":"07ca30a50082561d41218ca1c2bc51a75df94807","modified":1530923504894},{"_id":"public/archives/2017/archives/2/index.html","hash":"e0cce08f86786bd3260f3efe35dda91e36e9bf5c","modified":1530923504894},{"_id":"public/archives/2017/02/index.html","hash":"a951a46c96d9e3218caf9b3f540805d2dd64f8bf","modified":1530923504894},{"_id":"public/archives/2017/11/index.html","hash":"c6837bee38ba2d031de595407bd97683d78384d0","modified":1530923504894},{"_id":"public/archives/2017/12/index.html","hash":"4bba6c8cbe542a849403621ed56fcfb3108fa043","modified":1530923504894},{"_id":"public/archives/2018/index.html","hash":"03afda11c9cd0e1c13a8e31e25435b1a7bcd854e","modified":1530923504894},{"_id":"public/archives/2018/03/index.html","hash":"9204e07aa604373826748a4b1141362a112a1532","modified":1530923504894},{"_id":"public/index.html","hash":"3436a54f926681ae94919773dcbc255a6b7833d2","modified":1530923504894},{"_id":"public/archives/2/index.html","hash":"6de06c79cb0fb30dd31b6fb57e34dad46467fb56","modified":1530923504894},{"_id":"public/archives/3/index.html","hash":"8e7c692ec6a8cc16a9e857196680ab4701f2c360","modified":1530923504894},{"_id":"public/tags/scala/index.html","hash":"e52dd6cbbf390fb390141146f1d58b4f3eb6cd93","modified":1530923504894},{"_id":"public/tags/scala/archives/2/index.html","hash":"363c386296e8bfaa20774c87f5ae9d368bb4bd32","modified":1530923504894},{"_id":"public/tags/书法/index.html","hash":"381b86dc51d2331a84a60259fac7d5b78da2aefe","modified":1530923504895},{"_id":"public/tags/八卦/index.html","hash":"0af0272f165dd42df13c86c1e7b66e0b03c9d7bf","modified":1530923504895},{"_id":"public/tags/数学/index.html","hash":"f18f1728b88ce02d4f28715dd6db607f69b118c7","modified":1530923504895},{"_id":"public/tags/深入理解计算机系统/index.html","hash":"d009ecc227fa8b0365e752a28cd6f91b4cd8dba1","modified":1530923504895},{"_id":"public/tags/游记/index.html","hash":"6ceddb5310d30ae855728b078e53a9d6326be542","modified":1530923504895},{"_id":"public/tags/資治通鑑/index.html","hash":"94e3f1eee0735908d29825ce9b785e71acbbe94c","modified":1530923504895},{"_id":"public/CNAME","hash":"5012ea393524373dadb8c166278dfe186d2c1160","modified":1530923504903},{"_id":"public/img/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1530923504903},{"_id":"public/img/header_img/allon.jpeg","hash":"b143ecf896f94ee88fc1b3c61beb895b1a742c22","modified":1530923504904},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1530923504904},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1530923504904},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1530923504904},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1530923504904},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1530923504904},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1530923504904},{"_id":"public/img/01.jpg","hash":"c2f53433423932da7518525a792d2d3ced43a9aa","modified":1530923505070},{"_id":"public/img/19.jpg","hash":"4798e62aa0f996c9c38c794f2f8e635331d9cb4d","modified":1530923505070},{"_id":"public/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1530923505070},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1530923505070},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1530923505077},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1530923505077},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1530923505077},{"_id":"public/css/syntax.css","hash":"ddb061122db565f14b3018d07e31d12be0b5914b","modified":1530923505077},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1530923505077},{"_id":"public/css/toc.css","hash":"2062bf4e5b219654e0d4bf470f5eef1be213da95","modified":1530923505077},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1530923505077},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1530923505077},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1530923505077},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1530923505077},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1530923505077},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1530923505078},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1530923505078},{"_id":"public/img/17.jpg","hash":"a7882f3125e5655a89e3cc39976621a73e7e7dba","modified":1530923505078},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1530923505078},{"_id":"public/img/02.jpg","hash":"dfe50b46afb7ed966e40119a301a66ee88f31df4","modified":1530923505083},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1530923505090},{"_id":"public/css/beantech.min.css","hash":"06a73fac70dc52adb9f7d1d0e9bbcad7da132541","modified":1530923505090},{"_id":"public/css/hux-blog.min.css","hash":"8ed9da2013cddd8bf119ff740342a5c2c8b1f3e7","modified":1530923505091},{"_id":"public/img/13.jpg","hash":"37b130047ad19e31a44c88a929b8c738b9010342","modified":1530923505091},{"_id":"public/img/16.jpg","hash":"fea570eb9e4a6e12090201ce3a9c1e11410b86a5","modified":1530923505091},{"_id":"public/img/23.jpg","hash":"6e53045f68871962c84408c0bb832b8064536a55","modified":1530923505091},{"_id":"public/img/18.jpg","hash":"f84495b6dcadc61ec84c2e1cc0dc72485729b459","modified":1530923505091},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1530923505091},{"_id":"public/css/hux-blog.css","hash":"2e8520c16e39dce6cc5c99ab3e267b2e2d6bc0c5","modified":1530923505095},{"_id":"public/img/03.jpg","hash":"0c5a71083cecfca277257b912f9243e39ce85094","modified":1530923505095},{"_id":"public/img/header_img/tag-bg.png","hash":"94c3942bdcb1a6c4ac64bd6365e2066302380847","modified":1530923505096},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1530923505101},{"_id":"public/img/05.jpg","hash":"1265dc75b3f60a1dd666c687994189aed01c8de7","modified":1530923505101},{"_id":"public/img/04.jpg","hash":"695b52e10134f4eb5d4a9267aedc6cf9922fe5c6","modified":1530923505101},{"_id":"public/img/24.jpg","hash":"558a6d9da654c1a52b0ab6e6a890f24383b74f44","modified":1530923505102},{"_id":"public/img/06.jpg","hash":"149d868cac9081b99725117b5cb4ff67e9e8eff3","modified":1530923505107},{"_id":"public/img/22.jpg","hash":"733b9efedd0dba17d6aba23ec31deea961215152","modified":1530923505107},{"_id":"public/img/21.jpg","hash":"80b1c92eb899088bf4b57199a78ccd8557cbd4c7","modified":1530923505116},{"_id":"public/img/07.jpg","hash":"9adcca2d2867c8248b684621f8619a5c42d6cfb1","modified":1530923505133},{"_id":"public/img/header_img/archive-bg.png","hash":"f4345d8edd7167fe1500b122aec4922893630fd3","modified":1530923505134},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1530923505139},{"_id":"public/img/09.jpg","hash":"1f218120eca78cbecf2bb25eab2cec0eb3d7471a","modified":1530923505140},{"_id":"public/img/08.jpg","hash":"81e19c82746fcf2248e5d46cdf40849a5b59fe84","modified":1530923505140},{"_id":"public/img/20.jpg","hash":"2d1d14147da98693877b3196a30356c7b9f13f38","modified":1530923505140},{"_id":"public/img/header_img/home-bg-o.png","hash":"e9ba54c513f0a37bbccddfdf7841570f86cdc6a5","modified":1530923505141},{"_id":"public/img/header_img/home-bg-2-dark.png","hash":"74d23c05e93a2e4bb469737f69d1714d1074bcf9","modified":1530923505147},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1530923505150},{"_id":"public/img/10.jpg","hash":"2f9c052795706dd236dd7e224d0517425024bc17","modified":1530923505150},{"_id":"public/img/11.jpg","hash":"7c28c0188909f209048bf952ad3812d14d846a65","modified":1530923505158},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1530923505162},{"_id":"public/img/12.jpg","hash":"a767f6baecc43ba0b21cc76d281dafbfaa156c3d","modified":1530923505163},{"_id":"public/img/14.jpg","hash":"7bdf575736fd75247687f2e4de37c528a2fd7b69","modified":1530923505163},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1530923505168},{"_id":"public/img/15.jpg","hash":"2e22c73b122f4e4a1140ad05035c5d7c6b30abec","modified":1530923505170},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1530923505173}],"Category":[],"Data":[],"Page":[{"layout":"about","title":"关于","date":"2016-04-20T20:48:33.000Z","description":"Wish for the Best, Prepare for the Worst","header-img":"img/header_img/Iron-Man-3.jpg","comments":1,"_content":"\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n\nEmail: allonli@163.com\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"关于\"\ndate: 2016-04-21 04:48:33\ndescription: \"Wish for the Best, Prepare for the Worst\"\nheader-img: \"img/header_img/Iron-Man-3.jpg\"\ncomments: true\n---\n\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n\nEmail: allonli@163.com\n","updated":"2018-06-07T14:00:24.000Z","path":"about/index.html","_id":"cjjaobrfx0000j5lycbdiou02","content":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n<p>Email: <a href=\"mailto:allonli@163.com\" target=\"_blank\" rel=\"noopener\">allonli@163.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n<p>Email: <a href=\"mailto:allonli@163.com\" target=\"_blank\" rel=\"noopener\">allonli@163.com</a></p>\n"},{"layout":"archive","title":"文章","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"文章\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2018-06-07T14:00:24.000Z","path":"archive/index.html","_id":"cjjaobrfy0001j5lyncxbyumu","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"分类","description":"Hey, this is Tags.","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"分类\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2018-06-29T10:46:21.759Z","updated":"2018-06-07T14:00:25.000Z","path":"tags/index.html","comments":1,"_id":"cjjaobrgd0002j5lyvg40vmq0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Chapter-02-control-structures-and-functions","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-02-control-structures-and-functions\n\n函数 控制结构 异常\n\n---\n\n### 条件表达式\n\nscala里的if/else是有值的，返回的值就是那个表达式的值。如果if语句的条件为false没有进入语句块，那么该if表达式的值为Unit(含义接近void，和void的区别是：void是空的钱包，Unit是钱包里一张写着“没钱”的纸币)，写做()。\n\nscala中没有switch语句，代之以强大的模式匹配来解决问题。\n\n### 块表达式和赋值\n\n在scala中一切都是表达式，{}语句块是一组表达式的集合，这个集合的值取决于最后一个表达式的值。\n在scala中，赋值表达式是值为Unit的。比如下面的语句块的值即为Unit因为：\n\n```scala\n{ r = r * n; n -=1 }\n```\n下面语句的想给x赋值和java中会完全不同，y = 1的值为Unit，x最终就会被赋值成Unit。所以不要这么用。\n\n```scala\nx = y = 1 \n```\n\n### 输入和输出\n\n如果要打印一个值，可以用print和println函数。像这样：\n\n```scala\nprint(\"Answer: \")\nprintln(42)\n```\n另外还有一个C风格的printf函数：\n\n```scala\nprintf(\"Hello, %s! you are %d years old.\\n\",\" Fred\", 42)\n```\nreadLine函数可以从控制台读取一行输入。读取Int可以用readInt其他类型以此类推。\n\n```scala\nval name = readLine(\"请输入您的名字并回车：\")\nprintln(\"您的名称是：\"  + name)\n```\n\n### 循环\nscala中的while/do语句和java、C++使用完全相同。\nscala中的for循环比java更加直观方便。\n\n```scala\nfor (i <- (1 to 10)) println(i)\nfor (i <- 1 to 10) println(i) //可以省略1 to 10外面的括号\n```\n    for循环的语法结构为： for (i <- 表达式)\n    表达式一般可以为一个集合\n\n在使用for循环的时候，也可以使用从0到n-1的区间，这时可以用until而不是to。如\n\n\n```scala\nfor (i <- 1 until 10) println(i) //会自1输出至9\n```\n\n跳跃式循环\n\n```scala\nfor(i <- 0 until (10,2)) println(i)\n//输出\n0\n2\n4\n6\n8\n```\n \nscala并没有提供break，continue。如果想使用类似功能可以：\n\n    1. 使用Boolean和return\n    2. 使用Breaks对象中的break方法实现，如下：\n\n```scala\nimport util.control.Breaks._\nfor (...) {\n    if(...) break //退出代码块，它是通过try/catch实现的，效率不高\n}\n```\n\n### 高级for循环和for推导式\n\n在java中实现双层嵌套for循环代码的可读性不如scala。在scala里，你只需要这样：\n\n```scala\nfor (i <- i to 3; j <- 5 to 6) print((10 * i + j) + \" \")\n//将输出 15 16 25 26 35 36\n```\n从左到右就是双层for的从外到内。另外还可以在上面的基础上为每层循环加if条件判断：\n\n```scala\nfor (i <- 1 to 3 if i < 3; j <- 5 to 6 if j > 5) print((10 * i + j) + \" \")\n//输出 16 26\n```\n可以定义不限个数的临时变量：\n\n```scala\nfor (i <- 1 to 3; from = 6;j <- from to 6) print((10 * i + j) + \" \")\n//将输出 16 26 36\n```\n可以将for循环过程中的任意值收集到一个集合中，这类循环叫for推导式。\n\n```scala\nfor (i <- 1 to 10) yield i % 3\n//将返回 Vector(1, 2, 0, 1, 2, 0, 1, 2, 0, 1)\nfor (c <- \"Hello\") yield (c + 1).toChar\n// 输出 Ifmmp\n```\n\n### 函数默认参数\n\n\n```scala\ndef decorate(str:String, left:String = \"[\", right:String = \"]\") = left + str + right\n//left和rigth带有默认值，如果不传会按顺序自动传递。如果手工传递了值，则依然按顺序对号入座。\ndecorate(\"Hello\",\"<\")\n//返回 <Hello]\n\n//也可以像下面这样指定参数名，如此一来便不用按顺序传递了\ndecorate(\"Hello\",right = \">\")\n//返回 [Hello>\n```\n\n### 可变参数列表\n\n\n```scala\ndef sum(args:Int*) = {\n    //args实际上是一个Seq类型的参数\n    for(arg <- args) println(arg)\n}\nsum(1,2,3,4)\n//输出\n1\n2\n3\n4\n```\n既然可变参数列表可以传多个Int，那么可以这样吗？\n\n```scala\nsum(1 to 5) //这样写会报错，原因是1 to 5只是一个Range对象，并不是多个Int的参数，不过可以通过以下方式来把它变成一个参数序列。\nsum(1 to 5:_*) //这转成了一组参数序列\n```\n当调用可变参数列表的函数且参数类型为Object的java方法，要手工对基本类型进行转换。\n\n\n```scala\nval str = MessageFormat.format(\"The answer to {0} is [1]\", \"everything\", 42.asInstanceOf[AnyRef])\n```\n\n    42.asInstanceOf[AnyRef])\n\n### 过程\n如果函数体为花括号，但是没有“=”的函数，返回类型为Unit。也叫过程(procedure)\n\n```scala\ndef box(s: String) {//没有=号\n...\n}\n\n//以下三种情况效果相同\ndef box(s:String){}\n//box: (s: String)Unit\n\ndef box2(s:String)={}\n//box2: (s: String)Unit\n\ndef box3(s:String):Unit={}\n//box3: (s: String)Unit\n```\n\n如果使用过程，有可能产生java程序员意想不到的后果，因为它的值为Unit。实际使用时和期望有可能不一致。导致：Unit在那里不能接受 的异常。\n\n### lazy\n以下代码它会不会立刻初始化，只有当words被使用的时候才会去打开文件。\n\n```scala\nlazy val words = scala.io.Source.fromFile(\"/usr/share/dict/words\").mkString\n//第一次被使用时执行\nval words = scala.io.Source.fromFile(\"/usr/share/dict/words\").mkString\n//一被定义就执行\ndef words = scala.io.Source.fromFile(\"/usr/share/dict/words\").mkString\n//每次调用执行都会执行\n```\n### 异常\nscala没有非运行时异常。IOException不需要声明和强制catch。throw一个异常的值为Nothing。\n\n```scala\nthrow new IllegalArgumentException(\"this e exception\")//它的值为Nothing\n```\nscala中也同样使用try/catch来捕获异常，语法形式是scala中的模式匹配方式。\n\n```scala\ntry {\n    ...\n} catch {\n    case _: SomeException... //不需要使用异常变量，直接用“_”表示即可\n} finally {\n    in.close() // 和java/c++中的含义相同，不管怎样，in都将被close\n}\n```\n\n---\n\n## 习题\n* 一个数字如果为正数，则它的signum为1;如果是负数,则signum为-1;如果为0,则signum为0.编写一个函数来计算这个值。\n\n\n```scala\ndef signum(num: Int):Int = {\n   if(num > 0) 1 else if(num == 0) 0 else -1\n}\n```\n\n*  一个{}的值是什么？类型是什么？\n\n```scala\nval t = {}\n// t: Unit = ()\n```\n   可以看出，它的值是()类型是Unit     \n    \n*  指出在Scala中何种情况下赋值语句x=y=1是合法的。(提示：给x找个合适的类型定义)\n    \n    所以只要x为Unit类型就可以了。\n\n*  针对下列Java循环编写一个Scala版本:for(int i=10;i>=0;i--)System.out.println(i);\n\n```scala\nfor(i <- 0 to 10 reverse) println(i)\n```\n\n*  编写一个过程countdown(n:Int)，打印从n到0的数字。\n\n```scala\ndef countdown(n:Int){\n    0 to n reverse foreach print\n}\n```\n\n*  编写一个for循环,计算字符串中所有字母的Unicode代码的乘积。举例来说，\"Hello\"中所有字符串的乘积为9415087488L。\n\n```scala\nvar t:Long = 1\nfor(i <- \"Hello\") t = t * i.toLong\nt\n//res57: Long = 9415087488\n```\n\n*  同样是解决前一个练习的问题，但这次不使用循环。（提示：在Scaladoc中查看StringOps）\n\n```scala\n\"Hello\".foldLeft(1L)((a, b) => a * b)\n```\n\n*  编写一个函数product(s:String)，计算前面练习中提到的乘积。\n\n```scala\ndef product(s:String):BigInt = {\n    s.foldLeft(1L)((a, b) => a * b)\n}\n```\n\n*  把前一个练习中的函数改成递归函数。\n\n```scala\ndef productRec(s: String):Long = {\n\tif(s.length == 0) 1\n\telse s(0) * productRec(s drop 1)\n}                                         \n```\n\n*  编写函数计算x^n^,其中n是整数，使用如下的递归定义：\nx^n^=y^2^,如果n是正偶数的话，这里的y=x^(n/2)^\nx^n^ = x*x^(n-1)^,如果n是正奇数的话\nx^0^ = 1\nx^n^ = 1/x^(-n)^,如果n是负数的话\n\n```scala\ndef xpown(x: BigInt, n: Int): BigInt = {\n\tif(n > 0 && n % 2 == 0) xpown(x, n / 2) * xpown(x, n / 2)\n\telse if(n > 0) x * xpown(x, n - 1)\n\telse if(n == 0) 1\n\telse 1 / xpown(x, -n)\n} \n```\n\n\n","source":"_posts/scala/Chapter-02-control-structures-and-functions.md","raw":"---\ntitle: 'Chapter-02-control-structures-and-functions'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-02-control-structures-and-functions\n\n函数 控制结构 异常\n\n---\n\n### 条件表达式\n\nscala里的if/else是有值的，返回的值就是那个表达式的值。如果if语句的条件为false没有进入语句块，那么该if表达式的值为Unit(含义接近void，和void的区别是：void是空的钱包，Unit是钱包里一张写着“没钱”的纸币)，写做()。\n\nscala中没有switch语句，代之以强大的模式匹配来解决问题。\n\n### 块表达式和赋值\n\n在scala中一切都是表达式，{}语句块是一组表达式的集合，这个集合的值取决于最后一个表达式的值。\n在scala中，赋值表达式是值为Unit的。比如下面的语句块的值即为Unit因为：\n\n```scala\n{ r = r * n; n -=1 }\n```\n下面语句的想给x赋值和java中会完全不同，y = 1的值为Unit，x最终就会被赋值成Unit。所以不要这么用。\n\n```scala\nx = y = 1 \n```\n\n### 输入和输出\n\n如果要打印一个值，可以用print和println函数。像这样：\n\n```scala\nprint(\"Answer: \")\nprintln(42)\n```\n另外还有一个C风格的printf函数：\n\n```scala\nprintf(\"Hello, %s! you are %d years old.\\n\",\" Fred\", 42)\n```\nreadLine函数可以从控制台读取一行输入。读取Int可以用readInt其他类型以此类推。\n\n```scala\nval name = readLine(\"请输入您的名字并回车：\")\nprintln(\"您的名称是：\"  + name)\n```\n\n### 循环\nscala中的while/do语句和java、C++使用完全相同。\nscala中的for循环比java更加直观方便。\n\n```scala\nfor (i <- (1 to 10)) println(i)\nfor (i <- 1 to 10) println(i) //可以省略1 to 10外面的括号\n```\n    for循环的语法结构为： for (i <- 表达式)\n    表达式一般可以为一个集合\n\n在使用for循环的时候，也可以使用从0到n-1的区间，这时可以用until而不是to。如\n\n\n```scala\nfor (i <- 1 until 10) println(i) //会自1输出至9\n```\n\n跳跃式循环\n\n```scala\nfor(i <- 0 until (10,2)) println(i)\n//输出\n0\n2\n4\n6\n8\n```\n \nscala并没有提供break，continue。如果想使用类似功能可以：\n\n    1. 使用Boolean和return\n    2. 使用Breaks对象中的break方法实现，如下：\n\n```scala\nimport util.control.Breaks._\nfor (...) {\n    if(...) break //退出代码块，它是通过try/catch实现的，效率不高\n}\n```\n\n### 高级for循环和for推导式\n\n在java中实现双层嵌套for循环代码的可读性不如scala。在scala里，你只需要这样：\n\n```scala\nfor (i <- i to 3; j <- 5 to 6) print((10 * i + j) + \" \")\n//将输出 15 16 25 26 35 36\n```\n从左到右就是双层for的从外到内。另外还可以在上面的基础上为每层循环加if条件判断：\n\n```scala\nfor (i <- 1 to 3 if i < 3; j <- 5 to 6 if j > 5) print((10 * i + j) + \" \")\n//输出 16 26\n```\n可以定义不限个数的临时变量：\n\n```scala\nfor (i <- 1 to 3; from = 6;j <- from to 6) print((10 * i + j) + \" \")\n//将输出 16 26 36\n```\n可以将for循环过程中的任意值收集到一个集合中，这类循环叫for推导式。\n\n```scala\nfor (i <- 1 to 10) yield i % 3\n//将返回 Vector(1, 2, 0, 1, 2, 0, 1, 2, 0, 1)\nfor (c <- \"Hello\") yield (c + 1).toChar\n// 输出 Ifmmp\n```\n\n### 函数默认参数\n\n\n```scala\ndef decorate(str:String, left:String = \"[\", right:String = \"]\") = left + str + right\n//left和rigth带有默认值，如果不传会按顺序自动传递。如果手工传递了值，则依然按顺序对号入座。\ndecorate(\"Hello\",\"<\")\n//返回 <Hello]\n\n//也可以像下面这样指定参数名，如此一来便不用按顺序传递了\ndecorate(\"Hello\",right = \">\")\n//返回 [Hello>\n```\n\n### 可变参数列表\n\n\n```scala\ndef sum(args:Int*) = {\n    //args实际上是一个Seq类型的参数\n    for(arg <- args) println(arg)\n}\nsum(1,2,3,4)\n//输出\n1\n2\n3\n4\n```\n既然可变参数列表可以传多个Int，那么可以这样吗？\n\n```scala\nsum(1 to 5) //这样写会报错，原因是1 to 5只是一个Range对象，并不是多个Int的参数，不过可以通过以下方式来把它变成一个参数序列。\nsum(1 to 5:_*) //这转成了一组参数序列\n```\n当调用可变参数列表的函数且参数类型为Object的java方法，要手工对基本类型进行转换。\n\n\n```scala\nval str = MessageFormat.format(\"The answer to {0} is [1]\", \"everything\", 42.asInstanceOf[AnyRef])\n```\n\n    42.asInstanceOf[AnyRef])\n\n### 过程\n如果函数体为花括号，但是没有“=”的函数，返回类型为Unit。也叫过程(procedure)\n\n```scala\ndef box(s: String) {//没有=号\n...\n}\n\n//以下三种情况效果相同\ndef box(s:String){}\n//box: (s: String)Unit\n\ndef box2(s:String)={}\n//box2: (s: String)Unit\n\ndef box3(s:String):Unit={}\n//box3: (s: String)Unit\n```\n\n如果使用过程，有可能产生java程序员意想不到的后果，因为它的值为Unit。实际使用时和期望有可能不一致。导致：Unit在那里不能接受 的异常。\n\n### lazy\n以下代码它会不会立刻初始化，只有当words被使用的时候才会去打开文件。\n\n```scala\nlazy val words = scala.io.Source.fromFile(\"/usr/share/dict/words\").mkString\n//第一次被使用时执行\nval words = scala.io.Source.fromFile(\"/usr/share/dict/words\").mkString\n//一被定义就执行\ndef words = scala.io.Source.fromFile(\"/usr/share/dict/words\").mkString\n//每次调用执行都会执行\n```\n### 异常\nscala没有非运行时异常。IOException不需要声明和强制catch。throw一个异常的值为Nothing。\n\n```scala\nthrow new IllegalArgumentException(\"this e exception\")//它的值为Nothing\n```\nscala中也同样使用try/catch来捕获异常，语法形式是scala中的模式匹配方式。\n\n```scala\ntry {\n    ...\n} catch {\n    case _: SomeException... //不需要使用异常变量，直接用“_”表示即可\n} finally {\n    in.close() // 和java/c++中的含义相同，不管怎样，in都将被close\n}\n```\n\n---\n\n## 习题\n* 一个数字如果为正数，则它的signum为1;如果是负数,则signum为-1;如果为0,则signum为0.编写一个函数来计算这个值。\n\n\n```scala\ndef signum(num: Int):Int = {\n   if(num > 0) 1 else if(num == 0) 0 else -1\n}\n```\n\n*  一个{}的值是什么？类型是什么？\n\n```scala\nval t = {}\n// t: Unit = ()\n```\n   可以看出，它的值是()类型是Unit     \n    \n*  指出在Scala中何种情况下赋值语句x=y=1是合法的。(提示：给x找个合适的类型定义)\n    \n    所以只要x为Unit类型就可以了。\n\n*  针对下列Java循环编写一个Scala版本:for(int i=10;i>=0;i--)System.out.println(i);\n\n```scala\nfor(i <- 0 to 10 reverse) println(i)\n```\n\n*  编写一个过程countdown(n:Int)，打印从n到0的数字。\n\n```scala\ndef countdown(n:Int){\n    0 to n reverse foreach print\n}\n```\n\n*  编写一个for循环,计算字符串中所有字母的Unicode代码的乘积。举例来说，\"Hello\"中所有字符串的乘积为9415087488L。\n\n```scala\nvar t:Long = 1\nfor(i <- \"Hello\") t = t * i.toLong\nt\n//res57: Long = 9415087488\n```\n\n*  同样是解决前一个练习的问题，但这次不使用循环。（提示：在Scaladoc中查看StringOps）\n\n```scala\n\"Hello\".foldLeft(1L)((a, b) => a * b)\n```\n\n*  编写一个函数product(s:String)，计算前面练习中提到的乘积。\n\n```scala\ndef product(s:String):BigInt = {\n    s.foldLeft(1L)((a, b) => a * b)\n}\n```\n\n*  把前一个练习中的函数改成递归函数。\n\n```scala\ndef productRec(s: String):Long = {\n\tif(s.length == 0) 1\n\telse s(0) * productRec(s drop 1)\n}                                         \n```\n\n*  编写函数计算x^n^,其中n是整数，使用如下的递归定义：\nx^n^=y^2^,如果n是正偶数的话，这里的y=x^(n/2)^\nx^n^ = x*x^(n-1)^,如果n是正奇数的话\nx^0^ = 1\nx^n^ = 1/x^(-n)^,如果n是负数的话\n\n```scala\ndef xpown(x: BigInt, n: Int): BigInt = {\n\tif(n > 0 && n % 2 == 0) xpown(x, n / 2) * xpown(x, n / 2)\n\telse if(n > 0) x * xpown(x, n - 1)\n\telse if(n == 0) 1\n\telse 1 / xpown(x, -n)\n} \n```\n\n\n","slug":"scala/Chapter-02-control-structures-and-functions","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrgq0003j5lysfd8yxjp","content":"<h2><span id=\"chapter-02-control-structures-and-functions\"> Chapter-02-control-structures-and-functions</span></h2>\n<p>函数 控制结构 异常</p>\n<hr>\n<h3><span id=\"条件表达式\"> 条件表达式</span></h3>\n<p>scala里的if/else是有值的，返回的值就是那个表达式的值。如果if语句的条件为false没有进入语句块，那么该if表达式的值为Unit(含义接近void，和void的区别是：void是空的钱包，Unit是钱包里一张写着“没钱”的纸币)，写做()。</p>\n<p>scala中没有switch语句，代之以强大的模式匹配来解决问题。</p>\n<h3><span id=\"块表达式和赋值\"> 块表达式和赋值</span></h3>\n<p>在scala中一切都是表达式，{}语句块是一组表达式的集合，这个集合的值取决于最后一个表达式的值。<br>\n在scala中，赋值表达式是值为Unit的。比如下面的语句块的值即为Unit因为：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; r = r * n; n -=<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>下面语句的想给x赋值和java中会完全不同，y = 1的值为Unit，x最终就会被赋值成Unit。所以不要这么用。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"输入和输出\"> 输入和输出</span></h3>\n<p>如果要打印一个值，可以用print和println函数。像这样：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"Answer: \"</span>)</span><br><span class=\"line\">println(<span class=\"number\">42</span>)</span><br></pre></td></tr></table></figure>\n<p>另外还有一个C风格的printf函数：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf(<span class=\"string\">\"Hello, %s! you are %d years old.\\n\"</span>,<span class=\"string\">\" Fred\"</span>, <span class=\"number\">42</span>)</span><br></pre></td></tr></table></figure>\n<p>readLine函数可以从控制台读取一行输入。读取Int可以用readInt其他类型以此类推。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> name = readLine(<span class=\"string\">\"请输入您的名字并回车：\"</span>)</span><br><span class=\"line\">println(<span class=\"string\">\"您的名称是：\"</span>  + name)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"循环\"> 循环</span></h3>\n<p>scala中的while/do语句和java、C++使用完全相同。<br>\nscala中的for循环比java更加直观方便。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- (<span class=\"number\">1</span> to <span class=\"number\">10</span>)) println(i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>) println(i) <span class=\"comment\">//可以省略1 to 10外面的括号</span></span><br></pre></td></tr></table></figure>\n<pre><code>for循环的语法结构为： for (i &lt;- 表达式)\n表达式一般可以为一个集合\n</code></pre>\n<p>在使用for循环的时候，也可以使用从0到n-1的区间，这时可以用until而不是to。如</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> until <span class=\"number\">10</span>) println(i) <span class=\"comment\">//会自1输出至9</span></span><br></pre></td></tr></table></figure>\n<p>跳跃式循环</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> until (<span class=\"number\">10</span>,<span class=\"number\">2</span>)) println(i)</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>scala并没有提供break，continue。如果想使用类似功能可以：</p>\n<pre><code>1. 使用Boolean和return\n2. 使用Breaks对象中的break方法实现，如下：\n</code></pre>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> util.control.<span class=\"type\">Breaks</span>._</span><br><span class=\"line\"><span class=\"keyword\">for</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(...) <span class=\"keyword\">break</span> <span class=\"comment\">//退出代码块，它是通过try/catch实现的，效率不高</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"高级for循环和for推导式\"> 高级for循环和for推导式</span></h3>\n<p>在java中实现双层嵌套for循环代码的可读性不如scala。在scala里，你只需要这样：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- i to <span class=\"number\">3</span>; j &lt;- <span class=\"number\">5</span> to <span class=\"number\">6</span>) print((<span class=\"number\">10</span> * i + j) + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"comment\">//将输出 15 16 25 26 35 36</span></span><br></pre></td></tr></table></figure>\n<p>从左到右就是双层for的从外到内。另外还可以在上面的基础上为每层循环加if条件判断：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">3</span> <span class=\"keyword\">if</span> i &lt; <span class=\"number\">3</span>; j &lt;- <span class=\"number\">5</span> to <span class=\"number\">6</span> <span class=\"keyword\">if</span> j &gt; <span class=\"number\">5</span>) print((<span class=\"number\">10</span> * i + j) + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出 16 26</span></span><br></pre></td></tr></table></figure>\n<p>可以定义不限个数的临时变量：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">3</span>; from = <span class=\"number\">6</span>;j &lt;- from to <span class=\"number\">6</span>) print((<span class=\"number\">10</span> * i + j) + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"comment\">//将输出 16 26 36</span></span><br></pre></td></tr></table></figure>\n<p>可以将for循环过程中的任意值收集到一个集合中，这类循环叫for推导式。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>) <span class=\"keyword\">yield</span> i % <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">//将返回 Vector(1, 2, 0, 1, 2, 0, 1, 2, 0, 1)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (c &lt;- <span class=\"string\">\"Hello\"</span>) <span class=\"keyword\">yield</span> (c + <span class=\"number\">1</span>).toChar</span><br><span class=\"line\"><span class=\"comment\">// 输出 Ifmmp</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"函数默认参数\"> 函数默认参数</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span></span>(str:<span class=\"type\">String</span>, left:<span class=\"type\">String</span> = <span class=\"string\">\"[\"</span>, right:<span class=\"type\">String</span> = <span class=\"string\">\"]\"</span>) = left + str + right</span><br><span class=\"line\"><span class=\"comment\">//left和rigth带有默认值，如果不传会按顺序自动传递。如果手工传递了值，则依然按顺序对号入座。</span></span><br><span class=\"line\">decorate(<span class=\"string\">\"Hello\"</span>,<span class=\"string\">\"&lt;\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 &lt;Hello]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//也可以像下面这样指定参数名，如此一来便不用按顺序传递了</span></span><br><span class=\"line\">decorate(<span class=\"string\">\"Hello\"</span>,right = <span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 [Hello&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"可变参数列表\"> 可变参数列表</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(args:<span class=\"type\">Int</span>*) = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//args实际上是一个Seq类型的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(arg &lt;- args) println(arg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>既然可变参数列表可以传多个Int，那么可以这样吗？</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(<span class=\"number\">1</span> to <span class=\"number\">5</span>) <span class=\"comment\">//这样写会报错，原因是1 to 5只是一个Range对象，并不是多个Int的参数，不过可以通过以下方式来把它变成一个参数序列。</span></span><br><span class=\"line\">sum(<span class=\"number\">1</span> to <span class=\"number\">5</span>:_*) <span class=\"comment\">//这转成了一组参数序列</span></span><br></pre></td></tr></table></figure>\n<p>当调用可变参数列表的函数且参数类型为Object的java方法，要手工对基本类型进行转换。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> str = <span class=\"type\">MessageFormat</span>.format(<span class=\"string\">\"The answer to &#123;0&#125; is [1]\"</span>, <span class=\"string\">\"everything\"</span>, <span class=\"number\">42.</span>asInstanceOf[<span class=\"type\">AnyRef</span>])</span><br></pre></td></tr></table></figure>\n<pre><code>42.asInstanceOf[AnyRef])\n</code></pre>\n<h3><span id=\"过程\"> 过程</span></h3>\n<p>如果函数体为花括号，但是没有“=”的函数，返回类型为Unit。也叫过程(procedure)</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">box</span></span>(s: <span class=\"type\">String</span>) &#123;<span class=\"comment\">//没有=号</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以下三种情况效果相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">box</span></span>(s:<span class=\"type\">String</span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//box: (s: String)Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">box2</span></span>(s:<span class=\"type\">String</span>)=&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//box2: (s: String)Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">box3</span></span>(s:<span class=\"type\">String</span>):<span class=\"type\">Unit</span>=&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//box3: (s: String)Unit</span></span><br></pre></td></tr></table></figure>\n<p>如果使用过程，有可能产生java程序员意想不到的后果，因为它的值为Unit。实际使用时和期望有可能不一致。导致：Unit在那里不能接受 的异常。</p>\n<h3><span id=\"lazy\"> lazy</span></h3>\n<p>以下代码它会不会立刻初始化，只有当words被使用的时候才会去打开文件。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> words = scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"/usr/share/dict/words\"</span>).mkString</span><br><span class=\"line\"><span class=\"comment\">//第一次被使用时执行</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> words = scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"/usr/share/dict/words\"</span>).mkString</span><br><span class=\"line\"><span class=\"comment\">//一被定义就执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">words</span> </span>= scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"/usr/share/dict/words\"</span>).mkString</span><br><span class=\"line\"><span class=\"comment\">//每次调用执行都会执行</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"异常\"> 异常</span></h3>\n<p>scala没有非运行时异常。IOException不需要声明和强制catch。throw一个异常的值为Nothing。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">IllegalArgumentException</span>(<span class=\"string\">\"this e exception\"</span>)<span class=\"comment\">//它的值为Nothing</span></span><br></pre></td></tr></table></figure>\n<p>scala中也同样使用try/catch来捕获异常，语法形式是scala中的模式匹配方式。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> _: <span class=\"type\">SomeException</span>... <span class=\"comment\">//不需要使用异常变量，直接用“_”表示即可</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    in.close() <span class=\"comment\">// 和java/c++中的含义相同，不管怎样，in都将被close</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2><span id=\"习题\"> 习题</span></h2>\n<ul>\n<li>一个数字如果为正数，则它的signum为1;如果是负数,则signum为-1;如果为0,则signum为0.编写一个函数来计算这个值。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">signum</span></span>(num: <span class=\"type\">Int</span>):<span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(num &gt; <span class=\"number\">0</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num == <span class=\"number\">0</span>) <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>一个{}的值是什么？类型是什么？</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> t = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// t: Unit = ()</span></span><br></pre></td></tr></table></figure>\n<p>可以看出，它的值是()类型是Unit</p>\n<ul>\n<li>\n<p>指出在Scala中何种情况下赋值语句x=y=1是合法的。(提示：给x找个合适的类型定义)</p>\n<p>所以只要x为Unit类型就可以了。</p>\n</li>\n<li>\n<p>针对下列Java循环编写一个Scala版本:for(int i=10;i&gt;=0;i–)System.out.println(i);</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> to <span class=\"number\">10</span> reverse) println(i)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写一个过程countdown(n:Int)，打印从n到0的数字。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">countdown</span></span>(n:<span class=\"type\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> to n reverse foreach print</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写一个for循环,计算字符串中所有字母的Unicode代码的乘积。举例来说，&quot;Hello&quot;中所有字符串的乘积为9415087488L。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t:<span class=\"type\">Long</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"string\">\"Hello\"</span>) t = t * i.toLong</span><br><span class=\"line\">t</span><br><span class=\"line\"><span class=\"comment\">//res57: Long = 9415087488</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>同样是解决前一个练习的问题，但这次不使用循环。（提示：在Scaladoc中查看StringOps）</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span>.foldLeft(<span class=\"number\">1</span>L)((a, b) =&gt; a * b)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写一个函数product(s:String)，计算前面练习中提到的乘积。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">product</span></span>(s:<span class=\"type\">String</span>):<span class=\"type\">BigInt</span> = &#123;</span><br><span class=\"line\">    s.foldLeft(<span class=\"number\">1</span>L)((a, b) =&gt; a * b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>把前一个练习中的函数改成递归函数。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">productRec</span></span>(s: <span class=\"type\">String</span>):<span class=\"type\">Long</span> = &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.length == <span class=\"number\">0</span>) <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> s(<span class=\"number\">0</span>) * productRec(s drop <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写函数计算x<sup>n</sup>,其中n是整数，使用如下的递归定义：<br>\nx<sup>n</sup>=y<sup>2</sup>,如果n是正偶数的话，这里的y=x<sup>(n/2)</sup><br>\nx<sup>n</sup> = x*x<sup>(n-1)</sup>,如果n是正奇数的话<br>\nx<sup>0</sup> = 1<br>\nx<sup>n</sup> = 1/x<sup>(-n)</sup>,如果n是负数的话</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xpown</span></span>(x: <span class=\"type\">BigInt</span>, n: <span class=\"type\">Int</span>): <span class=\"type\">BigInt</span> = &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n &gt; <span class=\"number\">0</span> &amp;&amp; n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) xpown(x, n / <span class=\"number\">2</span>) * xpown(x, n / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">0</span>) x * xpown(x, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"number\">1</span> / xpown(x, -n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-02-control-structures-and-functions\"><a class=\"markdownIt-Anchor\" href=\"#chapter-02-control-structures-and-functions\"></a> Chapter-02-control-structures-and-functions</h2>\n<p>函数 控制结构 异常</p>\n<hr>\n<h3 id=\"条件表达式\"><a class=\"markdownIt-Anchor\" href=\"#条件表达式\"></a> 条件表达式</h3>\n<p>scala里的if/else是有值的，返回的值就是那个表达式的值。如果if语句的条件为false没有进入语句块，那么该if表达式的值为Unit(含义接近void，和void的区别是：void是空的钱包，Unit是钱包里一张写着“没钱”的纸币)，写做()。</p>\n<p>scala中没有switch语句，代之以强大的模式匹配来解决问题。</p>\n<h3 id=\"块表达式和赋值\"><a class=\"markdownIt-Anchor\" href=\"#块表达式和赋值\"></a> 块表达式和赋值</h3>\n<p>在scala中一切都是表达式，{}语句块是一组表达式的集合，这个集合的值取决于最后一个表达式的值。<br>\n在scala中，赋值表达式是值为Unit的。比如下面的语句块的值即为Unit因为：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; r = r * n; n -=<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>下面语句的想给x赋值和java中会完全不同，y = 1的值为Unit，x最终就会被赋值成Unit。所以不要这么用。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"输入和输出\"><a class=\"markdownIt-Anchor\" href=\"#输入和输出\"></a> 输入和输出</h3>\n<p>如果要打印一个值，可以用print和println函数。像这样：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"Answer: \"</span>)</span><br><span class=\"line\">println(<span class=\"number\">42</span>)</span><br></pre></td></tr></table></figure>\n<p>另外还有一个C风格的printf函数：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf(<span class=\"string\">\"Hello, %s! you are %d years old.\\n\"</span>,<span class=\"string\">\" Fred\"</span>, <span class=\"number\">42</span>)</span><br></pre></td></tr></table></figure>\n<p>readLine函数可以从控制台读取一行输入。读取Int可以用readInt其他类型以此类推。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> name = readLine(<span class=\"string\">\"请输入您的名字并回车：\"</span>)</span><br><span class=\"line\">println(<span class=\"string\">\"您的名称是：\"</span>  + name)</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\"></a> 循环</h3>\n<p>scala中的while/do语句和java、C++使用完全相同。<br>\nscala中的for循环比java更加直观方便。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- (<span class=\"number\">1</span> to <span class=\"number\">10</span>)) println(i)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>) println(i) <span class=\"comment\">//可以省略1 to 10外面的括号</span></span><br></pre></td></tr></table></figure>\n<pre><code>for循环的语法结构为： for (i &lt;- 表达式)\n表达式一般可以为一个集合\n</code></pre>\n<p>在使用for循环的时候，也可以使用从0到n-1的区间，这时可以用until而不是to。如</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> until <span class=\"number\">10</span>) println(i) <span class=\"comment\">//会自1输出至9</span></span><br></pre></td></tr></table></figure>\n<p>跳跃式循环</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> until (<span class=\"number\">10</span>,<span class=\"number\">2</span>)) println(i)</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>scala并没有提供break，continue。如果想使用类似功能可以：</p>\n<pre><code>1. 使用Boolean和return\n2. 使用Breaks对象中的break方法实现，如下：\n</code></pre>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> util.control.<span class=\"type\">Breaks</span>._</span><br><span class=\"line\"><span class=\"keyword\">for</span> (...) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(...) <span class=\"keyword\">break</span> <span class=\"comment\">//退出代码块，它是通过try/catch实现的，效率不高</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高级for循环和for推导式\"><a class=\"markdownIt-Anchor\" href=\"#高级for循环和for推导式\"></a> 高级for循环和for推导式</h3>\n<p>在java中实现双层嵌套for循环代码的可读性不如scala。在scala里，你只需要这样：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- i to <span class=\"number\">3</span>; j &lt;- <span class=\"number\">5</span> to <span class=\"number\">6</span>) print((<span class=\"number\">10</span> * i + j) + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"comment\">//将输出 15 16 25 26 35 36</span></span><br></pre></td></tr></table></figure>\n<p>从左到右就是双层for的从外到内。另外还可以在上面的基础上为每层循环加if条件判断：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">3</span> <span class=\"keyword\">if</span> i &lt; <span class=\"number\">3</span>; j &lt;- <span class=\"number\">5</span> to <span class=\"number\">6</span> <span class=\"keyword\">if</span> j &gt; <span class=\"number\">5</span>) print((<span class=\"number\">10</span> * i + j) + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出 16 26</span></span><br></pre></td></tr></table></figure>\n<p>可以定义不限个数的临时变量：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">3</span>; from = <span class=\"number\">6</span>;j &lt;- from to <span class=\"number\">6</span>) print((<span class=\"number\">10</span> * i + j) + <span class=\"string\">\" \"</span>)</span><br><span class=\"line\"><span class=\"comment\">//将输出 16 26 36</span></span><br></pre></td></tr></table></figure>\n<p>可以将for循环过程中的任意值收集到一个集合中，这类循环叫for推导式。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>) <span class=\"keyword\">yield</span> i % <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">//将返回 Vector(1, 2, 0, 1, 2, 0, 1, 2, 0, 1)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (c &lt;- <span class=\"string\">\"Hello\"</span>) <span class=\"keyword\">yield</span> (c + <span class=\"number\">1</span>).toChar</span><br><span class=\"line\"><span class=\"comment\">// 输出 Ifmmp</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数默认参数\"><a class=\"markdownIt-Anchor\" href=\"#函数默认参数\"></a> 函数默认参数</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorate</span></span>(str:<span class=\"type\">String</span>, left:<span class=\"type\">String</span> = <span class=\"string\">\"[\"</span>, right:<span class=\"type\">String</span> = <span class=\"string\">\"]\"</span>) = left + str + right</span><br><span class=\"line\"><span class=\"comment\">//left和rigth带有默认值，如果不传会按顺序自动传递。如果手工传递了值，则依然按顺序对号入座。</span></span><br><span class=\"line\">decorate(<span class=\"string\">\"Hello\"</span>,<span class=\"string\">\"&lt;\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 &lt;Hello]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//也可以像下面这样指定参数名，如此一来便不用按顺序传递了</span></span><br><span class=\"line\">decorate(<span class=\"string\">\"Hello\"</span>,right = <span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 [Hello&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"可变参数列表\"><a class=\"markdownIt-Anchor\" href=\"#可变参数列表\"></a> 可变参数列表</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span></span>(args:<span class=\"type\">Int</span>*) = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//args实际上是一个Seq类型的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(arg &lt;- args) println(arg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>既然可变参数列表可以传多个Int，那么可以这样吗？</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum(<span class=\"number\">1</span> to <span class=\"number\">5</span>) <span class=\"comment\">//这样写会报错，原因是1 to 5只是一个Range对象，并不是多个Int的参数，不过可以通过以下方式来把它变成一个参数序列。</span></span><br><span class=\"line\">sum(<span class=\"number\">1</span> to <span class=\"number\">5</span>:_*) <span class=\"comment\">//这转成了一组参数序列</span></span><br></pre></td></tr></table></figure>\n<p>当调用可变参数列表的函数且参数类型为Object的java方法，要手工对基本类型进行转换。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> str = <span class=\"type\">MessageFormat</span>.format(<span class=\"string\">\"The answer to &#123;0&#125; is [1]\"</span>, <span class=\"string\">\"everything\"</span>, <span class=\"number\">42.</span>asInstanceOf[<span class=\"type\">AnyRef</span>])</span><br></pre></td></tr></table></figure>\n<pre><code>42.asInstanceOf[AnyRef])\n</code></pre>\n<h3 id=\"过程\"><a class=\"markdownIt-Anchor\" href=\"#过程\"></a> 过程</h3>\n<p>如果函数体为花括号，但是没有“=”的函数，返回类型为Unit。也叫过程(procedure)</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">box</span></span>(s: <span class=\"type\">String</span>) &#123;<span class=\"comment\">//没有=号</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//以下三种情况效果相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">box</span></span>(s:<span class=\"type\">String</span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//box: (s: String)Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">box2</span></span>(s:<span class=\"type\">String</span>)=&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//box2: (s: String)Unit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">box3</span></span>(s:<span class=\"type\">String</span>):<span class=\"type\">Unit</span>=&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//box3: (s: String)Unit</span></span><br></pre></td></tr></table></figure>\n<p>如果使用过程，有可能产生java程序员意想不到的后果，因为它的值为Unit。实际使用时和期望有可能不一致。导致：Unit在那里不能接受 的异常。</p>\n<h3 id=\"lazy\"><a class=\"markdownIt-Anchor\" href=\"#lazy\"></a> lazy</h3>\n<p>以下代码它会不会立刻初始化，只有当words被使用的时候才会去打开文件。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lazy</span> <span class=\"keyword\">val</span> words = scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"/usr/share/dict/words\"</span>).mkString</span><br><span class=\"line\"><span class=\"comment\">//第一次被使用时执行</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> words = scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"/usr/share/dict/words\"</span>).mkString</span><br><span class=\"line\"><span class=\"comment\">//一被定义就执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">words</span> </span>= scala.io.<span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"/usr/share/dict/words\"</span>).mkString</span><br><span class=\"line\"><span class=\"comment\">//每次调用执行都会执行</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"异常\"><a class=\"markdownIt-Anchor\" href=\"#异常\"></a> 异常</h3>\n<p>scala没有非运行时异常。IOException不需要声明和强制catch。throw一个异常的值为Nothing。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">IllegalArgumentException</span>(<span class=\"string\">\"this e exception\"</span>)<span class=\"comment\">//它的值为Nothing</span></span><br></pre></td></tr></table></figure>\n<p>scala中也同样使用try/catch来捕获异常，语法形式是scala中的模式匹配方式。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> _: <span class=\"type\">SomeException</span>... <span class=\"comment\">//不需要使用异常变量，直接用“_”表示即可</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    in.close() <span class=\"comment\">// 和java/c++中的含义相同，不管怎样，in都将被close</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"习题\"><a class=\"markdownIt-Anchor\" href=\"#习题\"></a> 习题</h2>\n<ul>\n<li>一个数字如果为正数，则它的signum为1;如果是负数,则signum为-1;如果为0,则signum为0.编写一个函数来计算这个值。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">signum</span></span>(num: <span class=\"type\">Int</span>):<span class=\"type\">Int</span> = &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(num &gt; <span class=\"number\">0</span>) <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num == <span class=\"number\">0</span>) <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>一个{}的值是什么？类型是什么？</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> t = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// t: Unit = ()</span></span><br></pre></td></tr></table></figure>\n<p>可以看出，它的值是()类型是Unit</p>\n<ul>\n<li>\n<p>指出在Scala中何种情况下赋值语句x=y=1是合法的。(提示：给x找个合适的类型定义)</p>\n<p>所以只要x为Unit类型就可以了。</p>\n</li>\n<li>\n<p>针对下列Java循环编写一个Scala版本:for(int i=10;i&gt;=0;i–)System.out.println(i);</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> to <span class=\"number\">10</span> reverse) println(i)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写一个过程countdown(n:Int)，打印从n到0的数字。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">countdown</span></span>(n:<span class=\"type\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"number\">0</span> to n reverse foreach print</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写一个for循环,计算字符串中所有字母的Unicode代码的乘积。举例来说，&quot;Hello&quot;中所有字符串的乘积为9415087488L。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> t:<span class=\"type\">Long</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"string\">\"Hello\"</span>) t = t * i.toLong</span><br><span class=\"line\">t</span><br><span class=\"line\"><span class=\"comment\">//res57: Long = 9415087488</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>同样是解决前一个练习的问题，但这次不使用循环。（提示：在Scaladoc中查看StringOps）</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span>.foldLeft(<span class=\"number\">1</span>L)((a, b) =&gt; a * b)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写一个函数product(s:String)，计算前面练习中提到的乘积。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">product</span></span>(s:<span class=\"type\">String</span>):<span class=\"type\">BigInt</span> = &#123;</span><br><span class=\"line\">    s.foldLeft(<span class=\"number\">1</span>L)((a, b) =&gt; a * b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>把前一个练习中的函数改成递归函数。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">productRec</span></span>(s: <span class=\"type\">String</span>):<span class=\"type\">Long</span> = &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s.length == <span class=\"number\">0</span>) <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> s(<span class=\"number\">0</span>) * productRec(s drop <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写函数计算x<sup>n</sup>,其中n是整数，使用如下的递归定义：<br>\nx<sup>n</sup>=y<sup>2</sup>,如果n是正偶数的话，这里的y=x<sup>(n/2)</sup><br>\nx<sup>n</sup> = x*x<sup>(n-1)</sup>,如果n是正奇数的话<br>\nx<sup>0</sup> = 1<br>\nx<sup>n</sup> = 1/x<sup>(-n)</sup>,如果n是负数的话</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">xpown</span></span>(x: <span class=\"type\">BigInt</span>, n: <span class=\"type\">Int</span>): <span class=\"type\">BigInt</span> = &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n &gt; <span class=\"number\">0</span> &amp;&amp; n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) xpown(x, n / <span class=\"number\">2</span>) * xpown(x, n / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">0</span>) x * xpown(x, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"number\">1</span> / xpown(x, -n)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter-01-the-basics","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-01-the-basics\n\nscala 基础\n\n---\n\n### 命令行环境\n在学习scala时可以用两种方式结合学习，一种是命令行模式，这适合执行一些简单的代码。以便快速得到结果。另一种是使用IDE开发，IDE这里使用的是IntelliJ IDEA。以下介绍了简单的几个步骤。\n#### EPFL命令行\n\n    1.安装scala\n    2.将scala/bin加到PATH中\n    3.执行scala命令\n#### IntelliJ IDEA\n    1.安装IDEA\n    2.安装scala插件\n    3.创建scala工程\n\n### 声明常量\n\n```scala\nval answer = 8 * 5 + 2 //不可变常量,不用使用分号\nanswer = 1 //错误！\n//以上代码等价于以下代码\nval answer : Int = 8 * 5 + 2 //不用写‘Int’的原因是scala已经有了类型推断\nvar name,company : String = null //name和company都是初始值为null的字符串\n```\n\n### 声明变量\n\n```scala\nvar answer = 8 * 5 + 2\n```\n\n### 常用类型\nscala中也存在七种类型用来对应java的基本类型：Byte、Char、Short、Int、Long、Float、Double、Boolean。scala中不存在基本类型的概念，都视为引用类型。\n下面的\"Hello\"和1分别被“偷偷”转换（隐式转换，如果想了解可以移步隐式转换那一章）成了StringOps和RichInt\n\n```scala\n\"Hello\".intersect(\"World\") //输出\"lo\" String被转换成了StringOps\n1.to(10) //Int被转换成RichInt\n```\n\n### 算术和操作符\nscala中的操作符实际上是方法。1 + 1 实际上等价于1.+(1),加号就是方法名。（java/c++程序员会感觉有些不一样）。并且这些方法同样可以重载，这样一来，你就可以定义属于自己的符号（方法名）定义了。\n\n### 调用函数和方法\n方法被引用来调用，而scala也支持函数，这些函数不需要从某个类来调用。直接使用便是。\n\n```scala\nsqrt(2) //平方根\npow(2, 4) //4的平方\nmin(3, Pi) //最小值\n/*\n不过在使用上述函数之前,\n你需要import scala.math._相当于java的import scala.math.*\n使用以scala开头的包时，可以省略scala前缀。如：import math._\n*/\n```\nscala没有静态方法，要使用类似的特性，可以使用companion object(伴生对象)。```BigInt.probablePrime(100, scala.util.Random)```这个生成随机数的方法，实际上BigInt是一个对象。\n\n不带参数的方法，scala中通常不使用圆括号调用。如```\"Hello\".distinct```\n\nscala中函数和方法的区别：\n>* Scala中的方法跟Java的方法一样，方法是组成类的一部分。\n>* Scala中的函数是一个完整的对象。\n\n任何一个函数对象都是一个继承了Function开头的特质（trait，可以暂时当做java中的接口）。\n\n```scala\nFunction1[+T1] extends AnyRef\n//A function of 1 parameter.\nFunction2[+T1, +T2] extends AnyRef\n//A function of 2 parameters.\nFunction3[+T1, +T2, +T3] extends AnyRef\n//A function of 3 parameters.\n//最多有Function22\n```\n\njava中有22个函数特质（trait）。任何一个函数都将是这22个trait的具体实现。\n\n```scala\n//以下两种方式结果相同\nval adder = (x:Int,y:Int) => x+y\n//返回 adder: (Int, Int) => Int = <function2>\nval adder = new Function2[Int,Int,Int](){\n    def apply(x:Int,y:Int):Int = x + y\n}\n//同样返回 adder: (Int, Int) => Int = <function2>\n```\n\n### apply方法\n\n```scala\n\n\n```scala\n\"Hello\"(4) //等价于\"Hello\".apply(4),相当于java里的\"Hello\".charAt(i),这是scala为了便利提供的一种语法糖。\n//\"Hello\"会被隐式转成StringOps，而在伴生对象StringOps中存在着apply方法。\n```\n\n### 使用scala doc\nhttp://www.scala-lang.org/api\n#### 使用技巧:\n1. 左上解可以搜索类名，每条结果左侧的C和O是可以点的。分别进到该类和companion object(伴生对象)。点“display all entities”可以看到所有的包。\n2. 数值类型，多看看RichInt、RichDouble等。字符串看StringOps。\n3. 数学函数位于scala.math包中，不在某个类里。\n4. 如果看到unary_-不要感到奇怪，这是前置的负操作符-x的方式。在操作符那章，你会豁然开朗。\n\n\n## 习题\n\n* 在Scala REPL中键入“3.” 然后按Tab。有哪些方法可以被应用？\n    \n        %   *   -   >    >>    ^  ...\n* 在Scala REPL计算3的平方根，再求值平方。现在，这个结果与3相关多少？（提示：res变量是你的朋友。）\n\n\n```scala\nimport math._\nsqrt(3)\n// res85: Double = 1.7320508075688772\n\nres85*res85\n// res86: Double = 2.9999999999999996\n\n3 - res86\n// res87: Double = 4.440892098500626E-16\n```\n\n* res变量是val还是var?\n\n\n\n```scala\nres89 = 3\n//<console>:8: error: reassignment to val\n//res9 = 3\n//   ^\n```\n* Scala允许你用数字去乘字符串---去REPL中试一下\"crazy\"*3。这个操作做什么？在Scaladoc中如何找到这个操作?\n\n\n```scala\n\"crazy\" * 3\n// res90: String = crazycrazycrazy\n```\n*    *是它的方法\"crazy\".*(3)。直接到StringOps类看*方法即可。\n5. 10 max 2的含义是什么？max方法在哪个类中？\n    \n    此方法返回两个数字中较大的那个。在RichInt中。\n\n6. 用BigInt计算2的1024次方。\n\n\n```scala\nBigInt(2).pow(1024)\n```\n\n* 为了在使用probablePrime(100,Random)获取随机素数时不在probablePrime和Random之前使用任何限定符，你需要引入什么？\n\n    要引入对应的包，Random在util下。而probablePrime在对象BigInt里。\n\n\n```scala\nimport util.Random\nimport import math.BigInt.probablePrime\nprobablePrime(3,Random)\n//res1: scala.math.BigInt = 5\n```\n\n* 创建随机文件的方式之一是生成一个随机的BigInt，然后将它转换成三十六进制，输出类似\"qsnvbevtomcj38o06kul\"这样的字符串。查阅Scaladoc，找到在Scala中实现该逻辑的办法。\n\n    在BigInt里找到toString方法\n\n\n```scala\nprobablePrime(100,Random)\n//res2: scala.math.BigInt = 680624836022523911868209171401\n\nres2.toString(36)\n//res3: String = 1tzk0mgequl6l6t2c24p\n```\n\n* 在Scala中如何获取字符串的首字符和尾字符？\n\n    到StringOps中查找\n\n\n```scala\nscala> res3.head\n//res4: Char = 1\nscala> res3.last\n//res6: Char = p\n\n//另外两种方式：\n\nres3(0)\nres3.take(1)\n//获取首字符\nres3.reverse(0)\nres3.takeRight(1)\n//获取尾字符\n```\n\n* take,drop,takeRight和dropRight这些字符串函数是做什么用的？和substring相比，他们的优点和缺点都是哪些？\n\n        查询API即可take是从字符串首开始获取字符串,drop是从字符串首开始去除字符串。takeRight和dropRight是从字符串尾开始操作。这四个方法都是单方向的。如果我想要字符串中间的子字符串，那么需要同时调用drop和dropRight，或者使用substring\n\n\n","source":"_posts/scala/Chapter-01-the-basics.md","raw":"---\ntitle: 'Chapter-01-the-basics'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-01-the-basics\n\nscala 基础\n\n---\n\n### 命令行环境\n在学习scala时可以用两种方式结合学习，一种是命令行模式，这适合执行一些简单的代码。以便快速得到结果。另一种是使用IDE开发，IDE这里使用的是IntelliJ IDEA。以下介绍了简单的几个步骤。\n#### EPFL命令行\n\n    1.安装scala\n    2.将scala/bin加到PATH中\n    3.执行scala命令\n#### IntelliJ IDEA\n    1.安装IDEA\n    2.安装scala插件\n    3.创建scala工程\n\n### 声明常量\n\n```scala\nval answer = 8 * 5 + 2 //不可变常量,不用使用分号\nanswer = 1 //错误！\n//以上代码等价于以下代码\nval answer : Int = 8 * 5 + 2 //不用写‘Int’的原因是scala已经有了类型推断\nvar name,company : String = null //name和company都是初始值为null的字符串\n```\n\n### 声明变量\n\n```scala\nvar answer = 8 * 5 + 2\n```\n\n### 常用类型\nscala中也存在七种类型用来对应java的基本类型：Byte、Char、Short、Int、Long、Float、Double、Boolean。scala中不存在基本类型的概念，都视为引用类型。\n下面的\"Hello\"和1分别被“偷偷”转换（隐式转换，如果想了解可以移步隐式转换那一章）成了StringOps和RichInt\n\n```scala\n\"Hello\".intersect(\"World\") //输出\"lo\" String被转换成了StringOps\n1.to(10) //Int被转换成RichInt\n```\n\n### 算术和操作符\nscala中的操作符实际上是方法。1 + 1 实际上等价于1.+(1),加号就是方法名。（java/c++程序员会感觉有些不一样）。并且这些方法同样可以重载，这样一来，你就可以定义属于自己的符号（方法名）定义了。\n\n### 调用函数和方法\n方法被引用来调用，而scala也支持函数，这些函数不需要从某个类来调用。直接使用便是。\n\n```scala\nsqrt(2) //平方根\npow(2, 4) //4的平方\nmin(3, Pi) //最小值\n/*\n不过在使用上述函数之前,\n你需要import scala.math._相当于java的import scala.math.*\n使用以scala开头的包时，可以省略scala前缀。如：import math._\n*/\n```\nscala没有静态方法，要使用类似的特性，可以使用companion object(伴生对象)。```BigInt.probablePrime(100, scala.util.Random)```这个生成随机数的方法，实际上BigInt是一个对象。\n\n不带参数的方法，scala中通常不使用圆括号调用。如```\"Hello\".distinct```\n\nscala中函数和方法的区别：\n>* Scala中的方法跟Java的方法一样，方法是组成类的一部分。\n>* Scala中的函数是一个完整的对象。\n\n任何一个函数对象都是一个继承了Function开头的特质（trait，可以暂时当做java中的接口）。\n\n```scala\nFunction1[+T1] extends AnyRef\n//A function of 1 parameter.\nFunction2[+T1, +T2] extends AnyRef\n//A function of 2 parameters.\nFunction3[+T1, +T2, +T3] extends AnyRef\n//A function of 3 parameters.\n//最多有Function22\n```\n\njava中有22个函数特质（trait）。任何一个函数都将是这22个trait的具体实现。\n\n```scala\n//以下两种方式结果相同\nval adder = (x:Int,y:Int) => x+y\n//返回 adder: (Int, Int) => Int = <function2>\nval adder = new Function2[Int,Int,Int](){\n    def apply(x:Int,y:Int):Int = x + y\n}\n//同样返回 adder: (Int, Int) => Int = <function2>\n```\n\n### apply方法\n\n```scala\n\n\n```scala\n\"Hello\"(4) //等价于\"Hello\".apply(4),相当于java里的\"Hello\".charAt(i),这是scala为了便利提供的一种语法糖。\n//\"Hello\"会被隐式转成StringOps，而在伴生对象StringOps中存在着apply方法。\n```\n\n### 使用scala doc\nhttp://www.scala-lang.org/api\n#### 使用技巧:\n1. 左上解可以搜索类名，每条结果左侧的C和O是可以点的。分别进到该类和companion object(伴生对象)。点“display all entities”可以看到所有的包。\n2. 数值类型，多看看RichInt、RichDouble等。字符串看StringOps。\n3. 数学函数位于scala.math包中，不在某个类里。\n4. 如果看到unary_-不要感到奇怪，这是前置的负操作符-x的方式。在操作符那章，你会豁然开朗。\n\n\n## 习题\n\n* 在Scala REPL中键入“3.” 然后按Tab。有哪些方法可以被应用？\n    \n        %   *   -   >    >>    ^  ...\n* 在Scala REPL计算3的平方根，再求值平方。现在，这个结果与3相关多少？（提示：res变量是你的朋友。）\n\n\n```scala\nimport math._\nsqrt(3)\n// res85: Double = 1.7320508075688772\n\nres85*res85\n// res86: Double = 2.9999999999999996\n\n3 - res86\n// res87: Double = 4.440892098500626E-16\n```\n\n* res变量是val还是var?\n\n\n\n```scala\nres89 = 3\n//<console>:8: error: reassignment to val\n//res9 = 3\n//   ^\n```\n* Scala允许你用数字去乘字符串---去REPL中试一下\"crazy\"*3。这个操作做什么？在Scaladoc中如何找到这个操作?\n\n\n```scala\n\"crazy\" * 3\n// res90: String = crazycrazycrazy\n```\n*    *是它的方法\"crazy\".*(3)。直接到StringOps类看*方法即可。\n5. 10 max 2的含义是什么？max方法在哪个类中？\n    \n    此方法返回两个数字中较大的那个。在RichInt中。\n\n6. 用BigInt计算2的1024次方。\n\n\n```scala\nBigInt(2).pow(1024)\n```\n\n* 为了在使用probablePrime(100,Random)获取随机素数时不在probablePrime和Random之前使用任何限定符，你需要引入什么？\n\n    要引入对应的包，Random在util下。而probablePrime在对象BigInt里。\n\n\n```scala\nimport util.Random\nimport import math.BigInt.probablePrime\nprobablePrime(3,Random)\n//res1: scala.math.BigInt = 5\n```\n\n* 创建随机文件的方式之一是生成一个随机的BigInt，然后将它转换成三十六进制，输出类似\"qsnvbevtomcj38o06kul\"这样的字符串。查阅Scaladoc，找到在Scala中实现该逻辑的办法。\n\n    在BigInt里找到toString方法\n\n\n```scala\nprobablePrime(100,Random)\n//res2: scala.math.BigInt = 680624836022523911868209171401\n\nres2.toString(36)\n//res3: String = 1tzk0mgequl6l6t2c24p\n```\n\n* 在Scala中如何获取字符串的首字符和尾字符？\n\n    到StringOps中查找\n\n\n```scala\nscala> res3.head\n//res4: Char = 1\nscala> res3.last\n//res6: Char = p\n\n//另外两种方式：\n\nres3(0)\nres3.take(1)\n//获取首字符\nres3.reverse(0)\nres3.takeRight(1)\n//获取尾字符\n```\n\n* take,drop,takeRight和dropRight这些字符串函数是做什么用的？和substring相比，他们的优点和缺点都是哪些？\n\n        查询API即可take是从字符串首开始获取字符串,drop是从字符串首开始去除字符串。takeRight和dropRight是从字符串尾开始操作。这四个方法都是单方向的。如果我想要字符串中间的子字符串，那么需要同时调用drop和dropRight，或者使用substring\n\n\n","slug":"scala/Chapter-01-the-basics","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrgx0004j5ly44lh2b0u","content":"<h2><span id=\"chapter-01-the-basics\"> Chapter-01-the-basics</span></h2>\n<p>scala 基础</p>\n<hr>\n<h3><span id=\"命令行环境\"> 命令行环境</span></h3>\n<p>在学习scala时可以用两种方式结合学习，一种是命令行模式，这适合执行一些简单的代码。以便快速得到结果。另一种是使用IDE开发，IDE这里使用的是IntelliJ IDEA。以下介绍了简单的几个步骤。</p>\n<h4><span id=\"epfl命令行\"> EPFL命令行</span></h4>\n<pre><code>1.安装scala\n2.将scala/bin加到PATH中\n3.执行scala命令\n</code></pre>\n<h4><span id=\"intellij-idea\"> IntelliJ IDEA</span></h4>\n<pre><code>1.安装IDEA\n2.安装scala插件\n3.创建scala工程\n</code></pre>\n<h3><span id=\"声明常量\"> 声明常量</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> answer = <span class=\"number\">8</span> * <span class=\"number\">5</span> + <span class=\"number\">2</span> <span class=\"comment\">//不可变常量,不用使用分号</span></span><br><span class=\"line\">answer = <span class=\"number\">1</span> <span class=\"comment\">//错误！</span></span><br><span class=\"line\"><span class=\"comment\">//以上代码等价于以下代码</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> answer : <span class=\"type\">Int</span> = <span class=\"number\">8</span> * <span class=\"number\">5</span> + <span class=\"number\">2</span> <span class=\"comment\">//不用写‘Int’的原因是scala已经有了类型推断</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name,company : <span class=\"type\">String</span> = <span class=\"literal\">null</span> <span class=\"comment\">//name和company都是初始值为null的字符串</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"声明变量\"> 声明变量</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> answer = <span class=\"number\">8</span> * <span class=\"number\">5</span> + <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"常用类型\"> 常用类型</span></h3>\n<p>scala中也存在七种类型用来对应java的基本类型：Byte、Char、Short、Int、Long、Float、Double、Boolean。scala中不存在基本类型的概念，都视为引用类型。<br>\n下面的&quot;Hello&quot;和1分别被“偷偷”转换（隐式转换，如果想了解可以移步隐式转换那一章）成了StringOps和RichInt</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span>.intersect(<span class=\"string\">\"World\"</span>) <span class=\"comment\">//输出\"lo\" String被转换成了StringOps</span></span><br><span class=\"line\"><span class=\"number\">1.</span>to(<span class=\"number\">10</span>) <span class=\"comment\">//Int被转换成RichInt</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"算术和操作符\"> 算术和操作符</span></h3>\n<p>scala中的操作符实际上是方法。1 + 1 实际上等价于1.+(1),加号就是方法名。（java/c++程序员会感觉有些不一样）。并且这些方法同样可以重载，这样一来，你就可以定义属于自己的符号（方法名）定义了。</p>\n<h3><span id=\"调用函数和方法\"> 调用函数和方法</span></h3>\n<p>方法被引用来调用，而scala也支持函数，这些函数不需要从某个类来调用。直接使用便是。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqrt(<span class=\"number\">2</span>) <span class=\"comment\">//平方根</span></span><br><span class=\"line\">pow(<span class=\"number\">2</span>, <span class=\"number\">4</span>) <span class=\"comment\">//4的平方</span></span><br><span class=\"line\">min(<span class=\"number\">3</span>, <span class=\"type\">Pi</span>) <span class=\"comment\">//最小值</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">不过在使用上述函数之前,</span></span><br><span class=\"line\"><span class=\"comment\">你需要import scala.math._相当于java的import scala.math.*</span></span><br><span class=\"line\"><span class=\"comment\">使用以scala开头的包时，可以省略scala前缀。如：import math._</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>scala没有静态方法，要使用类似的特性，可以使用companion object(伴生对象)。<figure class=\"highlight plain\"><figcaption><span>scala.util.Random)```这个生成随机数的方法，实际上BigInt是一个对象。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">不带参数的方法，scala中通常不使用圆括号调用。如```&quot;Hello&quot;.distinct</span><br></pre></td></tr></table></figure></p>\n<p>scala中函数和方法的区别：</p>\n<blockquote>\n<ul>\n<li>Scala中的方法跟Java的方法一样，方法是组成类的一部分。</li>\n<li>Scala中的函数是一个完整的对象。</li>\n</ul>\n</blockquote>\n<p>任何一个函数对象都是一个继承了Function开头的特质（trait，可以暂时当做java中的接口）。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Function1</span>[+<span class=\"type\">T1</span>] <span class=\"keyword\">extends</span> <span class=\"type\">AnyRef</span></span><br><span class=\"line\"><span class=\"comment\">//A function of 1 parameter.</span></span><br><span class=\"line\"><span class=\"type\">Function2</span>[+<span class=\"type\">T1</span>, +<span class=\"type\">T2</span>] <span class=\"keyword\">extends</span> <span class=\"type\">AnyRef</span></span><br><span class=\"line\"><span class=\"comment\">//A function of 2 parameters.</span></span><br><span class=\"line\"><span class=\"type\">Function3</span>[+<span class=\"type\">T1</span>, +<span class=\"type\">T2</span>, +<span class=\"type\">T3</span>] <span class=\"keyword\">extends</span> <span class=\"type\">AnyRef</span></span><br><span class=\"line\"><span class=\"comment\">//A function of 3 parameters.</span></span><br><span class=\"line\"><span class=\"comment\">//最多有Function22</span></span><br></pre></td></tr></table></figure>\n<p>java中有22个函数特质（trait）。任何一个函数都将是这22个trait的具体实现。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下两种方式结果相同</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> adder = (x:<span class=\"type\">Int</span>,y:<span class=\"type\">Int</span>) =&gt; x+y</span><br><span class=\"line\"><span class=\"comment\">//返回 adder: (Int, Int) =&gt; Int = &lt;function2&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> adder = <span class=\"keyword\">new</span> <span class=\"type\">Function2</span>[<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>]()&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(x:<span class=\"type\">Int</span>,y:<span class=\"type\">Int</span>):<span class=\"type\">Int</span> = x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//同样返回 adder: (Int, Int) =&gt; Int = &lt;function2&gt;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"apply方法\"> apply方法</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```scala</span><br><span class=\"line\"><span class=\"string\">\"Hello\"</span>(<span class=\"number\">4</span>) <span class=\"comment\">//等价于\"Hello\".apply(4),相当于java里的\"Hello\".charAt(i),这是scala为了便利提供的一种语法糖。</span></span><br><span class=\"line\"><span class=\"comment\">//\"Hello\"会被隐式转成StringOps，而在伴生对象StringOps中存在着apply方法。</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"使用scala-doc\"> 使用scala doc</span></h3>\n<p><a href=\"http://www.scala-lang.org/api\" target=\"_blank\" rel=\"noopener\">http://www.scala-lang.org/api</a></p>\n<h4><span id=\"使用技巧\"> 使用技巧:</span></h4>\n<ol>\n<li>左上解可以搜索类名，每条结果左侧的C和O是可以点的。分别进到该类和companion object(伴生对象)。点“display all entities”可以看到所有的包。</li>\n<li>数值类型，多看看RichInt、RichDouble等。字符串看StringOps。</li>\n<li>数学函数位于scala.math包中，不在某个类里。</li>\n<li>如果看到unary_-不要感到奇怪，这是前置的负操作符-x的方式。在操作符那章，你会豁然开朗。</li>\n</ol>\n<h2><span id=\"习题\"> 习题</span></h2>\n<ul>\n<li>\n<p>在Scala REPL中键入“3.” 然后按Tab。有哪些方法可以被应用？</p>\n<pre><code>  %   *   -   &gt;    &gt;&gt;    ^  ...\n</code></pre>\n</li>\n<li>\n<p>在Scala REPL计算3的平方根，再求值平方。现在，这个结果与3相关多少？（提示：res变量是你的朋友。）</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math._</span><br><span class=\"line\">sqrt(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// res85: Double = 1.7320508075688772</span></span><br><span class=\"line\"></span><br><span class=\"line\">res85*res85</span><br><span class=\"line\"><span class=\"comment\">// res86: Double = 2.9999999999999996</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span> - res86</span><br><span class=\"line\"><span class=\"comment\">// res87: Double = 4.440892098500626E-16</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>res变量是val还是var?</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res89 = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;console&gt;:8: error: reassignment to val</span></span><br><span class=\"line\"><span class=\"comment\">//res9 = 3</span></span><br><span class=\"line\"><span class=\"comment\">//   ^</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Scala允许你用数字去乘字符串—去REPL中试一下&quot;crazy&quot;*3。这个操作做什么？在Scaladoc中如何找到这个操作?</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"crazy\"</span> * <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">// res90: String = crazycrazycrazy</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><em>是它的方法&quot;crazy&quot;.</em>(3)。直接到StringOps类看*方法即可。</li>\n</ul>\n<ol start=\"5\">\n<li>\n<p>10 max 2的含义是什么？max方法在哪个类中？</p>\n<p>此方法返回两个数字中较大的那个。在RichInt中。</p>\n</li>\n<li>\n<p>用BigInt计算2的1024次方。</p>\n</li>\n</ol>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BigInt</span>(<span class=\"number\">2</span>).pow(<span class=\"number\">1024</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>为了在使用probablePrime(100,Random)获取随机素数时不在probablePrime和Random之前使用任何限定符，你需要引入什么？</p>\n<p>要引入对应的包，Random在util下。而probablePrime在对象BigInt里。</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> util.<span class=\"type\">Random</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">import</span> math.<span class=\"type\">BigInt</span>.probablePrime</span><br><span class=\"line\">probablePrime(<span class=\"number\">3</span>,<span class=\"type\">Random</span>)</span><br><span class=\"line\"><span class=\"comment\">//res1: scala.math.BigInt = 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>创建随机文件的方式之一是生成一个随机的BigInt，然后将它转换成三十六进制，输出类似&quot;qsnvbevtomcj38o06kul&quot;这样的字符串。查阅Scaladoc，找到在Scala中实现该逻辑的办法。</p>\n<p>在BigInt里找到toString方法</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">probablePrime(<span class=\"number\">100</span>,<span class=\"type\">Random</span>)</span><br><span class=\"line\"><span class=\"comment\">//res2: scala.math.BigInt = 680624836022523911868209171401</span></span><br><span class=\"line\"></span><br><span class=\"line\">res2.toString(<span class=\"number\">36</span>)</span><br><span class=\"line\"><span class=\"comment\">//res3: String = 1tzk0mgequl6l6t2c24p</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>在Scala中如何获取字符串的首字符和尾字符？</p>\n<p>到StringOps中查找</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt; res3.head</span><br><span class=\"line\"><span class=\"comment\">//res4: Char = 1</span></span><br><span class=\"line\">scala&gt; res3.last</span><br><span class=\"line\"><span class=\"comment\">//res6: Char = p</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另外两种方式：</span></span><br><span class=\"line\"></span><br><span class=\"line\">res3(<span class=\"number\">0</span>)</span><br><span class=\"line\">res3.take(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//获取首字符</span></span><br><span class=\"line\">res3.reverse(<span class=\"number\">0</span>)</span><br><span class=\"line\">res3.takeRight(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//获取尾字符</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>take,drop,takeRight和dropRight这些字符串函数是做什么用的？和substring相比，他们的优点和缺点都是哪些？</p>\n<pre><code>  查询API即可take是从字符串首开始获取字符串,drop是从字符串首开始去除字符串。takeRight和dropRight是从字符串尾开始操作。这四个方法都是单方向的。如果我想要字符串中间的子字符串，那么需要同时调用drop和dropRight，或者使用substring\n</code></pre>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-01-the-basics\"><a class=\"markdownIt-Anchor\" href=\"#chapter-01-the-basics\"></a> Chapter-01-the-basics</h2>\n<p>scala 基础</p>\n<hr>\n<h3 id=\"命令行环境\"><a class=\"markdownIt-Anchor\" href=\"#命令行环境\"></a> 命令行环境</h3>\n<p>在学习scala时可以用两种方式结合学习，一种是命令行模式，这适合执行一些简单的代码。以便快速得到结果。另一种是使用IDE开发，IDE这里使用的是IntelliJ IDEA。以下介绍了简单的几个步骤。</p>\n<h4 id=\"epfl命令行\"><a class=\"markdownIt-Anchor\" href=\"#epfl命令行\"></a> EPFL命令行</h4>\n<pre><code>1.安装scala\n2.将scala/bin加到PATH中\n3.执行scala命令\n</code></pre>\n<h4 id=\"intellij-idea\"><a class=\"markdownIt-Anchor\" href=\"#intellij-idea\"></a> IntelliJ IDEA</h4>\n<pre><code>1.安装IDEA\n2.安装scala插件\n3.创建scala工程\n</code></pre>\n<h3 id=\"声明常量\"><a class=\"markdownIt-Anchor\" href=\"#声明常量\"></a> 声明常量</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> answer = <span class=\"number\">8</span> * <span class=\"number\">5</span> + <span class=\"number\">2</span> <span class=\"comment\">//不可变常量,不用使用分号</span></span><br><span class=\"line\">answer = <span class=\"number\">1</span> <span class=\"comment\">//错误！</span></span><br><span class=\"line\"><span class=\"comment\">//以上代码等价于以下代码</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> answer : <span class=\"type\">Int</span> = <span class=\"number\">8</span> * <span class=\"number\">5</span> + <span class=\"number\">2</span> <span class=\"comment\">//不用写‘Int’的原因是scala已经有了类型推断</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name,company : <span class=\"type\">String</span> = <span class=\"literal\">null</span> <span class=\"comment\">//name和company都是初始值为null的字符串</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"声明变量\"><a class=\"markdownIt-Anchor\" href=\"#声明变量\"></a> 声明变量</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> answer = <span class=\"number\">8</span> * <span class=\"number\">5</span> + <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用类型\"><a class=\"markdownIt-Anchor\" href=\"#常用类型\"></a> 常用类型</h3>\n<p>scala中也存在七种类型用来对应java的基本类型：Byte、Char、Short、Int、Long、Float、Double、Boolean。scala中不存在基本类型的概念，都视为引用类型。<br>\n下面的&quot;Hello&quot;和1分别被“偷偷”转换（隐式转换，如果想了解可以移步隐式转换那一章）成了StringOps和RichInt</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Hello\"</span>.intersect(<span class=\"string\">\"World\"</span>) <span class=\"comment\">//输出\"lo\" String被转换成了StringOps</span></span><br><span class=\"line\"><span class=\"number\">1.</span>to(<span class=\"number\">10</span>) <span class=\"comment\">//Int被转换成RichInt</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算术和操作符\"><a class=\"markdownIt-Anchor\" href=\"#算术和操作符\"></a> 算术和操作符</h3>\n<p>scala中的操作符实际上是方法。1 + 1 实际上等价于1.+(1),加号就是方法名。（java/c++程序员会感觉有些不一样）。并且这些方法同样可以重载，这样一来，你就可以定义属于自己的符号（方法名）定义了。</p>\n<h3 id=\"调用函数和方法\"><a class=\"markdownIt-Anchor\" href=\"#调用函数和方法\"></a> 调用函数和方法</h3>\n<p>方法被引用来调用，而scala也支持函数，这些函数不需要从某个类来调用。直接使用便是。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqrt(<span class=\"number\">2</span>) <span class=\"comment\">//平方根</span></span><br><span class=\"line\">pow(<span class=\"number\">2</span>, <span class=\"number\">4</span>) <span class=\"comment\">//4的平方</span></span><br><span class=\"line\">min(<span class=\"number\">3</span>, <span class=\"type\">Pi</span>) <span class=\"comment\">//最小值</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">不过在使用上述函数之前,</span></span><br><span class=\"line\"><span class=\"comment\">你需要import scala.math._相当于java的import scala.math.*</span></span><br><span class=\"line\"><span class=\"comment\">使用以scala开头的包时，可以省略scala前缀。如：import math._</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>scala没有静态方法，要使用类似的特性，可以使用companion object(伴生对象)。<figure class=\"highlight plain\"><figcaption><span>scala.util.Random)```这个生成随机数的方法，实际上BigInt是一个对象。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">不带参数的方法，scala中通常不使用圆括号调用。如```&quot;Hello&quot;.distinct</span><br></pre></td></tr></table></figure></p>\n<p>scala中函数和方法的区别：</p>\n<blockquote>\n<ul>\n<li>Scala中的方法跟Java的方法一样，方法是组成类的一部分。</li>\n<li>Scala中的函数是一个完整的对象。</li>\n</ul>\n</blockquote>\n<p>任何一个函数对象都是一个继承了Function开头的特质（trait，可以暂时当做java中的接口）。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Function1</span>[+<span class=\"type\">T1</span>] <span class=\"keyword\">extends</span> <span class=\"type\">AnyRef</span></span><br><span class=\"line\"><span class=\"comment\">//A function of 1 parameter.</span></span><br><span class=\"line\"><span class=\"type\">Function2</span>[+<span class=\"type\">T1</span>, +<span class=\"type\">T2</span>] <span class=\"keyword\">extends</span> <span class=\"type\">AnyRef</span></span><br><span class=\"line\"><span class=\"comment\">//A function of 2 parameters.</span></span><br><span class=\"line\"><span class=\"type\">Function3</span>[+<span class=\"type\">T1</span>, +<span class=\"type\">T2</span>, +<span class=\"type\">T3</span>] <span class=\"keyword\">extends</span> <span class=\"type\">AnyRef</span></span><br><span class=\"line\"><span class=\"comment\">//A function of 3 parameters.</span></span><br><span class=\"line\"><span class=\"comment\">//最多有Function22</span></span><br></pre></td></tr></table></figure>\n<p>java中有22个函数特质（trait）。任何一个函数都将是这22个trait的具体实现。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//以下两种方式结果相同</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> adder = (x:<span class=\"type\">Int</span>,y:<span class=\"type\">Int</span>) =&gt; x+y</span><br><span class=\"line\"><span class=\"comment\">//返回 adder: (Int, Int) =&gt; Int = &lt;function2&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> adder = <span class=\"keyword\">new</span> <span class=\"type\">Function2</span>[<span class=\"type\">Int</span>,<span class=\"type\">Int</span>,<span class=\"type\">Int</span>]()&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(x:<span class=\"type\">Int</span>,y:<span class=\"type\">Int</span>):<span class=\"type\">Int</span> = x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//同样返回 adder: (Int, Int) =&gt; Int = &lt;function2&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"apply方法\"><a class=\"markdownIt-Anchor\" href=\"#apply方法\"></a> apply方法</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">```scala</span><br><span class=\"line\"><span class=\"string\">\"Hello\"</span>(<span class=\"number\">4</span>) <span class=\"comment\">//等价于\"Hello\".apply(4),相当于java里的\"Hello\".charAt(i),这是scala为了便利提供的一种语法糖。</span></span><br><span class=\"line\"><span class=\"comment\">//\"Hello\"会被隐式转成StringOps，而在伴生对象StringOps中存在着apply方法。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用scala-doc\"><a class=\"markdownIt-Anchor\" href=\"#使用scala-doc\"></a> 使用scala doc</h3>\n<p><a href=\"http://www.scala-lang.org/api\" target=\"_blank\" rel=\"noopener\">http://www.scala-lang.org/api</a></p>\n<h4 id=\"使用技巧\"><a class=\"markdownIt-Anchor\" href=\"#使用技巧\"></a> 使用技巧:</h4>\n<ol>\n<li>左上解可以搜索类名，每条结果左侧的C和O是可以点的。分别进到该类和companion object(伴生对象)。点“display all entities”可以看到所有的包。</li>\n<li>数值类型，多看看RichInt、RichDouble等。字符串看StringOps。</li>\n<li>数学函数位于scala.math包中，不在某个类里。</li>\n<li>如果看到unary_-不要感到奇怪，这是前置的负操作符-x的方式。在操作符那章，你会豁然开朗。</li>\n</ol>\n<h2 id=\"习题\"><a class=\"markdownIt-Anchor\" href=\"#习题\"></a> 习题</h2>\n<ul>\n<li>\n<p>在Scala REPL中键入“3.” 然后按Tab。有哪些方法可以被应用？</p>\n<pre><code>  %   *   -   &gt;    &gt;&gt;    ^  ...\n</code></pre>\n</li>\n<li>\n<p>在Scala REPL计算3的平方根，再求值平方。现在，这个结果与3相关多少？（提示：res变量是你的朋友。）</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math._</span><br><span class=\"line\">sqrt(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// res85: Double = 1.7320508075688772</span></span><br><span class=\"line\"></span><br><span class=\"line\">res85*res85</span><br><span class=\"line\"><span class=\"comment\">// res86: Double = 2.9999999999999996</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span> - res86</span><br><span class=\"line\"><span class=\"comment\">// res87: Double = 4.440892098500626E-16</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>res变量是val还是var?</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res89 = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;console&gt;:8: error: reassignment to val</span></span><br><span class=\"line\"><span class=\"comment\">//res9 = 3</span></span><br><span class=\"line\"><span class=\"comment\">//   ^</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Scala允许你用数字去乘字符串—去REPL中试一下&quot;crazy&quot;*3。这个操作做什么？在Scaladoc中如何找到这个操作?</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"crazy\"</span> * <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">// res90: String = crazycrazycrazy</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><em>是它的方法&quot;crazy&quot;.</em>(3)。直接到StringOps类看*方法即可。</li>\n</ul>\n<ol start=\"5\">\n<li>\n<p>10 max 2的含义是什么？max方法在哪个类中？</p>\n<p>此方法返回两个数字中较大的那个。在RichInt中。</p>\n</li>\n<li>\n<p>用BigInt计算2的1024次方。</p>\n</li>\n</ol>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BigInt</span>(<span class=\"number\">2</span>).pow(<span class=\"number\">1024</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>为了在使用probablePrime(100,Random)获取随机素数时不在probablePrime和Random之前使用任何限定符，你需要引入什么？</p>\n<p>要引入对应的包，Random在util下。而probablePrime在对象BigInt里。</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> util.<span class=\"type\">Random</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">import</span> math.<span class=\"type\">BigInt</span>.probablePrime</span><br><span class=\"line\">probablePrime(<span class=\"number\">3</span>,<span class=\"type\">Random</span>)</span><br><span class=\"line\"><span class=\"comment\">//res1: scala.math.BigInt = 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>创建随机文件的方式之一是生成一个随机的BigInt，然后将它转换成三十六进制，输出类似&quot;qsnvbevtomcj38o06kul&quot;这样的字符串。查阅Scaladoc，找到在Scala中实现该逻辑的办法。</p>\n<p>在BigInt里找到toString方法</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">probablePrime(<span class=\"number\">100</span>,<span class=\"type\">Random</span>)</span><br><span class=\"line\"><span class=\"comment\">//res2: scala.math.BigInt = 680624836022523911868209171401</span></span><br><span class=\"line\"></span><br><span class=\"line\">res2.toString(<span class=\"number\">36</span>)</span><br><span class=\"line\"><span class=\"comment\">//res3: String = 1tzk0mgequl6l6t2c24p</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>在Scala中如何获取字符串的首字符和尾字符？</p>\n<p>到StringOps中查找</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scala&gt; res3.head</span><br><span class=\"line\"><span class=\"comment\">//res4: Char = 1</span></span><br><span class=\"line\">scala&gt; res3.last</span><br><span class=\"line\"><span class=\"comment\">//res6: Char = p</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另外两种方式：</span></span><br><span class=\"line\"></span><br><span class=\"line\">res3(<span class=\"number\">0</span>)</span><br><span class=\"line\">res3.take(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//获取首字符</span></span><br><span class=\"line\">res3.reverse(<span class=\"number\">0</span>)</span><br><span class=\"line\">res3.takeRight(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//获取尾字符</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>take,drop,takeRight和dropRight这些字符串函数是做什么用的？和substring相比，他们的优点和缺点都是哪些？</p>\n<pre><code>  查询API即可take是从字符串首开始获取字符串,drop是从字符串首开始去除字符串。takeRight和dropRight是从字符串尾开始操作。这四个方法都是单方向的。如果我想要字符串中间的子字符串，那么需要同时调用drop和dropRight，或者使用substring\n</code></pre>\n</li>\n</ul>\n"},{"title":"Chapter-03-working-with-arrays","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-03-working-with-arrays\n\n数组\n\n---\n\n### 定长数组\n\n```scala\nval nums = new Array[Int](10)\n//初始化10整数的数组，所有元素初始化为0\nval strs = new Array[String](10)\n//10个值为null\nval s = Array(\"Hello\", \"Allon\")\n//Array对象的apply方法\ns(0) = \"Goodbye\"\n//用圆括号\n```\n\n### 变长数组\n\n```scala\nimport scala.collection.mutable.ArrayBuffer\nval b = ArrayBuffer[Int]()\n//一个空buffer\nb += 1 \n//相当于b.+=(ArrayBuffer(1))\n//在结尾加一个元素\nb += (1,2,3)\n//在结尾加一坨元素，ArrayBuffer(1,2,3)\nb ++= Array(4,5,6)\n//在结尾加任何集合\nb.trimEnd(3)\n//移除最后3个元素，\n```\n在数组缓冲结尾追加和移除是高效的。也可以insert一些元素，后面的元素会顺移。\n\n```scala\nb.insert(2,13)\n//输出(1, 1, 13, 2, 3)\nb.insert(2,31,32,33)\n//输出(1, 1, 31, 32, 33, 13, 2, 3)\nb.remove(2)\n//输出(1, 1, 32, 33, 13, 2, 3)\nb.remove(2,3)\n//输出(1, 1, 2, 3)，移除下标为2的起点共3个元素\n```\n一般来讲，可以先构建一个ArrayBuffer然后在buffer伸缩完成后再toArray。\n\n```scala\nb.toArray\n//Array(1, 1, 2, 3)\n```\n### 遍历Array和ArrayBuffer\n常规遍历\n\n```scala\nfor(i <- 0 until (b.length, 2)) println(b(i))\n//隔一个搞一下\n//输出\n1\n2\n```\n如果不使用下标，可以更简单的遍历，有点像java中的增强for循环。\n\n```scala\nfor(elem <- b){\n    println(elem)\n}\n```\n### 数组转换\n\n```scala\nfor (elem <- b) yield elem\n//b是一个ArrayBuffer，yield出来的结果也将会是一个ArrayBuffer\n//如果b是一个Array，结果就会产生一个Array\nfor(i <- 0 until 10) yield i\n//这样它会产生一个Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n```\n以上代码都会生成一个新的集合，原集合不变。其实在scala中，也可以这样来实现：\n\n```scala\nb.filter(_ % 2 == 0).map(2 * _)\n//或\nb filter {_ % 2 == 0} map {2 * _}\n```\n### 常用算法\n\n```scala\nArray(1, 2, 3, 4, 5, 6).sum\nArray(1, 2, 3, 4, 5, 6).max\n```\n排序\n\n```scala\nval b = ArrayBuffer(1, 7, 2, 9)\nb.sorted\n//返回一个ArrayBuffer(1, 2, 7, 9)\n```\n也可以传入一个比较函数\n\n```scala\nb.sortWith(_ < _)\n//返回一个ArrayBuffer(9, 7, 2, 1)\n```\n对一个数组自身排序，（虽然b为val，但是它内部的元素是可以修改的）\n\n```scala\nval b = Array(1, 7, 2, 9)\nutil.Sorting.quickSort(b)\n//b变成了Array(1, 2, 7, 9)\n```\n打印数组可以像python中的join方法一样（用分隔符输出），同时可以加前后缀\n\n```scala\nb.mkString(\",\")\n//加分隔符返回 String = 1,2,7,9\n\nb.mkString(\"<\",\",\",\">\")\n//返回 String = <1,2,7,9>\n```\nArrayBuffer（不是Array）的toString方法默认不会像java一样打些没用的东西，而是带有类似mkString的输出，打印出如下效果。\n\n```scala\nval c = ArrayBuffer(1, 7, 2, 9)\nc.toString\n//输出ArrayBuffer(1, 7, 2, 9)\n```\n### 多维数组\n要构建一个Array[Array[Double]]，在scala中可以使用ofDim方法：\n\n```scala\nval b = Array.ofDim[Double](3,4)//三行，四列\n//输出b: Array[Array[Double]] = Array(Array(0.0, 0.0, 0.0, 0.0),Array(0.0, 0.0, 0.0, 0.0), Array(0.0, 0.0, 0.0, 0.0))\nb(2)(1) = 1.111//下标为横2纵1（第3个数组中的第2个值）。\n```\n* 其实多维数组就是：数组的数组。所以每行长度都是可以自由定义来决定。\n\n### 和java相互转换\nscala数组可以和java数组之间来回转换。请关注隐式转换那一章。\n\n## 习题\n* 编写一段代码，将a设置为一个n个随机整数的数组，要求随机数介于0（包含）和n(不包含)之间。\n\n```scala\ndef randomArray(n: Int): Array[Int] = {\n    val vector = for (i <- 0 until n) yield scala.util.Random.nextInt(n)\n    vector.toArray\n}\n```\n\n* 编写一个循环，将整数数组中的相信元素对换，\n\n```scala\ndef switchNear(arr: Array[Int]): Array[Int] = {\n  val t = arr.toBuffer\n  for (i <- 1 until(t.length, 2); tmp = t(i)) {\n    t(i) = t(i - 1)\n    t(i - 1) = tmp\n  }\n  t.toArray\n}\n```\n* 重复前一个练习，不过这一次生成一个新的值交换过的数组。用for/yield。\n\n```scala\ndef switchNear(arr: Array[Int]): Array[Int] = {\n  val vector =\n    for (i <- 0 until arr.length; tmp = arr(i)) yield if (i % 2 == 0) arr(i + 1) else arr(i - 1)\n  vector.toArray\n}\n```\n\n* 给定一个整数数组，产生一个新的数组，包含元数组中的所有正值，以原有顺序排列，之后的元素是所有零或负值，以原有顺序排列。\n\n```scala\ndef branchArray(arr: Array[Int]): Array[Int] = {\n  val pre = ArrayBuffer[Int]()\n  val last = ArrayBuffer[Int]()\n  arr foreach (item => if (item >= 0) pre += item else last += item)\n  pre ++= last.toArray\n  pre.toArray\n}\n//另一个方法\ndef branchArray2(arr: Array[Int]): Array[Int] = {\n  val all = ArrayBuffer[Int]()\n  all ++= arr.filter(_ >= 0)\n  all ++= arr.filter(_ < 0)\n  all.toArray\n}\n```\n\n* 如何计算Aarray[Double]的平均值？\n\n```scala\ndef avgArr(arr: Array[Double]): Double = {\n  arr.sum / arr.length\n}\n```\n\n* 如何将Array[Int]反序排列？对于ArrayBuffer[Int]你又会怎么做？\n\n```scala\narr reverse\narr.toBuffer reverse\n```\n\n* 写一段代码，打印数组中的所有的值，并去掉重复项。（提示：查看Scaladoc）\n\n```scala\n//arr: Array[Int] = Array(-2, -1, 0, 1, 2, 1, 2, 3, 4, -1)\narr distinct\n//res116: Array[Int] = Array(-2, -1, 0, 1, 2, 3, 4)\n```\n\n* 收集一个数组的负值下标到一个数组，反序这个数组，再去掉它最后一个元素。然后对每个下标调用remove(i)。比较和之前做法的效率。\n\n```scala\nfor(i <- 0 until arr.length if arr(i)<0) yield i\nc.reverse.trimStart(1)\nval d = arr.toBuffer\nc.foreach(d.remove)\n```\n\n","source":"_posts/scala/Chapter-03-working-with-arrays.md","raw":"---\ntitle: 'Chapter-03-working-with-arrays'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-03-working-with-arrays\n\n数组\n\n---\n\n### 定长数组\n\n```scala\nval nums = new Array[Int](10)\n//初始化10整数的数组，所有元素初始化为0\nval strs = new Array[String](10)\n//10个值为null\nval s = Array(\"Hello\", \"Allon\")\n//Array对象的apply方法\ns(0) = \"Goodbye\"\n//用圆括号\n```\n\n### 变长数组\n\n```scala\nimport scala.collection.mutable.ArrayBuffer\nval b = ArrayBuffer[Int]()\n//一个空buffer\nb += 1 \n//相当于b.+=(ArrayBuffer(1))\n//在结尾加一个元素\nb += (1,2,3)\n//在结尾加一坨元素，ArrayBuffer(1,2,3)\nb ++= Array(4,5,6)\n//在结尾加任何集合\nb.trimEnd(3)\n//移除最后3个元素，\n```\n在数组缓冲结尾追加和移除是高效的。也可以insert一些元素，后面的元素会顺移。\n\n```scala\nb.insert(2,13)\n//输出(1, 1, 13, 2, 3)\nb.insert(2,31,32,33)\n//输出(1, 1, 31, 32, 33, 13, 2, 3)\nb.remove(2)\n//输出(1, 1, 32, 33, 13, 2, 3)\nb.remove(2,3)\n//输出(1, 1, 2, 3)，移除下标为2的起点共3个元素\n```\n一般来讲，可以先构建一个ArrayBuffer然后在buffer伸缩完成后再toArray。\n\n```scala\nb.toArray\n//Array(1, 1, 2, 3)\n```\n### 遍历Array和ArrayBuffer\n常规遍历\n\n```scala\nfor(i <- 0 until (b.length, 2)) println(b(i))\n//隔一个搞一下\n//输出\n1\n2\n```\n如果不使用下标，可以更简单的遍历，有点像java中的增强for循环。\n\n```scala\nfor(elem <- b){\n    println(elem)\n}\n```\n### 数组转换\n\n```scala\nfor (elem <- b) yield elem\n//b是一个ArrayBuffer，yield出来的结果也将会是一个ArrayBuffer\n//如果b是一个Array，结果就会产生一个Array\nfor(i <- 0 until 10) yield i\n//这样它会产生一个Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n```\n以上代码都会生成一个新的集合，原集合不变。其实在scala中，也可以这样来实现：\n\n```scala\nb.filter(_ % 2 == 0).map(2 * _)\n//或\nb filter {_ % 2 == 0} map {2 * _}\n```\n### 常用算法\n\n```scala\nArray(1, 2, 3, 4, 5, 6).sum\nArray(1, 2, 3, 4, 5, 6).max\n```\n排序\n\n```scala\nval b = ArrayBuffer(1, 7, 2, 9)\nb.sorted\n//返回一个ArrayBuffer(1, 2, 7, 9)\n```\n也可以传入一个比较函数\n\n```scala\nb.sortWith(_ < _)\n//返回一个ArrayBuffer(9, 7, 2, 1)\n```\n对一个数组自身排序，（虽然b为val，但是它内部的元素是可以修改的）\n\n```scala\nval b = Array(1, 7, 2, 9)\nutil.Sorting.quickSort(b)\n//b变成了Array(1, 2, 7, 9)\n```\n打印数组可以像python中的join方法一样（用分隔符输出），同时可以加前后缀\n\n```scala\nb.mkString(\",\")\n//加分隔符返回 String = 1,2,7,9\n\nb.mkString(\"<\",\",\",\">\")\n//返回 String = <1,2,7,9>\n```\nArrayBuffer（不是Array）的toString方法默认不会像java一样打些没用的东西，而是带有类似mkString的输出，打印出如下效果。\n\n```scala\nval c = ArrayBuffer(1, 7, 2, 9)\nc.toString\n//输出ArrayBuffer(1, 7, 2, 9)\n```\n### 多维数组\n要构建一个Array[Array[Double]]，在scala中可以使用ofDim方法：\n\n```scala\nval b = Array.ofDim[Double](3,4)//三行，四列\n//输出b: Array[Array[Double]] = Array(Array(0.0, 0.0, 0.0, 0.0),Array(0.0, 0.0, 0.0, 0.0), Array(0.0, 0.0, 0.0, 0.0))\nb(2)(1) = 1.111//下标为横2纵1（第3个数组中的第2个值）。\n```\n* 其实多维数组就是：数组的数组。所以每行长度都是可以自由定义来决定。\n\n### 和java相互转换\nscala数组可以和java数组之间来回转换。请关注隐式转换那一章。\n\n## 习题\n* 编写一段代码，将a设置为一个n个随机整数的数组，要求随机数介于0（包含）和n(不包含)之间。\n\n```scala\ndef randomArray(n: Int): Array[Int] = {\n    val vector = for (i <- 0 until n) yield scala.util.Random.nextInt(n)\n    vector.toArray\n}\n```\n\n* 编写一个循环，将整数数组中的相信元素对换，\n\n```scala\ndef switchNear(arr: Array[Int]): Array[Int] = {\n  val t = arr.toBuffer\n  for (i <- 1 until(t.length, 2); tmp = t(i)) {\n    t(i) = t(i - 1)\n    t(i - 1) = tmp\n  }\n  t.toArray\n}\n```\n* 重复前一个练习，不过这一次生成一个新的值交换过的数组。用for/yield。\n\n```scala\ndef switchNear(arr: Array[Int]): Array[Int] = {\n  val vector =\n    for (i <- 0 until arr.length; tmp = arr(i)) yield if (i % 2 == 0) arr(i + 1) else arr(i - 1)\n  vector.toArray\n}\n```\n\n* 给定一个整数数组，产生一个新的数组，包含元数组中的所有正值，以原有顺序排列，之后的元素是所有零或负值，以原有顺序排列。\n\n```scala\ndef branchArray(arr: Array[Int]): Array[Int] = {\n  val pre = ArrayBuffer[Int]()\n  val last = ArrayBuffer[Int]()\n  arr foreach (item => if (item >= 0) pre += item else last += item)\n  pre ++= last.toArray\n  pre.toArray\n}\n//另一个方法\ndef branchArray2(arr: Array[Int]): Array[Int] = {\n  val all = ArrayBuffer[Int]()\n  all ++= arr.filter(_ >= 0)\n  all ++= arr.filter(_ < 0)\n  all.toArray\n}\n```\n\n* 如何计算Aarray[Double]的平均值？\n\n```scala\ndef avgArr(arr: Array[Double]): Double = {\n  arr.sum / arr.length\n}\n```\n\n* 如何将Array[Int]反序排列？对于ArrayBuffer[Int]你又会怎么做？\n\n```scala\narr reverse\narr.toBuffer reverse\n```\n\n* 写一段代码，打印数组中的所有的值，并去掉重复项。（提示：查看Scaladoc）\n\n```scala\n//arr: Array[Int] = Array(-2, -1, 0, 1, 2, 1, 2, 3, 4, -1)\narr distinct\n//res116: Array[Int] = Array(-2, -1, 0, 1, 2, 3, 4)\n```\n\n* 收集一个数组的负值下标到一个数组，反序这个数组，再去掉它最后一个元素。然后对每个下标调用remove(i)。比较和之前做法的效率。\n\n```scala\nfor(i <- 0 until arr.length if arr(i)<0) yield i\nc.reverse.trimStart(1)\nval d = arr.toBuffer\nc.foreach(d.remove)\n```\n\n","slug":"scala/Chapter-03-working-with-arrays","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrh00006j5lypfafm5t8","content":"<h2><span id=\"chapter-03-working-with-arrays\"> Chapter-03-working-with-arrays</span></h2>\n<p>数组</p>\n<hr>\n<h3><span id=\"定长数组\"> 定长数组</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> nums = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Int</span>](<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//初始化10整数的数组，所有元素初始化为0</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> strs = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">String</span>](<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//10个值为null</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> s = <span class=\"type\">Array</span>(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"Allon\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//Array对象的apply方法</span></span><br><span class=\"line\">s(<span class=\"number\">0</span>) = <span class=\"string\">\"Goodbye\"</span></span><br><span class=\"line\"><span class=\"comment\">//用圆括号</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"变长数组\"> 变长数组</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"comment\">//一个空buffer</span></span><br><span class=\"line\">b += <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"comment\">//相当于b.+=(ArrayBuffer(1))</span></span><br><span class=\"line\"><span class=\"comment\">//在结尾加一个元素</span></span><br><span class=\"line\">b += (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">//在结尾加一坨元素，ArrayBuffer(1,2,3)</span></span><br><span class=\"line\">b ++= <span class=\"type\">Array</span>(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"comment\">//在结尾加任何集合</span></span><br><span class=\"line\">b.trimEnd(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">//移除最后3个元素，</span></span><br></pre></td></tr></table></figure>\n<p>在数组缓冲结尾追加和移除是高效的。也可以insert一些元素，后面的元素会顺移。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.insert(<span class=\"number\">2</span>,<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出(1, 1, 13, 2, 3)</span></span><br><span class=\"line\">b.insert(<span class=\"number\">2</span>,<span class=\"number\">31</span>,<span class=\"number\">32</span>,<span class=\"number\">33</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出(1, 1, 31, 32, 33, 13, 2, 3)</span></span><br><span class=\"line\">b.remove(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出(1, 1, 32, 33, 13, 2, 3)</span></span><br><span class=\"line\">b.remove(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出(1, 1, 2, 3)，移除下标为2的起点共3个元素</span></span><br></pre></td></tr></table></figure>\n<p>一般来讲，可以先构建一个ArrayBuffer然后在buffer伸缩完成后再toArray。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.toArray</span><br><span class=\"line\"><span class=\"comment\">//Array(1, 1, 2, 3)</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"遍历array和arraybuffer\"> 遍历Array和ArrayBuffer</span></h3>\n<p>常规遍历</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> until (b.length, <span class=\"number\">2</span>)) println(b(i))</span><br><span class=\"line\"><span class=\"comment\">//隔一个搞一下</span></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>如果不使用下标，可以更简单的遍历，有点像java中的增强for循环。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(elem &lt;- b)&#123;</span><br><span class=\"line\">    println(elem)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"数组转换\"> 数组转换</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (elem &lt;- b) <span class=\"keyword\">yield</span> elem</span><br><span class=\"line\"><span class=\"comment\">//b是一个ArrayBuffer，yield出来的结果也将会是一个ArrayBuffer</span></span><br><span class=\"line\"><span class=\"comment\">//如果b是一个Array，结果就会产生一个Array</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> until <span class=\"number\">10</span>) <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"><span class=\"comment\">//这样它会产生一个Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br></pre></td></tr></table></figure>\n<p>以上代码都会生成一个新的集合，原集合不变。其实在scala中，也可以这样来实现：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.filter(_ % <span class=\"number\">2</span> == <span class=\"number\">0</span>).map(<span class=\"number\">2</span> * _)</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\">b filter &#123;_ % <span class=\"number\">2</span> == <span class=\"number\">0</span>&#125; map &#123;<span class=\"number\">2</span> * _&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"常用算法\"> 常用算法</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>).sum</span><br><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>).max</span><br></pre></td></tr></table></figure>\n<p>排序</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"type\">ArrayBuffer</span>(<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">b.sorted</span><br><span class=\"line\"><span class=\"comment\">//返回一个ArrayBuffer(1, 2, 7, 9)</span></span><br></pre></td></tr></table></figure>\n<p>也可以传入一个比较函数</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.sortWith(_ &lt; _)</span><br><span class=\"line\"><span class=\"comment\">//返回一个ArrayBuffer(9, 7, 2, 1)</span></span><br></pre></td></tr></table></figure>\n<p>对一个数组自身排序，（虽然b为val，但是它内部的元素是可以修改的）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">util.<span class=\"type\">Sorting</span>.quickSort(b)</span><br><span class=\"line\"><span class=\"comment\">//b变成了Array(1, 2, 7, 9)</span></span><br></pre></td></tr></table></figure>\n<p>打印数组可以像python中的join方法一样（用分隔符输出），同时可以加前后缀</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.mkString(<span class=\"string\">\",\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//加分隔符返回 String = 1,2,7,9</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.mkString(<span class=\"string\">\"&lt;\"</span>,<span class=\"string\">\",\"</span>,<span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 String = &lt;1,2,7,9&gt;</span></span><br></pre></td></tr></table></figure>\n<p>ArrayBuffer（不是Array）的toString方法默认不会像java一样打些没用的东西，而是带有类似mkString的输出，打印出如下效果。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> c = <span class=\"type\">ArrayBuffer</span>(<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">c.toString</span><br><span class=\"line\"><span class=\"comment\">//输出ArrayBuffer(1, 7, 2, 9)</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"多维数组\"> 多维数组</span></h3>\n<p>要构建一个Array[Array[Double]]，在scala中可以使用ofDim方法：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"type\">Array</span>.ofDim[<span class=\"type\">Double</span>](<span class=\"number\">3</span>,<span class=\"number\">4</span>)<span class=\"comment\">//三行，四列</span></span><br><span class=\"line\"><span class=\"comment\">//输出b: Array[Array[Double]] = Array(Array(0.0, 0.0, 0.0, 0.0),Array(0.0, 0.0, 0.0, 0.0), Array(0.0, 0.0, 0.0, 0.0))</span></span><br><span class=\"line\">b(<span class=\"number\">2</span>)(<span class=\"number\">1</span>) = <span class=\"number\">1.111</span><span class=\"comment\">//下标为横2纵1（第3个数组中的第2个值）。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>其实多维数组就是：数组的数组。所以每行长度都是可以自由定义来决定。</li>\n</ul>\n<h3><span id=\"和java相互转换\"> 和java相互转换</span></h3>\n<p>scala数组可以和java数组之间来回转换。请关注隐式转换那一章。</p>\n<h2><span id=\"习题\"> 习题</span></h2>\n<ul>\n<li>编写一段代码，将a设置为一个n个随机整数的数组，要求随机数介于0（包含）和n(不包含)之间。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randomArray</span></span>(n: <span class=\"type\">Int</span>): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> vector = <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until n) <span class=\"keyword\">yield</span> scala.util.<span class=\"type\">Random</span>.nextInt(n)</span><br><span class=\"line\">    vector.toArray</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写一个循环，将整数数组中的相信元素对换，</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">switchNear</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> t = arr.toBuffer</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> until(t.length, <span class=\"number\">2</span>); tmp = t(i)) &#123;</span><br><span class=\"line\">    t(i) = t(i - <span class=\"number\">1</span>)</span><br><span class=\"line\">    t(i - <span class=\"number\">1</span>) = tmp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  t.toArray</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重复前一个练习，不过这一次生成一个新的值交换过的数组。用for/yield。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">switchNear</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> vector =</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until arr.length; tmp = arr(i)) <span class=\"keyword\">yield</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) arr(i + <span class=\"number\">1</span>) <span class=\"keyword\">else</span> arr(i - <span class=\"number\">1</span>)</span><br><span class=\"line\">  vector.toArray</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给定一个整数数组，产生一个新的数组，包含元数组中的所有正值，以原有顺序排列，之后的元素是所有零或负值，以原有顺序排列。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">branchArray</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> pre = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> last = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">  arr foreach (item =&gt; <span class=\"keyword\">if</span> (item &gt;= <span class=\"number\">0</span>) pre += item <span class=\"keyword\">else</span> last += item)</span><br><span class=\"line\">  pre ++= last.toArray</span><br><span class=\"line\">  pre.toArray</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//另一个方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">branchArray2</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> all = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">  all ++= arr.filter(_ &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">  all ++= arr.filter(_ &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  all.toArray</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如何计算Aarray[Double]的平均值？</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">avgArr</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Double</span>]): <span class=\"type\">Double</span> = &#123;</span><br><span class=\"line\">  arr.sum / arr.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如何将Array[Int]反序排列？对于ArrayBuffer[Int]你又会怎么做？</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr reverse</span><br><span class=\"line\">arr.toBuffer reverse</span><br></pre></td></tr></table></figure>\n<ul>\n<li>写一段代码，打印数组中的所有的值，并去掉重复项。（提示：查看Scaladoc）</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arr: Array[Int] = Array(-2, -1, 0, 1, 2, 1, 2, 3, 4, -1)</span></span><br><span class=\"line\">arr distinct</span><br><span class=\"line\"><span class=\"comment\">//res116: Array[Int] = Array(-2, -1, 0, 1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>收集一个数组的负值下标到一个数组，反序这个数组，再去掉它最后一个元素。然后对每个下标调用remove(i)。比较和之前做法的效率。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> until arr.length <span class=\"keyword\">if</span> arr(i)&lt;<span class=\"number\">0</span>) <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">c.reverse.trimStart(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> d = arr.toBuffer</span><br><span class=\"line\">c.foreach(d.remove)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-03-working-with-arrays\"><a class=\"markdownIt-Anchor\" href=\"#chapter-03-working-with-arrays\"></a> Chapter-03-working-with-arrays</h2>\n<p>数组</p>\n<hr>\n<h3 id=\"定长数组\"><a class=\"markdownIt-Anchor\" href=\"#定长数组\"></a> 定长数组</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> nums = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Int</span>](<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//初始化10整数的数组，所有元素初始化为0</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> strs = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">String</span>](<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//10个值为null</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> s = <span class=\"type\">Array</span>(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"Allon\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//Array对象的apply方法</span></span><br><span class=\"line\">s(<span class=\"number\">0</span>) = <span class=\"string\">\"Goodbye\"</span></span><br><span class=\"line\"><span class=\"comment\">//用圆括号</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"变长数组\"><a class=\"markdownIt-Anchor\" href=\"#变长数组\"></a> 变长数组</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\"><span class=\"comment\">//一个空buffer</span></span><br><span class=\"line\">b += <span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"comment\">//相当于b.+=(ArrayBuffer(1))</span></span><br><span class=\"line\"><span class=\"comment\">//在结尾加一个元素</span></span><br><span class=\"line\">b += (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">//在结尾加一坨元素，ArrayBuffer(1,2,3)</span></span><br><span class=\"line\">b ++= <span class=\"type\">Array</span>(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"comment\">//在结尾加任何集合</span></span><br><span class=\"line\">b.trimEnd(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">//移除最后3个元素，</span></span><br></pre></td></tr></table></figure>\n<p>在数组缓冲结尾追加和移除是高效的。也可以insert一些元素，后面的元素会顺移。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.insert(<span class=\"number\">2</span>,<span class=\"number\">13</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出(1, 1, 13, 2, 3)</span></span><br><span class=\"line\">b.insert(<span class=\"number\">2</span>,<span class=\"number\">31</span>,<span class=\"number\">32</span>,<span class=\"number\">33</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出(1, 1, 31, 32, 33, 13, 2, 3)</span></span><br><span class=\"line\">b.remove(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出(1, 1, 32, 33, 13, 2, 3)</span></span><br><span class=\"line\">b.remove(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出(1, 1, 2, 3)，移除下标为2的起点共3个元素</span></span><br></pre></td></tr></table></figure>\n<p>一般来讲，可以先构建一个ArrayBuffer然后在buffer伸缩完成后再toArray。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.toArray</span><br><span class=\"line\"><span class=\"comment\">//Array(1, 1, 2, 3)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"遍历array和arraybuffer\"><a class=\"markdownIt-Anchor\" href=\"#遍历array和arraybuffer\"></a> 遍历Array和ArrayBuffer</h3>\n<p>常规遍历</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> until (b.length, <span class=\"number\">2</span>)) println(b(i))</span><br><span class=\"line\"><span class=\"comment\">//隔一个搞一下</span></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>如果不使用下标，可以更简单的遍历，有点像java中的增强for循环。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(elem &lt;- b)&#123;</span><br><span class=\"line\">    println(elem)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组转换\"><a class=\"markdownIt-Anchor\" href=\"#数组转换\"></a> 数组转换</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (elem &lt;- b) <span class=\"keyword\">yield</span> elem</span><br><span class=\"line\"><span class=\"comment\">//b是一个ArrayBuffer，yield出来的结果也将会是一个ArrayBuffer</span></span><br><span class=\"line\"><span class=\"comment\">//如果b是一个Array，结果就会产生一个Array</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> until <span class=\"number\">10</span>) <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"><span class=\"comment\">//这样它会产生一个Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br></pre></td></tr></table></figure>\n<p>以上代码都会生成一个新的集合，原集合不变。其实在scala中，也可以这样来实现：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.filter(_ % <span class=\"number\">2</span> == <span class=\"number\">0</span>).map(<span class=\"number\">2</span> * _)</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\">b filter &#123;_ % <span class=\"number\">2</span> == <span class=\"number\">0</span>&#125; map &#123;<span class=\"number\">2</span> * _&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用算法\"><a class=\"markdownIt-Anchor\" href=\"#常用算法\"></a> 常用算法</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>).sum</span><br><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>).max</span><br></pre></td></tr></table></figure>\n<p>排序</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"type\">ArrayBuffer</span>(<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">b.sorted</span><br><span class=\"line\"><span class=\"comment\">//返回一个ArrayBuffer(1, 2, 7, 9)</span></span><br></pre></td></tr></table></figure>\n<p>也可以传入一个比较函数</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.sortWith(_ &lt; _)</span><br><span class=\"line\"><span class=\"comment\">//返回一个ArrayBuffer(9, 7, 2, 1)</span></span><br></pre></td></tr></table></figure>\n<p>对一个数组自身排序，（虽然b为val，但是它内部的元素是可以修改的）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">util.<span class=\"type\">Sorting</span>.quickSort(b)</span><br><span class=\"line\"><span class=\"comment\">//b变成了Array(1, 2, 7, 9)</span></span><br></pre></td></tr></table></figure>\n<p>打印数组可以像python中的join方法一样（用分隔符输出），同时可以加前后缀</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b.mkString(<span class=\"string\">\",\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//加分隔符返回 String = 1,2,7,9</span></span><br><span class=\"line\"></span><br><span class=\"line\">b.mkString(<span class=\"string\">\"&lt;\"</span>,<span class=\"string\">\",\"</span>,<span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 String = &lt;1,2,7,9&gt;</span></span><br></pre></td></tr></table></figure>\n<p>ArrayBuffer（不是Array）的toString方法默认不会像java一样打些没用的东西，而是带有类似mkString的输出，打印出如下效果。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> c = <span class=\"type\">ArrayBuffer</span>(<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">c.toString</span><br><span class=\"line\"><span class=\"comment\">//输出ArrayBuffer(1, 7, 2, 9)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"多维数组\"><a class=\"markdownIt-Anchor\" href=\"#多维数组\"></a> 多维数组</h3>\n<p>要构建一个Array[Array[Double]]，在scala中可以使用ofDim方法：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> b = <span class=\"type\">Array</span>.ofDim[<span class=\"type\">Double</span>](<span class=\"number\">3</span>,<span class=\"number\">4</span>)<span class=\"comment\">//三行，四列</span></span><br><span class=\"line\"><span class=\"comment\">//输出b: Array[Array[Double]] = Array(Array(0.0, 0.0, 0.0, 0.0),Array(0.0, 0.0, 0.0, 0.0), Array(0.0, 0.0, 0.0, 0.0))</span></span><br><span class=\"line\">b(<span class=\"number\">2</span>)(<span class=\"number\">1</span>) = <span class=\"number\">1.111</span><span class=\"comment\">//下标为横2纵1（第3个数组中的第2个值）。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>其实多维数组就是：数组的数组。所以每行长度都是可以自由定义来决定。</li>\n</ul>\n<h3 id=\"和java相互转换\"><a class=\"markdownIt-Anchor\" href=\"#和java相互转换\"></a> 和java相互转换</h3>\n<p>scala数组可以和java数组之间来回转换。请关注隐式转换那一章。</p>\n<h2 id=\"习题\"><a class=\"markdownIt-Anchor\" href=\"#习题\"></a> 习题</h2>\n<ul>\n<li>编写一段代码，将a设置为一个n个随机整数的数组，要求随机数介于0（包含）和n(不包含)之间。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">randomArray</span></span>(n: <span class=\"type\">Int</span>): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> vector = <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until n) <span class=\"keyword\">yield</span> scala.util.<span class=\"type\">Random</span>.nextInt(n)</span><br><span class=\"line\">    vector.toArray</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编写一个循环，将整数数组中的相信元素对换，</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">switchNear</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> t = arr.toBuffer</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">1</span> until(t.length, <span class=\"number\">2</span>); tmp = t(i)) &#123;</span><br><span class=\"line\">    t(i) = t(i - <span class=\"number\">1</span>)</span><br><span class=\"line\">    t(i - <span class=\"number\">1</span>) = tmp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  t.toArray</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重复前一个练习，不过这一次生成一个新的值交换过的数组。用for/yield。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">switchNear</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> vector =</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i &lt;- <span class=\"number\">0</span> until arr.length; tmp = arr(i)) <span class=\"keyword\">yield</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) arr(i + <span class=\"number\">1</span>) <span class=\"keyword\">else</span> arr(i - <span class=\"number\">1</span>)</span><br><span class=\"line\">  vector.toArray</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>给定一个整数数组，产生一个新的数组，包含元数组中的所有正值，以原有顺序排列，之后的元素是所有零或负值，以原有顺序排列。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">branchArray</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> pre = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> last = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">  arr foreach (item =&gt; <span class=\"keyword\">if</span> (item &gt;= <span class=\"number\">0</span>) pre += item <span class=\"keyword\">else</span> last += item)</span><br><span class=\"line\">  pre ++= last.toArray</span><br><span class=\"line\">  pre.toArray</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//另一个方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">branchArray2</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>]): <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> all = <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Int</span>]()</span><br><span class=\"line\">  all ++= arr.filter(_ &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">  all ++= arr.filter(_ &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  all.toArray</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如何计算Aarray[Double]的平均值？</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">avgArr</span></span>(arr: <span class=\"type\">Array</span>[<span class=\"type\">Double</span>]): <span class=\"type\">Double</span> = &#123;</span><br><span class=\"line\">  arr.sum / arr.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如何将Array[Int]反序排列？对于ArrayBuffer[Int]你又会怎么做？</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr reverse</span><br><span class=\"line\">arr.toBuffer reverse</span><br></pre></td></tr></table></figure>\n<ul>\n<li>写一段代码，打印数组中的所有的值，并去掉重复项。（提示：查看Scaladoc）</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arr: Array[Int] = Array(-2, -1, 0, 1, 2, 1, 2, 3, 4, -1)</span></span><br><span class=\"line\">arr distinct</span><br><span class=\"line\"><span class=\"comment\">//res116: Array[Int] = Array(-2, -1, 0, 1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>收集一个数组的负值下标到一个数组，反序这个数组，再去掉它最后一个元素。然后对每个下标调用remove(i)。比较和之前做法的效率。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">0</span> until arr.length <span class=\"keyword\">if</span> arr(i)&lt;<span class=\"number\">0</span>) <span class=\"keyword\">yield</span> i</span><br><span class=\"line\">c.reverse.trimStart(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> d = arr.toBuffer</span><br><span class=\"line\">c.foreach(d.remove)</span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter-04-Map和元组","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-04-Map和元组\n\nMap 映射 元组\n\n---\n\n### 创建Map并取值\nscala中的Map可以非常直观的创建，下面是创建一个不可变的Map\n\n\n```scala\nval map = Map(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 )\nmap(\"Allon\")\n//返回29\nmap(\"Allon\") = 30\n//会报错，因为这个Map默认为collection.immutable.Map的不可变Map。不能修改，也不能添加元素。\n```\n上面的map是不可以被修改的，如果想要一个可变的Map可以用\n\n\n```scala\nval map = collection.mutable.Map(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 )\nmap(\"Allon\") = 99\n//可以修改成功\n```\n操作符 \"->\" 也可以换成逗号。\n\nmap取值比较简单，就像上面一样。不过如果map中不存在对应的key，会抛错。这时我们可以用contains方法检查是否包含key。\n\n\n```scala\nif(map.contains(\"XXX\")) map(\"XXX\") else 0\n```\n上面的写法有些麻烦，更常用的是：\n\n\n```scala\nval value1 = map.getOrElse(\"Allon\",0)\n```\n像java中一样，map是有get方法的。它的返回是Option类的子类，要么是Some，要么是None。在模式匹配那章会具体讲Option类。\n\n\n```scala\nmap.get(\"Allon\")\n//返回 Option[Int] = Some(99)\n```\n\n### 更新Map中的值\n\n\n```scala\nval map = collection.mutable.Map(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 )\nmap +=  (\"Bob\" -> 63) \n//Map(Karen -> 54, Bob -> 63, Allon -> 29, Jerry -> 18)\n```\n如果更新过程中，不存在key，那么它会自动添加\n\n\n```scala\nmap(\"Koran\") = 77 \n//Map(Karen -> 54, Bob -> 63, Allon -> 29, Jerry -> 18, Koran -> 77)\n```\n删除，如果不存在该key，就当没发生。\n\n\n```scala\nmap -= \"Koran\"\n//Map(Karen -> 54, Bob -> 63, Allon -> 29, Jerry -> 18)\n```\n不能更新一个不可变Map，但是可以把它追加到其他Map上。\n\n*   累加过程中遇到冲突元素会update。\n*   不管是不是可变Map都支持这种操作。\n*   写法只能如下这么写，不可以直接两个Map直接相加。\n\n```scala\nmap + (\"Iresb\" -> 43,\"Karen\" -> 12)\n//Map(Karen -> 12, Allon -> 29, Bob -> 63, Iresb -> 43, Jerry -> 18)\n```\n也可以\n\n```scala\nvar map = collection.immutable.Map(\"Iresb\" -> 43,\"Karen\" -> 12)\nmap = map + (\"Abc\" -> 43,\"Kkk\" -> 12)\n```\n\n### 遍历Map和有序Map\n\n```scala\nfor((k, v) <- map) println(\"key:\" + k +\", \"+ \"value:\"+ v)\nmap.keyset //Set(Iresb, Karen, Abc, Kkk)\nmap.values //MapLike(43, 12, 43, 12)\nfor((k, v) <- map) yield (v, k)//对调k和v\n```\nscala中没有可变的tree map，下面两种是scala中的有序map。\n\n```scala\nval map = collection.immutable.SortedMap(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 ) //基于平衡树实现的有序map。它是不可变的！\n\nval map = collection.immutable.LinkedHashMap(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 ) //基于链表实现的有序map，顺序卽为插入顺序 \n```\n\n### 与java的互操作\nscala中没有可变tree map，我们可以使用java的API，从而把java的转成scala的map。\n\n```scala\nimport collection.JavaConversions.mapAsScalaMap\n\nval map = new java.util.TreeMap[String, Int]\nmap.put(\"Jerry\",18)\nmap += (\"Jerry\"->18)// 相当于\"map.+=(k -> v)\"，返回一个scala的map。从java的TreeMap直接返回scala的map，经历了一次“偷偷”（隐式）转换。\n\nval map: collection.mutable.Map[String, Int] = new java.util.TreeMap[String, Int]\n//经过修改后，再转换scala的普通map\n```\n除此之外，scala还可以从java.util.Properties转成scala的Map\n\n```scala\nimport collection.JavaConversions.propertiesAsScalaMap\nval props : collection.Map[String, String] = System.getProperties()\n```\n也可以相反的转换，把scala的Map给java的API用。\n\n```scala\nimport collection.JavaConversions.mapAsJavaMap\nimport java.awt.font.TextAttribute._ //引入java相关的枚举key\n\nval attrs = Map(FAMILY -> \"Serif\", SIZE -> 12) //scala的Map\nval font = new java.awt.Font(attrs) //该方法入参是一个Java的Map，这里其实是“偷偷”把attrs转成了java的Map。\n```\n### Tuple (元组)\n元组是不同类型的值的聚集；K->V是最简单的元组。它和数组的区别是：\n>* 元组内的元素不能修改。\n>* 元组为不同类型的数据聚集。\n>* 访问从1开始，而不是0。\n\n元组的定义和使用非常简单\n\n```scala\nval tuple1 = (1, 3.14, \"Fred\")\n// 本质上就是一个：val tuple1 = Tuple3[Int, Double, java.lang.String](1, 3.14, \"Fred\")\ntuple1._2 //第二个元素，首个元素为1不是0。\ntuple1 _2 //两种写都可以，只要别写成tuple1_2就可以了\n```\n\n一般，元组的元素用模式匹配来获取（后面一章会讲模式匹配）\n\n```scala\nval (first, second, third) = t\n/*\nfirst: Int = 1\nsecond: Double = 3.14\nthird: String = Fred\n*/\n\n//如果只需要部分元素可以用“_”省略\nval (first, second, _) = t\nfirst: Int = 1\nsecond: Double = 3.14\n/*\nfirst: Int = 1\nsecond: Double = 3.14\n*/\n```\n\n元组可以用在有多个返回结果的函数上。如：\n\n```scala\n\"New York\".partition(_.isUpper)\n// 返回(\"NY\",\"ew ork\"),分别是满足和不满足条件的字符。\n```\n\n### 拉链操作\n\n```scala\nval symbols = Array(\"<\", \"-\", \">\")\nval counts = Array(2, 10, 2)\nval pairs = symbols.zip(counts)\n//输出Array((<,2), (-,10), (>,2))\nval map = pairs.toMap //变为一个Map\n//输出Map(\"<\" -> 2, \"-\" -> 10, \">\" -> 2)\n```\n\n\n","source":"_posts/scala/Chapter-04-Map和元组.md","raw":"---\ntitle: 'Chapter-04-Map和元组'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-04-Map和元组\n\nMap 映射 元组\n\n---\n\n### 创建Map并取值\nscala中的Map可以非常直观的创建，下面是创建一个不可变的Map\n\n\n```scala\nval map = Map(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 )\nmap(\"Allon\")\n//返回29\nmap(\"Allon\") = 30\n//会报错，因为这个Map默认为collection.immutable.Map的不可变Map。不能修改，也不能添加元素。\n```\n上面的map是不可以被修改的，如果想要一个可变的Map可以用\n\n\n```scala\nval map = collection.mutable.Map(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 )\nmap(\"Allon\") = 99\n//可以修改成功\n```\n操作符 \"->\" 也可以换成逗号。\n\nmap取值比较简单，就像上面一样。不过如果map中不存在对应的key，会抛错。这时我们可以用contains方法检查是否包含key。\n\n\n```scala\nif(map.contains(\"XXX\")) map(\"XXX\") else 0\n```\n上面的写法有些麻烦，更常用的是：\n\n\n```scala\nval value1 = map.getOrElse(\"Allon\",0)\n```\n像java中一样，map是有get方法的。它的返回是Option类的子类，要么是Some，要么是None。在模式匹配那章会具体讲Option类。\n\n\n```scala\nmap.get(\"Allon\")\n//返回 Option[Int] = Some(99)\n```\n\n### 更新Map中的值\n\n\n```scala\nval map = collection.mutable.Map(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 )\nmap +=  (\"Bob\" -> 63) \n//Map(Karen -> 54, Bob -> 63, Allon -> 29, Jerry -> 18)\n```\n如果更新过程中，不存在key，那么它会自动添加\n\n\n```scala\nmap(\"Koran\") = 77 \n//Map(Karen -> 54, Bob -> 63, Allon -> 29, Jerry -> 18, Koran -> 77)\n```\n删除，如果不存在该key，就当没发生。\n\n\n```scala\nmap -= \"Koran\"\n//Map(Karen -> 54, Bob -> 63, Allon -> 29, Jerry -> 18)\n```\n不能更新一个不可变Map，但是可以把它追加到其他Map上。\n\n*   累加过程中遇到冲突元素会update。\n*   不管是不是可变Map都支持这种操作。\n*   写法只能如下这么写，不可以直接两个Map直接相加。\n\n```scala\nmap + (\"Iresb\" -> 43,\"Karen\" -> 12)\n//Map(Karen -> 12, Allon -> 29, Bob -> 63, Iresb -> 43, Jerry -> 18)\n```\n也可以\n\n```scala\nvar map = collection.immutable.Map(\"Iresb\" -> 43,\"Karen\" -> 12)\nmap = map + (\"Abc\" -> 43,\"Kkk\" -> 12)\n```\n\n### 遍历Map和有序Map\n\n```scala\nfor((k, v) <- map) println(\"key:\" + k +\", \"+ \"value:\"+ v)\nmap.keyset //Set(Iresb, Karen, Abc, Kkk)\nmap.values //MapLike(43, 12, 43, 12)\nfor((k, v) <- map) yield (v, k)//对调k和v\n```\nscala中没有可变的tree map，下面两种是scala中的有序map。\n\n```scala\nval map = collection.immutable.SortedMap(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 ) //基于平衡树实现的有序map。它是不可变的！\n\nval map = collection.immutable.LinkedHashMap(\"Allon\" -> 29, \"Jerry\" -> 18, \"Karen\" -> 54 ) //基于链表实现的有序map，顺序卽为插入顺序 \n```\n\n### 与java的互操作\nscala中没有可变tree map，我们可以使用java的API，从而把java的转成scala的map。\n\n```scala\nimport collection.JavaConversions.mapAsScalaMap\n\nval map = new java.util.TreeMap[String, Int]\nmap.put(\"Jerry\",18)\nmap += (\"Jerry\"->18)// 相当于\"map.+=(k -> v)\"，返回一个scala的map。从java的TreeMap直接返回scala的map，经历了一次“偷偷”（隐式）转换。\n\nval map: collection.mutable.Map[String, Int] = new java.util.TreeMap[String, Int]\n//经过修改后，再转换scala的普通map\n```\n除此之外，scala还可以从java.util.Properties转成scala的Map\n\n```scala\nimport collection.JavaConversions.propertiesAsScalaMap\nval props : collection.Map[String, String] = System.getProperties()\n```\n也可以相反的转换，把scala的Map给java的API用。\n\n```scala\nimport collection.JavaConversions.mapAsJavaMap\nimport java.awt.font.TextAttribute._ //引入java相关的枚举key\n\nval attrs = Map(FAMILY -> \"Serif\", SIZE -> 12) //scala的Map\nval font = new java.awt.Font(attrs) //该方法入参是一个Java的Map，这里其实是“偷偷”把attrs转成了java的Map。\n```\n### Tuple (元组)\n元组是不同类型的值的聚集；K->V是最简单的元组。它和数组的区别是：\n>* 元组内的元素不能修改。\n>* 元组为不同类型的数据聚集。\n>* 访问从1开始，而不是0。\n\n元组的定义和使用非常简单\n\n```scala\nval tuple1 = (1, 3.14, \"Fred\")\n// 本质上就是一个：val tuple1 = Tuple3[Int, Double, java.lang.String](1, 3.14, \"Fred\")\ntuple1._2 //第二个元素，首个元素为1不是0。\ntuple1 _2 //两种写都可以，只要别写成tuple1_2就可以了\n```\n\n一般，元组的元素用模式匹配来获取（后面一章会讲模式匹配）\n\n```scala\nval (first, second, third) = t\n/*\nfirst: Int = 1\nsecond: Double = 3.14\nthird: String = Fred\n*/\n\n//如果只需要部分元素可以用“_”省略\nval (first, second, _) = t\nfirst: Int = 1\nsecond: Double = 3.14\n/*\nfirst: Int = 1\nsecond: Double = 3.14\n*/\n```\n\n元组可以用在有多个返回结果的函数上。如：\n\n```scala\n\"New York\".partition(_.isUpper)\n// 返回(\"NY\",\"ew ork\"),分别是满足和不满足条件的字符。\n```\n\n### 拉链操作\n\n```scala\nval symbols = Array(\"<\", \"-\", \">\")\nval counts = Array(2, 10, 2)\nval pairs = symbols.zip(counts)\n//输出Array((<,2), (-,10), (>,2))\nval map = pairs.toMap //变为一个Map\n//输出Map(\"<\" -> 2, \"-\" -> 10, \">\" -> 2)\n```\n\n\n","slug":"scala/Chapter-04-Map和元组","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrh10007j5lyxk103uqx","content":"<h2><span id=\"chapter-04-map和元组\"> Chapter-04-Map和元组</span></h2>\n<p>Map 映射 元组</p>\n<hr>\n<h3><span id=\"创建map并取值\"> 创建Map并取值</span></h3>\n<p>scala中的Map可以非常直观的创建，下面是创建一个不可变的Map</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = <span class=\"type\">Map</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> )</span><br><span class=\"line\">map(<span class=\"string\">\"Allon\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回29</span></span><br><span class=\"line\">map(<span class=\"string\">\"Allon\"</span>) = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"comment\">//会报错，因为这个Map默认为collection.immutable.Map的不可变Map。不能修改，也不能添加元素。</span></span><br></pre></td></tr></table></figure>\n<p>上面的map是不可以被修改的，如果想要一个可变的Map可以用</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = collection.mutable.<span class=\"type\">Map</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> )</span><br><span class=\"line\">map(<span class=\"string\">\"Allon\"</span>) = <span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"comment\">//可以修改成功</span></span><br></pre></td></tr></table></figure>\n<p>操作符 “-&gt;” 也可以换成逗号。</p>\n<p>map取值比较简单，就像上面一样。不过如果map中不存在对应的key，会抛错。这时我们可以用contains方法检查是否包含key。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(map.contains(<span class=\"string\">\"XXX\"</span>)) map(<span class=\"string\">\"XXX\"</span>) <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>上面的写法有些麻烦，更常用的是：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> value1 = map.getOrElse(<span class=\"string\">\"Allon\"</span>,<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>像java中一样，map是有get方法的。它的返回是Option类的子类，要么是Some，要么是None。在模式匹配那章会具体讲Option类。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.get(<span class=\"string\">\"Allon\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 Option[Int] = Some(99)</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"更新map中的值\"> 更新Map中的值</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = collection.mutable.<span class=\"type\">Map</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> )</span><br><span class=\"line\">map +=  (<span class=\"string\">\"Bob\"</span> -&gt; <span class=\"number\">63</span>) </span><br><span class=\"line\"><span class=\"comment\">//Map(Karen -&gt; 54, Bob -&gt; 63, Allon -&gt; 29, Jerry -&gt; 18)</span></span><br></pre></td></tr></table></figure>\n<p>如果更新过程中，不存在key，那么它会自动添加</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map(<span class=\"string\">\"Koran\"</span>) = <span class=\"number\">77</span> </span><br><span class=\"line\"><span class=\"comment\">//Map(Karen -&gt; 54, Bob -&gt; 63, Allon -&gt; 29, Jerry -&gt; 18, Koran -&gt; 77)</span></span><br></pre></td></tr></table></figure>\n<p>删除，如果不存在该key，就当没发生。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map -= <span class=\"string\">\"Koran\"</span></span><br><span class=\"line\"><span class=\"comment\">//Map(Karen -&gt; 54, Bob -&gt; 63, Allon -&gt; 29, Jerry -&gt; 18)</span></span><br></pre></td></tr></table></figure>\n<p>不能更新一个不可变Map，但是可以把它追加到其他Map上。</p>\n<ul>\n<li>累加过程中遇到冲突元素会update。</li>\n<li>不管是不是可变Map都支持这种操作。</li>\n<li>写法只能如下这么写，不可以直接两个Map直接相加。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map + (<span class=\"string\">\"Iresb\"</span> -&gt; <span class=\"number\">43</span>,<span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"comment\">//Map(Karen -&gt; 12, Allon -&gt; 29, Bob -&gt; 63, Iresb -&gt; 43, Jerry -&gt; 18)</span></span><br></pre></td></tr></table></figure>\n<p>也可以</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = collection.immutable.<span class=\"type\">Map</span>(<span class=\"string\">\"Iresb\"</span> -&gt; <span class=\"number\">43</span>,<span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">12</span>)</span><br><span class=\"line\">map = map + (<span class=\"string\">\"Abc\"</span> -&gt; <span class=\"number\">43</span>,<span class=\"string\">\"Kkk\"</span> -&gt; <span class=\"number\">12</span>)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"遍历map和有序map\"> 遍历Map和有序Map</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>((k, v) &lt;- map) println(<span class=\"string\">\"key:\"</span> + k +<span class=\"string\">\", \"</span>+ <span class=\"string\">\"value:\"</span>+ v)</span><br><span class=\"line\">map.keyset <span class=\"comment\">//Set(Iresb, Karen, Abc, Kkk)</span></span><br><span class=\"line\">map.values <span class=\"comment\">//MapLike(43, 12, 43, 12)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((k, v) &lt;- map) <span class=\"keyword\">yield</span> (v, k)<span class=\"comment\">//对调k和v</span></span><br></pre></td></tr></table></figure>\n<p>scala中没有可变的tree map，下面两种是scala中的有序map。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = collection.immutable.<span class=\"type\">SortedMap</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> ) <span class=\"comment\">//基于平衡树实现的有序map。它是不可变的！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> map = collection.immutable.<span class=\"type\">LinkedHashMap</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> ) <span class=\"comment\">//基于链表实现的有序map，顺序卽为插入顺序</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"与java的互操作\"> 与java的互操作</span></h3>\n<p>scala中没有可变tree map，我们可以使用java的API，从而把java的转成scala的map。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collection.<span class=\"type\">JavaConversions</span>.mapAsScalaMap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> map = <span class=\"keyword\">new</span> java.util.<span class=\"type\">TreeMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\">map.put(<span class=\"string\">\"Jerry\"</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\">map += (<span class=\"string\">\"Jerry\"</span>-&gt;<span class=\"number\">18</span>)<span class=\"comment\">// 相当于\"map.+=(k -&gt; v)\"，返回一个scala的map。从java的TreeMap直接返回scala的map，经历了一次“偷偷”（隐式）转换。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> map: collection.mutable.<span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>] = <span class=\"keyword\">new</span> java.util.<span class=\"type\">TreeMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\"><span class=\"comment\">//经过修改后，再转换scala的普通map</span></span><br></pre></td></tr></table></figure>\n<p>除此之外，scala还可以从java.util.Properties转成scala的Map</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collection.<span class=\"type\">JavaConversions</span>.propertiesAsScalaMap</span><br><span class=\"line\"><span class=\"keyword\">val</span> props : collection.<span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">String</span>] = <span class=\"type\">System</span>.getProperties()</span><br></pre></td></tr></table></figure>\n<p>也可以相反的转换，把scala的Map给java的API用。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collection.<span class=\"type\">JavaConversions</span>.mapAsJavaMap</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.font.<span class=\"type\">TextAttribute</span>._ <span class=\"comment\">//引入java相关的枚举key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> attrs = <span class=\"type\">Map</span>(<span class=\"type\">FAMILY</span> -&gt; <span class=\"string\">\"Serif\"</span>, <span class=\"type\">SIZE</span> -&gt; <span class=\"number\">12</span>) <span class=\"comment\">//scala的Map</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> font = <span class=\"keyword\">new</span> java.awt.<span class=\"type\">Font</span>(attrs) <span class=\"comment\">//该方法入参是一个Java的Map，这里其实是“偷偷”把attrs转成了java的Map。</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"tuple-元组\"> Tuple (元组)</span></h3>\n<p>元组是不同类型的值的聚集；K-&gt;V是最简单的元组。它和数组的区别是：</p>\n<blockquote>\n<ul>\n<li>元组内的元素不能修改。</li>\n<li>元组为不同类型的数据聚集。</li>\n<li>访问从1开始，而不是0。</li>\n</ul>\n</blockquote>\n<p>元组的定义和使用非常简单</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">3.14</span>, <span class=\"string\">\"Fred\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 本质上就是一个：val tuple1 = Tuple3[Int, Double, java.lang.String](1, 3.14, \"Fred\")</span></span><br><span class=\"line\">tuple1._2 <span class=\"comment\">//第二个元素，首个元素为1不是0。</span></span><br><span class=\"line\">tuple1 _2 <span class=\"comment\">//两种写都可以，只要别写成tuple1_2就可以了</span></span><br></pre></td></tr></table></figure>\n<p>一般，元组的元素用模式匹配来获取（后面一章会讲模式匹配）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> (first, second, third) = t</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">first: Int = 1</span></span><br><span class=\"line\"><span class=\"comment\">second: Double = 3.14</span></span><br><span class=\"line\"><span class=\"comment\">third: String = Fred</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果只需要部分元素可以用“_”省略</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> (first, second, _) = t</span><br><span class=\"line\">first: <span class=\"type\">Int</span> = <span class=\"number\">1</span></span><br><span class=\"line\">second: <span class=\"type\">Double</span> = <span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">first: Int = 1</span></span><br><span class=\"line\"><span class=\"comment\">second: Double = 3.14</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>元组可以用在有多个返回结果的函数上。如：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"New York\"</span>.partition(_.isUpper)</span><br><span class=\"line\"><span class=\"comment\">// 返回(\"NY\",\"ew ork\"),分别是满足和不满足条件的字符。</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"拉链操作\"> 拉链操作</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> symbols = <span class=\"type\">Array</span>(<span class=\"string\">\"&lt;\"</span>, <span class=\"string\">\"-\"</span>, <span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> counts = <span class=\"type\">Array</span>(<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> pairs = symbols.zip(counts)</span><br><span class=\"line\"><span class=\"comment\">//输出Array((&lt;,2), (-,10), (&gt;,2))</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> map = pairs.toMap <span class=\"comment\">//变为一个Map</span></span><br><span class=\"line\"><span class=\"comment\">//输出Map(\"&lt;\" -&gt; 2, \"-\" -&gt; 10, \"&gt;\" -&gt; 2)</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-04-map和元组\"><a class=\"markdownIt-Anchor\" href=\"#chapter-04-map和元组\"></a> Chapter-04-Map和元组</h2>\n<p>Map 映射 元组</p>\n<hr>\n<h3 id=\"创建map并取值\"><a class=\"markdownIt-Anchor\" href=\"#创建map并取值\"></a> 创建Map并取值</h3>\n<p>scala中的Map可以非常直观的创建，下面是创建一个不可变的Map</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = <span class=\"type\">Map</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> )</span><br><span class=\"line\">map(<span class=\"string\">\"Allon\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回29</span></span><br><span class=\"line\">map(<span class=\"string\">\"Allon\"</span>) = <span class=\"number\">30</span></span><br><span class=\"line\"><span class=\"comment\">//会报错，因为这个Map默认为collection.immutable.Map的不可变Map。不能修改，也不能添加元素。</span></span><br></pre></td></tr></table></figure>\n<p>上面的map是不可以被修改的，如果想要一个可变的Map可以用</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = collection.mutable.<span class=\"type\">Map</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> )</span><br><span class=\"line\">map(<span class=\"string\">\"Allon\"</span>) = <span class=\"number\">99</span></span><br><span class=\"line\"><span class=\"comment\">//可以修改成功</span></span><br></pre></td></tr></table></figure>\n<p>操作符 “-&gt;” 也可以换成逗号。</p>\n<p>map取值比较简单，就像上面一样。不过如果map中不存在对应的key，会抛错。这时我们可以用contains方法检查是否包含key。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(map.contains(<span class=\"string\">\"XXX\"</span>)) map(<span class=\"string\">\"XXX\"</span>) <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>上面的写法有些麻烦，更常用的是：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> value1 = map.getOrElse(<span class=\"string\">\"Allon\"</span>,<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>像java中一样，map是有get方法的。它的返回是Option类的子类，要么是Some，要么是None。在模式匹配那章会具体讲Option类。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.get(<span class=\"string\">\"Allon\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 Option[Int] = Some(99)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"更新map中的值\"><a class=\"markdownIt-Anchor\" href=\"#更新map中的值\"></a> 更新Map中的值</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = collection.mutable.<span class=\"type\">Map</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> )</span><br><span class=\"line\">map +=  (<span class=\"string\">\"Bob\"</span> -&gt; <span class=\"number\">63</span>) </span><br><span class=\"line\"><span class=\"comment\">//Map(Karen -&gt; 54, Bob -&gt; 63, Allon -&gt; 29, Jerry -&gt; 18)</span></span><br></pre></td></tr></table></figure>\n<p>如果更新过程中，不存在key，那么它会自动添加</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map(<span class=\"string\">\"Koran\"</span>) = <span class=\"number\">77</span> </span><br><span class=\"line\"><span class=\"comment\">//Map(Karen -&gt; 54, Bob -&gt; 63, Allon -&gt; 29, Jerry -&gt; 18, Koran -&gt; 77)</span></span><br></pre></td></tr></table></figure>\n<p>删除，如果不存在该key，就当没发生。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map -= <span class=\"string\">\"Koran\"</span></span><br><span class=\"line\"><span class=\"comment\">//Map(Karen -&gt; 54, Bob -&gt; 63, Allon -&gt; 29, Jerry -&gt; 18)</span></span><br></pre></td></tr></table></figure>\n<p>不能更新一个不可变Map，但是可以把它追加到其他Map上。</p>\n<ul>\n<li>累加过程中遇到冲突元素会update。</li>\n<li>不管是不是可变Map都支持这种操作。</li>\n<li>写法只能如下这么写，不可以直接两个Map直接相加。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map + (<span class=\"string\">\"Iresb\"</span> -&gt; <span class=\"number\">43</span>,<span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"comment\">//Map(Karen -&gt; 12, Allon -&gt; 29, Bob -&gt; 63, Iresb -&gt; 43, Jerry -&gt; 18)</span></span><br></pre></td></tr></table></figure>\n<p>也可以</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = collection.immutable.<span class=\"type\">Map</span>(<span class=\"string\">\"Iresb\"</span> -&gt; <span class=\"number\">43</span>,<span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">12</span>)</span><br><span class=\"line\">map = map + (<span class=\"string\">\"Abc\"</span> -&gt; <span class=\"number\">43</span>,<span class=\"string\">\"Kkk\"</span> -&gt; <span class=\"number\">12</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"遍历map和有序map\"><a class=\"markdownIt-Anchor\" href=\"#遍历map和有序map\"></a> 遍历Map和有序Map</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>((k, v) &lt;- map) println(<span class=\"string\">\"key:\"</span> + k +<span class=\"string\">\", \"</span>+ <span class=\"string\">\"value:\"</span>+ v)</span><br><span class=\"line\">map.keyset <span class=\"comment\">//Set(Iresb, Karen, Abc, Kkk)</span></span><br><span class=\"line\">map.values <span class=\"comment\">//MapLike(43, 12, 43, 12)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((k, v) &lt;- map) <span class=\"keyword\">yield</span> (v, k)<span class=\"comment\">//对调k和v</span></span><br></pre></td></tr></table></figure>\n<p>scala中没有可变的tree map，下面两种是scala中的有序map。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map = collection.immutable.<span class=\"type\">SortedMap</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> ) <span class=\"comment\">//基于平衡树实现的有序map。它是不可变的！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> map = collection.immutable.<span class=\"type\">LinkedHashMap</span>(<span class=\"string\">\"Allon\"</span> -&gt; <span class=\"number\">29</span>, <span class=\"string\">\"Jerry\"</span> -&gt; <span class=\"number\">18</span>, <span class=\"string\">\"Karen\"</span> -&gt; <span class=\"number\">54</span> ) <span class=\"comment\">//基于链表实现的有序map，顺序卽为插入顺序</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"与java的互操作\"><a class=\"markdownIt-Anchor\" href=\"#与java的互操作\"></a> 与java的互操作</h3>\n<p>scala中没有可变tree map，我们可以使用java的API，从而把java的转成scala的map。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collection.<span class=\"type\">JavaConversions</span>.mapAsScalaMap</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> map = <span class=\"keyword\">new</span> java.util.<span class=\"type\">TreeMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\">map.put(<span class=\"string\">\"Jerry\"</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\">map += (<span class=\"string\">\"Jerry\"</span>-&gt;<span class=\"number\">18</span>)<span class=\"comment\">// 相当于\"map.+=(k -&gt; v)\"，返回一个scala的map。从java的TreeMap直接返回scala的map，经历了一次“偷偷”（隐式）转换。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> map: collection.mutable.<span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>] = <span class=\"keyword\">new</span> java.util.<span class=\"type\">TreeMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\"><span class=\"comment\">//经过修改后，再转换scala的普通map</span></span><br></pre></td></tr></table></figure>\n<p>除此之外，scala还可以从java.util.Properties转成scala的Map</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collection.<span class=\"type\">JavaConversions</span>.propertiesAsScalaMap</span><br><span class=\"line\"><span class=\"keyword\">val</span> props : collection.<span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">String</span>] = <span class=\"type\">System</span>.getProperties()</span><br></pre></td></tr></table></figure>\n<p>也可以相反的转换，把scala的Map给java的API用。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collection.<span class=\"type\">JavaConversions</span>.mapAsJavaMap</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.font.<span class=\"type\">TextAttribute</span>._ <span class=\"comment\">//引入java相关的枚举key</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> attrs = <span class=\"type\">Map</span>(<span class=\"type\">FAMILY</span> -&gt; <span class=\"string\">\"Serif\"</span>, <span class=\"type\">SIZE</span> -&gt; <span class=\"number\">12</span>) <span class=\"comment\">//scala的Map</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> font = <span class=\"keyword\">new</span> java.awt.<span class=\"type\">Font</span>(attrs) <span class=\"comment\">//该方法入参是一个Java的Map，这里其实是“偷偷”把attrs转成了java的Map。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"tuple-元组\"><a class=\"markdownIt-Anchor\" href=\"#tuple-元组\"></a> Tuple (元组)</h3>\n<p>元组是不同类型的值的聚集；K-&gt;V是最简单的元组。它和数组的区别是：</p>\n<blockquote>\n<ul>\n<li>元组内的元素不能修改。</li>\n<li>元组为不同类型的数据聚集。</li>\n<li>访问从1开始，而不是0。</li>\n</ul>\n</blockquote>\n<p>元组的定义和使用非常简单</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> tuple1 = (<span class=\"number\">1</span>, <span class=\"number\">3.14</span>, <span class=\"string\">\"Fred\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 本质上就是一个：val tuple1 = Tuple3[Int, Double, java.lang.String](1, 3.14, \"Fred\")</span></span><br><span class=\"line\">tuple1._2 <span class=\"comment\">//第二个元素，首个元素为1不是0。</span></span><br><span class=\"line\">tuple1 _2 <span class=\"comment\">//两种写都可以，只要别写成tuple1_2就可以了</span></span><br></pre></td></tr></table></figure>\n<p>一般，元组的元素用模式匹配来获取（后面一章会讲模式匹配）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> (first, second, third) = t</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">first: Int = 1</span></span><br><span class=\"line\"><span class=\"comment\">second: Double = 3.14</span></span><br><span class=\"line\"><span class=\"comment\">third: String = Fred</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果只需要部分元素可以用“_”省略</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> (first, second, _) = t</span><br><span class=\"line\">first: <span class=\"type\">Int</span> = <span class=\"number\">1</span></span><br><span class=\"line\">second: <span class=\"type\">Double</span> = <span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">first: Int = 1</span></span><br><span class=\"line\"><span class=\"comment\">second: Double = 3.14</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>元组可以用在有多个返回结果的函数上。如：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"New York\"</span>.partition(_.isUpper)</span><br><span class=\"line\"><span class=\"comment\">// 返回(\"NY\",\"ew ork\"),分别是满足和不满足条件的字符。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"拉链操作\"><a class=\"markdownIt-Anchor\" href=\"#拉链操作\"></a> 拉链操作</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> symbols = <span class=\"type\">Array</span>(<span class=\"string\">\"&lt;\"</span>, <span class=\"string\">\"-\"</span>, <span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> counts = <span class=\"type\">Array</span>(<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> pairs = symbols.zip(counts)</span><br><span class=\"line\"><span class=\"comment\">//输出Array((&lt;,2), (-,10), (&gt;,2))</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> map = pairs.toMap <span class=\"comment\">//变为一个Map</span></span><br><span class=\"line\"><span class=\"comment\">//输出Map(\"&lt;\" -&gt; 2, \"-\" -&gt; 10, \"&gt;\" -&gt; 2)</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter-05-类","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-05-类\n\n类 class\n\n---\n\n### 简单类和无参方法\nscala中的类简单的和java相似，主要设计和习惯区别是：\n\n* scala类中的方法默认为public的\n* 字段必须初始化\n* 类只有public的，所以不声明public关键字了（经常一个scala源文件会包含很多个类）\n\n```scala\nclass Counter {\n    private var value = 0 //你必须初始化字段\n    def increment() { value += 1 } //默认是public的。\n    def current() = value\n}\n\nval counter1 = new Counter\ncounter1.increment() // 当修改值时，最好加上“()”\ncounter1.current // 查询时不使用“()”，好一点\n```\n\n### getter和setter\n在scala中，每个字段默认提供了getter和setter方法。在scala中的getter和setter是这样\n\n>* age 等价于get方法；age_= 等价于set方法\n    \n\n```scala\nclass Person {\n    var age = 0\n}\n\n val person = new Person\n person age // 这么写和person.age是一样的\n person.age=(20) // 也可以很古怪的这么写 person age_= 10 ,因为方法名叫“.get_=” 这...！\n```\n>* jvm的内部实现会把上面的代码生成一个private的age和对应的getter、setter方法。\n\n\n//建一个Person.scala文件把上面的Person代码放进去。在命令行中执行以下编译代码\n\n    scalac Person.scala\n//反编译\n\n    javap -private Person\n可以看到输出的结果，表明jvm的内部实现会把上面的代码生成一个private的age和对应的getter、setter方法。\n```bash\nCompiled from \"Person.scala\"\npublic class Person {\n  private int age;\n  public int age();//getter\n  public void age_$eq(int);//setter ，java中不允许使用等号做为方法名，使用了“$eq”替代。\n  public Person();\n}\n```\n* 如果字段是私有的，getter和setter也是私有的。\n* 如果字段是val的，只有getter被自动生成。(val已经不能修改，所以没必要提供setter)\n* 如果将字段声明为private[this]，就不会再有getter和setter生成。\n\n总结\n\n* var的成员变量自动生成一个getter和setter\n* val的成员变量自动生成一个getter\n* scala中不能生成只有setter的成员变量\n\n### 对象私有字段\n和java一样，一个对象的方法内可以访问的其他任何该类对象的私有字段。（类私有字段）\n\n```scala\nclass Counter {\n    private var value = 0\n    def increment() { value += 1 }\n    def isLess(other : Counter) = value < other.value\n    //可以访问另一个对象的私有字段\n}\n```\n同时在scala中，权限可以控制的更细。如果字段加上private[this]修饰，则不能跨对象访问私有字段。（对象私有字段，SmallTalk等语言中也有对象级私有）\n\n```scala\nprivate[this] var value = 0 //只能自己用\n```\nprivate[this]中的this也可以换成自己的类名，或者外部类的类名（只有这两种选择，其他的会在编译期报错）。表示只能指定的类或者伴生对象（对象那章会讲）来调用。\n### Bean属性\n由于scala的默认生成的getter和setter和java中的规范不同（java bean是getXXX和setXXX），为了解决一些需要这种规范的场景，scala提供了兼容的注解来@BeanProperty。这样会同时生成两种风格的getter和setter.\n\n```scala\nimport scala.beans.BeanProperty\nclass Person {\n    @BeanProperty var name: String = _\n}\n// 将自动生成以下四个方法：\n// name: String\n// name_ = (newValue: String): Unit\n// getName(): String\n// setName(newValue: String): Unit\n```\n\n### 辅助构造器\nscala中的构造函数分主辅。辅助的构造器和java基本相同，区别于：\n>* 辅助构造器名为this。（修改类名变得更容易了）\n>* 辅助构造器方法内的第一行，必须调用其他主、辅助构造器。\n\n```scala\nclass Person{\n  private var name = \"\"\n  private var age = 0\n\n  def this(name:String){\n    this() //调用主构造器\n    this.name = name\n  }\n\n  def this(name:String, age:Int){\n    this(name) // 调用前一个辅助构造器\n    this.age = age\n  }\n}\n```\n### 主构造器\n主构造器在类名之后直接定义，如果类名后什么也不写，像java一样会默认提供一个无参的主构造器。\n\n```scala\nclass Person(val name: String, val age: Int) \n```\n以上语句换成java代码如下（始觉大道至简！）\n```java\npublic class Person {\n    private String name;\n    private int age;\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    public String getName(){ return this.name; }\n    public int getAge(){ return this.age }\n    public void setName(String name){\n        this.name = name;\n    }\n    public void setAge(int age){\n        this.age = age;\n    }\n}\n```\n直接写在类体中的执行语句，会在主构造器中执行。\n\n```scala\nclass Person(val name: String, val age: Int) {\n    println(\"主构造器被调用！\")\n    def desc = name + \" is \" + age + \" years old \"\n}\nval person = new Person(\"allon\", 29)\nprintln(per desc)\n//输出\n// 主构造器被调用！\n// allon is 29 years old \n```\n常见的初始化配置文件等操作，就可以在类体中直接操作，因为它会做为主构造器中的一部分被执行。\n\n主构造器中的参数实际是字段，它同样可以使用一些关键字来修饰。val\\var\\private\\private[String]。也可以完全不加修饰关键字。\n\n```scala\nclass Person(name: String, age:Int) {\n    def desc = name + \" is \" + age + \" years old \"\n}\n```\n以上主构造器的参数如果在该类内部方法中被使用了，它就相当于private[String]的效果，会自动升级为字段。如果没有被使用过，它就只是一个普通的主构造器中可以使用的参数而已。\n\n也可以让主构造器变成private的。这样只能通过辅助构造器来创建Person对象了。\n\n```scala\nclass Person private(val name: String, val age: Int) \n```\n\n> 可以把类看作一个函数，主构造器参数就是这个函数的参数，那么类的内部任何位置当然可以使用该参数。只是当方法内部使用它时，它就会自动升级为字段而已。\n\n\n### 内部类\n在scala中，几乎可以随意嵌套语法结构。函数中可以定义函数，类中可以定义类。\n\n```scala\nimport collection.mutable.ArrayBuffer\n\nclass Network {\n    class Member\n    \n    pirvate val members = new ArrayBuffer[Member]\n    \n    def join(m:Member) = {\n        members += m\n    }\n}\n\nval chatter =  new Network\nval myFace = new Network\n```\n> 在java中，内部类从属于外部类，scala中内部类从属于外部类对象。就像上面的代码中，myFace.Member和chatter.Member是两个不同的类。\n\n\n```scala\n  val chatter =  new Network\n  val myFace = new Network\n  val chatterMember = new chatter.Member\n  val myFaceMember = new myFace.Member\n\n  chatter.join(chatterMember)\n  chatter.join(myFaceMember) //这里会报错，因为myFace.Member和chatter.Member是两个不同的类，members的泛型冲突了。\n```\n\n如果想解决以上问题，可以在到定义处把Member换成Netwok#Member。\n\n\n```scala\n  private val members = new ArrayBuffer[Network#Member]\n\n  def join(m: Network#Member) = {\n    members += m\n  }\n```\n\nNetwork#Member的含义是，“任何Network的Member”。这种方式叫类型投影。后面也会讲到类型投影。\n### 重命名外部类this引用\n和java一样，在内部类中，可以通过“外部类.this”的方式来访问外部类的this引用。同时，在scala中你也可以为这个引用定义一个别名。\n\n\n```scala\nclass Network(val name: String) {\n  outer => //outer指向的是Network.this。可以用任何合法名来定义它，self在内部类中可能会引发岐义。\n\n  class Member {\n    def desc = outer.name\n  }\n}\n```\n\n\n","source":"_posts/scala/Chapter-05-类.md","raw":"---\ntitle: 'Chapter-05-类'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-05-类\n\n类 class\n\n---\n\n### 简单类和无参方法\nscala中的类简单的和java相似，主要设计和习惯区别是：\n\n* scala类中的方法默认为public的\n* 字段必须初始化\n* 类只有public的，所以不声明public关键字了（经常一个scala源文件会包含很多个类）\n\n```scala\nclass Counter {\n    private var value = 0 //你必须初始化字段\n    def increment() { value += 1 } //默认是public的。\n    def current() = value\n}\n\nval counter1 = new Counter\ncounter1.increment() // 当修改值时，最好加上“()”\ncounter1.current // 查询时不使用“()”，好一点\n```\n\n### getter和setter\n在scala中，每个字段默认提供了getter和setter方法。在scala中的getter和setter是这样\n\n>* age 等价于get方法；age_= 等价于set方法\n    \n\n```scala\nclass Person {\n    var age = 0\n}\n\n val person = new Person\n person age // 这么写和person.age是一样的\n person.age=(20) // 也可以很古怪的这么写 person age_= 10 ,因为方法名叫“.get_=” 这...！\n```\n>* jvm的内部实现会把上面的代码生成一个private的age和对应的getter、setter方法。\n\n\n//建一个Person.scala文件把上面的Person代码放进去。在命令行中执行以下编译代码\n\n    scalac Person.scala\n//反编译\n\n    javap -private Person\n可以看到输出的结果，表明jvm的内部实现会把上面的代码生成一个private的age和对应的getter、setter方法。\n```bash\nCompiled from \"Person.scala\"\npublic class Person {\n  private int age;\n  public int age();//getter\n  public void age_$eq(int);//setter ，java中不允许使用等号做为方法名，使用了“$eq”替代。\n  public Person();\n}\n```\n* 如果字段是私有的，getter和setter也是私有的。\n* 如果字段是val的，只有getter被自动生成。(val已经不能修改，所以没必要提供setter)\n* 如果将字段声明为private[this]，就不会再有getter和setter生成。\n\n总结\n\n* var的成员变量自动生成一个getter和setter\n* val的成员变量自动生成一个getter\n* scala中不能生成只有setter的成员变量\n\n### 对象私有字段\n和java一样，一个对象的方法内可以访问的其他任何该类对象的私有字段。（类私有字段）\n\n```scala\nclass Counter {\n    private var value = 0\n    def increment() { value += 1 }\n    def isLess(other : Counter) = value < other.value\n    //可以访问另一个对象的私有字段\n}\n```\n同时在scala中，权限可以控制的更细。如果字段加上private[this]修饰，则不能跨对象访问私有字段。（对象私有字段，SmallTalk等语言中也有对象级私有）\n\n```scala\nprivate[this] var value = 0 //只能自己用\n```\nprivate[this]中的this也可以换成自己的类名，或者外部类的类名（只有这两种选择，其他的会在编译期报错）。表示只能指定的类或者伴生对象（对象那章会讲）来调用。\n### Bean属性\n由于scala的默认生成的getter和setter和java中的规范不同（java bean是getXXX和setXXX），为了解决一些需要这种规范的场景，scala提供了兼容的注解来@BeanProperty。这样会同时生成两种风格的getter和setter.\n\n```scala\nimport scala.beans.BeanProperty\nclass Person {\n    @BeanProperty var name: String = _\n}\n// 将自动生成以下四个方法：\n// name: String\n// name_ = (newValue: String): Unit\n// getName(): String\n// setName(newValue: String): Unit\n```\n\n### 辅助构造器\nscala中的构造函数分主辅。辅助的构造器和java基本相同，区别于：\n>* 辅助构造器名为this。（修改类名变得更容易了）\n>* 辅助构造器方法内的第一行，必须调用其他主、辅助构造器。\n\n```scala\nclass Person{\n  private var name = \"\"\n  private var age = 0\n\n  def this(name:String){\n    this() //调用主构造器\n    this.name = name\n  }\n\n  def this(name:String, age:Int){\n    this(name) // 调用前一个辅助构造器\n    this.age = age\n  }\n}\n```\n### 主构造器\n主构造器在类名之后直接定义，如果类名后什么也不写，像java一样会默认提供一个无参的主构造器。\n\n```scala\nclass Person(val name: String, val age: Int) \n```\n以上语句换成java代码如下（始觉大道至简！）\n```java\npublic class Person {\n    private String name;\n    private int age;\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    public String getName(){ return this.name; }\n    public int getAge(){ return this.age }\n    public void setName(String name){\n        this.name = name;\n    }\n    public void setAge(int age){\n        this.age = age;\n    }\n}\n```\n直接写在类体中的执行语句，会在主构造器中执行。\n\n```scala\nclass Person(val name: String, val age: Int) {\n    println(\"主构造器被调用！\")\n    def desc = name + \" is \" + age + \" years old \"\n}\nval person = new Person(\"allon\", 29)\nprintln(per desc)\n//输出\n// 主构造器被调用！\n// allon is 29 years old \n```\n常见的初始化配置文件等操作，就可以在类体中直接操作，因为它会做为主构造器中的一部分被执行。\n\n主构造器中的参数实际是字段，它同样可以使用一些关键字来修饰。val\\var\\private\\private[String]。也可以完全不加修饰关键字。\n\n```scala\nclass Person(name: String, age:Int) {\n    def desc = name + \" is \" + age + \" years old \"\n}\n```\n以上主构造器的参数如果在该类内部方法中被使用了，它就相当于private[String]的效果，会自动升级为字段。如果没有被使用过，它就只是一个普通的主构造器中可以使用的参数而已。\n\n也可以让主构造器变成private的。这样只能通过辅助构造器来创建Person对象了。\n\n```scala\nclass Person private(val name: String, val age: Int) \n```\n\n> 可以把类看作一个函数，主构造器参数就是这个函数的参数，那么类的内部任何位置当然可以使用该参数。只是当方法内部使用它时，它就会自动升级为字段而已。\n\n\n### 内部类\n在scala中，几乎可以随意嵌套语法结构。函数中可以定义函数，类中可以定义类。\n\n```scala\nimport collection.mutable.ArrayBuffer\n\nclass Network {\n    class Member\n    \n    pirvate val members = new ArrayBuffer[Member]\n    \n    def join(m:Member) = {\n        members += m\n    }\n}\n\nval chatter =  new Network\nval myFace = new Network\n```\n> 在java中，内部类从属于外部类，scala中内部类从属于外部类对象。就像上面的代码中，myFace.Member和chatter.Member是两个不同的类。\n\n\n```scala\n  val chatter =  new Network\n  val myFace = new Network\n  val chatterMember = new chatter.Member\n  val myFaceMember = new myFace.Member\n\n  chatter.join(chatterMember)\n  chatter.join(myFaceMember) //这里会报错，因为myFace.Member和chatter.Member是两个不同的类，members的泛型冲突了。\n```\n\n如果想解决以上问题，可以在到定义处把Member换成Netwok#Member。\n\n\n```scala\n  private val members = new ArrayBuffer[Network#Member]\n\n  def join(m: Network#Member) = {\n    members += m\n  }\n```\n\nNetwork#Member的含义是，“任何Network的Member”。这种方式叫类型投影。后面也会讲到类型投影。\n### 重命名外部类this引用\n和java一样，在内部类中，可以通过“外部类.this”的方式来访问外部类的this引用。同时，在scala中你也可以为这个引用定义一个别名。\n\n\n```scala\nclass Network(val name: String) {\n  outer => //outer指向的是Network.this。可以用任何合法名来定义它，self在内部类中可能会引发岐义。\n\n  class Member {\n    def desc = outer.name\n  }\n}\n```\n\n\n","slug":"scala/Chapter-05-类","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrh20008j5ly2jq32e0b","content":"<h2><span id=\"chapter-05-类\"> Chapter-05-类</span></h2>\n<p>类 class</p>\n<hr>\n<h3><span id=\"简单类和无参方法\"> 简单类和无参方法</span></h3>\n<p>scala中的类简单的和java相似，主要设计和习惯区别是：</p>\n<ul>\n<li>scala类中的方法默认为public的</li>\n<li>字段必须初始化</li>\n<li>类只有public的，所以不声明public关键字了（经常一个scala源文件会包含很多个类）</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> value = <span class=\"number\">0</span> <span class=\"comment\">//你必须初始化字段</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increment</span></span>() &#123; value += <span class=\"number\">1</span> &#125; <span class=\"comment\">//默认是public的。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">current</span></span>() = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> counter1 = <span class=\"keyword\">new</span> <span class=\"type\">Counter</span></span><br><span class=\"line\">counter1.increment() <span class=\"comment\">// 当修改值时，最好加上“()”</span></span><br><span class=\"line\">counter1.current <span class=\"comment\">// 查询时不使用“()”，好一点</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"getter和setter\"> getter和setter</span></h3>\n<p>在scala中，每个字段默认提供了getter和setter方法。在scala中的getter和setter是这样</p>\n<blockquote>\n<ul>\n<li>age 等价于get方法；age_= 等价于set方法</li>\n</ul>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">val</span> person = <span class=\"keyword\">new</span> <span class=\"type\">Person</span></span><br><span class=\"line\"> person age <span class=\"comment\">// 这么写和person.age是一样的</span></span><br><span class=\"line\"> person.age=(<span class=\"number\">20</span>) <span class=\"comment\">// 也可以很古怪的这么写 person age_= 10 ,因为方法名叫“.get_=” 这...！</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>jvm的内部实现会把上面的代码生成一个private的age和对应的getter、setter方法。</li>\n</ul>\n</blockquote>\n<p><a href=\"//xn--Person-9m7iglt94k.xn--scalaPerson-4p8ql2gnhl86d119cmvjiib868q6hgws9k7u8a\">//建一个Person.scala文件把上面的Person代码放进去</a>。在命令行中执行以下编译代码</p>\n<pre><code>scalac Person.scala\n</code></pre>\n<p>//反编译</p>\n<pre><code>javap -private Person\n</code></pre>\n<p>可以看到输出的结果，表明jvm的内部实现会把上面的代码生成一个private的age和对应的getter、setter方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"Person.scala\"</span></span><br><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">  private int age;</span><br><span class=\"line\">  public int age();//getter</span><br><span class=\"line\">  public void age_<span class=\"variable\">$eq</span>(int);//setter ，java中不允许使用等号做为方法名，使用了“<span class=\"variable\">$eq</span>”替代。</span><br><span class=\"line\">  public Person();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果字段是私有的，getter和setter也是私有的。</li>\n<li>如果字段是val的，只有getter被自动生成。(val已经不能修改，所以没必要提供setter)</li>\n<li>如果将字段声明为private[this]，就不会再有getter和setter生成。</li>\n</ul>\n<p>总结</p>\n<ul>\n<li>var的成员变量自动生成一个getter和setter</li>\n<li>val的成员变量自动生成一个getter</li>\n<li>scala中不能生成只有setter的成员变量</li>\n</ul>\n<h3><span id=\"对象私有字段\"> 对象私有字段</span></h3>\n<p>和java一样，一个对象的方法内可以访问的其他任何该类对象的私有字段。（类私有字段）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> value = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increment</span></span>() &#123; value += <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isLess</span></span>(other : <span class=\"type\">Counter</span>) = value &lt; other.value</span><br><span class=\"line\">    <span class=\"comment\">//可以访问另一个对象的私有字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时在scala中，权限可以控制的更细。如果字段加上private[this]修饰，则不能跨对象访问私有字段。（对象私有字段，SmallTalk等语言中也有对象级私有）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>[<span class=\"keyword\">this</span>] <span class=\"keyword\">var</span> value = <span class=\"number\">0</span> <span class=\"comment\">//只能自己用</span></span><br></pre></td></tr></table></figure>\n<p>private[this]中的this也可以换成自己的类名，或者外部类的类名（只有这两种选择，其他的会在编译期报错）。表示只能指定的类或者伴生对象（对象那章会讲）来调用。</p>\n<h3><span id=\"bean属性\"> Bean属性</span></h3>\n<p>由于scala的默认生成的getter和setter和java中的规范不同（java bean是getXXX和setXXX），为了解决一些需要这种规范的场景，scala提供了兼容的注解来@BeanProperty。这样会同时生成两种风格的getter和setter.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.beans.<span class=\"type\">BeanProperty</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@BeanProperty</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> = _</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将自动生成以下四个方法：</span></span><br><span class=\"line\"><span class=\"comment\">// name: String</span></span><br><span class=\"line\"><span class=\"comment\">// name_ = (newValue: String): Unit</span></span><br><span class=\"line\"><span class=\"comment\">// getName(): String</span></span><br><span class=\"line\"><span class=\"comment\">// setName(newValue: String): Unit</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"辅助构造器\"> 辅助构造器</span></h3>\n<p>scala中的构造函数分主辅。辅助的构造器和java基本相同，区别于：</p>\n<blockquote>\n<ul>\n<li>辅助构造器名为this。（修改类名变得更容易了）</li>\n<li>辅助构造器方法内的第一行，必须调用其他主、辅助构造器。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>() <span class=\"comment\">//调用主构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name:<span class=\"type\">String</span>, age:<span class=\"type\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(name) <span class=\"comment\">// 调用前一个辅助构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"主构造器\"> 主构造器</span></h3>\n<p>主构造器在类名之后直接定义，如果类名后什么也不写，像java一样会默认提供一个无参的主构造器。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>)</span></span><br></pre></td></tr></table></figure>\n<p>以上语句换成java代码如下（始觉大道至简！）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接写在类体中的执行语句，会在主构造器中执行。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"主构造器被调用！\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">desc</span> </span>= name + <span class=\"string\">\" is \"</span> + age + <span class=\"string\">\" years old \"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> person = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"allon\"</span>, <span class=\"number\">29</span>)</span><br><span class=\"line\">println(per desc)</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">// 主构造器被调用！</span></span><br><span class=\"line\"><span class=\"comment\">// allon is 29 years old</span></span><br></pre></td></tr></table></figure>\n<p>常见的初始化配置文件等操作，就可以在类体中直接操作，因为它会做为主构造器中的一部分被执行。</p>\n<p>主构造器中的参数实际是字段，它同样可以使用一些关键字来修饰。val\\var\\private\\private[String]。也可以完全不加修饰关键字。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span>, age:<span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">desc</span> </span>= name + <span class=\"string\">\" is \"</span> + age + <span class=\"string\">\" years old \"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上主构造器的参数如果在该类内部方法中被使用了，它就相当于private[String]的效果，会自动升级为字段。如果没有被使用过，它就只是一个普通的主构造器中可以使用的参数而已。</p>\n<p>也可以让主构造器变成private的。这样只能通过辅助构造器来创建Person对象了。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"title\">private</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以把类看作一个函数，主构造器参数就是这个函数的参数，那么类的内部任何位置当然可以使用该参数。只是当方法内部使用它时，它就会自动升级为字段而已。</p>\n</blockquote>\n<h3><span id=\"内部类\"> 内部类</span></h3>\n<p>在scala中，几乎可以随意嵌套语法结构。函数中可以定义函数，类中可以定义类。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Network</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Member</span></span></span><br><span class=\"line\"><span class=\"class\">    </span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">pirvate</span> <span class=\"title\">val</span> <span class=\"title\">members</span> </span>= <span class=\"keyword\">new</span> <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Member</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join</span></span>(m:<span class=\"type\">Member</span>) = &#123;</span><br><span class=\"line\">        members += m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> chatter =  <span class=\"keyword\">new</span> <span class=\"type\">Network</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFace = <span class=\"keyword\">new</span> <span class=\"type\">Network</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在java中，内部类从属于外部类，scala中内部类从属于外部类对象。就像上面的代码中，myFace.Member和chatter.Member是两个不同的类。</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> chatter =  <span class=\"keyword\">new</span> <span class=\"type\">Network</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFace = <span class=\"keyword\">new</span> <span class=\"type\">Network</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> chatterMember = <span class=\"keyword\">new</span> chatter.<span class=\"type\">Member</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFaceMember = <span class=\"keyword\">new</span> myFace.<span class=\"type\">Member</span></span><br><span class=\"line\"></span><br><span class=\"line\">chatter.join(chatterMember)</span><br><span class=\"line\">chatter.join(myFaceMember) <span class=\"comment\">//这里会报错，因为myFace.Member和chatter.Member是两个不同的类，members的泛型冲突了。</span></span><br></pre></td></tr></table></figure>\n<p>如果想解决以上问题，可以在到定义处把Member换成Netwok#Member。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> members = <span class=\"keyword\">new</span> <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Network</span>#<span class=\"type\">Member</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join</span></span>(m: <span class=\"type\">Network</span>#<span class=\"type\">Member</span>) = &#123;</span><br><span class=\"line\">  members += m</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Network#Member的含义是，“任何Network的Member”。这种方式叫类型投影。后面也会讲到类型投影。</p>\n<h3><span id=\"重命名外部类this引用\"> 重命名外部类this引用</span></h3>\n<p>和java一样，在内部类中，可以通过“外部类.this”的方式来访问外部类的this引用。同时，在scala中你也可以为这个引用定义一个别名。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Network</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">  outer =&gt; <span class=\"comment\">//outer指向的是Network.this。可以用任何合法名来定义它，self在内部类中可能会引发岐义。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Member</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">desc</span> </span>= outer.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-05-类\"><a class=\"markdownIt-Anchor\" href=\"#chapter-05-类\"></a> Chapter-05-类</h2>\n<p>类 class</p>\n<hr>\n<h3 id=\"简单类和无参方法\"><a class=\"markdownIt-Anchor\" href=\"#简单类和无参方法\"></a> 简单类和无参方法</h3>\n<p>scala中的类简单的和java相似，主要设计和习惯区别是：</p>\n<ul>\n<li>scala类中的方法默认为public的</li>\n<li>字段必须初始化</li>\n<li>类只有public的，所以不声明public关键字了（经常一个scala源文件会包含很多个类）</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> value = <span class=\"number\">0</span> <span class=\"comment\">//你必须初始化字段</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increment</span></span>() &#123; value += <span class=\"number\">1</span> &#125; <span class=\"comment\">//默认是public的。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">current</span></span>() = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> counter1 = <span class=\"keyword\">new</span> <span class=\"type\">Counter</span></span><br><span class=\"line\">counter1.increment() <span class=\"comment\">// 当修改值时，最好加上“()”</span></span><br><span class=\"line\">counter1.current <span class=\"comment\">// 查询时不使用“()”，好一点</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"getter和setter\"><a class=\"markdownIt-Anchor\" href=\"#getter和setter\"></a> getter和setter</h3>\n<p>在scala中，每个字段默认提供了getter和setter方法。在scala中的getter和setter是这样</p>\n<blockquote>\n<ul>\n<li>age 等价于get方法；age_= 等价于set方法</li>\n</ul>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">val</span> person = <span class=\"keyword\">new</span> <span class=\"type\">Person</span></span><br><span class=\"line\"> person age <span class=\"comment\">// 这么写和person.age是一样的</span></span><br><span class=\"line\"> person.age=(<span class=\"number\">20</span>) <span class=\"comment\">// 也可以很古怪的这么写 person age_= 10 ,因为方法名叫“.get_=” 这...！</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>jvm的内部实现会把上面的代码生成一个private的age和对应的getter、setter方法。</li>\n</ul>\n</blockquote>\n<p><a href=\"//xn--Person-9m7iglt94k.xn--scalaPerson-4p8ql2gnhl86d119cmvjiib868q6hgws9k7u8a\">//建一个Person.scala文件把上面的Person代码放进去</a>。在命令行中执行以下编译代码</p>\n<pre><code>scalac Person.scala\n</code></pre>\n<p>//反编译</p>\n<pre><code>javap -private Person\n</code></pre>\n<p>可以看到输出的结果，表明jvm的内部实现会把上面的代码生成一个private的age和对应的getter、setter方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">\"Person.scala\"</span></span><br><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">  private int age;</span><br><span class=\"line\">  public int age();//getter</span><br><span class=\"line\">  public void age_<span class=\"variable\">$eq</span>(int);//setter ，java中不允许使用等号做为方法名，使用了“<span class=\"variable\">$eq</span>”替代。</span><br><span class=\"line\">  public Person();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果字段是私有的，getter和setter也是私有的。</li>\n<li>如果字段是val的，只有getter被自动生成。(val已经不能修改，所以没必要提供setter)</li>\n<li>如果将字段声明为private[this]，就不会再有getter和setter生成。</li>\n</ul>\n<p>总结</p>\n<ul>\n<li>var的成员变量自动生成一个getter和setter</li>\n<li>val的成员变量自动生成一个getter</li>\n<li>scala中不能生成只有setter的成员变量</li>\n</ul>\n<h3 id=\"对象私有字段\"><a class=\"markdownIt-Anchor\" href=\"#对象私有字段\"></a> 对象私有字段</h3>\n<p>和java一样，一个对象的方法内可以访问的其他任何该类对象的私有字段。（类私有字段）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> value = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">increment</span></span>() &#123; value += <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isLess</span></span>(other : <span class=\"type\">Counter</span>) = value &lt; other.value</span><br><span class=\"line\">    <span class=\"comment\">//可以访问另一个对象的私有字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时在scala中，权限可以控制的更细。如果字段加上private[this]修饰，则不能跨对象访问私有字段。（对象私有字段，SmallTalk等语言中也有对象级私有）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>[<span class=\"keyword\">this</span>] <span class=\"keyword\">var</span> value = <span class=\"number\">0</span> <span class=\"comment\">//只能自己用</span></span><br></pre></td></tr></table></figure>\n<p>private[this]中的this也可以换成自己的类名，或者外部类的类名（只有这两种选择，其他的会在编译期报错）。表示只能指定的类或者伴生对象（对象那章会讲）来调用。</p>\n<h3 id=\"bean属性\"><a class=\"markdownIt-Anchor\" href=\"#bean属性\"></a> Bean属性</h3>\n<p>由于scala的默认生成的getter和setter和java中的规范不同（java bean是getXXX和setXXX），为了解决一些需要这种规范的场景，scala提供了兼容的注解来@BeanProperty。这样会同时生成两种风格的getter和setter.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.beans.<span class=\"type\">BeanProperty</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@BeanProperty</span> <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> = _</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将自动生成以下四个方法：</span></span><br><span class=\"line\"><span class=\"comment\">// name: String</span></span><br><span class=\"line\"><span class=\"comment\">// name_ = (newValue: String): Unit</span></span><br><span class=\"line\"><span class=\"comment\">// getName(): String</span></span><br><span class=\"line\"><span class=\"comment\">// setName(newValue: String): Unit</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"辅助构造器\"><a class=\"markdownIt-Anchor\" href=\"#辅助构造器\"></a> 辅助构造器</h3>\n<p>scala中的构造函数分主辅。辅助的构造器和java基本相同，区别于：</p>\n<blockquote>\n<ul>\n<li>辅助构造器名为this。（修改类名变得更容易了）</li>\n<li>辅助构造器方法内的第一行，必须调用其他主、辅助构造器。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> name = <span class=\"string\">\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> age = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name:<span class=\"type\">String</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>() <span class=\"comment\">//调用主构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(name:<span class=\"type\">String</span>, age:<span class=\"type\">Int</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(name) <span class=\"comment\">// 调用前一个辅助构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"主构造器\"><a class=\"markdownIt-Anchor\" href=\"#主构造器\"></a> 主构造器</h3>\n<p>主构造器在类名之后直接定义，如果类名后什么也不写，像java一样会默认提供一个无参的主构造器。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>)</span></span><br></pre></td></tr></table></figure>\n<p>以上语句换成java代码如下（始觉大道至简！）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接写在类体中的执行语句，会在主构造器中执行。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"主构造器被调用！\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">desc</span> </span>= name + <span class=\"string\">\" is \"</span> + age + <span class=\"string\">\" years old \"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">val</span> person = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"allon\"</span>, <span class=\"number\">29</span>)</span><br><span class=\"line\">println(per desc)</span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">// 主构造器被调用！</span></span><br><span class=\"line\"><span class=\"comment\">// allon is 29 years old</span></span><br></pre></td></tr></table></figure>\n<p>常见的初始化配置文件等操作，就可以在类体中直接操作，因为它会做为主构造器中的一部分被执行。</p>\n<p>主构造器中的参数实际是字段，它同样可以使用一些关键字来修饰。val\\var\\private\\private[String]。也可以完全不加修饰关键字。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span>, age:<span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">desc</span> </span>= name + <span class=\"string\">\" is \"</span> + age + <span class=\"string\">\" years old \"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上主构造器的参数如果在该类内部方法中被使用了，它就相当于private[String]的效果，会自动升级为字段。如果没有被使用过，它就只是一个普通的主构造器中可以使用的参数而已。</p>\n<p>也可以让主构造器变成private的。这样只能通过辅助构造器来创建Person对象了。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"title\">private</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val age: <span class=\"type\">Int</span></span>)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以把类看作一个函数，主构造器参数就是这个函数的参数，那么类的内部任何位置当然可以使用该参数。只是当方法内部使用它时，它就会自动升级为字段而已。</p>\n</blockquote>\n<h3 id=\"内部类\"><a class=\"markdownIt-Anchor\" href=\"#内部类\"></a> 内部类</h3>\n<p>在scala中，几乎可以随意嵌套语法结构。函数中可以定义函数，类中可以定义类。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Network</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Member</span></span></span><br><span class=\"line\"><span class=\"class\">    </span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">pirvate</span> <span class=\"title\">val</span> <span class=\"title\">members</span> </span>= <span class=\"keyword\">new</span> <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Member</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join</span></span>(m:<span class=\"type\">Member</span>) = &#123;</span><br><span class=\"line\">        members += m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> chatter =  <span class=\"keyword\">new</span> <span class=\"type\">Network</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFace = <span class=\"keyword\">new</span> <span class=\"type\">Network</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在java中，内部类从属于外部类，scala中内部类从属于外部类对象。就像上面的代码中，myFace.Member和chatter.Member是两个不同的类。</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> chatter =  <span class=\"keyword\">new</span> <span class=\"type\">Network</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFace = <span class=\"keyword\">new</span> <span class=\"type\">Network</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> chatterMember = <span class=\"keyword\">new</span> chatter.<span class=\"type\">Member</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> myFaceMember = <span class=\"keyword\">new</span> myFace.<span class=\"type\">Member</span></span><br><span class=\"line\"></span><br><span class=\"line\">chatter.join(chatterMember)</span><br><span class=\"line\">chatter.join(myFaceMember) <span class=\"comment\">//这里会报错，因为myFace.Member和chatter.Member是两个不同的类，members的泛型冲突了。</span></span><br></pre></td></tr></table></figure>\n<p>如果想解决以上问题，可以在到定义处把Member换成Netwok#Member。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> members = <span class=\"keyword\">new</span> <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Network</span>#<span class=\"type\">Member</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">join</span></span>(m: <span class=\"type\">Network</span>#<span class=\"type\">Member</span>) = &#123;</span><br><span class=\"line\">  members += m</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Network#Member的含义是，“任何Network的Member”。这种方式叫类型投影。后面也会讲到类型投影。</p>\n<h3 id=\"重命名外部类this引用\"><a class=\"markdownIt-Anchor\" href=\"#重命名外部类this引用\"></a> 重命名外部类this引用</h3>\n<p>和java一样，在内部类中，可以通过“外部类.this”的方式来访问外部类的this引用。同时，在scala中你也可以为这个引用定义一个别名。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Network</span>(<span class=\"params\">val name: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">  outer =&gt; <span class=\"comment\">//outer指向的是Network.this。可以用任何合法名来定义它，self在内部类中可能会引发岐义。</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Member</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">desc</span> </span>= outer.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter-07-包和引入","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-07-包和引入\n\n包 引入 import package\n\n---\n\n### 包\nscala中的包和C++的命名空间和java中的包概念是相同的，只不过它和目录没有直接关系，是一个虚拟的关系，在代码中定义。\n\n```scala\npackage com {\n  package horstmann {\n    package  impatient {\n      class Employee\n    }\n  }\n}\n```\n\n* scala的包和目录不是强一致的，Employee完全可以不放在com/horstmann/impatient/这个目录下。\n* 包可以定义在任何源文件中。\n* 如果在相同或不同的源文件中定义了完全相同的冲突内容，会在编译时报“重复定义”的错误。\n\n### 包的作用域\n与java不同的是，scala的子包在以下代码方式时，不用import就有使用父包作用域的权力。\n\n```scala\npackage com {\n  package horstmann {\n\n    object Util{\n      def printObj(obj:Any) = println(obj.toString)\n    }\n\n    package  impatient {\n      class Employee(name:String){\n        override def toString = name\n      }\n      object Employee {\n        Util.printObj(new Employee(\"allon\")) // 注意Util是父包中的对象。不需要写成com.horstmann.Util。\n      }\n    }\n  }\n}\n```\nscala中的包路径是相对的\n\n```scala\npackage com {\n  package horstmann {\n    package  util{\n      object Properties {\n        def printObj(obj:Any) = println(obj.toString)\n      }\n    }\n\n    package  impatient {\n      class Employee(name:String){\n        override def toString = name\n      }\n      object Employee {\n        def apply(): Unit ={\n          util.Properties.printObj(new Employee(\"allon\")) //不能直接使用Properties而要使用util.Properties。\n        }\n      }\n    }\n  }\n}\n```\n以上代码访问Properties可以使用\n1. util.Peroperties\n2. com.horstmann.util.Peroperties\n3. 定义绝对路径_root_.com.horstmann.util.Peroperties\n4. 如果想使用的是scala标准库中的util.Peroperties会出现冲突，最好写全路径scala.util.Peroperties\n\n### 文件顶部定义包\n如果把包语句写成像java一样的串，作用域就会和java类似了。\n\n```scala\npackage com.horstmann {\n    object UtilA\n}\n\npackage com.horstmann.impatient {\n    object UtilB\n    class Employee {\n        //在这里com和com.horstmann作用域的成员是不可见的。\n        UtilA //错误，不可见\n        UtilB //可见\n    }\n}\n```\nscala也可以在文件顶部定义包\n\n```scala\npackage com.horstmann.impatient\npackage people\nclass Person\n// 这等价于\npackage com.horstmann.impatient {\n    package people {\n        class Person\n    }\n}\n```\n### 包对象\n包里可以定义类、对象和特质，但是因为jvm的局限不能定义函数。为了解决这个问题，引入了包对象的概念。\n\n每个包都可以定义一个和它同名的包对象。（有些像伴生对象）\n\n```scala\npackage com.horstmann.impatient\n\npackage object people {\n    val defaultName = \"allon\"\n}\n\npackage people {\n    package people {\n        class Person(val name:String = defaultName) //使用的是包对象中的默认值。这里的defaultName不用写全路径，因为它们在同一个包中，外部使用时可以com.horstmann.impatient.people.defaultName来使用。\n    }\n}\n```\n在jvm中，包对象被编译成package.class，并置于相应的包下。一般可以把包对象放到com/horstmann/impatient/people/package.scala。\n\n### 包的可见性及import\n可以指定字段在哪些父包中可见\n\n```scala\nclass Person(private[horstmann] val name:String = defaultName)\n```\n\n#### import\n\n```scala\nimport java.awt._\n//等价于java中的java.awt.*\n```\n在scala中完全可以定义com.horstmann.impatient.*.people，但是这么干等于在坑人。\n\nimport的语句在scala中可以放在任何地方。并不一定要文件顶部。\n\n```scala\nclass Manager {\n    import scala.collection.mutable._\n    val subordinates = new ArrayBuffer[Employee]\n}\n```\n#### import时的重命名和部分引入\n\n```scala\nimport java.util.{HashMap => JavaHashMap} //重命名为JavaHashMap，这样可以避免一些冲突。\nimport java.awt.{Color, Font} \n//只引入Color和Font\nimport java.util.{HashMap => _, _} \n//HashMap => _ 表示隐藏掉HashMap，第二个下划线表示通配符全部。这个import整个含义是：除了HashMap都引入。\n```\n\n#### 隐式import\n就是scala“偷偷”的帮我们已经引入了scala开头的包。因而我们在使用scala开头的包时，我们才可以省略掉“scala”。\n\n```scala\nimport scala.collection.mutable._\n//因为偷偷引入了scala包，所以也可以省略\"scala\"，从而和下面的import等价\nimport collection.mutable._\n```\n\n\n","source":"_posts/scala/Chapter-07-包和引入.md","raw":"---\ntitle: 'Chapter-07-包和引入'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-07-包和引入\n\n包 引入 import package\n\n---\n\n### 包\nscala中的包和C++的命名空间和java中的包概念是相同的，只不过它和目录没有直接关系，是一个虚拟的关系，在代码中定义。\n\n```scala\npackage com {\n  package horstmann {\n    package  impatient {\n      class Employee\n    }\n  }\n}\n```\n\n* scala的包和目录不是强一致的，Employee完全可以不放在com/horstmann/impatient/这个目录下。\n* 包可以定义在任何源文件中。\n* 如果在相同或不同的源文件中定义了完全相同的冲突内容，会在编译时报“重复定义”的错误。\n\n### 包的作用域\n与java不同的是，scala的子包在以下代码方式时，不用import就有使用父包作用域的权力。\n\n```scala\npackage com {\n  package horstmann {\n\n    object Util{\n      def printObj(obj:Any) = println(obj.toString)\n    }\n\n    package  impatient {\n      class Employee(name:String){\n        override def toString = name\n      }\n      object Employee {\n        Util.printObj(new Employee(\"allon\")) // 注意Util是父包中的对象。不需要写成com.horstmann.Util。\n      }\n    }\n  }\n}\n```\nscala中的包路径是相对的\n\n```scala\npackage com {\n  package horstmann {\n    package  util{\n      object Properties {\n        def printObj(obj:Any) = println(obj.toString)\n      }\n    }\n\n    package  impatient {\n      class Employee(name:String){\n        override def toString = name\n      }\n      object Employee {\n        def apply(): Unit ={\n          util.Properties.printObj(new Employee(\"allon\")) //不能直接使用Properties而要使用util.Properties。\n        }\n      }\n    }\n  }\n}\n```\n以上代码访问Properties可以使用\n1. util.Peroperties\n2. com.horstmann.util.Peroperties\n3. 定义绝对路径_root_.com.horstmann.util.Peroperties\n4. 如果想使用的是scala标准库中的util.Peroperties会出现冲突，最好写全路径scala.util.Peroperties\n\n### 文件顶部定义包\n如果把包语句写成像java一样的串，作用域就会和java类似了。\n\n```scala\npackage com.horstmann {\n    object UtilA\n}\n\npackage com.horstmann.impatient {\n    object UtilB\n    class Employee {\n        //在这里com和com.horstmann作用域的成员是不可见的。\n        UtilA //错误，不可见\n        UtilB //可见\n    }\n}\n```\nscala也可以在文件顶部定义包\n\n```scala\npackage com.horstmann.impatient\npackage people\nclass Person\n// 这等价于\npackage com.horstmann.impatient {\n    package people {\n        class Person\n    }\n}\n```\n### 包对象\n包里可以定义类、对象和特质，但是因为jvm的局限不能定义函数。为了解决这个问题，引入了包对象的概念。\n\n每个包都可以定义一个和它同名的包对象。（有些像伴生对象）\n\n```scala\npackage com.horstmann.impatient\n\npackage object people {\n    val defaultName = \"allon\"\n}\n\npackage people {\n    package people {\n        class Person(val name:String = defaultName) //使用的是包对象中的默认值。这里的defaultName不用写全路径，因为它们在同一个包中，外部使用时可以com.horstmann.impatient.people.defaultName来使用。\n    }\n}\n```\n在jvm中，包对象被编译成package.class，并置于相应的包下。一般可以把包对象放到com/horstmann/impatient/people/package.scala。\n\n### 包的可见性及import\n可以指定字段在哪些父包中可见\n\n```scala\nclass Person(private[horstmann] val name:String = defaultName)\n```\n\n#### import\n\n```scala\nimport java.awt._\n//等价于java中的java.awt.*\n```\n在scala中完全可以定义com.horstmann.impatient.*.people，但是这么干等于在坑人。\n\nimport的语句在scala中可以放在任何地方。并不一定要文件顶部。\n\n```scala\nclass Manager {\n    import scala.collection.mutable._\n    val subordinates = new ArrayBuffer[Employee]\n}\n```\n#### import时的重命名和部分引入\n\n```scala\nimport java.util.{HashMap => JavaHashMap} //重命名为JavaHashMap，这样可以避免一些冲突。\nimport java.awt.{Color, Font} \n//只引入Color和Font\nimport java.util.{HashMap => _, _} \n//HashMap => _ 表示隐藏掉HashMap，第二个下划线表示通配符全部。这个import整个含义是：除了HashMap都引入。\n```\n\n#### 隐式import\n就是scala“偷偷”的帮我们已经引入了scala开头的包。因而我们在使用scala开头的包时，我们才可以省略掉“scala”。\n\n```scala\nimport scala.collection.mutable._\n//因为偷偷引入了scala包，所以也可以省略\"scala\"，从而和下面的import等价\nimport collection.mutable._\n```\n\n\n","slug":"scala/Chapter-07-包和引入","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrh4000bj5lya6ba0qdw","content":"<h2><span id=\"chapter-07-包和引入\"> Chapter-07-包和引入</span></h2>\n<p>包 引入 import package</p>\n<hr>\n<h3><span id=\"包\"> 包</span></h3>\n<p>scala中的包和C++的命名空间和java中的包概念是相同的，只不过它和目录没有直接关系，是一个虚拟的关系，在代码中定义。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com &#123;</span><br><span class=\"line\">  <span class=\"keyword\">package</span> horstmann &#123;</span><br><span class=\"line\">    <span class=\"keyword\">package</span>  impatient &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\">  &#125;</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>scala的包和目录不是强一致的，Employee完全可以不放在com/horstmann/impatient/这个目录下。</li>\n<li>包可以定义在任何源文件中。</li>\n<li>如果在相同或不同的源文件中定义了完全相同的冲突内容，会在编译时报“重复定义”的错误。</li>\n</ul>\n<h3><span id=\"包的作用域\"> 包的作用域</span></h3>\n<p>与java不同的是，scala的子包在以下代码方式时，不用import就有使用父包作用域的权力。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com &#123;</span><br><span class=\"line\">  <span class=\"keyword\">package</span> horstmann &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Util</span></span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printObj</span></span>(obj:<span class=\"type\">Any</span>) = println(obj.toString)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">package</span>  impatient &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>(<span class=\"params\">name:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Util</span>.printObj(<span class=\"keyword\">new</span> <span class=\"type\">Employee</span>(<span class=\"string\">\"allon\"</span>)) <span class=\"comment\">// 注意Util是父包中的对象。不需要写成com.horstmann.Util。</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scala中的包路径是相对的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com &#123;</span><br><span class=\"line\">  <span class=\"keyword\">package</span> horstmann &#123;</span><br><span class=\"line\">    <span class=\"keyword\">package</span>  util&#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Properties</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printObj</span></span>(obj:<span class=\"type\">Any</span>) = println(obj.toString)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">package</span>  impatient &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>(<span class=\"params\">name:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(): <span class=\"type\">Unit</span> =&#123;</span><br><span class=\"line\">          util.<span class=\"type\">Properties</span>.printObj(<span class=\"keyword\">new</span> <span class=\"type\">Employee</span>(<span class=\"string\">\"allon\"</span>)) <span class=\"comment\">//不能直接使用Properties而要使用util.Properties。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码访问Properties可以使用</p>\n<ol>\n<li>util.Peroperties</li>\n<li>com.horstmann.util.Peroperties</li>\n<li>定义绝对路径_root_.com.horstmann.util.Peroperties</li>\n<li>如果想使用的是scala标准库中的util.Peroperties会出现冲突，最好写全路径scala.util.Peroperties</li>\n</ol>\n<h3><span id=\"文件顶部定义包\"> 文件顶部定义包</span></h3>\n<p>如果把包语句写成像java一样的串，作用域就会和java类似了。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.horstmann &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">UtilA</span></span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">package</span> <span class=\"title\">com</span>.<span class=\"title\">horstmann</span>.<span class=\"title\">impatient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">UtilB</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//在这里com和com.horstmann作用域的成员是不可见的。</span></span><br><span class=\"line\">        <span class=\"type\">UtilA</span> <span class=\"comment\">//错误，不可见</span></span><br><span class=\"line\">        <span class=\"type\">UtilB</span> <span class=\"comment\">//可见</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scala也可以在文件顶部定义包</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.horstmann.impatient</span><br><span class=\"line\"><span class=\"keyword\">package</span> people</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//</span> <span class=\"title\">这等价于</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">package</span> <span class=\"title\">com</span>.<span class=\"title\">horstmann</span>.<span class=\"title\">impatient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">package</span> people &#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"包对象\"> 包对象</span></h3>\n<p>包里可以定义类、对象和特质，但是因为jvm的局限不能定义函数。为了解决这个问题，引入了包对象的概念。</p>\n<p>每个包都可以定义一个和它同名的包对象。（有些像伴生对象）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.horstmann.impatient</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">people</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> defaultName = <span class=\"string\">\"allon\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> people &#123;</span><br><span class=\"line\">    <span class=\"keyword\">package</span> people &#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name:<span class=\"type\">String</span> = defaultName</span>) <span class=\"title\">//使用的是包对象中的默认值。这里的defaultName不用写全路径，因为它们在同一个包中，外部使用时可以com</span>.<span class=\"title\">horstmann</span>.<span class=\"title\">impatient</span>.<span class=\"title\">people</span>.<span class=\"title\">defaultName来使用。</span></span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在jvm中，包对象被编译成package.class，并置于相应的包下。一般可以把包对象放到com/horstmann/impatient/people/package.scala。</p>\n<h3><span id=\"包的可见性及import\"> 包的可见性及import</span></h3>\n<p>可以指定字段在哪些父包中可见</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">private[horstmann] val name:<span class=\"type\">String</span> = defaultName</span>)</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"import\"> import</span></h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt._</span><br><span class=\"line\"><span class=\"comment\">//等价于java中的java.awt.*</span></span><br></pre></td></tr></table></figure>\n<p>在scala中完全可以定义com.horstmann.impatient.*.people，但是这么干等于在坑人。</p>\n<p>import的语句在scala中可以放在任何地方。并不一定要文件顶部。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Manager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable._</span><br><span class=\"line\">    <span class=\"keyword\">val</span> subordinates = <span class=\"keyword\">new</span> <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Employee</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"import时的重命名和部分引入\"> import时的重命名和部分引入</span></h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.&#123;<span class=\"type\">HashMap</span> =&gt; <span class=\"type\">JavaHashMap</span>&#125; <span class=\"comment\">//重命名为JavaHashMap，这样可以避免一些冲突。</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.&#123;<span class=\"type\">Color</span>, <span class=\"type\">Font</span>&#125; </span><br><span class=\"line\"><span class=\"comment\">//只引入Color和Font</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.&#123;<span class=\"type\">HashMap</span> =&gt; _, _&#125; </span><br><span class=\"line\"><span class=\"comment\">//HashMap =&gt; _ 表示隐藏掉HashMap，第二个下划线表示通配符全部。这个import整个含义是：除了HashMap都引入。</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"隐式import\"> 隐式import</span></h4>\n<p>就是scala“偷偷”的帮我们已经引入了scala开头的包。因而我们在使用scala开头的包时，我们才可以省略掉“scala”。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable._</span><br><span class=\"line\"><span class=\"comment\">//因为偷偷引入了scala包，所以也可以省略\"scala\"，从而和下面的import等价</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> collection.mutable._</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-07-包和引入\"><a class=\"markdownIt-Anchor\" href=\"#chapter-07-包和引入\"></a> Chapter-07-包和引入</h2>\n<p>包 引入 import package</p>\n<hr>\n<h3 id=\"包\"><a class=\"markdownIt-Anchor\" href=\"#包\"></a> 包</h3>\n<p>scala中的包和C++的命名空间和java中的包概念是相同的，只不过它和目录没有直接关系，是一个虚拟的关系，在代码中定义。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com &#123;</span><br><span class=\"line\">  <span class=\"keyword\">package</span> horstmann &#123;</span><br><span class=\"line\">    <span class=\"keyword\">package</span>  impatient &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\">  &#125;</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>scala的包和目录不是强一致的，Employee完全可以不放在com/horstmann/impatient/这个目录下。</li>\n<li>包可以定义在任何源文件中。</li>\n<li>如果在相同或不同的源文件中定义了完全相同的冲突内容，会在编译时报“重复定义”的错误。</li>\n</ul>\n<h3 id=\"包的作用域\"><a class=\"markdownIt-Anchor\" href=\"#包的作用域\"></a> 包的作用域</h3>\n<p>与java不同的是，scala的子包在以下代码方式时，不用import就有使用父包作用域的权力。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com &#123;</span><br><span class=\"line\">  <span class=\"keyword\">package</span> horstmann &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Util</span></span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printObj</span></span>(obj:<span class=\"type\">Any</span>) = println(obj.toString)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">package</span>  impatient &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>(<span class=\"params\">name:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Util</span>.printObj(<span class=\"keyword\">new</span> <span class=\"type\">Employee</span>(<span class=\"string\">\"allon\"</span>)) <span class=\"comment\">// 注意Util是父包中的对象。不需要写成com.horstmann.Util。</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scala中的包路径是相对的</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com &#123;</span><br><span class=\"line\">  <span class=\"keyword\">package</span> horstmann &#123;</span><br><span class=\"line\">    <span class=\"keyword\">package</span>  util&#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Properties</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printObj</span></span>(obj:<span class=\"type\">Any</span>) = println(obj.toString)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">package</span>  impatient &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>(<span class=\"params\">name:<span class=\"type\">String</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(): <span class=\"type\">Unit</span> =&#123;</span><br><span class=\"line\">          util.<span class=\"type\">Properties</span>.printObj(<span class=\"keyword\">new</span> <span class=\"type\">Employee</span>(<span class=\"string\">\"allon\"</span>)) <span class=\"comment\">//不能直接使用Properties而要使用util.Properties。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码访问Properties可以使用</p>\n<ol>\n<li>util.Peroperties</li>\n<li>com.horstmann.util.Peroperties</li>\n<li>定义绝对路径_root_.com.horstmann.util.Peroperties</li>\n<li>如果想使用的是scala标准库中的util.Peroperties会出现冲突，最好写全路径scala.util.Peroperties</li>\n</ol>\n<h3 id=\"文件顶部定义包\"><a class=\"markdownIt-Anchor\" href=\"#文件顶部定义包\"></a> 文件顶部定义包</h3>\n<p>如果把包语句写成像java一样的串，作用域就会和java类似了。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.horstmann &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">UtilA</span></span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">package</span> <span class=\"title\">com</span>.<span class=\"title\">horstmann</span>.<span class=\"title\">impatient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">UtilB</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">class</span> <span class=\"title\">Employee</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//在这里com和com.horstmann作用域的成员是不可见的。</span></span><br><span class=\"line\">        <span class=\"type\">UtilA</span> <span class=\"comment\">//错误，不可见</span></span><br><span class=\"line\">        <span class=\"type\">UtilB</span> <span class=\"comment\">//可见</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scala也可以在文件顶部定义包</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.horstmann.impatient</span><br><span class=\"line\"><span class=\"keyword\">package</span> people</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//</span> <span class=\"title\">这等价于</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">package</span> <span class=\"title\">com</span>.<span class=\"title\">horstmann</span>.<span class=\"title\">impatient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">package</span> people &#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"包对象\"><a class=\"markdownIt-Anchor\" href=\"#包对象\"></a> 包对象</h3>\n<p>包里可以定义类、对象和特质，但是因为jvm的局限不能定义函数。为了解决这个问题，引入了包对象的概念。</p>\n<p>每个包都可以定义一个和它同名的包对象。（有些像伴生对象）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.horstmann.impatient</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> <span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">people</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> defaultName = <span class=\"string\">\"allon\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> people &#123;</span><br><span class=\"line\">    <span class=\"keyword\">package</span> people &#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">val name:<span class=\"type\">String</span> = defaultName</span>) <span class=\"title\">//使用的是包对象中的默认值。这里的defaultName不用写全路径，因为它们在同一个包中，外部使用时可以com</span>.<span class=\"title\">horstmann</span>.<span class=\"title\">impatient</span>.<span class=\"title\">people</span>.<span class=\"title\">defaultName来使用。</span></span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在jvm中，包对象被编译成package.class，并置于相应的包下。一般可以把包对象放到com/horstmann/impatient/people/package.scala。</p>\n<h3 id=\"包的可见性及import\"><a class=\"markdownIt-Anchor\" href=\"#包的可见性及import\"></a> 包的可见性及import</h3>\n<p>可以指定字段在哪些父包中可见</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">private[horstmann] val name:<span class=\"type\">String</span> = defaultName</span>)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"import\"><a class=\"markdownIt-Anchor\" href=\"#import\"></a> import</h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt._</span><br><span class=\"line\"><span class=\"comment\">//等价于java中的java.awt.*</span></span><br></pre></td></tr></table></figure>\n<p>在scala中完全可以定义com.horstmann.impatient.*.people，但是这么干等于在坑人。</p>\n<p>import的语句在scala中可以放在任何地方。并不一定要文件顶部。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Manager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> scala.collection.mutable._</span><br><span class=\"line\">    <span class=\"keyword\">val</span> subordinates = <span class=\"keyword\">new</span> <span class=\"type\">ArrayBuffer</span>[<span class=\"type\">Employee</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"import时的重命名和部分引入\"><a class=\"markdownIt-Anchor\" href=\"#import时的重命名和部分引入\"></a> import时的重命名和部分引入</h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.&#123;<span class=\"type\">HashMap</span> =&gt; <span class=\"type\">JavaHashMap</span>&#125; <span class=\"comment\">//重命名为JavaHashMap，这样可以避免一些冲突。</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.&#123;<span class=\"type\">Color</span>, <span class=\"type\">Font</span>&#125; </span><br><span class=\"line\"><span class=\"comment\">//只引入Color和Font</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.&#123;<span class=\"type\">HashMap</span> =&gt; _, _&#125; </span><br><span class=\"line\"><span class=\"comment\">//HashMap =&gt; _ 表示隐藏掉HashMap，第二个下划线表示通配符全部。这个import整个含义是：除了HashMap都引入。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"隐式import\"><a class=\"markdownIt-Anchor\" href=\"#隐式import\"></a> 隐式import</h4>\n<p>就是scala“偷偷”的帮我们已经引入了scala开头的包。因而我们在使用scala开头的包时，我们才可以省略掉“scala”。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable._</span><br><span class=\"line\"><span class=\"comment\">//因为偷偷引入了scala包，所以也可以省略\"scala\"，从而和下面的import等价</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> collection.mutable._</span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter-06-对象","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-06-对象\n\n对象 object\n\n---\n\n### 单例对象\nscala中没有静态方法和字段。只要的功效可以用object语法来实现。(object定义其实就是具体某个类的单例)\n\n```scala\nobject Accounts {\n    private var lastNumber = 0\n    def newUniqueNumber() = { lastNumber += 1; lastNumber }\n}\n\nAccounts.newUniqueNumber\n// 1\nAccounts.newUniqueNumber\n// 2\n```\n对象也可以继承其他类和特质（类似接口）。但是不能定义自己的构造函数。\n### 伴生对象\n在java中会有既有成员方法又有静态方法的类。在scala中，可以用伴生对象来达到目的。\n\n```scala\nclass Account {\n    val id = Account.newUniqueNumber() //访问伴生对象的私有方法\n}\n\nobject Accout { // 伴生对象\n    private var lastNumber = 0\n    private def newUniqueNumber() = { lastNumber += 1; lastNumber }\n}\n```\n如果类和其伴生对象在同一个源文件中，它们可以互相访问对方的private特性。\n\n在调用伴生对象方法时，要Account.newUniqueNumber()，不能直接写newUniqueNumber()。\n\n### 继承类或特质的对象\n\n\n```scala\nabstract class UndoableAction(val description: String) {\n    def undo(): Unit\n    def redo(): Unit\n}\n\nobject DoNothingAction extends UndoableAction(\"Do nothing\"){\n    override def undo() {}\n    override def undo() {}\n}\n\nval actions = Map(\"open\" -> DoNothingAction, \"save\" -> DoNothingAction) //value使用DoNothingAction对象\n```\n\n### apply方法\napply方法被定义在伴生对象中，定义之后会可以像如下代码一样使用它：\n\n\n```scala\nclass Account private (val id: Int, initBalance: Double) {\n    private var balance = initBalance\n}\n\nobject Account { //伴生对象\n    def apply(initBalance: Double) = new Account(1986, initBalance)\n}\n\nval acct = Account(1000.0) //实际调用的是apply方法，等价于Account.apply(1000.0)\n```\n\n伴生对象以下格式，apply方法会被调用，一般它会返回一个伴生对象所对应类的对象：\n\n> *对象名(参数1,参数2...,参数N)*\n\n\n```scala\nArray(\"Mary\", \"had\", \"a\", \"little\", \"lamb\")\n//等价于\nArray.apply(\"Mary\", \"had\", \"a\", \"little\", \"lamb\")\n\nArray(100)\n//返回一个只有一个元素的Int数组\nnew Array(100)\n//返回一个有100个null元素的Array[Nothing]\n```\n\n### 应用对象\nscala中的main方法写到一个对象里。方法类型为Array[String] => Unit:\n\n```scala\nobject Hello {\n    def main(args: Array[String]) {\n        println(\"Hello, World!\")\n    }\n}\n```\n也可以继承App特质，\n\n```scala\nobject Hello extends App{\n    println(\"Hello, World!\")\n}\n\n//在EPFL中运行 Hello.main(null)\n```\n如果需要命令行参数，可以通过args属性得到，\n\n```scala\nobject Hello extends App{\n    if (args.length > 0) {\n        println(\"Hello, \" + args(0))\n    } else\n        println(\"Hello, World!\")\n}\n\n//创建Hello.scala把上面代码拷贝进去\n//scalac Hello.scala\n//scala  -Dscala.time Hello Fred\n//输出以下内容（-Dscala.time是运行时间）：\n//  Hello, World!\n//  [total 49ms] \n```\n\n### 枚举\nscala中没有枚举类型。标准库里提供了一个Enumeration类，可以产出枚举。\n\n```scala\nobject Color extends Enumeration {\n    val Red, Yellow, Green = Value\n    /*\n    相当于以下代码\n    val Red = Value\n    val Yellow = Value\n    val Green = Value\n    */\n}\n```\nValue是一对伴生的类和对象。每个Value对象有自己的ID和名称。可以手动设置。\n\n```scala\nobject Color extends Enumeration {\n    val Red = Value(0, \"Stop\")\n    val Yellow = Value(10) // 名称为“Yellow”\n    val Green = Value(\"Go\") // ID为11\n}\n\nColor.Red\n//Color.Value = Stop\nColor.Green.id\n//Int = 11\nColor.values\n//Color.ValueSet = Color.ValueSet(Stop, Yellow, Go)\n//可用for(c <- Color.values)来遍历这个set\n```\n\n* 如果没有手动设置枚举名称默认为变量名。\n* 如果没有手动设置枚举ID默认为前一个加1，从零开始。\n\n如果不想使用对象名调用枚举，可以import一下。就可以只简写了。\n\n```scala\nimport Color._\nRed\n//Color.Value = Stop\n```\n枚举的类型是Color.Value而不是Color。可以用type起个别名，给Color.Value起个别名Color.Color，再使用import Color._ 。这样看起来就好像枚举的类型是Color，而实际上在使用的是Color.Color。（真拗口）\n\n```scala\nimport color._\n\nobject Color extends Enumeration {\n    type Color = Value\n    val Red, Yellow, Green = Value\n}\n\ndef doWhat(color: Color) = {//实际上是Color.Color\n    ...\n}\n```\n可以用ID或者名称来进行定位，以下两行代码输出都是Color.Red对象：\n\n```scala\nColor(0) //将调用Color.apply\n//返回 Color.Value = Stop\nColor.withName(\"Yellow\")\n//返回 Color.Value = Yellow\n```\n\n\n","source":"_posts/scala/Chapter-06-对象.md","raw":"---\ntitle: 'Chapter-06-对象'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-06-对象\n\n对象 object\n\n---\n\n### 单例对象\nscala中没有静态方法和字段。只要的功效可以用object语法来实现。(object定义其实就是具体某个类的单例)\n\n```scala\nobject Accounts {\n    private var lastNumber = 0\n    def newUniqueNumber() = { lastNumber += 1; lastNumber }\n}\n\nAccounts.newUniqueNumber\n// 1\nAccounts.newUniqueNumber\n// 2\n```\n对象也可以继承其他类和特质（类似接口）。但是不能定义自己的构造函数。\n### 伴生对象\n在java中会有既有成员方法又有静态方法的类。在scala中，可以用伴生对象来达到目的。\n\n```scala\nclass Account {\n    val id = Account.newUniqueNumber() //访问伴生对象的私有方法\n}\n\nobject Accout { // 伴生对象\n    private var lastNumber = 0\n    private def newUniqueNumber() = { lastNumber += 1; lastNumber }\n}\n```\n如果类和其伴生对象在同一个源文件中，它们可以互相访问对方的private特性。\n\n在调用伴生对象方法时，要Account.newUniqueNumber()，不能直接写newUniqueNumber()。\n\n### 继承类或特质的对象\n\n\n```scala\nabstract class UndoableAction(val description: String) {\n    def undo(): Unit\n    def redo(): Unit\n}\n\nobject DoNothingAction extends UndoableAction(\"Do nothing\"){\n    override def undo() {}\n    override def undo() {}\n}\n\nval actions = Map(\"open\" -> DoNothingAction, \"save\" -> DoNothingAction) //value使用DoNothingAction对象\n```\n\n### apply方法\napply方法被定义在伴生对象中，定义之后会可以像如下代码一样使用它：\n\n\n```scala\nclass Account private (val id: Int, initBalance: Double) {\n    private var balance = initBalance\n}\n\nobject Account { //伴生对象\n    def apply(initBalance: Double) = new Account(1986, initBalance)\n}\n\nval acct = Account(1000.0) //实际调用的是apply方法，等价于Account.apply(1000.0)\n```\n\n伴生对象以下格式，apply方法会被调用，一般它会返回一个伴生对象所对应类的对象：\n\n> *对象名(参数1,参数2...,参数N)*\n\n\n```scala\nArray(\"Mary\", \"had\", \"a\", \"little\", \"lamb\")\n//等价于\nArray.apply(\"Mary\", \"had\", \"a\", \"little\", \"lamb\")\n\nArray(100)\n//返回一个只有一个元素的Int数组\nnew Array(100)\n//返回一个有100个null元素的Array[Nothing]\n```\n\n### 应用对象\nscala中的main方法写到一个对象里。方法类型为Array[String] => Unit:\n\n```scala\nobject Hello {\n    def main(args: Array[String]) {\n        println(\"Hello, World!\")\n    }\n}\n```\n也可以继承App特质，\n\n```scala\nobject Hello extends App{\n    println(\"Hello, World!\")\n}\n\n//在EPFL中运行 Hello.main(null)\n```\n如果需要命令行参数，可以通过args属性得到，\n\n```scala\nobject Hello extends App{\n    if (args.length > 0) {\n        println(\"Hello, \" + args(0))\n    } else\n        println(\"Hello, World!\")\n}\n\n//创建Hello.scala把上面代码拷贝进去\n//scalac Hello.scala\n//scala  -Dscala.time Hello Fred\n//输出以下内容（-Dscala.time是运行时间）：\n//  Hello, World!\n//  [total 49ms] \n```\n\n### 枚举\nscala中没有枚举类型。标准库里提供了一个Enumeration类，可以产出枚举。\n\n```scala\nobject Color extends Enumeration {\n    val Red, Yellow, Green = Value\n    /*\n    相当于以下代码\n    val Red = Value\n    val Yellow = Value\n    val Green = Value\n    */\n}\n```\nValue是一对伴生的类和对象。每个Value对象有自己的ID和名称。可以手动设置。\n\n```scala\nobject Color extends Enumeration {\n    val Red = Value(0, \"Stop\")\n    val Yellow = Value(10) // 名称为“Yellow”\n    val Green = Value(\"Go\") // ID为11\n}\n\nColor.Red\n//Color.Value = Stop\nColor.Green.id\n//Int = 11\nColor.values\n//Color.ValueSet = Color.ValueSet(Stop, Yellow, Go)\n//可用for(c <- Color.values)来遍历这个set\n```\n\n* 如果没有手动设置枚举名称默认为变量名。\n* 如果没有手动设置枚举ID默认为前一个加1，从零开始。\n\n如果不想使用对象名调用枚举，可以import一下。就可以只简写了。\n\n```scala\nimport Color._\nRed\n//Color.Value = Stop\n```\n枚举的类型是Color.Value而不是Color。可以用type起个别名，给Color.Value起个别名Color.Color，再使用import Color._ 。这样看起来就好像枚举的类型是Color，而实际上在使用的是Color.Color。（真拗口）\n\n```scala\nimport color._\n\nobject Color extends Enumeration {\n    type Color = Value\n    val Red, Yellow, Green = Value\n}\n\ndef doWhat(color: Color) = {//实际上是Color.Color\n    ...\n}\n```\n可以用ID或者名称来进行定位，以下两行代码输出都是Color.Red对象：\n\n```scala\nColor(0) //将调用Color.apply\n//返回 Color.Value = Stop\nColor.withName(\"Yellow\")\n//返回 Color.Value = Yellow\n```\n\n\n","slug":"scala/Chapter-06-对象","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrh6000dj5lyep7kvh4h","content":"<h2><span id=\"chapter-06-对象\"> Chapter-06-对象</span></h2>\n<p>对象 object</p>\n<hr>\n<h3><span id=\"单例对象\"> 单例对象</span></h3>\n<p>scala中没有静态方法和字段。只要的功效可以用object语法来实现。(object定义其实就是具体某个类的单例)</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Accounts</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> lastNumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">newUniqueNumber</span></span>() = &#123; lastNumber += <span class=\"number\">1</span>; lastNumber &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Accounts</span>.newUniqueNumber</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"type\">Accounts</span>.newUniqueNumber</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>对象也可以继承其他类和特质（类似接口）。但是不能定义自己的构造函数。</p>\n<h3><span id=\"伴生对象\"> 伴生对象</span></h3>\n<p>在java中会有既有成员方法又有静态方法的类。在scala中，可以用伴生对象来达到目的。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> id = <span class=\"type\">Account</span>.newUniqueNumber() <span class=\"comment\">//访问伴生对象的私有方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Accout</span> </span>&#123; <span class=\"comment\">// 伴生对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> lastNumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">newUniqueNumber</span></span>() = &#123; lastNumber += <span class=\"number\">1</span>; lastNumber &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果类和其伴生对象在同一个源文件中，它们可以互相访问对方的private特性。</p>\n<p>在调用伴生对象方法时，要Account.newUniqueNumber()，不能直接写newUniqueNumber()。</p>\n<h3><span id=\"继承类或特质的对象\"> 继承类或特质的对象</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UndoableAction</span>(<span class=\"params\">val description: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">undo</span></span>(): <span class=\"type\">Unit</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">redo</span></span>(): <span class=\"type\">Unit</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">DoNothingAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">UndoableAction</span>(<span class=\"params\">\"<span class=\"type\">Do</span> nothing\"</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">undo</span></span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">undo</span></span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> actions = <span class=\"type\">Map</span>(<span class=\"string\">\"open\"</span> -&gt; <span class=\"type\">DoNothingAction</span>, <span class=\"string\">\"save\"</span> -&gt; <span class=\"type\">DoNothingAction</span>) <span class=\"comment\">//value使用DoNothingAction对象</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"apply方法\"> apply方法</span></h3>\n<p>apply方法被定义在伴生对象中，定义之后会可以像如下代码一样使用它：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> <span class=\"title\">private</span> (<span class=\"params\">val id: <span class=\"type\">Int</span>, initBalance: <span class=\"type\">Double</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> balance = initBalance</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Account</span> </span>&#123; <span class=\"comment\">//伴生对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(initBalance: <span class=\"type\">Double</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Account</span>(<span class=\"number\">1986</span>, initBalance)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"type\">Account</span>(<span class=\"number\">1000.0</span>) <span class=\"comment\">//实际调用的是apply方法，等价于Account.apply(1000.0)</span></span><br></pre></td></tr></table></figure>\n<p>伴生对象以下格式，apply方法会被调用，一般它会返回一个伴生对象所对应类的对象：</p>\n<blockquote>\n<p><em>对象名(参数1,参数2…,参数N)</em></p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"lamb\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"type\">Array</span>.apply(<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"lamb\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回一个只有一个元素的Int数组</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"type\">Array</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回一个有100个null元素的Array[Nothing]</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"应用对象\"> 应用对象</span></h3>\n<p>scala中的main方法写到一个对象里。方法类型为Array[String] =&gt; Unit:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以继承App特质，</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span></span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在EPFL中运行 Hello.main(null)</span></span><br></pre></td></tr></table></figure>\n<p>如果需要命令行参数，可以通过args属性得到，</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Hello, \"</span> + args(<span class=\"number\">0</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        println(<span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Hello.scala把上面代码拷贝进去</span></span><br><span class=\"line\"><span class=\"comment\">//scalac Hello.scala</span></span><br><span class=\"line\"><span class=\"comment\">//scala  -Dscala.time Hello Fred</span></span><br><span class=\"line\"><span class=\"comment\">//输出以下内容（-Dscala.time是运行时间）：</span></span><br><span class=\"line\"><span class=\"comment\">//  Hello, World!</span></span><br><span class=\"line\"><span class=\"comment\">//  [total 49ms]</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"枚举\"> 枚举</span></h3>\n<p>scala中没有枚举类型。标准库里提供了一个Enumeration类，可以产出枚举。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Color</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Red</span>, <span class=\"type\">Yellow</span>, <span class=\"type\">Green</span> = <span class=\"type\">Value</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    相当于以下代码</span></span><br><span class=\"line\"><span class=\"comment\">    val Red = Value</span></span><br><span class=\"line\"><span class=\"comment\">    val Yellow = Value</span></span><br><span class=\"line\"><span class=\"comment\">    val Green = Value</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Value是一对伴生的类和对象。每个Value对象有自己的ID和名称。可以手动设置。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Color</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Red</span> = <span class=\"type\">Value</span>(<span class=\"number\">0</span>, <span class=\"string\">\"Stop\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Yellow</span> = <span class=\"type\">Value</span>(<span class=\"number\">10</span>) <span class=\"comment\">// 名称为“Yellow”</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Green</span> = <span class=\"type\">Value</span>(<span class=\"string\">\"Go\"</span>) <span class=\"comment\">// ID为11</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Color</span>.<span class=\"type\">Red</span></span><br><span class=\"line\"><span class=\"comment\">//Color.Value = Stop</span></span><br><span class=\"line\"><span class=\"type\">Color</span>.<span class=\"type\">Green</span>.id</span><br><span class=\"line\"><span class=\"comment\">//Int = 11</span></span><br><span class=\"line\"><span class=\"type\">Color</span>.values</span><br><span class=\"line\"><span class=\"comment\">//Color.ValueSet = Color.ValueSet(Stop, Yellow, Go)</span></span><br><span class=\"line\"><span class=\"comment\">//可用for(c &lt;- Color.values)来遍历这个set</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果没有手动设置枚举名称默认为变量名。</li>\n<li>如果没有手动设置枚举ID默认为前一个加1，从零开始。</li>\n</ul>\n<p>如果不想使用对象名调用枚举，可以import一下。就可以只简写了。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">Color</span>._</span><br><span class=\"line\"><span class=\"type\">Red</span></span><br><span class=\"line\"><span class=\"comment\">//Color.Value = Stop</span></span><br></pre></td></tr></table></figure>\n<p>枚举的类型是Color.Value而不是Color。可以用type起个别名，给Color.Value起个别名Color.Color，再使用import Color._ 。这样看起来就好像枚举的类型是Color，而实际上在使用的是Color.Color。（真拗口）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> color._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Color</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">Color</span> </span>= <span class=\"type\">Value</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Red</span>, <span class=\"type\">Yellow</span>, <span class=\"type\">Green</span> = <span class=\"type\">Value</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doWhat</span></span>(color: <span class=\"type\">Color</span>) = &#123;<span class=\"comment\">//实际上是Color.Color</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以用ID或者名称来进行定位，以下两行代码输出都是Color.Red对象：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Color</span>(<span class=\"number\">0</span>) <span class=\"comment\">//将调用Color.apply</span></span><br><span class=\"line\"><span class=\"comment\">//返回 Color.Value = Stop</span></span><br><span class=\"line\"><span class=\"type\">Color</span>.withName(<span class=\"string\">\"Yellow\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 Color.Value = Yellow</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-06-对象\"><a class=\"markdownIt-Anchor\" href=\"#chapter-06-对象\"></a> Chapter-06-对象</h2>\n<p>对象 object</p>\n<hr>\n<h3 id=\"单例对象\"><a class=\"markdownIt-Anchor\" href=\"#单例对象\"></a> 单例对象</h3>\n<p>scala中没有静态方法和字段。只要的功效可以用object语法来实现。(object定义其实就是具体某个类的单例)</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Accounts</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> lastNumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">newUniqueNumber</span></span>() = &#123; lastNumber += <span class=\"number\">1</span>; lastNumber &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Accounts</span>.newUniqueNumber</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"type\">Accounts</span>.newUniqueNumber</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>对象也可以继承其他类和特质（类似接口）。但是不能定义自己的构造函数。</p>\n<h3 id=\"伴生对象\"><a class=\"markdownIt-Anchor\" href=\"#伴生对象\"></a> 伴生对象</h3>\n<p>在java中会有既有成员方法又有静态方法的类。在scala中，可以用伴生对象来达到目的。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> id = <span class=\"type\">Account</span>.newUniqueNumber() <span class=\"comment\">//访问伴生对象的私有方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Accout</span> </span>&#123; <span class=\"comment\">// 伴生对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> lastNumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">newUniqueNumber</span></span>() = &#123; lastNumber += <span class=\"number\">1</span>; lastNumber &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果类和其伴生对象在同一个源文件中，它们可以互相访问对方的private特性。</p>\n<p>在调用伴生对象方法时，要Account.newUniqueNumber()，不能直接写newUniqueNumber()。</p>\n<h3 id=\"继承类或特质的对象\"><a class=\"markdownIt-Anchor\" href=\"#继承类或特质的对象\"></a> 继承类或特质的对象</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UndoableAction</span>(<span class=\"params\">val description: <span class=\"type\">String</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">undo</span></span>(): <span class=\"type\">Unit</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">redo</span></span>(): <span class=\"type\">Unit</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">DoNothingAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">UndoableAction</span>(<span class=\"params\">\"<span class=\"type\">Do</span> nothing\"</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">undo</span></span>() &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">undo</span></span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> actions = <span class=\"type\">Map</span>(<span class=\"string\">\"open\"</span> -&gt; <span class=\"type\">DoNothingAction</span>, <span class=\"string\">\"save\"</span> -&gt; <span class=\"type\">DoNothingAction</span>) <span class=\"comment\">//value使用DoNothingAction对象</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"apply方法\"><a class=\"markdownIt-Anchor\" href=\"#apply方法\"></a> apply方法</h3>\n<p>apply方法被定义在伴生对象中，定义之后会可以像如下代码一样使用它：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> <span class=\"title\">private</span> (<span class=\"params\">val id: <span class=\"type\">Int</span>, initBalance: <span class=\"type\">Double</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> balance = initBalance</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Account</span> </span>&#123; <span class=\"comment\">//伴生对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(initBalance: <span class=\"type\">Double</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Account</span>(<span class=\"number\">1986</span>, initBalance)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"type\">Account</span>(<span class=\"number\">1000.0</span>) <span class=\"comment\">//实际调用的是apply方法，等价于Account.apply(1000.0)</span></span><br></pre></td></tr></table></figure>\n<p>伴生对象以下格式，apply方法会被调用，一般它会返回一个伴生对象所对应类的对象：</p>\n<blockquote>\n<p><em>对象名(参数1,参数2…,参数N)</em></p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"lamb\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"type\">Array</span>.apply(<span class=\"string\">\"Mary\"</span>, <span class=\"string\">\"had\"</span>, <span class=\"string\">\"a\"</span>, <span class=\"string\">\"little\"</span>, <span class=\"string\">\"lamb\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Array</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回一个只有一个元素的Int数组</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"type\">Array</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回一个有100个null元素的Array[Nothing]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"应用对象\"><a class=\"markdownIt-Anchor\" href=\"#应用对象\"></a> 应用对象</h3>\n<p>scala中的main方法写到一个对象里。方法类型为Array[String] =&gt; Unit:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以继承App特质，</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span></span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在EPFL中运行 Hello.main(null)</span></span><br></pre></td></tr></table></figure>\n<p>如果需要命令行参数，可以通过args属性得到，</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Hello, \"</span> + args(<span class=\"number\">0</span>))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        println(<span class=\"string\">\"Hello, World!\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Hello.scala把上面代码拷贝进去</span></span><br><span class=\"line\"><span class=\"comment\">//scalac Hello.scala</span></span><br><span class=\"line\"><span class=\"comment\">//scala  -Dscala.time Hello Fred</span></span><br><span class=\"line\"><span class=\"comment\">//输出以下内容（-Dscala.time是运行时间）：</span></span><br><span class=\"line\"><span class=\"comment\">//  Hello, World!</span></span><br><span class=\"line\"><span class=\"comment\">//  [total 49ms]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\"></a> 枚举</h3>\n<p>scala中没有枚举类型。标准库里提供了一个Enumeration类，可以产出枚举。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Color</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Red</span>, <span class=\"type\">Yellow</span>, <span class=\"type\">Green</span> = <span class=\"type\">Value</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    相当于以下代码</span></span><br><span class=\"line\"><span class=\"comment\">    val Red = Value</span></span><br><span class=\"line\"><span class=\"comment\">    val Yellow = Value</span></span><br><span class=\"line\"><span class=\"comment\">    val Green = Value</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Value是一对伴生的类和对象。每个Value对象有自己的ID和名称。可以手动设置。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Color</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Red</span> = <span class=\"type\">Value</span>(<span class=\"number\">0</span>, <span class=\"string\">\"Stop\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Yellow</span> = <span class=\"type\">Value</span>(<span class=\"number\">10</span>) <span class=\"comment\">// 名称为“Yellow”</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Green</span> = <span class=\"type\">Value</span>(<span class=\"string\">\"Go\"</span>) <span class=\"comment\">// ID为11</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Color</span>.<span class=\"type\">Red</span></span><br><span class=\"line\"><span class=\"comment\">//Color.Value = Stop</span></span><br><span class=\"line\"><span class=\"type\">Color</span>.<span class=\"type\">Green</span>.id</span><br><span class=\"line\"><span class=\"comment\">//Int = 11</span></span><br><span class=\"line\"><span class=\"type\">Color</span>.values</span><br><span class=\"line\"><span class=\"comment\">//Color.ValueSet = Color.ValueSet(Stop, Yellow, Go)</span></span><br><span class=\"line\"><span class=\"comment\">//可用for(c &lt;- Color.values)来遍历这个set</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果没有手动设置枚举名称默认为变量名。</li>\n<li>如果没有手动设置枚举ID默认为前一个加1，从零开始。</li>\n</ul>\n<p>如果不想使用对象名调用枚举，可以import一下。就可以只简写了。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">Color</span>._</span><br><span class=\"line\"><span class=\"type\">Red</span></span><br><span class=\"line\"><span class=\"comment\">//Color.Value = Stop</span></span><br></pre></td></tr></table></figure>\n<p>枚举的类型是Color.Value而不是Color。可以用type起个别名，给Color.Value起个别名Color.Color，再使用import Color._ 。这样看起来就好像枚举的类型是Color，而实际上在使用的是Color.Color。（真拗口）</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> color._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Color</span> <span class=\"keyword\">extends</span> <span class=\"title\">Enumeration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">Color</span> </span>= <span class=\"type\">Value</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> <span class=\"type\">Red</span>, <span class=\"type\">Yellow</span>, <span class=\"type\">Green</span> = <span class=\"type\">Value</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doWhat</span></span>(color: <span class=\"type\">Color</span>) = &#123;<span class=\"comment\">//实际上是Color.Color</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以用ID或者名称来进行定位，以下两行代码输出都是Color.Red对象：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Color</span>(<span class=\"number\">0</span>) <span class=\"comment\">//将调用Color.apply</span></span><br><span class=\"line\"><span class=\"comment\">//返回 Color.Value = Stop</span></span><br><span class=\"line\"><span class=\"type\">Color</span>.withName(<span class=\"string\">\"Yellow\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//返回 Color.Value = Yellow</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter-08-继承","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-08-继承\n\nextends 继承\n\n---\n\n### 继承类\n\n```scala\nclass Employee extends Person {\n    var salary = 0.0\n}\n```\n和java不同的是，java中的final是不可变的。而scala中的final var是可以修改的，只是不能被继承。final val才相当于java的final。\n\n```scala\nclass Person {\n  val a = 1\n  final val b = 2\n}\n\nclass Employee extends Person{\n    override val a = 11 //可以继承，同时在子类中可以修改\n    override val b = 12 //错误，b是final不能继承\n}\n```\n\n### 重写方法\n在java中override注解的形式使用的，在scala中如果要复写，必须使用override修饰。\n\n    java中没有强制使用override的原因是，如果父类总修改就会出现问题。假如有Person父类，Student子类。Student类有个id属性，父类没有。这时不需要写override修饰。而后来父类突然加了一个也叫id的属性，这时子类属性上没有override。如果强制子类override修饰，子类就会报错。从而影响到别人。这也是为什么java采用注解的方式。\n    \n在scala中，调用父类方法和java相同，使用super关键字：\n\n```scala\nclass Employee extends Person {\n    override def toString = super.toString\n}\n```\n\n### 类型检查和转换\nisInstanceOf用来检查对象是否属于某个类或子类，如果返回true可以再使用asInstanceOf把这个对象转成对应的类对象。\n\n```scala\nobject Employee extends App{\n  val e = Employee()\n  val e2 = Employee\n\n  if(e.isInstanceOf[Employee]){\n    val s  = e.asInstanceOf[Employee]\n    println(s)\n  }\n\n  if(e2.isInstanceOf[Employee]) { // object对象不属于它的伴生类\n    println(\"e2\")\n  }else {\n    println(\"e2 is not Employee class object \")\n  }\n\n  def apply() = new Employee\n\n}\n\nclass Employee extends Person {\n  var salary = 0.0\n  var name  = \"allon\"\n  override def toString: String = name + \" \" + salary\n}\n\nclass Person\n\n//运行 Employee 输出：\n//allon 0.0\n//e2 is not Employee class object \n```\n由第二行输出也可以看出。单例对象不是用new关键字实例化的，所以没机会传递给它实例化参数。每个单例对象都被实现为虚拟类(synthetic class)的实例。\n\n如果想测试一个引用指向的是一个Employee而不是它的子类，\n\n```scala\nif (p.getClass  == classOf[Employee])\n```\n\n### 调用父类构造器\n在scala中不能用super的关键字来调用父类构造器\n\n```scala\nclass Employee(name:String,age:Int,val salary:Double) extends Person(name,age)\n```\n\n在java中，上述代码如下：\n\n```java\npublic class Employee extends Person { // Java\n    private double salary;\n    public Employee(String name, int age, double salary) {\n        super(name, age);\n        this.salary = salary;\n    }\n}\n```\n\n如果scala继承的是一个java类，它的主构造器必须调用java父类的一个构造方法。\n\n```scala\nclass Square(x: Int, y: Int, width: Int) extends java.awt.Rectangle(x, y, width, width)\n```\n\n### 重写字段\n\n>* def只能重写另一个def\n>* val只能重写另一个val或者不带参数的def\n>* var只能重写另一个抽象的var\n\n    由于var只能重写抽象的var，那么父类如果定义了一个非抽象的，子类就没办法重写了。\n    \n### 匿名类\n\n```scala \nval alien = new Person(\"Fred\"){\n    def greeting = \"Greetings, Earthling! My name is Fred.\"\n}\n// alien: Person{def greeting: String}\n```\n\n可以做为参数来定义：\n\n```scala\ndef meet(p: Person{def greeting: String}){\n    println(p.name + \"says: \" + p.greeting)\n}\n```\n\n### 抽象类和字段\n子类重写父类的抽象方法时，不强制使用override。\n\n```scala\nabstract class Person {\n    val id: Int\n    //没有初始化 一个抽象的有getter的字段\n    var name: String\n    //抽象的，getter\\setter俱全的字段\n}\n\nval fred = new Person {\n    val id = 1729\n    var name = \"Fred\"\n}\n```\n\n### 构造顺序和提前定义\n\n```scala \nclass Creature {\n  val range: Int = 10\n  val env: Array[Int] = new Array[Int](range)\n}\n\nclass Ant extends Creature {\n  override val range = 2\n}\n\nval ant = new Ant\nprintln(ant.env.length)\n//打印 0\n```\n以上代码打印0的原因是因为如下过程：\n1. 在new Ant的时候会先调父类构造方法，Creature的默认主构造器是Creature()。直接在默认的主构造方法中初始化range和env。\n2. 当env被初始化时，它的参数range实际上是在调用子类的range()，而这时子类还没有完成初始化，子类的range字段没值。子类的range()只能返回Int的默认值0。\n3. 等range有值了，一切都晚了，env已经初始化完成，长度为0。\n4. 简而言之，先调父类构造器，父类构造器内部又调的是子类方法，而子类还没来得及初始化。\n\n可以将子类的字段设为final或者将父类的字段设为lazy。可解决以上问题，或者将range字段设先于父类的初始化字段。\n\n```scala\nclass Ant extends { override val range = 2 } with Creature\n//这里要用with关键字\n```\n-Xcheckinit可以用来调试构造顺序问题，未初始化字段被访问的时候它会抛出异常。\n\n```bash\nscalac -Xcheckinit MyTest.scala\nscala MyTest\n#输出\nscala.UninitializedFieldError: Uninitialized field: MyTest8.scala: 15\n        at Ant.range(MyTest8.scala:15)\n        at Creature.<init>(MyTest8.scala:11)\n        at Ant.<init>(MyTest8.scala:14)\n        at MyTest9$.delayedEndpoint$MyTest9$1(MyTest8.scala:5)\n        ...  \n```\n\n### Scala继承层级\n\n* 和java中基本类型对应的类、Unit类型。都是继承自AnyVal。AnyVal是空的，只是一个继承体系的合龙标记。\n* 所有其他的类都是继承自AnyRef。相当于java中的Object类。有wait和notify/notifyAll等方法。同时还提供了一个synchronized方法，等同java中的synchronized代码块。\n\n```scala\naccount.synchronized { account.balance += amount }\n```\n\n![Scala类的继承关系][1]\n\n* 而AnyRef和AnyVal都是Any类的子类。isInstanceOf、asInstanceOf和一些判断相等和哈希的方法在Any类。\n* 如图，scala的类都是实现了ScalaObject这个空接口。\n* 同时，Null类型只有一个唯一的值null。根据图中关系，Null是不能赋值给一个AnyVal子类的变量的。比如val v:Int = null是不可以的。\n* Nothing是没有实例的，主要应用在泛型中做为一个标记，表示任何类型。如List[Nothing]表示list中可以放任何Nothing子类型。\n\n### 对象相等判断\nAnyRef有两个判等方法，eq和equals。eq判断两引用是否指向同一个对象。默认equals会直接调用eq.当想自定义比较时，要复写equals和hashCode。\n\n\n  [1]: http://7xop3k.com1.z0.glb.clouddn.com/20151127120544.jpg\n\n\n","source":"_posts/scala/Chapter-08-继承.md","raw":"---\ntitle: 'Chapter-08-继承'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-08-继承\n\nextends 继承\n\n---\n\n### 继承类\n\n```scala\nclass Employee extends Person {\n    var salary = 0.0\n}\n```\n和java不同的是，java中的final是不可变的。而scala中的final var是可以修改的，只是不能被继承。final val才相当于java的final。\n\n```scala\nclass Person {\n  val a = 1\n  final val b = 2\n}\n\nclass Employee extends Person{\n    override val a = 11 //可以继承，同时在子类中可以修改\n    override val b = 12 //错误，b是final不能继承\n}\n```\n\n### 重写方法\n在java中override注解的形式使用的，在scala中如果要复写，必须使用override修饰。\n\n    java中没有强制使用override的原因是，如果父类总修改就会出现问题。假如有Person父类，Student子类。Student类有个id属性，父类没有。这时不需要写override修饰。而后来父类突然加了一个也叫id的属性，这时子类属性上没有override。如果强制子类override修饰，子类就会报错。从而影响到别人。这也是为什么java采用注解的方式。\n    \n在scala中，调用父类方法和java相同，使用super关键字：\n\n```scala\nclass Employee extends Person {\n    override def toString = super.toString\n}\n```\n\n### 类型检查和转换\nisInstanceOf用来检查对象是否属于某个类或子类，如果返回true可以再使用asInstanceOf把这个对象转成对应的类对象。\n\n```scala\nobject Employee extends App{\n  val e = Employee()\n  val e2 = Employee\n\n  if(e.isInstanceOf[Employee]){\n    val s  = e.asInstanceOf[Employee]\n    println(s)\n  }\n\n  if(e2.isInstanceOf[Employee]) { // object对象不属于它的伴生类\n    println(\"e2\")\n  }else {\n    println(\"e2 is not Employee class object \")\n  }\n\n  def apply() = new Employee\n\n}\n\nclass Employee extends Person {\n  var salary = 0.0\n  var name  = \"allon\"\n  override def toString: String = name + \" \" + salary\n}\n\nclass Person\n\n//运行 Employee 输出：\n//allon 0.0\n//e2 is not Employee class object \n```\n由第二行输出也可以看出。单例对象不是用new关键字实例化的，所以没机会传递给它实例化参数。每个单例对象都被实现为虚拟类(synthetic class)的实例。\n\n如果想测试一个引用指向的是一个Employee而不是它的子类，\n\n```scala\nif (p.getClass  == classOf[Employee])\n```\n\n### 调用父类构造器\n在scala中不能用super的关键字来调用父类构造器\n\n```scala\nclass Employee(name:String,age:Int,val salary:Double) extends Person(name,age)\n```\n\n在java中，上述代码如下：\n\n```java\npublic class Employee extends Person { // Java\n    private double salary;\n    public Employee(String name, int age, double salary) {\n        super(name, age);\n        this.salary = salary;\n    }\n}\n```\n\n如果scala继承的是一个java类，它的主构造器必须调用java父类的一个构造方法。\n\n```scala\nclass Square(x: Int, y: Int, width: Int) extends java.awt.Rectangle(x, y, width, width)\n```\n\n### 重写字段\n\n>* def只能重写另一个def\n>* val只能重写另一个val或者不带参数的def\n>* var只能重写另一个抽象的var\n\n    由于var只能重写抽象的var，那么父类如果定义了一个非抽象的，子类就没办法重写了。\n    \n### 匿名类\n\n```scala \nval alien = new Person(\"Fred\"){\n    def greeting = \"Greetings, Earthling! My name is Fred.\"\n}\n// alien: Person{def greeting: String}\n```\n\n可以做为参数来定义：\n\n```scala\ndef meet(p: Person{def greeting: String}){\n    println(p.name + \"says: \" + p.greeting)\n}\n```\n\n### 抽象类和字段\n子类重写父类的抽象方法时，不强制使用override。\n\n```scala\nabstract class Person {\n    val id: Int\n    //没有初始化 一个抽象的有getter的字段\n    var name: String\n    //抽象的，getter\\setter俱全的字段\n}\n\nval fred = new Person {\n    val id = 1729\n    var name = \"Fred\"\n}\n```\n\n### 构造顺序和提前定义\n\n```scala \nclass Creature {\n  val range: Int = 10\n  val env: Array[Int] = new Array[Int](range)\n}\n\nclass Ant extends Creature {\n  override val range = 2\n}\n\nval ant = new Ant\nprintln(ant.env.length)\n//打印 0\n```\n以上代码打印0的原因是因为如下过程：\n1. 在new Ant的时候会先调父类构造方法，Creature的默认主构造器是Creature()。直接在默认的主构造方法中初始化range和env。\n2. 当env被初始化时，它的参数range实际上是在调用子类的range()，而这时子类还没有完成初始化，子类的range字段没值。子类的range()只能返回Int的默认值0。\n3. 等range有值了，一切都晚了，env已经初始化完成，长度为0。\n4. 简而言之，先调父类构造器，父类构造器内部又调的是子类方法，而子类还没来得及初始化。\n\n可以将子类的字段设为final或者将父类的字段设为lazy。可解决以上问题，或者将range字段设先于父类的初始化字段。\n\n```scala\nclass Ant extends { override val range = 2 } with Creature\n//这里要用with关键字\n```\n-Xcheckinit可以用来调试构造顺序问题，未初始化字段被访问的时候它会抛出异常。\n\n```bash\nscalac -Xcheckinit MyTest.scala\nscala MyTest\n#输出\nscala.UninitializedFieldError: Uninitialized field: MyTest8.scala: 15\n        at Ant.range(MyTest8.scala:15)\n        at Creature.<init>(MyTest8.scala:11)\n        at Ant.<init>(MyTest8.scala:14)\n        at MyTest9$.delayedEndpoint$MyTest9$1(MyTest8.scala:5)\n        ...  \n```\n\n### Scala继承层级\n\n* 和java中基本类型对应的类、Unit类型。都是继承自AnyVal。AnyVal是空的，只是一个继承体系的合龙标记。\n* 所有其他的类都是继承自AnyRef。相当于java中的Object类。有wait和notify/notifyAll等方法。同时还提供了一个synchronized方法，等同java中的synchronized代码块。\n\n```scala\naccount.synchronized { account.balance += amount }\n```\n\n![Scala类的继承关系][1]\n\n* 而AnyRef和AnyVal都是Any类的子类。isInstanceOf、asInstanceOf和一些判断相等和哈希的方法在Any类。\n* 如图，scala的类都是实现了ScalaObject这个空接口。\n* 同时，Null类型只有一个唯一的值null。根据图中关系，Null是不能赋值给一个AnyVal子类的变量的。比如val v:Int = null是不可以的。\n* Nothing是没有实例的，主要应用在泛型中做为一个标记，表示任何类型。如List[Nothing]表示list中可以放任何Nothing子类型。\n\n### 对象相等判断\nAnyRef有两个判等方法，eq和equals。eq判断两引用是否指向同一个对象。默认equals会直接调用eq.当想自定义比较时，要复写equals和hashCode。\n\n\n  [1]: http://7xop3k.com1.z0.glb.clouddn.com/20151127120544.jpg\n\n\n","slug":"scala/Chapter-08-继承","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrh7000gj5lyijxofj01","content":"<h2><span id=\"chapter-08-继承\"> Chapter-08-继承</span></h2>\n<p>extends 继承</p>\n<hr>\n<h3><span id=\"继承类\"> 继承类</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> salary = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和java不同的是，java中的final是不可变的。而scala中的final var是可以修改的，只是不能被继承。final val才相当于java的final。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> a = <span class=\"number\">11</span> <span class=\"comment\">//可以继承，同时在子类中可以修改</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> b = <span class=\"number\">12</span> <span class=\"comment\">//错误，b是final不能继承</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"重写方法\"> 重写方法</span></h3>\n<p>在java中override注解的形式使用的，在scala中如果要复写，必须使用override修饰。</p>\n<pre><code>java中没有强制使用override的原因是，如果父类总修改就会出现问题。假如有Person父类，Student子类。Student类有个id属性，父类没有。这时不需要写override修饰。而后来父类突然加了一个也叫id的属性，这时子类属性上没有override。如果强制子类override修饰，子类就会报错。从而影响到别人。这也是为什么java采用注解的方式。\n</code></pre>\n<p>在scala中，调用父类方法和java相同，使用super关键字：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= <span class=\"keyword\">super</span>.toString</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"类型检查和转换\"> 类型检查和转换</span></h3>\n<p>isInstanceOf用来检查对象是否属于某个类或子类，如果返回true可以再使用asInstanceOf把这个对象转成对应的类对象。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> e = <span class=\"type\">Employee</span>()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> e2 = <span class=\"type\">Employee</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e.isInstanceOf[<span class=\"type\">Employee</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s  = e.asInstanceOf[<span class=\"type\">Employee</span>]</span><br><span class=\"line\">    println(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e2.isInstanceOf[<span class=\"type\">Employee</span>]) &#123; <span class=\"comment\">// object对象不属于它的伴生类</span></span><br><span class=\"line\">    println(<span class=\"string\">\"e2\"</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"e2 is not Employee class object \"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>() = <span class=\"keyword\">new</span> <span class=\"type\">Employee</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> salary = <span class=\"number\">0.0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name  = <span class=\"string\">\"allon\"</span></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span></span>: <span class=\"type\">String</span> = name + <span class=\"string\">\" \"</span> + salary</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//运行</span> <span class=\"title\">Employee</span> <span class=\"title\">输出：</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//allon</span> 0.0</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//e2</span> <span class=\"title\">is</span> <span class=\"title\">not</span> <span class=\"title\">Employee</span> <span class=\"title\">class</span> <span class=\"title\">object</span></span></span><br></pre></td></tr></table></figure>\n<p>由第二行输出也可以看出。单例对象不是用new关键字实例化的，所以没机会传递给它实例化参数。每个单例对象都被实现为虚拟类(synthetic class)的实例。</p>\n<p>如果想测试一个引用指向的是一个Employee而不是它的子类，</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (p.getClass  == classOf[<span class=\"type\">Employee</span>])</span><br></pre></td></tr></table></figure>\n<h3><span id=\"调用父类构造器\"> 调用父类构造器</span></h3>\n<p>在scala中不能用super的关键字来调用父类构造器</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>(<span class=\"params\">name:<span class=\"type\">String</span>,age:<span class=\"type\">Int</span>,val salary:<span class=\"type\">Double</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age</span>)</span></span><br></pre></td></tr></table></figure>\n<p>在java中，上述代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123; <span class=\"comment\">// Java</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> salary;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">double</span> salary)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, age);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.salary = salary;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果scala继承的是一个java类，它的主构造器必须调用java父类的一个构造方法。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>(<span class=\"params\">x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>, width: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">awt</span>.<span class=\"title\">Rectangle</span>(<span class=\"params\">x, y, width, width</span>)</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"重写字段\"> 重写字段</span></h3>\n<blockquote>\n<ul>\n<li>def只能重写另一个def</li>\n<li>val只能重写另一个val或者不带参数的def</li>\n<li>var只能重写另一个抽象的var</li>\n</ul>\n</blockquote>\n<pre><code>由于var只能重写抽象的var，那么父类如果定义了一个非抽象的，子类就没办法重写了。\n</code></pre>\n<h3><span id=\"匿名类\"> 匿名类</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> alien = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"Fred\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span> </span>= <span class=\"string\">\"Greetings, Earthling! My name is Fred.\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// alien: Person&#123;def greeting: String&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以做为参数来定义：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">meet</span></span>(p: <span class=\"type\">Person</span>&#123;<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>: <span class=\"type\">String</span>&#125;)&#123;</span><br><span class=\"line\">    println(p.name + <span class=\"string\">\"says: \"</span> + p.greeting)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"抽象类和字段\"> 抽象类和字段</span></h3>\n<p>子类重写父类的抽象方法时，不强制使用override。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> id: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"comment\">//没有初始化 一个抽象的有getter的字段</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"comment\">//抽象的，getter\\setter俱全的字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> fred = <span class=\"keyword\">new</span> <span class=\"type\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> id = <span class=\"number\">1729</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Fred\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"构造顺序和提前定义\"> 构造顺序和提前定义</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> range: <span class=\"type\">Int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> env: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Int</span>](range)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ant</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> range = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> ant = <span class=\"keyword\">new</span> <span class=\"type\">Ant</span></span><br><span class=\"line\">println(ant.env.length)</span><br><span class=\"line\"><span class=\"comment\">//打印 0</span></span><br></pre></td></tr></table></figure>\n<p>以上代码打印0的原因是因为如下过程：</p>\n<ol>\n<li>在new Ant的时候会先调父类构造方法，Creature的默认主构造器是Creature()。直接在默认的主构造方法中初始化range和env。</li>\n<li>当env被初始化时，它的参数range实际上是在调用子类的range()，而这时子类还没有完成初始化，子类的range字段没值。子类的range()只能返回Int的默认值0。</li>\n<li>等range有值了，一切都晚了，env已经初始化完成，长度为0。</li>\n<li>简而言之，先调父类构造器，父类构造器内部又调的是子类方法，而子类还没来得及初始化。</li>\n</ol>\n<p>可以将子类的字段设为final或者将父类的字段设为lazy。可解决以上问题，或者将range字段设先于父类的初始化字段。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ant</span> <span class=\"keyword\">extends</span> </span>&#123; <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> range = <span class=\"number\">2</span> &#125; <span class=\"keyword\">with</span> <span class=\"type\">Creature</span></span><br><span class=\"line\"><span class=\"comment\">//这里要用with关键字</span></span><br></pre></td></tr></table></figure>\n<p>-Xcheckinit可以用来调试构造顺序问题，未初始化字段被访问的时候它会抛出异常。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scalac -Xcheckinit MyTest.scala</span><br><span class=\"line\">scala MyTest</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">scala.UninitializedFieldError: Uninitialized field: MyTest8.scala: 15</span><br><span class=\"line\">        at Ant.range(MyTest8.scala:15)</span><br><span class=\"line\">        at Creature.&lt;init&gt;(MyTest8.scala:11)</span><br><span class=\"line\">        at Ant.&lt;init&gt;(MyTest8.scala:14)</span><br><span class=\"line\">        at MyTest9$.delayedEndpoint<span class=\"variable\">$MyTest9</span><span class=\"variable\">$1</span>(MyTest8.scala:5)</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<h3><span id=\"scala继承层级\"> Scala继承层级</span></h3>\n<ul>\n<li>和java中基本类型对应的类、Unit类型。都是继承自AnyVal。AnyVal是空的，只是一个继承体系的合龙标记。</li>\n<li>所有其他的类都是继承自AnyRef。相当于java中的Object类。有wait和notify/notifyAll等方法。同时还提供了一个synchronized方法，等同java中的synchronized代码块。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">account.synchronized &#123; account.balance += amount &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xop3k.com1.z0.glb.clouddn.com/20151127120544.jpg\" alt=\"Scala类的继承关系\"></p>\n<ul>\n<li>而AnyRef和AnyVal都是Any类的子类。isInstanceOf、asInstanceOf和一些判断相等和哈希的方法在Any类。</li>\n<li>如图，scala的类都是实现了ScalaObject这个空接口。</li>\n<li>同时，Null类型只有一个唯一的值null。根据图中关系，Null是不能赋值给一个AnyVal子类的变量的。比如val v:Int = null是不可以的。</li>\n<li>Nothing是没有实例的，主要应用在泛型中做为一个标记，表示任何类型。如List[Nothing]表示list中可以放任何Nothing子类型。</li>\n</ul>\n<h3><span id=\"对象相等判断\"> 对象相等判断</span></h3>\n<p>AnyRef有两个判等方法，eq和equals。eq判断两引用是否指向同一个对象。默认equals会直接调用eq.当想自定义比较时，要复写equals和hashCode。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-08-继承\"><a class=\"markdownIt-Anchor\" href=\"#chapter-08-继承\"></a> Chapter-08-继承</h2>\n<p>extends 继承</p>\n<hr>\n<h3 id=\"继承类\"><a class=\"markdownIt-Anchor\" href=\"#继承类\"></a> 继承类</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> salary = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和java不同的是，java中的final是不可变的。而scala中的final var是可以修改的，只是不能被继承。final val才相当于java的final。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">val</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> a = <span class=\"number\">11</span> <span class=\"comment\">//可以继承，同时在子类中可以修改</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> b = <span class=\"number\">12</span> <span class=\"comment\">//错误，b是final不能继承</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重写方法\"><a class=\"markdownIt-Anchor\" href=\"#重写方法\"></a> 重写方法</h3>\n<p>在java中override注解的形式使用的，在scala中如果要复写，必须使用override修饰。</p>\n<pre><code>java中没有强制使用override的原因是，如果父类总修改就会出现问题。假如有Person父类，Student子类。Student类有个id属性，父类没有。这时不需要写override修饰。而后来父类突然加了一个也叫id的属性，这时子类属性上没有override。如果强制子类override修饰，子类就会报错。从而影响到别人。这也是为什么java采用注解的方式。\n</code></pre>\n<p>在scala中，调用父类方法和java相同，使用super关键字：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span> </span>= <span class=\"keyword\">super</span>.toString</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型检查和转换\"><a class=\"markdownIt-Anchor\" href=\"#类型检查和转换\"></a> 类型检查和转换</h3>\n<p>isInstanceOf用来检查对象是否属于某个类或子类，如果返回true可以再使用asInstanceOf把这个对象转成对应的类对象。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> e = <span class=\"type\">Employee</span>()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> e2 = <span class=\"type\">Employee</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e.isInstanceOf[<span class=\"type\">Employee</span>])&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> s  = e.asInstanceOf[<span class=\"type\">Employee</span>]</span><br><span class=\"line\">    println(s)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(e2.isInstanceOf[<span class=\"type\">Employee</span>]) &#123; <span class=\"comment\">// object对象不属于它的伴生类</span></span><br><span class=\"line\">    println(<span class=\"string\">\"e2\"</span>)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"e2 is not Employee class object \"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>() = <span class=\"keyword\">new</span> <span class=\"type\">Employee</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> salary = <span class=\"number\">0.0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name  = <span class=\"string\">\"allon\"</span></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toString</span></span>: <span class=\"type\">String</span> = name + <span class=\"string\">\" \"</span> + salary</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//运行</span> <span class=\"title\">Employee</span> <span class=\"title\">输出：</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//allon</span> 0.0</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//e2</span> <span class=\"title\">is</span> <span class=\"title\">not</span> <span class=\"title\">Employee</span> <span class=\"title\">class</span> <span class=\"title\">object</span></span></span><br></pre></td></tr></table></figure>\n<p>由第二行输出也可以看出。单例对象不是用new关键字实例化的，所以没机会传递给它实例化参数。每个单例对象都被实现为虚拟类(synthetic class)的实例。</p>\n<p>如果想测试一个引用指向的是一个Employee而不是它的子类，</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (p.getClass  == classOf[<span class=\"type\">Employee</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用父类构造器\"><a class=\"markdownIt-Anchor\" href=\"#调用父类构造器\"></a> 调用父类构造器</h3>\n<p>在scala中不能用super的关键字来调用父类构造器</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>(<span class=\"params\">name:<span class=\"type\">String</span>,age:<span class=\"type\">Int</span>,val salary:<span class=\"type\">Double</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age</span>)</span></span><br></pre></td></tr></table></figure>\n<p>在java中，上述代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123; <span class=\"comment\">// Java</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> salary;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age, <span class=\"keyword\">double</span> salary)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name, age);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.salary = salary;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果scala继承的是一个java类，它的主构造器必须调用java父类的一个构造方法。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span>(<span class=\"params\">x: <span class=\"type\">Int</span>, y: <span class=\"type\">Int</span>, width: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">awt</span>.<span class=\"title\">Rectangle</span>(<span class=\"params\">x, y, width, width</span>)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重写字段\"><a class=\"markdownIt-Anchor\" href=\"#重写字段\"></a> 重写字段</h3>\n<blockquote>\n<ul>\n<li>def只能重写另一个def</li>\n<li>val只能重写另一个val或者不带参数的def</li>\n<li>var只能重写另一个抽象的var</li>\n</ul>\n</blockquote>\n<pre><code>由于var只能重写抽象的var，那么父类如果定义了一个非抽象的，子类就没办法重写了。\n</code></pre>\n<h3 id=\"匿名类\"><a class=\"markdownIt-Anchor\" href=\"#匿名类\"></a> 匿名类</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> alien = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"Fred\"</span>)&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span> </span>= <span class=\"string\">\"Greetings, Earthling! My name is Fred.\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// alien: Person&#123;def greeting: String&#125;</span></span><br></pre></td></tr></table></figure>\n<p>可以做为参数来定义：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">meet</span></span>(p: <span class=\"type\">Person</span>&#123;<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span>: <span class=\"type\">String</span>&#125;)&#123;</span><br><span class=\"line\">    println(p.name + <span class=\"string\">\"says: \"</span> + p.greeting)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象类和字段\"><a class=\"markdownIt-Anchor\" href=\"#抽象类和字段\"></a> 抽象类和字段</h3>\n<p>子类重写父类的抽象方法时，不强制使用override。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> id: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"comment\">//没有初始化 一个抽象的有getter的字段</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"comment\">//抽象的，getter\\setter俱全的字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> fred = <span class=\"keyword\">new</span> <span class=\"type\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> id = <span class=\"number\">1729</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Fred\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造顺序和提前定义\"><a class=\"markdownIt-Anchor\" href=\"#构造顺序和提前定义\"></a> 构造顺序和提前定义</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> range: <span class=\"type\">Int</span> = <span class=\"number\">10</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> env: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Int</span>](range)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ant</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creature</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> range = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> ant = <span class=\"keyword\">new</span> <span class=\"type\">Ant</span></span><br><span class=\"line\">println(ant.env.length)</span><br><span class=\"line\"><span class=\"comment\">//打印 0</span></span><br></pre></td></tr></table></figure>\n<p>以上代码打印0的原因是因为如下过程：</p>\n<ol>\n<li>在new Ant的时候会先调父类构造方法，Creature的默认主构造器是Creature()。直接在默认的主构造方法中初始化range和env。</li>\n<li>当env被初始化时，它的参数range实际上是在调用子类的range()，而这时子类还没有完成初始化，子类的range字段没值。子类的range()只能返回Int的默认值0。</li>\n<li>等range有值了，一切都晚了，env已经初始化完成，长度为0。</li>\n<li>简而言之，先调父类构造器，父类构造器内部又调的是子类方法，而子类还没来得及初始化。</li>\n</ol>\n<p>可以将子类的字段设为final或者将父类的字段设为lazy。可解决以上问题，或者将range字段设先于父类的初始化字段。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ant</span> <span class=\"keyword\">extends</span> </span>&#123; <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> range = <span class=\"number\">2</span> &#125; <span class=\"keyword\">with</span> <span class=\"type\">Creature</span></span><br><span class=\"line\"><span class=\"comment\">//这里要用with关键字</span></span><br></pre></td></tr></table></figure>\n<p>-Xcheckinit可以用来调试构造顺序问题，未初始化字段被访问的时候它会抛出异常。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scalac -Xcheckinit MyTest.scala</span><br><span class=\"line\">scala MyTest</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">scala.UninitializedFieldError: Uninitialized field: MyTest8.scala: 15</span><br><span class=\"line\">        at Ant.range(MyTest8.scala:15)</span><br><span class=\"line\">        at Creature.&lt;init&gt;(MyTest8.scala:11)</span><br><span class=\"line\">        at Ant.&lt;init&gt;(MyTest8.scala:14)</span><br><span class=\"line\">        at MyTest9$.delayedEndpoint<span class=\"variable\">$MyTest9</span><span class=\"variable\">$1</span>(MyTest8.scala:5)</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"scala继承层级\"><a class=\"markdownIt-Anchor\" href=\"#scala继承层级\"></a> Scala继承层级</h3>\n<ul>\n<li>和java中基本类型对应的类、Unit类型。都是继承自AnyVal。AnyVal是空的，只是一个继承体系的合龙标记。</li>\n<li>所有其他的类都是继承自AnyRef。相当于java中的Object类。有wait和notify/notifyAll等方法。同时还提供了一个synchronized方法，等同java中的synchronized代码块。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">account.synchronized &#123; account.balance += amount &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://7xop3k.com1.z0.glb.clouddn.com/20151127120544.jpg\" alt=\"Scala类的继承关系\"></p>\n<ul>\n<li>而AnyRef和AnyVal都是Any类的子类。isInstanceOf、asInstanceOf和一些判断相等和哈希的方法在Any类。</li>\n<li>如图，scala的类都是实现了ScalaObject这个空接口。</li>\n<li>同时，Null类型只有一个唯一的值null。根据图中关系，Null是不能赋值给一个AnyVal子类的变量的。比如val v:Int = null是不可以的。</li>\n<li>Nothing是没有实例的，主要应用在泛型中做为一个标记，表示任何类型。如List[Nothing]表示list中可以放任何Nothing子类型。</li>\n</ul>\n<h3 id=\"对象相等判断\"><a class=\"markdownIt-Anchor\" href=\"#对象相等判断\"></a> 对象相等判断</h3>\n<p>AnyRef有两个判等方法，eq和equals。eq判断两引用是否指向同一个对象。默认equals会直接调用eq.当想自定义比较时，要复写equals和hashCode。</p>\n"},{"title":"Chapter-09-文件和正则表达式","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-09-文件和正则表达式\n\nfile 文件 正则表达式 Regular expression\n\n---\n\n### 读取行\n\n```scala\nimport scala.io.Source\nval source = Source.fromFile(\"myfile.txt\", \"UTF-8\")\nval iterator = source.getLines //获取Iterator[String]\nfor(l <- iterator) println(l) //直接打印\nval lines = iterator.toArray //通过Iterator获取数组\nval lines = iterator.toBuffer //通过Iterator获取数组\n```\n或者更简单粗暴的处理方式：把整个文件放到一个大字符串中\n\n```scala\nsource.mkString\nsource.close //用完要关掉\n```\n### 读取字符\n\n```scala\nfor(c <- source) println(c)\n```\n如果只是想查看下一个字符是什么，但是先不处理它。可以用source的buffered方法。然后再用head方法查看下一个字符。\n\n```scala\nval source = Source.fromFile(\"myfile.txt\", \"UTF-8\")\nval iterator = source.buffered\n\nwhile (iterator.hasNext) {\n    if (iterator.head 判断条件) \n        ...\n    else\n        ...\n}\n\nsource.close()\n```\n### 读取词和数字\n\n```scala\nval tokens = source.mkString.split(\"\\\\S+\")\nval numbers = for (w <- tokens) yield w.toDouble\n//或\nval numbers = tokens.map(_.toDouble)\n```\n从控制台读取\n\n```scala\nprint(\"How old are you? \")\nval age = readInt()\n```\n\n### 从URL或其他源读取\n\n```scala\nval source1 = Source.fromURL(\"http://www.baidu.com\", \"UTF-8\")\n//需要提前知道对方页面的字符集，可以从http头里拿到\nval source2 = Source.fromString(\"Hello, world!\")\n//这个东西有什么鸟用...\n```\n### 读取二进制文件\nscala里没有字节流读取文件的方法，要使用java类库。\n\n```scala\nval file = new File(filename)\nval in = new FileInputStream(file)\nval bytes = new Array[Byte](file.length.toInt)\nin.read(bytes)\nin.close()\n```\n### 写入文件和访问目录\nscala中没有写入和访问目录的api，需要借助java的写入文件api。\n\n### 序列化\n\n```scala\n@SerialVersionUID(42L) class Person extends Serializable\n//如果能接受默认UID，也可以省略掉@SerialVersionUID注解\nval fred = new Person\nimport java.io._\nval out = new ObjectOutputStream(new FileOutputStream(\"/tmp/test.obj\"))\nout.writeObject(fred)\nout.close()\n//序列化完成\nval in = new ObjectInputStream(new FileInputStream(\"/tmp/test.obj\"))\nval savedFred = in.readObject().asInstanceOf[Person]\n//反序列化\n```\n    scala的集合类默认都是可序列化的。可以放心使用它们做要序列化对象的成员变量。\n\n### 进程控制-执行shell\nscala中执行shell非常简单\n\n```scala\nimport sys.process._\n\"ls\" ! //执行ls命令，如果执行成功表达式的值为0，否则为非0。\n```\n如果使用!!而不是！的话，会以字符串的形式返回输\n出：\n\n```scala\nval result = \"ls\" !!\n```\n同时，还可以使用管道，用#|操作符实现：\n\n```scala\n\"ls\" #| \"grep scala\" ! \n```\n**在执行shell的过程中，实际上scala把叹号前面的字符串做了隐式转换，偷偷转换成了ProcessBuilder对象，叹号再执行ProcessBuilder对象。**\n\n#### 重定向\n\n```scala\nimport java.io.File\n\"ls\" #> new File(\"output.txt\") ! //输出到文件\n\"ls\" #>> new File(\"output.txt\") ! //追加输出到文件\n\"grep scala\" #< new File(\"output.txt\") ! //文件做为输入\nimport java.net.URL \n\"grep scala\" #< new URL(\"http://www.scala-lang.org/api/current/#package\") ! //url做为输入\n```\n进程控制支持很多熟悉的shell操作符，| > >> < && || ,使用时只要给它们的前面加个#即可。\n\n如果需要要不同的目录运行，或者使用不同的环境变量，可以用Process对象的apply方法来构造ProcessBuilder。三个参数分别为命令、执行目录、一些元组用来设置环境变量。\n\n```scala\nval p = Process(\"ls\" , new File(\"d:/\"), (\"LANG\", \"en_US\"))\np !\n```\n### 正则表达式\n从一个字符串到正则表达式对象，只需调用String类的r方法即可：\n\n```scala \nval numPattern = \"[0-9]+\".r\n```\n如果正则表达式中有反斜杠、引号的话，可以使用\"\"\"...\"\"\"\n\n```scala\nval wsnumwsPattern = \"\"\"\\s+[0-9]+\\s+\"\"\".r\n```\nfindAllIn返回所有匹配的迭代器。\n\n```scala\nfor (matchStr <- numPattern.findAllIn(\"99 bottles, 98 bottles\"))\n//或者转成数组再处理\nval matches = numPattern.findAllIn(\"99 bottles, 98 bottles\").toArray\n//Array(99, 98)\n```\n要找到首个匹配项，可使用findFirstIn,得到一个Option[String]的结果。\n\n也可以使用模式匹配：\n\n```scala\nval numitemPattern = \"([0-9]+) ([a-z]+)\".r\nval numitemPattern(num, item) = \"99 bottles\"\n//num: String = 99\n//item: String = bottles\n```\n如果想从多个匹配项中提取分组内容，可以使用for:\n\n```scala\nfor (numitemPattern(num, item) <- numitemPattern.findAllIn(\"99 bottles, 98 bottles\"))\nprintln(\"num:\" + num + \", item:\" + item)\n//num:99, item:bottles\n//num:98, item:bottles\n```\n\n\n","source":"_posts/scala/Chapter-09-文件和正则表达式.md","raw":"---\ntitle: 'Chapter-09-文件和正则表达式'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-09-文件和正则表达式\n\nfile 文件 正则表达式 Regular expression\n\n---\n\n### 读取行\n\n```scala\nimport scala.io.Source\nval source = Source.fromFile(\"myfile.txt\", \"UTF-8\")\nval iterator = source.getLines //获取Iterator[String]\nfor(l <- iterator) println(l) //直接打印\nval lines = iterator.toArray //通过Iterator获取数组\nval lines = iterator.toBuffer //通过Iterator获取数组\n```\n或者更简单粗暴的处理方式：把整个文件放到一个大字符串中\n\n```scala\nsource.mkString\nsource.close //用完要关掉\n```\n### 读取字符\n\n```scala\nfor(c <- source) println(c)\n```\n如果只是想查看下一个字符是什么，但是先不处理它。可以用source的buffered方法。然后再用head方法查看下一个字符。\n\n```scala\nval source = Source.fromFile(\"myfile.txt\", \"UTF-8\")\nval iterator = source.buffered\n\nwhile (iterator.hasNext) {\n    if (iterator.head 判断条件) \n        ...\n    else\n        ...\n}\n\nsource.close()\n```\n### 读取词和数字\n\n```scala\nval tokens = source.mkString.split(\"\\\\S+\")\nval numbers = for (w <- tokens) yield w.toDouble\n//或\nval numbers = tokens.map(_.toDouble)\n```\n从控制台读取\n\n```scala\nprint(\"How old are you? \")\nval age = readInt()\n```\n\n### 从URL或其他源读取\n\n```scala\nval source1 = Source.fromURL(\"http://www.baidu.com\", \"UTF-8\")\n//需要提前知道对方页面的字符集，可以从http头里拿到\nval source2 = Source.fromString(\"Hello, world!\")\n//这个东西有什么鸟用...\n```\n### 读取二进制文件\nscala里没有字节流读取文件的方法，要使用java类库。\n\n```scala\nval file = new File(filename)\nval in = new FileInputStream(file)\nval bytes = new Array[Byte](file.length.toInt)\nin.read(bytes)\nin.close()\n```\n### 写入文件和访问目录\nscala中没有写入和访问目录的api，需要借助java的写入文件api。\n\n### 序列化\n\n```scala\n@SerialVersionUID(42L) class Person extends Serializable\n//如果能接受默认UID，也可以省略掉@SerialVersionUID注解\nval fred = new Person\nimport java.io._\nval out = new ObjectOutputStream(new FileOutputStream(\"/tmp/test.obj\"))\nout.writeObject(fred)\nout.close()\n//序列化完成\nval in = new ObjectInputStream(new FileInputStream(\"/tmp/test.obj\"))\nval savedFred = in.readObject().asInstanceOf[Person]\n//反序列化\n```\n    scala的集合类默认都是可序列化的。可以放心使用它们做要序列化对象的成员变量。\n\n### 进程控制-执行shell\nscala中执行shell非常简单\n\n```scala\nimport sys.process._\n\"ls\" ! //执行ls命令，如果执行成功表达式的值为0，否则为非0。\n```\n如果使用!!而不是！的话，会以字符串的形式返回输\n出：\n\n```scala\nval result = \"ls\" !!\n```\n同时，还可以使用管道，用#|操作符实现：\n\n```scala\n\"ls\" #| \"grep scala\" ! \n```\n**在执行shell的过程中，实际上scala把叹号前面的字符串做了隐式转换，偷偷转换成了ProcessBuilder对象，叹号再执行ProcessBuilder对象。**\n\n#### 重定向\n\n```scala\nimport java.io.File\n\"ls\" #> new File(\"output.txt\") ! //输出到文件\n\"ls\" #>> new File(\"output.txt\") ! //追加输出到文件\n\"grep scala\" #< new File(\"output.txt\") ! //文件做为输入\nimport java.net.URL \n\"grep scala\" #< new URL(\"http://www.scala-lang.org/api/current/#package\") ! //url做为输入\n```\n进程控制支持很多熟悉的shell操作符，| > >> < && || ,使用时只要给它们的前面加个#即可。\n\n如果需要要不同的目录运行，或者使用不同的环境变量，可以用Process对象的apply方法来构造ProcessBuilder。三个参数分别为命令、执行目录、一些元组用来设置环境变量。\n\n```scala\nval p = Process(\"ls\" , new File(\"d:/\"), (\"LANG\", \"en_US\"))\np !\n```\n### 正则表达式\n从一个字符串到正则表达式对象，只需调用String类的r方法即可：\n\n```scala \nval numPattern = \"[0-9]+\".r\n```\n如果正则表达式中有反斜杠、引号的话，可以使用\"\"\"...\"\"\"\n\n```scala\nval wsnumwsPattern = \"\"\"\\s+[0-9]+\\s+\"\"\".r\n```\nfindAllIn返回所有匹配的迭代器。\n\n```scala\nfor (matchStr <- numPattern.findAllIn(\"99 bottles, 98 bottles\"))\n//或者转成数组再处理\nval matches = numPattern.findAllIn(\"99 bottles, 98 bottles\").toArray\n//Array(99, 98)\n```\n要找到首个匹配项，可使用findFirstIn,得到一个Option[String]的结果。\n\n也可以使用模式匹配：\n\n```scala\nval numitemPattern = \"([0-9]+) ([a-z]+)\".r\nval numitemPattern(num, item) = \"99 bottles\"\n//num: String = 99\n//item: String = bottles\n```\n如果想从多个匹配项中提取分组内容，可以使用for:\n\n```scala\nfor (numitemPattern(num, item) <- numitemPattern.findAllIn(\"99 bottles, 98 bottles\"))\nprintln(\"num:\" + num + \", item:\" + item)\n//num:99, item:bottles\n//num:98, item:bottles\n```\n\n\n","slug":"scala/Chapter-09-文件和正则表达式","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrh8000ij5lywm0iuram","content":"<h2><span id=\"chapter-09-文件和正则表达式\"> Chapter-09-文件和正则表达式</span></h2>\n<p>file 文件 正则表达式 Regular expression</p>\n<hr>\n<h3><span id=\"读取行\"> 读取行</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.io.<span class=\"type\">Source</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> source = <span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"myfile.txt\"</span>, <span class=\"string\">\"UTF-8\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> iterator = source.getLines <span class=\"comment\">//获取Iterator[String]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(l &lt;- iterator) println(l) <span class=\"comment\">//直接打印</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> lines = iterator.toArray <span class=\"comment\">//通过Iterator获取数组</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> lines = iterator.toBuffer <span class=\"comment\">//通过Iterator获取数组</span></span><br></pre></td></tr></table></figure>\n<p>或者更简单粗暴的处理方式：把整个文件放到一个大字符串中</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source.mkString</span><br><span class=\"line\">source.close <span class=\"comment\">//用完要关掉</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"读取字符\"> 读取字符</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(c &lt;- source) println(c)</span><br></pre></td></tr></table></figure>\n<p>如果只是想查看下一个字符是什么，但是先不处理它。可以用source的buffered方法。然后再用head方法查看下一个字符。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> source = <span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"myfile.txt\"</span>, <span class=\"string\">\"UTF-8\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> iterator = source.buffered</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iterator.head 判断条件) </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">source.close()</span><br></pre></td></tr></table></figure>\n<h3><span id=\"读取词和数字\"> 读取词和数字</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> tokens = source.mkString.split(<span class=\"string\">\"\\\\S+\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> numbers = <span class=\"keyword\">for</span> (w &lt;- tokens) <span class=\"keyword\">yield</span> w.toDouble</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> numbers = tokens.map(_.toDouble)</span><br></pre></td></tr></table></figure>\n<p>从控制台读取</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"How old are you? \"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> age = readInt()</span><br></pre></td></tr></table></figure>\n<h3><span id=\"从url或其他源读取\"> 从URL或其他源读取</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> source1 = <span class=\"type\">Source</span>.fromURL(<span class=\"string\">\"http://www.baidu.com\"</span>, <span class=\"string\">\"UTF-8\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//需要提前知道对方页面的字符集，可以从http头里拿到</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> source2 = <span class=\"type\">Source</span>.fromString(<span class=\"string\">\"Hello, world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//这个东西有什么鸟用...</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"读取二进制文件\"> 读取二进制文件</span></h3>\n<p>scala里没有字节流读取文件的方法，要使用java类库。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> file = <span class=\"keyword\">new</span> <span class=\"type\">File</span>(filename)</span><br><span class=\"line\"><span class=\"keyword\">val</span> in = <span class=\"keyword\">new</span> <span class=\"type\">FileInputStream</span>(file)</span><br><span class=\"line\"><span class=\"keyword\">val</span> bytes = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Byte</span>](file.length.toInt)</span><br><span class=\"line\">in.read(bytes)</span><br><span class=\"line\">in.close()</span><br></pre></td></tr></table></figure>\n<h3><span id=\"写入文件和访问目录\"> 写入文件和访问目录</span></h3>\n<p>scala中没有写入和访问目录的api，需要借助java的写入文件api。</p>\n<h3><span id=\"序列化\"> 序列化</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SerialVersionUID</span>(<span class=\"number\">42</span>L) <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//如果能接受默认UID，也可以省略掉@SerialVersionUID注解</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">fred</span> </span>= <span class=\"keyword\">new</span> <span class=\"type\">Person</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io._</span><br><span class=\"line\"><span class=\"keyword\">val</span> out = <span class=\"keyword\">new</span> <span class=\"type\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"type\">FileOutputStream</span>(<span class=\"string\">\"/tmp/test.obj\"</span>))</span><br><span class=\"line\">out.writeObject(fred)</span><br><span class=\"line\">out.close()</span><br><span class=\"line\"><span class=\"comment\">//序列化完成</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> in = <span class=\"keyword\">new</span> <span class=\"type\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"type\">FileInputStream</span>(<span class=\"string\">\"/tmp/test.obj\"</span>))</span><br><span class=\"line\"><span class=\"keyword\">val</span> savedFred = in.readObject().asInstanceOf[<span class=\"type\">Person</span>]</span><br><span class=\"line\"><span class=\"comment\">//反序列化</span></span><br></pre></td></tr></table></figure>\n<pre><code>scala的集合类默认都是可序列化的。可以放心使用它们做要序列化对象的成员变量。\n</code></pre>\n<h3><span id=\"进程控制-执行shell\"> 进程控制-执行shell</span></h3>\n<p>scala中执行shell非常简单</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys.process._</span><br><span class=\"line\"><span class=\"string\">\"ls\"</span> ! <span class=\"comment\">//执行ls命令，如果执行成功表达式的值为0，否则为非0。</span></span><br></pre></td></tr></table></figure>\n<p>如果使用!!而不是！的话，会以字符串的形式返回输<br>\n出：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = <span class=\"string\">\"ls\"</span> !!</span><br></pre></td></tr></table></figure>\n<p>同时，还可以使用管道，用#|操作符实现：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"ls\"</span> #| <span class=\"string\">\"grep scala\"</span> !</span><br></pre></td></tr></table></figure>\n<p><strong>在执行shell的过程中，实际上scala把叹号前面的字符串做了隐式转换，偷偷转换成了ProcessBuilder对象，叹号再执行ProcessBuilder对象。</strong></p>\n<h4><span id=\"重定向\"> 重定向</span></h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"type\">File</span></span><br><span class=\"line\"><span class=\"string\">\"ls\"</span> #&gt; <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"string\">\"output.txt\"</span>) ! <span class=\"comment\">//输出到文件</span></span><br><span class=\"line\"><span class=\"string\">\"ls\"</span> #&gt;&gt; <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"string\">\"output.txt\"</span>) ! <span class=\"comment\">//追加输出到文件</span></span><br><span class=\"line\"><span class=\"string\">\"grep scala\"</span> #&lt; <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"string\">\"output.txt\"</span>) ! <span class=\"comment\">//文件做为输入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.<span class=\"type\">URL</span> </span><br><span class=\"line\"><span class=\"string\">\"grep scala\"</span> #&lt; <span class=\"keyword\">new</span> <span class=\"type\">URL</span>(<span class=\"string\">\"http://www.scala-lang.org/api/current/#package\"</span>) ! <span class=\"comment\">//url做为输入</span></span><br></pre></td></tr></table></figure>\n<p>进程控制支持很多熟悉的shell操作符，| &gt; &gt;&gt; &lt; &amp;&amp; || ,使用时只要给它们的前面加个#即可。</p>\n<p>如果需要要不同的目录运行，或者使用不同的环境变量，可以用Process对象的apply方法来构造ProcessBuilder。三个参数分别为命令、执行目录、一些元组用来设置环境变量。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> p = <span class=\"type\">Process</span>(<span class=\"string\">\"ls\"</span> , <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"string\">\"d:/\"</span>), (<span class=\"string\">\"LANG\"</span>, <span class=\"string\">\"en_US\"</span>))</span><br><span class=\"line\">p !</span><br></pre></td></tr></table></figure>\n<h3><span id=\"正则表达式\"> 正则表达式</span></h3>\n<p>从一个字符串到正则表达式对象，只需调用String类的r方法即可：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numPattern = <span class=\"string\">\"[0-9]+\"</span>.r</span><br></pre></td></tr></table></figure>\n<p>如果正则表达式中有反斜杠、引号的话，可以使用&quot;&quot;&quot;…&quot;&quot;&quot;</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> wsnumwsPattern = <span class=\"string\">\"\"</span><span class=\"string\">\"\\s+[0-9]+\\s+\"</span><span class=\"string\">\"\"</span>.r</span><br></pre></td></tr></table></figure>\n<p>findAllIn返回所有匹配的迭代器。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (matchStr &lt;- numPattern.findAllIn(<span class=\"string\">\"99 bottles, 98 bottles\"</span>))</span><br><span class=\"line\"><span class=\"comment\">//或者转成数组再处理</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> matches = numPattern.findAllIn(<span class=\"string\">\"99 bottles, 98 bottles\"</span>).toArray</span><br><span class=\"line\"><span class=\"comment\">//Array(99, 98)</span></span><br></pre></td></tr></table></figure>\n<p>要找到首个匹配项，可使用findFirstIn,得到一个Option[String]的结果。</p>\n<p>也可以使用模式匹配：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numitemPattern = <span class=\"string\">\"([0-9]+) ([a-z]+)\"</span>.r</span><br><span class=\"line\"><span class=\"keyword\">val</span> numitemPattern(num, item) = <span class=\"string\">\"99 bottles\"</span></span><br><span class=\"line\"><span class=\"comment\">//num: String = 99</span></span><br><span class=\"line\"><span class=\"comment\">//item: String = bottles</span></span><br></pre></td></tr></table></figure>\n<p>如果想从多个匹配项中提取分组内容，可以使用for:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (numitemPattern(num, item) &lt;- numitemPattern.findAllIn(<span class=\"string\">\"99 bottles, 98 bottles\"</span>))</span><br><span class=\"line\">println(<span class=\"string\">\"num:\"</span> + num + <span class=\"string\">\", item:\"</span> + item)</span><br><span class=\"line\"><span class=\"comment\">//num:99, item:bottles</span></span><br><span class=\"line\"><span class=\"comment\">//num:98, item:bottles</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-09-文件和正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#chapter-09-文件和正则表达式\"></a> Chapter-09-文件和正则表达式</h2>\n<p>file 文件 正则表达式 Regular expression</p>\n<hr>\n<h3 id=\"读取行\"><a class=\"markdownIt-Anchor\" href=\"#读取行\"></a> 读取行</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.io.<span class=\"type\">Source</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> source = <span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"myfile.txt\"</span>, <span class=\"string\">\"UTF-8\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> iterator = source.getLines <span class=\"comment\">//获取Iterator[String]</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(l &lt;- iterator) println(l) <span class=\"comment\">//直接打印</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> lines = iterator.toArray <span class=\"comment\">//通过Iterator获取数组</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> lines = iterator.toBuffer <span class=\"comment\">//通过Iterator获取数组</span></span><br></pre></td></tr></table></figure>\n<p>或者更简单粗暴的处理方式：把整个文件放到一个大字符串中</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source.mkString</span><br><span class=\"line\">source.close <span class=\"comment\">//用完要关掉</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"读取字符\"><a class=\"markdownIt-Anchor\" href=\"#读取字符\"></a> 读取字符</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(c &lt;- source) println(c)</span><br></pre></td></tr></table></figure>\n<p>如果只是想查看下一个字符是什么，但是先不处理它。可以用source的buffered方法。然后再用head方法查看下一个字符。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> source = <span class=\"type\">Source</span>.fromFile(<span class=\"string\">\"myfile.txt\"</span>, <span class=\"string\">\"UTF-8\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> iterator = source.buffered</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iterator.head 判断条件) </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">source.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取词和数字\"><a class=\"markdownIt-Anchor\" href=\"#读取词和数字\"></a> 读取词和数字</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> tokens = source.mkString.split(<span class=\"string\">\"\\\\S+\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> numbers = <span class=\"keyword\">for</span> (w &lt;- tokens) <span class=\"keyword\">yield</span> w.toDouble</span><br><span class=\"line\"><span class=\"comment\">//或</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> numbers = tokens.map(_.toDouble)</span><br></pre></td></tr></table></figure>\n<p>从控制台读取</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"How old are you? \"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> age = readInt()</span><br></pre></td></tr></table></figure>\n<h3 id=\"从url或其他源读取\"><a class=\"markdownIt-Anchor\" href=\"#从url或其他源读取\"></a> 从URL或其他源读取</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> source1 = <span class=\"type\">Source</span>.fromURL(<span class=\"string\">\"http://www.baidu.com\"</span>, <span class=\"string\">\"UTF-8\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//需要提前知道对方页面的字符集，可以从http头里拿到</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> source2 = <span class=\"type\">Source</span>.fromString(<span class=\"string\">\"Hello, world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//这个东西有什么鸟用...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"读取二进制文件\"><a class=\"markdownIt-Anchor\" href=\"#读取二进制文件\"></a> 读取二进制文件</h3>\n<p>scala里没有字节流读取文件的方法，要使用java类库。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> file = <span class=\"keyword\">new</span> <span class=\"type\">File</span>(filename)</span><br><span class=\"line\"><span class=\"keyword\">val</span> in = <span class=\"keyword\">new</span> <span class=\"type\">FileInputStream</span>(file)</span><br><span class=\"line\"><span class=\"keyword\">val</span> bytes = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Byte</span>](file.length.toInt)</span><br><span class=\"line\">in.read(bytes)</span><br><span class=\"line\">in.close()</span><br></pre></td></tr></table></figure>\n<h3 id=\"写入文件和访问目录\"><a class=\"markdownIt-Anchor\" href=\"#写入文件和访问目录\"></a> 写入文件和访问目录</h3>\n<p>scala中没有写入和访问目录的api，需要借助java的写入文件api。</p>\n<h3 id=\"序列化\"><a class=\"markdownIt-Anchor\" href=\"#序列化\"></a> 序列化</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SerialVersionUID</span>(<span class=\"number\">42</span>L) <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Serializable</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">//如果能接受默认UID，也可以省略掉@SerialVersionUID注解</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">fred</span> </span>= <span class=\"keyword\">new</span> <span class=\"type\">Person</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io._</span><br><span class=\"line\"><span class=\"keyword\">val</span> out = <span class=\"keyword\">new</span> <span class=\"type\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"type\">FileOutputStream</span>(<span class=\"string\">\"/tmp/test.obj\"</span>))</span><br><span class=\"line\">out.writeObject(fred)</span><br><span class=\"line\">out.close()</span><br><span class=\"line\"><span class=\"comment\">//序列化完成</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> in = <span class=\"keyword\">new</span> <span class=\"type\">ObjectInputStream</span>(<span class=\"keyword\">new</span> <span class=\"type\">FileInputStream</span>(<span class=\"string\">\"/tmp/test.obj\"</span>))</span><br><span class=\"line\"><span class=\"keyword\">val</span> savedFred = in.readObject().asInstanceOf[<span class=\"type\">Person</span>]</span><br><span class=\"line\"><span class=\"comment\">//反序列化</span></span><br></pre></td></tr></table></figure>\n<pre><code>scala的集合类默认都是可序列化的。可以放心使用它们做要序列化对象的成员变量。\n</code></pre>\n<h3 id=\"进程控制-执行shell\"><a class=\"markdownIt-Anchor\" href=\"#进程控制-执行shell\"></a> 进程控制-执行shell</h3>\n<p>scala中执行shell非常简单</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys.process._</span><br><span class=\"line\"><span class=\"string\">\"ls\"</span> ! <span class=\"comment\">//执行ls命令，如果执行成功表达式的值为0，否则为非0。</span></span><br></pre></td></tr></table></figure>\n<p>如果使用!!而不是！的话，会以字符串的形式返回输<br>\n出：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> result = <span class=\"string\">\"ls\"</span> !!</span><br></pre></td></tr></table></figure>\n<p>同时，还可以使用管道，用#|操作符实现：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"ls\"</span> #| <span class=\"string\">\"grep scala\"</span> !</span><br></pre></td></tr></table></figure>\n<p><strong>在执行shell的过程中，实际上scala把叹号前面的字符串做了隐式转换，偷偷转换成了ProcessBuilder对象，叹号再执行ProcessBuilder对象。</strong></p>\n<h4 id=\"重定向\"><a class=\"markdownIt-Anchor\" href=\"#重定向\"></a> 重定向</h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.<span class=\"type\">File</span></span><br><span class=\"line\"><span class=\"string\">\"ls\"</span> #&gt; <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"string\">\"output.txt\"</span>) ! <span class=\"comment\">//输出到文件</span></span><br><span class=\"line\"><span class=\"string\">\"ls\"</span> #&gt;&gt; <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"string\">\"output.txt\"</span>) ! <span class=\"comment\">//追加输出到文件</span></span><br><span class=\"line\"><span class=\"string\">\"grep scala\"</span> #&lt; <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"string\">\"output.txt\"</span>) ! <span class=\"comment\">//文件做为输入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.<span class=\"type\">URL</span> </span><br><span class=\"line\"><span class=\"string\">\"grep scala\"</span> #&lt; <span class=\"keyword\">new</span> <span class=\"type\">URL</span>(<span class=\"string\">\"http://www.scala-lang.org/api/current/#package\"</span>) ! <span class=\"comment\">//url做为输入</span></span><br></pre></td></tr></table></figure>\n<p>进程控制支持很多熟悉的shell操作符，| &gt; &gt;&gt; &lt; &amp;&amp; || ,使用时只要给它们的前面加个#即可。</p>\n<p>如果需要要不同的目录运行，或者使用不同的环境变量，可以用Process对象的apply方法来构造ProcessBuilder。三个参数分别为命令、执行目录、一些元组用来设置环境变量。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> p = <span class=\"type\">Process</span>(<span class=\"string\">\"ls\"</span> , <span class=\"keyword\">new</span> <span class=\"type\">File</span>(<span class=\"string\">\"d:/\"</span>), (<span class=\"string\">\"LANG\"</span>, <span class=\"string\">\"en_US\"</span>))</span><br><span class=\"line\">p !</span><br></pre></td></tr></table></figure>\n<h3 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\"></a> 正则表达式</h3>\n<p>从一个字符串到正则表达式对象，只需调用String类的r方法即可：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numPattern = <span class=\"string\">\"[0-9]+\"</span>.r</span><br></pre></td></tr></table></figure>\n<p>如果正则表达式中有反斜杠、引号的话，可以使用&quot;&quot;&quot;…&quot;&quot;&quot;</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> wsnumwsPattern = <span class=\"string\">\"\"</span><span class=\"string\">\"\\s+[0-9]+\\s+\"</span><span class=\"string\">\"\"</span>.r</span><br></pre></td></tr></table></figure>\n<p>findAllIn返回所有匹配的迭代器。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (matchStr &lt;- numPattern.findAllIn(<span class=\"string\">\"99 bottles, 98 bottles\"</span>))</span><br><span class=\"line\"><span class=\"comment\">//或者转成数组再处理</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> matches = numPattern.findAllIn(<span class=\"string\">\"99 bottles, 98 bottles\"</span>).toArray</span><br><span class=\"line\"><span class=\"comment\">//Array(99, 98)</span></span><br></pre></td></tr></table></figure>\n<p>要找到首个匹配项，可使用findFirstIn,得到一个Option[String]的结果。</p>\n<p>也可以使用模式匹配：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numitemPattern = <span class=\"string\">\"([0-9]+) ([a-z]+)\"</span>.r</span><br><span class=\"line\"><span class=\"keyword\">val</span> numitemPattern(num, item) = <span class=\"string\">\"99 bottles\"</span></span><br><span class=\"line\"><span class=\"comment\">//num: String = 99</span></span><br><span class=\"line\"><span class=\"comment\">//item: String = bottles</span></span><br></pre></td></tr></table></figure>\n<p>如果想从多个匹配项中提取分组内容，可以使用for:</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (numitemPattern(num, item) &lt;- numitemPattern.findAllIn(<span class=\"string\">\"99 bottles, 98 bottles\"</span>))</span><br><span class=\"line\">println(<span class=\"string\">\"num:\"</span> + num + <span class=\"string\">\", item:\"</span> + item)</span><br><span class=\"line\"><span class=\"comment\">//num:99, item:bottles</span></span><br><span class=\"line\"><span class=\"comment\">//num:98, item:bottles</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Chapter-11-operators","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-11-operators\n\n操作符\n\n---\n\n### 标识符和操作符\n变量、函数、类等名称统称为标识符。在scala中的标识符，一般不跟关键字冲突，几乎所有的Unicode字符都可以。\n\n在scala中，很多时候操作符实际上是函数名，所以标识符和操作符这两个概念差别不大。\n\n常见的赋值操作符\n\n    a 操作符= b\n    等价于： a = a 操作符 b\n    \n---\n\n### infix（中置）\n    a 标识符 b\n    如 1 to 10\n这样的标识符在两个参数之间的表达式叫infix表达式（中置表达式）\n\n---\n\n### postfix和perfix (后置和前置)\n后置和前置表达式都一元的，就是只有一个参数。中置由于有两个参数，所以叫二元表达式。（承自haskell同样的概念）\n\n若标识符在后面，就叫后置。反之叫前置。\n    a 标识符 // 后置\n    如 1 toString\n    -a // 前置\n    \n后置操作符的优先级低于中置\n    a 中置操作符 b 后置操作符\n    上述代码等同于：\n    (a 中置操作符 b) 后置操作符\n    \n---\n\n### 左结合和右结合\n在优先级相同时，scala中的表达式默认是左结合，就是从左边向右开始计算。以下两种方式为右结合：\n\n* 以冒号（:）结尾的操作符\n* 赋值操作符\n\n用于构造List的::的操作符就是右结合的，如：\n\n```scala\n1 :: 2 :: Nil\n//意思是：\n1 :: (2 :: Nil)\n//这样先有2然后再把2挂到集合的尾部就成了List(1, 2)\n```\n右结合的二元操作符其实是第二个参数的方法：\n\n```scala\n2 :: Nil\n//等价于\nNil.::(2)\n```\n\n---\n\n### apply和update方法\n\n\n```scala\nf(arg1, arg2, ...)\nf(arg1, arg2, ...) = value\n```\n如果f不是函数，那么上面的代码实际上调用的是apply和update方法：\n\n\n```scala\nf.apply(arg1, arg2, ...) //如果f不是函数，这行代码与f(arg1, arg2, ...)等价\nf.update(arg1, arg2, ..., value) // 如果f不是函数，这行代码与f(arg1, arg2, ...) = value等价\n```\n这种机制被用在了数据和映射上，如：\n\n\n```scala\nval scores = new collection.mutable.HashMap[String, Int]\nscores(\"Bob\") = 100 //调用score.update(\"Bob\", 100)\nscores(\"Bob\")       //调用score.apply(\"Bob\")\n```\n同时，如之前章节提到的伴生对象，也是使用的这种方式：\n\n\n```scala\nclass Fraction(n: Int, d: Int)\n\nobject Fraction {\n  def apply(n: Int, d: Int) = new Fraction(n, d)\n}\n```\n---\n\n### 提取器\n顾名思义，unapply是反向apply。它接受一个对象，反解成具体的值。这种方式叫提取器（Extractor）。\n\nscala有三种提取器：\n\n* **def unapply(object: S): Option[(T1, ..., Tn)]**\n* **def unapply(object: S): Option[T]**\n* **def unapply(object: S): Boolean**\n\n#### 第一种提取器：def unapply(object: S): Option[(T1, ..., Tn)]\n\n\n```scala\nclass Fraction(n: Int, d: Int) {\n  def *(f: Fraction): Fraction = Fraction(n * f.n, d * f.d)\n}\n\nobject Fraction {\n  def apply(n: Int, d: Int) = new Fraction(n, d)\n  def unapply(input: Fraction) = if (input.d == 0) None else Some((input.n, input.d, input.hashcode))\n}\n\n\nvar Fraction(a, b, c) = Fraction(3, 4) * Fraction(2, 5)\nprintln(\"a:\" + a + \", b:\" + b + \", c:\" + c)\n//输出a:6, b:20, c:586617651\n```\nunapply反回一个Option，它包含一个元组。里面可以放一些值进去。\n注意它和模式匹配（后面会讲）有点像，但是实际上不相同：\n\n```scala\nvar Fraction(a, b, c) = ...\ncase Fraction(a, b, c) => ...\n```\n其实unapply能接受任何参数，并不局限于该类对象：\n\n\n```scala\nobject Name {\n  def unapply(input: String) = { // 接受一个String\n    val x = input.split(\" \")\n    Some(x(0), x(1))\n  }\n}\n\nval author = \"Allon Li\"\nvar Name(first, last) = author // Name.unapply(author)\nprintln(\"first:\" + first + \", last:\" + last)\n//输出 first:Allon, last:Li\n```\n每个case class（在后面会讲）默认会配备一对apply和unapply\n\n\n```scala\ncase class Name(first: String, last: String) \n\nval author = Name(\"Allon\",\"Li\") //apply\n\nauthor match {\n  case Name(first, \"Li\") => println(\"the first name : \" + first) // Name.unapply(author) ,这行代码表示：last name 必须为\"Li\"的人才能匹配成功。\n}\n```\n\n\nscala中没有一个元素的元组，如果要用unapply提取单个值，要指定它的返回值类型为Option的泛型。那就用到了，第二种提取器。如下：\n#### 第二种提取器：def unapply(object: S): Option[T]\n\n```scala\nobject Number {\n    def unapply(input: String): Option[Int] =\n    try {\n        Some(Integer.parseInt(input.trim))\n    } catch {\n        case ex: NumberFormatException => None\n    }\n}\n\nval Number(n) = \"1729\"\n```\n也可以用于测试输入，但不提取值。这时，unapply返回Boolean。这要就用到了第三种提取器：\n#### 第三种提取器：def unapply(object: S): Boolean\n\n```scala\nobject IsCompound {\n    def unapply(input: String) = input.contains(\" \")\n}\n\nauthor match {\n  case IsCompound() => println(\"is compound\") //IsCompound()里的()不能省\n  case _ => println(\"...\")\n}\n```\n**在使用case时，对于返回Option的提取器，如果调用unapply方法成功返回Some，就算是成功。对于返回Boolean的提取器，如果调用unapply方法返回true，那就是匹配成功。**\n\n同样可以把第一种和第三种提取器结合，就像以下代码：\n\n\n```scala\nauthor match{\n    case Name(first, last @ IsCompound()) => println(\"has a compound last name\")\n    case Name(first, last) => println(\"don't has a compound name\")\n    case _ => println(\"...\")\n  }\n```\n上面代码中第一个case是一种复合匹配，只有当Name这个提取器匹配成功，并且提取出来的第二个变量匹配成功IsCompound()时，整个模式才会匹配成功。在这里@定义了一个变量last，把它绑定到成功匹配了IsCompound的那个值上。\n\n#### 提取序列\n前面提到的提取器，都要固定返回值个数，也可以让提取器任意个数返回结果。这要使用unapplySeq方法。\n\n\n```scala\nobject Name {\n  def unapplySeq(input: String): Option[Seq[String]] = {\n    Some(input.split(\" \"))\n  }\n}\n\nauthor match { // author是unapplySeq的入参\n  case Name(first, \"Li\") => println(\"the first name : \" + first)\n  case Name(\"Allon\", middle, \"Li\") => println(\"the middle name : \" + middle)\n}\n```\n如果同时定义unapplySeq和冲突的unapply，会报错。\n\n\n","source":"_posts/scala/Chapter-11-operators.md","raw":"---\ntitle: 'Chapter-11-operators'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-11-operators\n\n操作符\n\n---\n\n### 标识符和操作符\n变量、函数、类等名称统称为标识符。在scala中的标识符，一般不跟关键字冲突，几乎所有的Unicode字符都可以。\n\n在scala中，很多时候操作符实际上是函数名，所以标识符和操作符这两个概念差别不大。\n\n常见的赋值操作符\n\n    a 操作符= b\n    等价于： a = a 操作符 b\n    \n---\n\n### infix（中置）\n    a 标识符 b\n    如 1 to 10\n这样的标识符在两个参数之间的表达式叫infix表达式（中置表达式）\n\n---\n\n### postfix和perfix (后置和前置)\n后置和前置表达式都一元的，就是只有一个参数。中置由于有两个参数，所以叫二元表达式。（承自haskell同样的概念）\n\n若标识符在后面，就叫后置。反之叫前置。\n    a 标识符 // 后置\n    如 1 toString\n    -a // 前置\n    \n后置操作符的优先级低于中置\n    a 中置操作符 b 后置操作符\n    上述代码等同于：\n    (a 中置操作符 b) 后置操作符\n    \n---\n\n### 左结合和右结合\n在优先级相同时，scala中的表达式默认是左结合，就是从左边向右开始计算。以下两种方式为右结合：\n\n* 以冒号（:）结尾的操作符\n* 赋值操作符\n\n用于构造List的::的操作符就是右结合的，如：\n\n```scala\n1 :: 2 :: Nil\n//意思是：\n1 :: (2 :: Nil)\n//这样先有2然后再把2挂到集合的尾部就成了List(1, 2)\n```\n右结合的二元操作符其实是第二个参数的方法：\n\n```scala\n2 :: Nil\n//等价于\nNil.::(2)\n```\n\n---\n\n### apply和update方法\n\n\n```scala\nf(arg1, arg2, ...)\nf(arg1, arg2, ...) = value\n```\n如果f不是函数，那么上面的代码实际上调用的是apply和update方法：\n\n\n```scala\nf.apply(arg1, arg2, ...) //如果f不是函数，这行代码与f(arg1, arg2, ...)等价\nf.update(arg1, arg2, ..., value) // 如果f不是函数，这行代码与f(arg1, arg2, ...) = value等价\n```\n这种机制被用在了数据和映射上，如：\n\n\n```scala\nval scores = new collection.mutable.HashMap[String, Int]\nscores(\"Bob\") = 100 //调用score.update(\"Bob\", 100)\nscores(\"Bob\")       //调用score.apply(\"Bob\")\n```\n同时，如之前章节提到的伴生对象，也是使用的这种方式：\n\n\n```scala\nclass Fraction(n: Int, d: Int)\n\nobject Fraction {\n  def apply(n: Int, d: Int) = new Fraction(n, d)\n}\n```\n---\n\n### 提取器\n顾名思义，unapply是反向apply。它接受一个对象，反解成具体的值。这种方式叫提取器（Extractor）。\n\nscala有三种提取器：\n\n* **def unapply(object: S): Option[(T1, ..., Tn)]**\n* **def unapply(object: S): Option[T]**\n* **def unapply(object: S): Boolean**\n\n#### 第一种提取器：def unapply(object: S): Option[(T1, ..., Tn)]\n\n\n```scala\nclass Fraction(n: Int, d: Int) {\n  def *(f: Fraction): Fraction = Fraction(n * f.n, d * f.d)\n}\n\nobject Fraction {\n  def apply(n: Int, d: Int) = new Fraction(n, d)\n  def unapply(input: Fraction) = if (input.d == 0) None else Some((input.n, input.d, input.hashcode))\n}\n\n\nvar Fraction(a, b, c) = Fraction(3, 4) * Fraction(2, 5)\nprintln(\"a:\" + a + \", b:\" + b + \", c:\" + c)\n//输出a:6, b:20, c:586617651\n```\nunapply反回一个Option，它包含一个元组。里面可以放一些值进去。\n注意它和模式匹配（后面会讲）有点像，但是实际上不相同：\n\n```scala\nvar Fraction(a, b, c) = ...\ncase Fraction(a, b, c) => ...\n```\n其实unapply能接受任何参数，并不局限于该类对象：\n\n\n```scala\nobject Name {\n  def unapply(input: String) = { // 接受一个String\n    val x = input.split(\" \")\n    Some(x(0), x(1))\n  }\n}\n\nval author = \"Allon Li\"\nvar Name(first, last) = author // Name.unapply(author)\nprintln(\"first:\" + first + \", last:\" + last)\n//输出 first:Allon, last:Li\n```\n每个case class（在后面会讲）默认会配备一对apply和unapply\n\n\n```scala\ncase class Name(first: String, last: String) \n\nval author = Name(\"Allon\",\"Li\") //apply\n\nauthor match {\n  case Name(first, \"Li\") => println(\"the first name : \" + first) // Name.unapply(author) ,这行代码表示：last name 必须为\"Li\"的人才能匹配成功。\n}\n```\n\n\nscala中没有一个元素的元组，如果要用unapply提取单个值，要指定它的返回值类型为Option的泛型。那就用到了，第二种提取器。如下：\n#### 第二种提取器：def unapply(object: S): Option[T]\n\n```scala\nobject Number {\n    def unapply(input: String): Option[Int] =\n    try {\n        Some(Integer.parseInt(input.trim))\n    } catch {\n        case ex: NumberFormatException => None\n    }\n}\n\nval Number(n) = \"1729\"\n```\n也可以用于测试输入，但不提取值。这时，unapply返回Boolean。这要就用到了第三种提取器：\n#### 第三种提取器：def unapply(object: S): Boolean\n\n```scala\nobject IsCompound {\n    def unapply(input: String) = input.contains(\" \")\n}\n\nauthor match {\n  case IsCompound() => println(\"is compound\") //IsCompound()里的()不能省\n  case _ => println(\"...\")\n}\n```\n**在使用case时，对于返回Option的提取器，如果调用unapply方法成功返回Some，就算是成功。对于返回Boolean的提取器，如果调用unapply方法返回true，那就是匹配成功。**\n\n同样可以把第一种和第三种提取器结合，就像以下代码：\n\n\n```scala\nauthor match{\n    case Name(first, last @ IsCompound()) => println(\"has a compound last name\")\n    case Name(first, last) => println(\"don't has a compound name\")\n    case _ => println(\"...\")\n  }\n```\n上面代码中第一个case是一种复合匹配，只有当Name这个提取器匹配成功，并且提取出来的第二个变量匹配成功IsCompound()时，整个模式才会匹配成功。在这里@定义了一个变量last，把它绑定到成功匹配了IsCompound的那个值上。\n\n#### 提取序列\n前面提到的提取器，都要固定返回值个数，也可以让提取器任意个数返回结果。这要使用unapplySeq方法。\n\n\n```scala\nobject Name {\n  def unapplySeq(input: String): Option[Seq[String]] = {\n    Some(input.split(\" \"))\n  }\n}\n\nauthor match { // author是unapplySeq的入参\n  case Name(first, \"Li\") => println(\"the first name : \" + first)\n  case Name(\"Allon\", middle, \"Li\") => println(\"the middle name : \" + middle)\n}\n```\n如果同时定义unapplySeq和冲突的unapply，会报错。\n\n\n","slug":"scala/Chapter-11-operators","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrh8000kj5lycbfxqhfz","content":"<h2><span id=\"chapter-11-operators\"> Chapter-11-operators</span></h2>\n<p>操作符</p>\n<hr>\n<h3><span id=\"标识符和操作符\"> 标识符和操作符</span></h3>\n<p>变量、函数、类等名称统称为标识符。在scala中的标识符，一般不跟关键字冲突，几乎所有的Unicode字符都可以。</p>\n<p>在scala中，很多时候操作符实际上是函数名，所以标识符和操作符这两个概念差别不大。</p>\n<p>常见的赋值操作符</p>\n<pre><code>a 操作符= b\n等价于： a = a 操作符 b\n</code></pre>\n<hr>\n<h3><span id=\"infix中置\"> infix（中置）</span></h3>\n<pre><code>a 标识符 b\n如 1 to 10\n</code></pre>\n<p>这样的标识符在两个参数之间的表达式叫infix表达式（中置表达式）</p>\n<hr>\n<h3><span id=\"postfix和perfix-后置和前置\"> postfix和perfix (后置和前置)</span></h3>\n<p>后置和前置表达式都一元的，就是只有一个参数。中置由于有两个参数，所以叫二元表达式。（承自haskell同样的概念）</p>\n<p>若标识符在后面，就叫后置。反之叫前置。<br>\na 标识符 // 后置<br>\n如 1 toString<br>\n-a // 前置</p>\n<p>后置操作符的优先级低于中置<br>\na 中置操作符 b 后置操作符<br>\n上述代码等同于：<br>\n(a 中置操作符 b) 后置操作符</p>\n<hr>\n<h3><span id=\"左结合和右结合\"> 左结合和右结合</span></h3>\n<p>在优先级相同时，scala中的表达式默认是左结合，就是从左边向右开始计算。以下两种方式为右结合：</p>\n<ul>\n<li>以冒号（:）结尾的操作符</li>\n<li>赋值操作符</li>\n</ul>\n<p>用于构造List的::的操作符就是右结合的，如：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> :: <span class=\"number\">2</span> :: <span class=\"type\">Nil</span></span><br><span class=\"line\"><span class=\"comment\">//意思是：</span></span><br><span class=\"line\"><span class=\"number\">1</span> :: (<span class=\"number\">2</span> :: <span class=\"type\">Nil</span>)</span><br><span class=\"line\"><span class=\"comment\">//这样先有2然后再把2挂到集合的尾部就成了List(1, 2)</span></span><br></pre></td></tr></table></figure>\n<p>右结合的二元操作符其实是第二个参数的方法：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> :: <span class=\"type\">Nil</span></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"type\">Nil</span>.::(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3><span id=\"apply和update方法\"> apply和update方法</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(arg1, arg2, ...)</span><br><span class=\"line\">f(arg1, arg2, ...) = value</span><br></pre></td></tr></table></figure>\n<p>如果f不是函数，那么上面的代码实际上调用的是apply和update方法：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.apply(arg1, arg2, ...) <span class=\"comment\">//如果f不是函数，这行代码与f(arg1, arg2, ...)等价</span></span><br><span class=\"line\">f.update(arg1, arg2, ..., value) <span class=\"comment\">// 如果f不是函数，这行代码与f(arg1, arg2, ...) = value等价</span></span><br></pre></td></tr></table></figure>\n<p>这种机制被用在了数据和映射上，如：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> scores = <span class=\"keyword\">new</span> collection.mutable.<span class=\"type\">HashMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\">scores(<span class=\"string\">\"Bob\"</span>) = <span class=\"number\">100</span> <span class=\"comment\">//调用score.update(\"Bob\", 100)</span></span><br><span class=\"line\">scores(<span class=\"string\">\"Bob\"</span>)       <span class=\"comment\">//调用score.apply(\"Bob\")</span></span><br></pre></td></tr></table></figure>\n<p>同时，如之前章节提到的伴生对象，也是使用的这种方式：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fraction</span>(<span class=\"params\">n: <span class=\"type\">Int</span>, d: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">object</span> <span class=\"title\">Fraction</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(n: <span class=\"type\">Int</span>, d: <span class=\"type\">Int</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Fraction</span>(n, d)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3><span id=\"提取器\"> 提取器</span></h3>\n<p>顾名思义，unapply是反向apply。它接受一个对象，反解成具体的值。这种方式叫提取器（Extractor）。</p>\n<p>scala有三种提取器：</p>\n<ul>\n<li><strong>def unapply(object: S): Option[(T1, …, Tn)]</strong></li>\n<li><strong>def unapply(object: S): Option[T]</strong></li>\n<li><strong>def unapply(object: S): Boolean</strong></li>\n</ul>\n<h4><span id=\"第一种提取器def-unapplyobject-s-optiont1-tn\"> 第一种提取器：def unapply(object: S): Option[(T1, …, Tn)]</span></h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fraction</span>(<span class=\"params\">n: <span class=\"type\">Int</span>, d: <span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">*</span></span>(f: <span class=\"type\">Fraction</span>): <span class=\"type\">Fraction</span> = <span class=\"type\">Fraction</span>(n * f.n, d * f.d)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Fraction</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(n: <span class=\"type\">Int</span>, d: <span class=\"type\">Int</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Fraction</span>(n, d)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(input: <span class=\"type\">Fraction</span>) = <span class=\"keyword\">if</span> (input.d == <span class=\"number\">0</span>) <span class=\"type\">None</span> <span class=\"keyword\">else</span> <span class=\"type\">Some</span>((input.n, input.d, input.hashcode))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Fraction</span>(a, b, c) = <span class=\"type\">Fraction</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>) * <span class=\"type\">Fraction</span>(<span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">println(<span class=\"string\">\"a:\"</span> + a + <span class=\"string\">\", b:\"</span> + b + <span class=\"string\">\", c:\"</span> + c)</span><br><span class=\"line\"><span class=\"comment\">//输出a:6, b:20, c:586617651</span></span><br></pre></td></tr></table></figure>\n<p>unapply反回一个Option，它包含一个元组。里面可以放一些值进去。<br>\n注意它和模式匹配（后面会讲）有点像，但是实际上不相同：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Fraction</span>(a, b, c) = ...</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"type\">Fraction</span>(a, b, c) =&gt; ...</span><br></pre></td></tr></table></figure>\n<p>其实unapply能接受任何参数，并不局限于该类对象：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(input: <span class=\"type\">String</span>) = &#123; <span class=\"comment\">// 接受一个String</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> x = input.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    <span class=\"type\">Some</span>(x(<span class=\"number\">0</span>), x(<span class=\"number\">1</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> author = <span class=\"string\">\"Allon Li\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Name</span>(first, last) = author <span class=\"comment\">// Name.unapply(author)</span></span><br><span class=\"line\">println(<span class=\"string\">\"first:\"</span> + first + <span class=\"string\">\", last:\"</span> + last)</span><br><span class=\"line\"><span class=\"comment\">//输出 first:Allon, last:Li</span></span><br></pre></td></tr></table></figure>\n<p>每个case class（在后面会讲）默认会配备一对apply和unapply</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span>(<span class=\"params\">first: <span class=\"type\">String</span>, last: <span class=\"type\">String</span></span>) </span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">author</span> </span>= <span class=\"type\">Name</span>(<span class=\"string\">\"Allon\"</span>,<span class=\"string\">\"Li\"</span>) <span class=\"comment\">//apply</span></span><br><span class=\"line\"></span><br><span class=\"line\">author <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(first, <span class=\"string\">\"Li\"</span>) =&gt; println(<span class=\"string\">\"the first name : \"</span> + first) <span class=\"comment\">// Name.unapply(author) ,这行代码表示：last name 必须为\"Li\"的人才能匹配成功。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scala中没有一个元素的元组，如果要用unapply提取单个值，要指定它的返回值类型为Option的泛型。那就用到了，第二种提取器。如下：</p>\n<h4><span id=\"第二种提取器def-unapplyobject-s-optiont\"> 第二种提取器：def unapply(object: S): Option[T]</span></h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(input: <span class=\"type\">String</span>): <span class=\"type\">Option</span>[<span class=\"type\">Int</span>] =</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Some</span>(<span class=\"type\">Integer</span>.parseInt(input.trim))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ex: <span class=\"type\">NumberFormatException</span> =&gt; <span class=\"type\">None</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> <span class=\"type\">Number</span>(n) = <span class=\"string\">\"1729\"</span></span><br></pre></td></tr></table></figure>\n<p>也可以用于测试输入，但不提取值。这时，unapply返回Boolean。这要就用到了第三种提取器：</p>\n<h4><span id=\"第三种提取器def-unapplyobject-s-boolean\"> 第三种提取器：def unapply(object: S): Boolean</span></h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">IsCompound</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(input: <span class=\"type\">String</span>) = input.contains(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">author <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">IsCompound</span>() =&gt; println(<span class=\"string\">\"is compound\"</span>) <span class=\"comment\">//IsCompound()里的()不能省</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>在使用case时，对于返回Option的提取器，如果调用unapply方法成功返回Some，就算是成功。对于返回Boolean的提取器，如果调用unapply方法返回true，那就是匹配成功。</strong></p>\n<p>同样可以把第一种和第三种提取器结合，就像以下代码：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author <span class=\"keyword\">match</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(first, last @ <span class=\"type\">IsCompound</span>()) =&gt; println(<span class=\"string\">\"has a compound last name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(first, last) =&gt; println(<span class=\"string\">\"don't has a compound name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中第一个case是一种复合匹配，只有当Name这个提取器匹配成功，并且提取出来的第二个变量匹配成功IsCompound()时，整个模式才会匹配成功。在这里@定义了一个变量last，把它绑定到成功匹配了IsCompound的那个值上。</p>\n<h4><span id=\"提取序列\"> 提取序列</span></h4>\n<p>前面提到的提取器，都要固定返回值个数，也可以让提取器任意个数返回结果。这要使用unapplySeq方法。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapplySeq</span></span>(input: <span class=\"type\">String</span>): <span class=\"type\">Option</span>[<span class=\"type\">Seq</span>[<span class=\"type\">String</span>]] = &#123;</span><br><span class=\"line\">    <span class=\"type\">Some</span>(input.split(<span class=\"string\">\" \"</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">author <span class=\"keyword\">match</span> &#123; <span class=\"comment\">// author是unapplySeq的入参</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(first, <span class=\"string\">\"Li\"</span>) =&gt; println(<span class=\"string\">\"the first name : \"</span> + first)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"string\">\"Allon\"</span>, middle, <span class=\"string\">\"Li\"</span>) =&gt; println(<span class=\"string\">\"the middle name : \"</span> + middle)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果同时定义unapplySeq和冲突的unapply，会报错。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-11-operators\"><a class=\"markdownIt-Anchor\" href=\"#chapter-11-operators\"></a> Chapter-11-operators</h2>\n<p>操作符</p>\n<hr>\n<h3 id=\"标识符和操作符\"><a class=\"markdownIt-Anchor\" href=\"#标识符和操作符\"></a> 标识符和操作符</h3>\n<p>变量、函数、类等名称统称为标识符。在scala中的标识符，一般不跟关键字冲突，几乎所有的Unicode字符都可以。</p>\n<p>在scala中，很多时候操作符实际上是函数名，所以标识符和操作符这两个概念差别不大。</p>\n<p>常见的赋值操作符</p>\n<pre><code>a 操作符= b\n等价于： a = a 操作符 b\n</code></pre>\n<hr>\n<h3 id=\"infix中置\"><a class=\"markdownIt-Anchor\" href=\"#infix中置\"></a> infix（中置）</h3>\n<pre><code>a 标识符 b\n如 1 to 10\n</code></pre>\n<p>这样的标识符在两个参数之间的表达式叫infix表达式（中置表达式）</p>\n<hr>\n<h3 id=\"postfix和perfix-后置和前置\"><a class=\"markdownIt-Anchor\" href=\"#postfix和perfix-后置和前置\"></a> postfix和perfix (后置和前置)</h3>\n<p>后置和前置表达式都一元的，就是只有一个参数。中置由于有两个参数，所以叫二元表达式。（承自haskell同样的概念）</p>\n<p>若标识符在后面，就叫后置。反之叫前置。<br>\na 标识符 // 后置<br>\n如 1 toString<br>\n-a // 前置</p>\n<p>后置操作符的优先级低于中置<br>\na 中置操作符 b 后置操作符<br>\n上述代码等同于：<br>\n(a 中置操作符 b) 后置操作符</p>\n<hr>\n<h3 id=\"左结合和右结合\"><a class=\"markdownIt-Anchor\" href=\"#左结合和右结合\"></a> 左结合和右结合</h3>\n<p>在优先级相同时，scala中的表达式默认是左结合，就是从左边向右开始计算。以下两种方式为右结合：</p>\n<ul>\n<li>以冒号（:）结尾的操作符</li>\n<li>赋值操作符</li>\n</ul>\n<p>用于构造List的::的操作符就是右结合的，如：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> :: <span class=\"number\">2</span> :: <span class=\"type\">Nil</span></span><br><span class=\"line\"><span class=\"comment\">//意思是：</span></span><br><span class=\"line\"><span class=\"number\">1</span> :: (<span class=\"number\">2</span> :: <span class=\"type\">Nil</span>)</span><br><span class=\"line\"><span class=\"comment\">//这样先有2然后再把2挂到集合的尾部就成了List(1, 2)</span></span><br></pre></td></tr></table></figure>\n<p>右结合的二元操作符其实是第二个参数的方法：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span> :: <span class=\"type\">Nil</span></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"type\">Nil</span>.::(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"apply和update方法\"><a class=\"markdownIt-Anchor\" href=\"#apply和update方法\"></a> apply和update方法</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(arg1, arg2, ...)</span><br><span class=\"line\">f(arg1, arg2, ...) = value</span><br></pre></td></tr></table></figure>\n<p>如果f不是函数，那么上面的代码实际上调用的是apply和update方法：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.apply(arg1, arg2, ...) <span class=\"comment\">//如果f不是函数，这行代码与f(arg1, arg2, ...)等价</span></span><br><span class=\"line\">f.update(arg1, arg2, ..., value) <span class=\"comment\">// 如果f不是函数，这行代码与f(arg1, arg2, ...) = value等价</span></span><br></pre></td></tr></table></figure>\n<p>这种机制被用在了数据和映射上，如：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> scores = <span class=\"keyword\">new</span> collection.mutable.<span class=\"type\">HashMap</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>]</span><br><span class=\"line\">scores(<span class=\"string\">\"Bob\"</span>) = <span class=\"number\">100</span> <span class=\"comment\">//调用score.update(\"Bob\", 100)</span></span><br><span class=\"line\">scores(<span class=\"string\">\"Bob\"</span>)       <span class=\"comment\">//调用score.apply(\"Bob\")</span></span><br></pre></td></tr></table></figure>\n<p>同时，如之前章节提到的伴生对象，也是使用的这种方式：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fraction</span>(<span class=\"params\">n: <span class=\"type\">Int</span>, d: <span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">object</span> <span class=\"title\">Fraction</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(n: <span class=\"type\">Int</span>, d: <span class=\"type\">Int</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Fraction</span>(n, d)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"提取器\"><a class=\"markdownIt-Anchor\" href=\"#提取器\"></a> 提取器</h3>\n<p>顾名思义，unapply是反向apply。它接受一个对象，反解成具体的值。这种方式叫提取器（Extractor）。</p>\n<p>scala有三种提取器：</p>\n<ul>\n<li><strong>def unapply(object: S): Option[(T1, …, Tn)]</strong></li>\n<li><strong>def unapply(object: S): Option[T]</strong></li>\n<li><strong>def unapply(object: S): Boolean</strong></li>\n</ul>\n<h4 id=\"第一种提取器def-unapplyobject-s-optiont1-tn\"><a class=\"markdownIt-Anchor\" href=\"#第一种提取器def-unapplyobject-s-optiont1-tn\"></a> 第一种提取器：def unapply(object: S): Option[(T1, …, Tn)]</h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fraction</span>(<span class=\"params\">n: <span class=\"type\">Int</span>, d: <span class=\"type\">Int</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">*</span></span>(f: <span class=\"type\">Fraction</span>): <span class=\"type\">Fraction</span> = <span class=\"type\">Fraction</span>(n * f.n, d * f.d)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Fraction</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(n: <span class=\"type\">Int</span>, d: <span class=\"type\">Int</span>) = <span class=\"keyword\">new</span> <span class=\"type\">Fraction</span>(n, d)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(input: <span class=\"type\">Fraction</span>) = <span class=\"keyword\">if</span> (input.d == <span class=\"number\">0</span>) <span class=\"type\">None</span> <span class=\"keyword\">else</span> <span class=\"type\">Some</span>((input.n, input.d, input.hashcode))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Fraction</span>(a, b, c) = <span class=\"type\">Fraction</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>) * <span class=\"type\">Fraction</span>(<span class=\"number\">2</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">println(<span class=\"string\">\"a:\"</span> + a + <span class=\"string\">\", b:\"</span> + b + <span class=\"string\">\", c:\"</span> + c)</span><br><span class=\"line\"><span class=\"comment\">//输出a:6, b:20, c:586617651</span></span><br></pre></td></tr></table></figure>\n<p>unapply反回一个Option，它包含一个元组。里面可以放一些值进去。<br>\n注意它和模式匹配（后面会讲）有点像，但是实际上不相同：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Fraction</span>(a, b, c) = ...</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"type\">Fraction</span>(a, b, c) =&gt; ...</span><br></pre></td></tr></table></figure>\n<p>其实unapply能接受任何参数，并不局限于该类对象：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(input: <span class=\"type\">String</span>) = &#123; <span class=\"comment\">// 接受一个String</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> x = input.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    <span class=\"type\">Some</span>(x(<span class=\"number\">0</span>), x(<span class=\"number\">1</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> author = <span class=\"string\">\"Allon Li\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"type\">Name</span>(first, last) = author <span class=\"comment\">// Name.unapply(author)</span></span><br><span class=\"line\">println(<span class=\"string\">\"first:\"</span> + first + <span class=\"string\">\", last:\"</span> + last)</span><br><span class=\"line\"><span class=\"comment\">//输出 first:Allon, last:Li</span></span><br></pre></td></tr></table></figure>\n<p>每个case class（在后面会讲）默认会配备一对apply和unapply</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span>(<span class=\"params\">first: <span class=\"type\">String</span>, last: <span class=\"type\">String</span></span>) </span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">val</span> <span class=\"title\">author</span> </span>= <span class=\"type\">Name</span>(<span class=\"string\">\"Allon\"</span>,<span class=\"string\">\"Li\"</span>) <span class=\"comment\">//apply</span></span><br><span class=\"line\"></span><br><span class=\"line\">author <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(first, <span class=\"string\">\"Li\"</span>) =&gt; println(<span class=\"string\">\"the first name : \"</span> + first) <span class=\"comment\">// Name.unapply(author) ,这行代码表示：last name 必须为\"Li\"的人才能匹配成功。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>scala中没有一个元素的元组，如果要用unapply提取单个值，要指定它的返回值类型为Option的泛型。那就用到了，第二种提取器。如下：</p>\n<h4 id=\"第二种提取器def-unapplyobject-s-optiont\"><a class=\"markdownIt-Anchor\" href=\"#第二种提取器def-unapplyobject-s-optiont\"></a> 第二种提取器：def unapply(object: S): Option[T]</h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(input: <span class=\"type\">String</span>): <span class=\"type\">Option</span>[<span class=\"type\">Int</span>] =</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Some</span>(<span class=\"type\">Integer</span>.parseInt(input.trim))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ex: <span class=\"type\">NumberFormatException</span> =&gt; <span class=\"type\">None</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> <span class=\"type\">Number</span>(n) = <span class=\"string\">\"1729\"</span></span><br></pre></td></tr></table></figure>\n<p>也可以用于测试输入，但不提取值。这时，unapply返回Boolean。这要就用到了第三种提取器：</p>\n<h4 id=\"第三种提取器def-unapplyobject-s-boolean\"><a class=\"markdownIt-Anchor\" href=\"#第三种提取器def-unapplyobject-s-boolean\"></a> 第三种提取器：def unapply(object: S): Boolean</h4>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">IsCompound</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(input: <span class=\"type\">String</span>) = input.contains(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">author <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">IsCompound</span>() =&gt; println(<span class=\"string\">\"is compound\"</span>) <span class=\"comment\">//IsCompound()里的()不能省</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>在使用case时，对于返回Option的提取器，如果调用unapply方法成功返回Some，就算是成功。对于返回Boolean的提取器，如果调用unapply方法返回true，那就是匹配成功。</strong></p>\n<p>同样可以把第一种和第三种提取器结合，就像以下代码：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author <span class=\"keyword\">match</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(first, last @ <span class=\"type\">IsCompound</span>()) =&gt; println(<span class=\"string\">\"has a compound last name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(first, last) =&gt; println(<span class=\"string\">\"don't has a compound name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> _ =&gt; println(<span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中第一个case是一种复合匹配，只有当Name这个提取器匹配成功，并且提取出来的第二个变量匹配成功IsCompound()时，整个模式才会匹配成功。在这里@定义了一个变量last，把它绑定到成功匹配了IsCompound的那个值上。</p>\n<h4 id=\"提取序列\"><a class=\"markdownIt-Anchor\" href=\"#提取序列\"></a> 提取序列</h4>\n<p>前面提到的提取器，都要固定返回值个数，也可以让提取器任意个数返回结果。这要使用unapplySeq方法。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapplySeq</span></span>(input: <span class=\"type\">String</span>): <span class=\"type\">Option</span>[<span class=\"type\">Seq</span>[<span class=\"type\">String</span>]] = &#123;</span><br><span class=\"line\">    <span class=\"type\">Some</span>(input.split(<span class=\"string\">\" \"</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">author <span class=\"keyword\">match</span> &#123; <span class=\"comment\">// author是unapplySeq的入参</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(first, <span class=\"string\">\"Li\"</span>) =&gt; println(<span class=\"string\">\"the first name : \"</span> + first)</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Name</span>(<span class=\"string\">\"Allon\"</span>, middle, <span class=\"string\">\"Li\"</span>) =&gt; println(<span class=\"string\">\"the middle name : \"</span> + middle)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果同时定义unapplySeq和冲突的unapply，会报错。</p>\n"},{"title":"书法 - 基础理论","catalog":true,"date":"2017-11-22T09:21:29.000Z","subtitle":"聚焦王羲之","header-img":"/img/03.jpg","_content":"\n\n# 1 基础理论\n\n标签： 书法\n\n---\n\n## 三种字体\n就汉字而论字体，有三种不同的含义：\n\n* 一指文字的形体叫字体，如：篆字，隶字，草字。汉字有篆隶楷行草5种字体。\n* 二指书写的字体叫书体，篆书中的“玉箸篆”，线条细的“铁线篆”，又比如英文里边，可以写出各种书体，在电脑中我们称为字型。主要书体有大篆，小篆，刻符，虫书，署书，殳书，摹印，隶书。\n* 三指书法家的字体叫书风。颜体、柳体。\n\n## 什么是书法\n书写某一个字体，并不是书法。 \n> 书写：结构对不对 \n书法：形体美不美\n\n\n## 学书法从哪里入手\n古人学书法，先求笔法。\n笔法是有共性的。\n王羲之笔法是典范。\n# 聚焦王羲之\n\n![image_1bgaphumq1m1ucao1hdrr2q19s013.png-207.7kB][1]\n王羲之笔法不外传，智永之前，是家族传授，不授外人，智永是王羲之的第七代孙，他本身是杰出的书法家，光是《真草千字文》就写了八百本。智永之后，才开始师徒传授。\n\n![image_1bgapg3a8cijuqhc56ra11hafm.png-219.5kB][2]\n\n韩方明记录下了王羲之家族笔法：**而至张旭始弘八法，次演五势，更备九用，则万字无不该于此，墨道之妙，无不由之以成也。**\n\n张旭讲授笔法，有四个内容，学书法，就是要弄清楚这些最重要的内容，《玉堂禁经》中记载了韩方明所提及的五势、九用：\n>* 五执笔\n>* 永字八法\n>* 五势\n>* 九用\n\n## 书法三要素\n###书法第一个要素是用笔\n用笔分为执笔和用锋。 用笔调锋习惯上称为**“小圈”**。\n九用和五执笔就是讲如何用笔，九用讲如何运转笔锋，五执笔就是执管、族（CU2）管、撮(chuo1)管、握管、搦(ni4)管。执管最常用，其他不建议。\n\n所谓九用，就是九种用锋方法。\n一曰顿笔，\n二曰挫笔，\n三曰驭锋，\n四曰蹲锋，\n五曰【足存】锋，\n六曰衄锋（nu4），\n七曰趯(yue4)锋，\n八曰按锋，\n九曰揭笔。\n\n**九用可以分为两类：挫笔和趯锋是书写动作，其他都是调锋动作。毛笔和硬笔不同，时时会散，会扭起来，所以要一边写，一边调锋。调锋以后，笔锋就顺了。**\n\n### 第二个书法要素是识势\n点画的姿态，取决于笔锋的走势。        \n变化姿态，只要改变走势就可以了。\n 1.单一笔势。永字八法是取一个“永”为例子，把它拆开，就是八个单一笔势。在书法中各有名称，这是最简也是最基本的笔势。\n2.在书法中，还有复合笔势，由单一笔势所组成，用处非常之大。复合笔势。所谓五势，就是五种复合笔势。\n![image_1bga21fbckg11eq4r1lc2anvu2a.png-56.9kB][3]\n复合笔势是单一笔势的组合。比如横画加竖画，就成为一个复合笔势。称为曲尺势。举例：王羲之《二谢贴》。\n\n![image_1bga23j78pge1v721lst1m871b612n.png-86.1kB][4]\n交争势，这是撇捺的结合。看起来好象一个“人”字。王羲之《丧乱贴》中有一个“哀”字，这个“哀”的最后，就是一个交争势。\n\n![image_1bga26eiq1dlt19os1a2d1krsf033h.png-104.7kB][5]\n飞带势，两撇一捺，这是非常有用的笔势。王羲之《丧乱贴》中一个“复”字，可以看到，最后他就写了一个飞带势。\n\n![image_1bga27o1v18601uic1071asa15603u.png-101.1kB][6]\n顾盼势，一共三笔，先写中间一笔，然后左右两笔，看起来好像一个“小”字。举例来说，王羲之《兰亭序》中有一个“丝”字，最后，用了顾盼势。\n\n所谓识势，就是懂得笔锋的走势\n永字八法，包括八个单一笔势\n笔锋行走的路线，习惯上称为大圈。\n\n### 书法第三个要素是裹束\n用笔调锋是小圈，笔锋走势是大圈，裹束就是小圈加大圈。\n\n禇遂良这个“沉”字，在书法中是分为三个复合笔势。沉的三点水，名字叫散水势，右旁的上面，称为幂头势。右旁的下面是凤翅势。\n![image_1bga2io1holj1arp9ci11im13dn4b.png-169.4kB][7]\n\n这三个笔势写出来之后，只要加以裹束，就组成了“沉”字。\n\n> - 书法三要素用笔、 识势、 裹束；    \n - 用笔：五执笔+九用。（小圈）    \n - 识势：永字八法+五势。（大圈）    \n - 裹束：大圈+小圈。\n\n\n  [1]: http://static.zybuluo.com/allon6/q5r5fyfz8w1dxoxm6d7uu5my/image_1bgaphumq1m1ucao1hdrr2q19s013.png\n  [2]: http://static.zybuluo.com/allon6/of7il599il0n8ttmwtrrpkvz/image_1bgapg3a8cijuqhc56ra11hafm.png\n  [3]: http://static.zybuluo.com/allon6/4t6dplscjoigxs1c1vsakst2/image_1bga21fbckg11eq4r1lc2anvu2a.png\n  [4]: http://static.zybuluo.com/allon6/vjtxvijycsmzsgpeb5x2fdk6/image_1bga23j78pge1v721lst1m871b612n.png\n  [5]: http://static.zybuluo.com/allon6/0sk1yvsbqs06gkf3ipibtg6g/image_1bga26eiq1dlt19os1a2d1krsf033h.png\n  [6]: http://static.zybuluo.com/allon6/0vah11z71jpgzoan5pwhl5vc/image_1bga27o1v18601uic1071asa15603u.png\n  [7]: http://static.zybuluo.com/allon6/sv4h4nnyuigigt2da0xyw4yi/image_1bga2io1holj1arp9ci11im13dn4b.png\n\n\n","source":"_posts/书法/书法-基础理论.md","raw":"---\ntitle: 书法 - 基础理论\ncatalog: true\ndate: 2017-11-22 17:21:29\nsubtitle: \"聚焦王羲之\"\nheader-img: \"/img/03.jpg\"\ntags: \"书法\"\n---\n\n\n# 1 基础理论\n\n标签： 书法\n\n---\n\n## 三种字体\n就汉字而论字体，有三种不同的含义：\n\n* 一指文字的形体叫字体，如：篆字，隶字，草字。汉字有篆隶楷行草5种字体。\n* 二指书写的字体叫书体，篆书中的“玉箸篆”，线条细的“铁线篆”，又比如英文里边，可以写出各种书体，在电脑中我们称为字型。主要书体有大篆，小篆，刻符，虫书，署书，殳书，摹印，隶书。\n* 三指书法家的字体叫书风。颜体、柳体。\n\n## 什么是书法\n书写某一个字体，并不是书法。 \n> 书写：结构对不对 \n书法：形体美不美\n\n\n## 学书法从哪里入手\n古人学书法，先求笔法。\n笔法是有共性的。\n王羲之笔法是典范。\n# 聚焦王羲之\n\n![image_1bgaphumq1m1ucao1hdrr2q19s013.png-207.7kB][1]\n王羲之笔法不外传，智永之前，是家族传授，不授外人，智永是王羲之的第七代孙，他本身是杰出的书法家，光是《真草千字文》就写了八百本。智永之后，才开始师徒传授。\n\n![image_1bgapg3a8cijuqhc56ra11hafm.png-219.5kB][2]\n\n韩方明记录下了王羲之家族笔法：**而至张旭始弘八法，次演五势，更备九用，则万字无不该于此，墨道之妙，无不由之以成也。**\n\n张旭讲授笔法，有四个内容，学书法，就是要弄清楚这些最重要的内容，《玉堂禁经》中记载了韩方明所提及的五势、九用：\n>* 五执笔\n>* 永字八法\n>* 五势\n>* 九用\n\n## 书法三要素\n###书法第一个要素是用笔\n用笔分为执笔和用锋。 用笔调锋习惯上称为**“小圈”**。\n九用和五执笔就是讲如何用笔，九用讲如何运转笔锋，五执笔就是执管、族（CU2）管、撮(chuo1)管、握管、搦(ni4)管。执管最常用，其他不建议。\n\n所谓九用，就是九种用锋方法。\n一曰顿笔，\n二曰挫笔，\n三曰驭锋，\n四曰蹲锋，\n五曰【足存】锋，\n六曰衄锋（nu4），\n七曰趯(yue4)锋，\n八曰按锋，\n九曰揭笔。\n\n**九用可以分为两类：挫笔和趯锋是书写动作，其他都是调锋动作。毛笔和硬笔不同，时时会散，会扭起来，所以要一边写，一边调锋。调锋以后，笔锋就顺了。**\n\n### 第二个书法要素是识势\n点画的姿态，取决于笔锋的走势。        \n变化姿态，只要改变走势就可以了。\n 1.单一笔势。永字八法是取一个“永”为例子，把它拆开，就是八个单一笔势。在书法中各有名称，这是最简也是最基本的笔势。\n2.在书法中，还有复合笔势，由单一笔势所组成，用处非常之大。复合笔势。所谓五势，就是五种复合笔势。\n![image_1bga21fbckg11eq4r1lc2anvu2a.png-56.9kB][3]\n复合笔势是单一笔势的组合。比如横画加竖画，就成为一个复合笔势。称为曲尺势。举例：王羲之《二谢贴》。\n\n![image_1bga23j78pge1v721lst1m871b612n.png-86.1kB][4]\n交争势，这是撇捺的结合。看起来好象一个“人”字。王羲之《丧乱贴》中有一个“哀”字，这个“哀”的最后，就是一个交争势。\n\n![image_1bga26eiq1dlt19os1a2d1krsf033h.png-104.7kB][5]\n飞带势，两撇一捺，这是非常有用的笔势。王羲之《丧乱贴》中一个“复”字，可以看到，最后他就写了一个飞带势。\n\n![image_1bga27o1v18601uic1071asa15603u.png-101.1kB][6]\n顾盼势，一共三笔，先写中间一笔，然后左右两笔，看起来好像一个“小”字。举例来说，王羲之《兰亭序》中有一个“丝”字，最后，用了顾盼势。\n\n所谓识势，就是懂得笔锋的走势\n永字八法，包括八个单一笔势\n笔锋行走的路线，习惯上称为大圈。\n\n### 书法第三个要素是裹束\n用笔调锋是小圈，笔锋走势是大圈，裹束就是小圈加大圈。\n\n禇遂良这个“沉”字，在书法中是分为三个复合笔势。沉的三点水，名字叫散水势，右旁的上面，称为幂头势。右旁的下面是凤翅势。\n![image_1bga2io1holj1arp9ci11im13dn4b.png-169.4kB][7]\n\n这三个笔势写出来之后，只要加以裹束，就组成了“沉”字。\n\n> - 书法三要素用笔、 识势、 裹束；    \n - 用笔：五执笔+九用。（小圈）    \n - 识势：永字八法+五势。（大圈）    \n - 裹束：大圈+小圈。\n\n\n  [1]: http://static.zybuluo.com/allon6/q5r5fyfz8w1dxoxm6d7uu5my/image_1bgaphumq1m1ucao1hdrr2q19s013.png\n  [2]: http://static.zybuluo.com/allon6/of7il599il0n8ttmwtrrpkvz/image_1bgapg3a8cijuqhc56ra11hafm.png\n  [3]: http://static.zybuluo.com/allon6/4t6dplscjoigxs1c1vsakst2/image_1bga21fbckg11eq4r1lc2anvu2a.png\n  [4]: http://static.zybuluo.com/allon6/vjtxvijycsmzsgpeb5x2fdk6/image_1bga23j78pge1v721lst1m871b612n.png\n  [5]: http://static.zybuluo.com/allon6/0sk1yvsbqs06gkf3ipibtg6g/image_1bga26eiq1dlt19os1a2d1krsf033h.png\n  [6]: http://static.zybuluo.com/allon6/0vah11z71jpgzoan5pwhl5vc/image_1bga27o1v18601uic1071asa15603u.png\n  [7]: http://static.zybuluo.com/allon6/sv4h4nnyuigigt2da0xyw4yi/image_1bga2io1holj1arp9ci11im13dn4b.png\n\n\n","slug":"书法/书法-基础理论","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrh9000mj5ly63p3ce86","content":"<h1><span id=\"1-基础理论\"> 1 基础理论</span></h1>\n<p>标签： 书法</p>\n<hr>\n<h2><span id=\"三种字体\"> 三种字体</span></h2>\n<p>就汉字而论字体，有三种不同的含义：</p>\n<ul>\n<li>一指文字的形体叫字体，如：篆字，隶字，草字。汉字有篆隶楷行草5种字体。</li>\n<li>二指书写的字体叫书体，篆书中的“玉箸篆”，线条细的“铁线篆”，又比如英文里边，可以写出各种书体，在电脑中我们称为字型。主要书体有大篆，小篆，刻符，虫书，署书，殳书，摹印，隶书。</li>\n<li>三指书法家的字体叫书风。颜体、柳体。</li>\n</ul>\n<h2><span id=\"什么是书法\"> 什么是书法</span></h2>\n<p>书写某一个字体，并不是书法。</p>\n<blockquote>\n<p>书写：结构对不对 <br>\n书法：形体美不美</p>\n</blockquote>\n<h2><span id=\"学书法从哪里入手\"> 学书法从哪里入手</span></h2>\n<p>古人学书法，先求笔法。<br>\n笔法是有共性的。<br>\n王羲之笔法是典范。</p>\n<h1><span id=\"聚焦王羲之\"> 聚焦王羲之</span></h1>\n<p><img src=\"http://static.zybuluo.com/allon6/q5r5fyfz8w1dxoxm6d7uu5my/image_1bgaphumq1m1ucao1hdrr2q19s013.png\" alt=\"image_1bgaphumq1m1ucao1hdrr2q19s013.png-207.7kB\"><br>\n王羲之笔法不外传，智永之前，是家族传授，不授外人，智永是王羲之的第七代孙，他本身是杰出的书法家，光是《真草千字文》就写了八百本。智永之后，才开始师徒传授。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/of7il599il0n8ttmwtrrpkvz/image_1bgapg3a8cijuqhc56ra11hafm.png\" alt=\"image_1bgapg3a8cijuqhc56ra11hafm.png-219.5kB\"></p>\n<p>韩方明记录下了王羲之家族笔法：<strong>而至张旭始弘八法，次演五势，更备九用，则万字无不该于此，墨道之妙，无不由之以成也。</strong></p>\n<p>张旭讲授笔法，有四个内容，学书法，就是要弄清楚这些最重要的内容，《玉堂禁经》中记载了韩方明所提及的五势、九用：</p>\n<blockquote>\n<ul>\n<li>五执笔</li>\n<li>永字八法</li>\n<li>五势</li>\n<li>九用</li>\n</ul>\n</blockquote>\n<h2><span id=\"书法三要素\"> 书法三要素</span></h2>\n<p>###书法第一个要素是用笔<br>\n用笔分为执笔和用锋。 用笔调锋习惯上称为**“小圈”**。<br>\n九用和五执笔就是讲如何用笔，九用讲如何运转笔锋，五执笔就是执管、族（CU2）管、撮(chuo1)管、握管、搦(ni4)管。执管最常用，其他不建议。</p>\n<p>所谓九用，就是九种用锋方法。<br>\n一曰顿笔，<br>\n二曰挫笔，<br>\n三曰驭锋，<br>\n四曰蹲锋，<br>\n五曰【足存】锋，<br>\n六曰衄锋（nu4），<br>\n七曰趯(yue4)锋，<br>\n八曰按锋，<br>\n九曰揭笔。</p>\n<p><strong>九用可以分为两类：挫笔和趯锋是书写动作，其他都是调锋动作。毛笔和硬笔不同，时时会散，会扭起来，所以要一边写，一边调锋。调锋以后，笔锋就顺了。</strong></p>\n<h3><span id=\"第二个书法要素是识势\"> 第二个书法要素是识势</span></h3>\n<p>点画的姿态，取决于笔锋的走势。        <br>\n变化姿态，只要改变走势就可以了。<br>\n1.单一笔势。永字八法是取一个“永”为例子，把它拆开，就是八个单一笔势。在书法中各有名称，这是最简也是最基本的笔势。<br>\n2.在书法中，还有复合笔势，由单一笔势所组成，用处非常之大。复合笔势。所谓五势，就是五种复合笔势。<br>\n<img src=\"http://static.zybuluo.com/allon6/4t6dplscjoigxs1c1vsakst2/image_1bga21fbckg11eq4r1lc2anvu2a.png\" alt=\"image_1bga21fbckg11eq4r1lc2anvu2a.png-56.9kB\"><br>\n复合笔势是单一笔势的组合。比如横画加竖画，就成为一个复合笔势。称为曲尺势。举例：王羲之《二谢贴》。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/vjtxvijycsmzsgpeb5x2fdk6/image_1bga23j78pge1v721lst1m871b612n.png\" alt=\"image_1bga23j78pge1v721lst1m871b612n.png-86.1kB\"><br>\n交争势，这是撇捺的结合。看起来好象一个“人”字。王羲之《丧乱贴》中有一个“哀”字，这个“哀”的最后，就是一个交争势。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/0sk1yvsbqs06gkf3ipibtg6g/image_1bga26eiq1dlt19os1a2d1krsf033h.png\" alt=\"image_1bga26eiq1dlt19os1a2d1krsf033h.png-104.7kB\"><br>\n飞带势，两撇一捺，这是非常有用的笔势。王羲之《丧乱贴》中一个“复”字，可以看到，最后他就写了一个飞带势。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/0vah11z71jpgzoan5pwhl5vc/image_1bga27o1v18601uic1071asa15603u.png\" alt=\"image_1bga27o1v18601uic1071asa15603u.png-101.1kB\"><br>\n顾盼势，一共三笔，先写中间一笔，然后左右两笔，看起来好像一个“小”字。举例来说，王羲之《兰亭序》中有一个“丝”字，最后，用了顾盼势。</p>\n<p>所谓识势，就是懂得笔锋的走势<br>\n永字八法，包括八个单一笔势<br>\n笔锋行走的路线，习惯上称为大圈。</p>\n<h3><span id=\"书法第三个要素是裹束\"> 书法第三个要素是裹束</span></h3>\n<p>用笔调锋是小圈，笔锋走势是大圈，裹束就是小圈加大圈。</p>\n<p>禇遂良这个“沉”字，在书法中是分为三个复合笔势。沉的三点水，名字叫散水势，右旁的上面，称为幂头势。右旁的下面是凤翅势。<br>\n<img src=\"http://static.zybuluo.com/allon6/sv4h4nnyuigigt2da0xyw4yi/image_1bga2io1holj1arp9ci11im13dn4b.png\" alt=\"image_1bga2io1holj1arp9ci11im13dn4b.png-169.4kB\"></p>\n<p>这三个笔势写出来之后，只要加以裹束，就组成了“沉”字。</p>\n<blockquote>\n<ul>\n<li>书法三要素用笔、 识势、 裹束；</li>\n</ul>\n</blockquote>\n<ul>\n<li>用笔：五执笔+九用。（小圈）</li>\n<li>识势：永字八法+五势。（大圈）</li>\n<li>裹束：大圈+小圈。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-基础理论\"><a class=\"markdownIt-Anchor\" href=\"#1-基础理论\"></a> 1 基础理论</h1>\n<p>标签： 书法</p>\n<hr>\n<h2 id=\"三种字体\"><a class=\"markdownIt-Anchor\" href=\"#三种字体\"></a> 三种字体</h2>\n<p>就汉字而论字体，有三种不同的含义：</p>\n<ul>\n<li>一指文字的形体叫字体，如：篆字，隶字，草字。汉字有篆隶楷行草5种字体。</li>\n<li>二指书写的字体叫书体，篆书中的“玉箸篆”，线条细的“铁线篆”，又比如英文里边，可以写出各种书体，在电脑中我们称为字型。主要书体有大篆，小篆，刻符，虫书，署书，殳书，摹印，隶书。</li>\n<li>三指书法家的字体叫书风。颜体、柳体。</li>\n</ul>\n<h2 id=\"什么是书法\"><a class=\"markdownIt-Anchor\" href=\"#什么是书法\"></a> 什么是书法</h2>\n<p>书写某一个字体，并不是书法。</p>\n<blockquote>\n<p>书写：结构对不对 <br>\n书法：形体美不美</p>\n</blockquote>\n<h2 id=\"学书法从哪里入手\"><a class=\"markdownIt-Anchor\" href=\"#学书法从哪里入手\"></a> 学书法从哪里入手</h2>\n<p>古人学书法，先求笔法。<br>\n笔法是有共性的。<br>\n王羲之笔法是典范。</p>\n<h1 id=\"聚焦王羲之\"><a class=\"markdownIt-Anchor\" href=\"#聚焦王羲之\"></a> 聚焦王羲之</h1>\n<p><img src=\"http://static.zybuluo.com/allon6/q5r5fyfz8w1dxoxm6d7uu5my/image_1bgaphumq1m1ucao1hdrr2q19s013.png\" alt=\"image_1bgaphumq1m1ucao1hdrr2q19s013.png-207.7kB\"><br>\n王羲之笔法不外传，智永之前，是家族传授，不授外人，智永是王羲之的第七代孙，他本身是杰出的书法家，光是《真草千字文》就写了八百本。智永之后，才开始师徒传授。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/of7il599il0n8ttmwtrrpkvz/image_1bgapg3a8cijuqhc56ra11hafm.png\" alt=\"image_1bgapg3a8cijuqhc56ra11hafm.png-219.5kB\"></p>\n<p>韩方明记录下了王羲之家族笔法：<strong>而至张旭始弘八法，次演五势，更备九用，则万字无不该于此，墨道之妙，无不由之以成也。</strong></p>\n<p>张旭讲授笔法，有四个内容，学书法，就是要弄清楚这些最重要的内容，《玉堂禁经》中记载了韩方明所提及的五势、九用：</p>\n<blockquote>\n<ul>\n<li>五执笔</li>\n<li>永字八法</li>\n<li>五势</li>\n<li>九用</li>\n</ul>\n</blockquote>\n<h2 id=\"书法三要素\"><a class=\"markdownIt-Anchor\" href=\"#书法三要素\"></a> 书法三要素</h2>\n<p>###书法第一个要素是用笔<br>\n用笔分为执笔和用锋。 用笔调锋习惯上称为**“小圈”**。<br>\n九用和五执笔就是讲如何用笔，九用讲如何运转笔锋，五执笔就是执管、族（CU2）管、撮(chuo1)管、握管、搦(ni4)管。执管最常用，其他不建议。</p>\n<p>所谓九用，就是九种用锋方法。<br>\n一曰顿笔，<br>\n二曰挫笔，<br>\n三曰驭锋，<br>\n四曰蹲锋，<br>\n五曰【足存】锋，<br>\n六曰衄锋（nu4），<br>\n七曰趯(yue4)锋，<br>\n八曰按锋，<br>\n九曰揭笔。</p>\n<p><strong>九用可以分为两类：挫笔和趯锋是书写动作，其他都是调锋动作。毛笔和硬笔不同，时时会散，会扭起来，所以要一边写，一边调锋。调锋以后，笔锋就顺了。</strong></p>\n<h3 id=\"第二个书法要素是识势\"><a class=\"markdownIt-Anchor\" href=\"#第二个书法要素是识势\"></a> 第二个书法要素是识势</h3>\n<p>点画的姿态，取决于笔锋的走势。        <br>\n变化姿态，只要改变走势就可以了。<br>\n1.单一笔势。永字八法是取一个“永”为例子，把它拆开，就是八个单一笔势。在书法中各有名称，这是最简也是最基本的笔势。<br>\n2.在书法中，还有复合笔势，由单一笔势所组成，用处非常之大。复合笔势。所谓五势，就是五种复合笔势。<br>\n<img src=\"http://static.zybuluo.com/allon6/4t6dplscjoigxs1c1vsakst2/image_1bga21fbckg11eq4r1lc2anvu2a.png\" alt=\"image_1bga21fbckg11eq4r1lc2anvu2a.png-56.9kB\"><br>\n复合笔势是单一笔势的组合。比如横画加竖画，就成为一个复合笔势。称为曲尺势。举例：王羲之《二谢贴》。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/vjtxvijycsmzsgpeb5x2fdk6/image_1bga23j78pge1v721lst1m871b612n.png\" alt=\"image_1bga23j78pge1v721lst1m871b612n.png-86.1kB\"><br>\n交争势，这是撇捺的结合。看起来好象一个“人”字。王羲之《丧乱贴》中有一个“哀”字，这个“哀”的最后，就是一个交争势。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/0sk1yvsbqs06gkf3ipibtg6g/image_1bga26eiq1dlt19os1a2d1krsf033h.png\" alt=\"image_1bga26eiq1dlt19os1a2d1krsf033h.png-104.7kB\"><br>\n飞带势，两撇一捺，这是非常有用的笔势。王羲之《丧乱贴》中一个“复”字，可以看到，最后他就写了一个飞带势。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/0vah11z71jpgzoan5pwhl5vc/image_1bga27o1v18601uic1071asa15603u.png\" alt=\"image_1bga27o1v18601uic1071asa15603u.png-101.1kB\"><br>\n顾盼势，一共三笔，先写中间一笔，然后左右两笔，看起来好像一个“小”字。举例来说，王羲之《兰亭序》中有一个“丝”字，最后，用了顾盼势。</p>\n<p>所谓识势，就是懂得笔锋的走势<br>\n永字八法，包括八个单一笔势<br>\n笔锋行走的路线，习惯上称为大圈。</p>\n<h3 id=\"书法第三个要素是裹束\"><a class=\"markdownIt-Anchor\" href=\"#书法第三个要素是裹束\"></a> 书法第三个要素是裹束</h3>\n<p>用笔调锋是小圈，笔锋走势是大圈，裹束就是小圈加大圈。</p>\n<p>禇遂良这个“沉”字，在书法中是分为三个复合笔势。沉的三点水，名字叫散水势，右旁的上面，称为幂头势。右旁的下面是凤翅势。<br>\n<img src=\"http://static.zybuluo.com/allon6/sv4h4nnyuigigt2da0xyw4yi/image_1bga2io1holj1arp9ci11im13dn4b.png\" alt=\"image_1bga2io1holj1arp9ci11im13dn4b.png-169.4kB\"></p>\n<p>这三个笔势写出来之后，只要加以裹束，就组成了“沉”字。</p>\n<blockquote>\n<ul>\n<li>书法三要素用笔、 识势、 裹束；</li>\n</ul>\n</blockquote>\n<ul>\n<li>用笔：五执笔+九用。（小圈）</li>\n<li>识势：永字八法+五势。（大圈）</li>\n<li>裹束：大圈+小圈。</li>\n</ul>\n"},{"title":"书法 - 尖锋和侧锋","catalog":true,"date":"2018-03-18T04:54:29.000Z","subtitle":"用锋","header-img":"/img/03.jpg","_content":"\n\n# 尖峰\n一是笔头的尖端，二是笔头的侧面。 笔锋=尖锋+侧锋。\n\n## 尖锋的状态\n\n### 聚锋\n所谓聚锋，指笔心下端聚焦为一个尖，或者说，笔心保持圆锥形。\n### 开锋\n要想写粗一点的尖 锋线，除了换一枝大笔外， 另外可用的方法是开锋，就是把尖锋拉开一点。从几何学上说，这时 笔心是一个倒置的圆台形。“摇也”，就是摇动笔管，把笔锋拉开。\n### 偏锋\n扁锋是尖锋呈扁平状，笔根部分还是圆的，笔尖部分却是扁的。 这种情况紧常见于副毫一起铺开。后面侧锋也有介绍。\n### 破锋 \n破锋就是笔心分叉。\n![-w150](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213432216045.jpg)\n### 散锋 \n尖锋的毫毛不 能粘合在一起，笔心就变成下面散乱的情况。 这往往是用笔不当，或者墨太干而导致的。 在王羲之系统中，散锋是不正常的。现在有很多书法作品，有大量的飞白，很多观众， 误以为这就是豪放，其实是用笔、用墨都有毛病。\n\n### 绞锋\n注意绞锋有两种：一种可能是笔心未绞，只是笔头 表面的被毛绞起来了；第二种最要命的，就是笔心的毫毛绞了，这时 关锋呈螺旋状散开，书写时线条有大量的飞白。绞锋往往是不懂八面 锋，硬拉著毛笔运行而引起的。或者按住了尖锋时转手指，结果笔锋 就绞起来了。\n\n\n## 尖锋线形态\n### 简单的尖锋线\n《玉堂禁经》 直撞是也；有点连物，则名“暗筑”，“目”、“其”是也。”\n驭锋就是直撞，垂直下笔，撞击纸面。因为你无论做什么优美的动作，你做了也看不见。下图“目”字中间两横就是“暗筑”的驭锋。\n\n![-w100](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213437780441.jpg)\n\n驭锋运笔时候，手腕向右 -> 写完之后 -> 向左的动作。\n使中轴回复垂直，然后迅速离开纸面。\n\n### 细尖锋线\n细细的尖锋线：不用开锋；润墨或者干墨；驭锋直下，中轴垂直纸面，取得正锋位置。手腕向右， 用笔管带动尖锋运行。扶直中轴，离开纸面。\n\n### 粗尖锋线\n下笔先做开锋动作。其他步骤同前。\n\n## 尖峰的本质\n尖锋线是一 连串的圆点所组成的。所以古代又称“鳞勒”。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213427812249.jpg)\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213446078152.jpg)\n\n## 趯锋\n趯锋，紧御涩进，如锥画石是也。\n\n---\n# 侧锋\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213453460946.jpg)\n\n通常不用笔腰写字，笔锋会散开。所以通常只弯到三分笔。\n\n## 笔心弯多少 蹲锋\n蹲，就是增加中轴弯曲度的动作。节就是关节点，在关节点上，往往要用到蹲这个动作。但弯曲笔心会把笔锋按开，所以提醒你做蹲的动作，要缓，就是慢。“轻重有准”，用力轻重要准确。\n\n一、乙等用之。起笔、收笔都有一个节点。起笔很轻，线条尖细，后来变粗了，这就用到了蹲锋。当然还要用其他动作，不止蹲锋一种。线条粗细变化，跟蹲锋这动作很有关系。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213458437201.jpg)\n\n## 笔心向什么方向弯 八面锋\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213459855128.jpg)\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213461560494.jpg)\n\n## 侧锋特点：\n* 侧锋轻重有一、二、三分笔。 \n* 侧锋方向有八面，可以八面出锋。 \n* 蹲锋是压弯笔心（中轴）的动作。\n\n## 侧锋线的本质\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213462808443.jpg)\n\n对比尖锋线\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213427812249.jpg)\n\n## 挫笔\n* 挫笔就是运用侧锋（或者说副毫）的技法。 \n* 挫笔写的线条，特征是尾部如折断的形状。 \n* 挫笔推进速度较快，还可以连续挫。\n\n","source":"_posts/书法/书法-尖峰和侧峰.md","raw":"---\ntitle: 书法 - 尖锋和侧锋\ncatalog: true\ndate: 2018-03-18 12:54:29\nsubtitle: \"用锋\"\nheader-img: \"/img/03.jpg\"\ntags: \"书法\"\n---\n\n\n# 尖峰\n一是笔头的尖端，二是笔头的侧面。 笔锋=尖锋+侧锋。\n\n## 尖锋的状态\n\n### 聚锋\n所谓聚锋，指笔心下端聚焦为一个尖，或者说，笔心保持圆锥形。\n### 开锋\n要想写粗一点的尖 锋线，除了换一枝大笔外， 另外可用的方法是开锋，就是把尖锋拉开一点。从几何学上说，这时 笔心是一个倒置的圆台形。“摇也”，就是摇动笔管，把笔锋拉开。\n### 偏锋\n扁锋是尖锋呈扁平状，笔根部分还是圆的，笔尖部分却是扁的。 这种情况紧常见于副毫一起铺开。后面侧锋也有介绍。\n### 破锋 \n破锋就是笔心分叉。\n![-w150](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213432216045.jpg)\n### 散锋 \n尖锋的毫毛不 能粘合在一起，笔心就变成下面散乱的情况。 这往往是用笔不当，或者墨太干而导致的。 在王羲之系统中，散锋是不正常的。现在有很多书法作品，有大量的飞白，很多观众， 误以为这就是豪放，其实是用笔、用墨都有毛病。\n\n### 绞锋\n注意绞锋有两种：一种可能是笔心未绞，只是笔头 表面的被毛绞起来了；第二种最要命的，就是笔心的毫毛绞了，这时 关锋呈螺旋状散开，书写时线条有大量的飞白。绞锋往往是不懂八面 锋，硬拉著毛笔运行而引起的。或者按住了尖锋时转手指，结果笔锋 就绞起来了。\n\n\n## 尖锋线形态\n### 简单的尖锋线\n《玉堂禁经》 直撞是也；有点连物，则名“暗筑”，“目”、“其”是也。”\n驭锋就是直撞，垂直下笔，撞击纸面。因为你无论做什么优美的动作，你做了也看不见。下图“目”字中间两横就是“暗筑”的驭锋。\n\n![-w100](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213437780441.jpg)\n\n驭锋运笔时候，手腕向右 -> 写完之后 -> 向左的动作。\n使中轴回复垂直，然后迅速离开纸面。\n\n### 细尖锋线\n细细的尖锋线：不用开锋；润墨或者干墨；驭锋直下，中轴垂直纸面，取得正锋位置。手腕向右， 用笔管带动尖锋运行。扶直中轴，离开纸面。\n\n### 粗尖锋线\n下笔先做开锋动作。其他步骤同前。\n\n## 尖峰的本质\n尖锋线是一 连串的圆点所组成的。所以古代又称“鳞勒”。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213427812249.jpg)\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213446078152.jpg)\n\n## 趯锋\n趯锋，紧御涩进，如锥画石是也。\n\n---\n# 侧锋\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213453460946.jpg)\n\n通常不用笔腰写字，笔锋会散开。所以通常只弯到三分笔。\n\n## 笔心弯多少 蹲锋\n蹲，就是增加中轴弯曲度的动作。节就是关节点，在关节点上，往往要用到蹲这个动作。但弯曲笔心会把笔锋按开，所以提醒你做蹲的动作，要缓，就是慢。“轻重有准”，用力轻重要准确。\n\n一、乙等用之。起笔、收笔都有一个节点。起笔很轻，线条尖细，后来变粗了，这就用到了蹲锋。当然还要用其他动作，不止蹲锋一种。线条粗细变化，跟蹲锋这动作很有关系。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213458437201.jpg)\n\n## 笔心向什么方向弯 八面锋\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213459855128.jpg)\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213461560494.jpg)\n\n## 侧锋特点：\n* 侧锋轻重有一、二、三分笔。 \n* 侧锋方向有八面，可以八面出锋。 \n* 蹲锋是压弯笔心（中轴）的动作。\n\n## 侧锋线的本质\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213462808443.jpg)\n\n对比尖锋线\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213427812249.jpg)\n\n## 挫笔\n* 挫笔就是运用侧锋（或者说副毫）的技法。 \n* 挫笔写的线条，特征是尾部如折断的形状。 \n* 挫笔推进速度较快，还可以连续挫。\n\n","slug":"书法/书法-尖峰和侧峰","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrha000oj5lyzh8k05lj","content":"<h1><span id=\"尖峰\"> 尖峰</span></h1>\n<p>一是笔头的尖端，二是笔头的侧面。 笔锋=尖锋+侧锋。</p>\n<h2><span id=\"尖锋的状态\"> 尖锋的状态</span></h2>\n<h3><span id=\"聚锋\"> 聚锋</span></h3>\n<p>所谓聚锋，指笔心下端聚焦为一个尖，或者说，笔心保持圆锥形。</p>\n<h3><span id=\"开锋\"> 开锋</span></h3>\n<p>要想写粗一点的尖 锋线，除了换一枝大笔外， 另外可用的方法是开锋，就是把尖锋拉开一点。从几何学上说，这时 笔心是一个倒置的圆台形。“摇也”，就是摇动笔管，把笔锋拉开。</p>\n<h3><span id=\"偏锋\"> 偏锋</span></h3>\n<p>扁锋是尖锋呈扁平状，笔根部分还是圆的，笔尖部分却是扁的。 这种情况紧常见于副毫一起铺开。后面侧锋也有介绍。</p>\n<h3><span id=\"破锋\"> 破锋</span></h3>\n<p>破锋就是笔心分叉。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213432216045.jpg\" alt=\"-w150\"></p>\n<h3><span id=\"散锋\"> 散锋</span></h3>\n<p>尖锋的毫毛不 能粘合在一起，笔心就变成下面散乱的情况。 这往往是用笔不当，或者墨太干而导致的。 在王羲之系统中，散锋是不正常的。现在有很多书法作品，有大量的飞白，很多观众， 误以为这就是豪放，其实是用笔、用墨都有毛病。</p>\n<h3><span id=\"绞锋\"> 绞锋</span></h3>\n<p>注意绞锋有两种：一种可能是笔心未绞，只是笔头 表面的被毛绞起来了；第二种最要命的，就是笔心的毫毛绞了，这时 关锋呈螺旋状散开，书写时线条有大量的飞白。绞锋往往是不懂八面 锋，硬拉著毛笔运行而引起的。或者按住了尖锋时转手指，结果笔锋 就绞起来了。</p>\n<h2><span id=\"尖锋线形态\"> 尖锋线形态</span></h2>\n<h3><span id=\"简单的尖锋线\"> 简单的尖锋线</span></h3>\n<p>《玉堂禁经》 直撞是也；有点连物，则名“暗筑”，“目”、“其”是也。”<br>\n驭锋就是直撞，垂直下笔，撞击纸面。因为你无论做什么优美的动作，你做了也看不见。下图“目”字中间两横就是“暗筑”的驭锋。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213437780441.jpg\" alt=\"-w100\"></p>\n<p>驭锋运笔时候，手腕向右 -&gt; 写完之后 -&gt; 向左的动作。<br>\n使中轴回复垂直，然后迅速离开纸面。</p>\n<h3><span id=\"细尖锋线\"> 细尖锋线</span></h3>\n<p>细细的尖锋线：不用开锋；润墨或者干墨；驭锋直下，中轴垂直纸面，取得正锋位置。手腕向右， 用笔管带动尖锋运行。扶直中轴，离开纸面。</p>\n<h3><span id=\"粗尖锋线\"> 粗尖锋线</span></h3>\n<p>下笔先做开锋动作。其他步骤同前。</p>\n<h2><span id=\"尖峰的本质\"> 尖峰的本质</span></h2>\n<p>尖锋线是一 连串的圆点所组成的。所以古代又称“鳞勒”。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213427812249.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213446078152.jpg\" alt=\"-w200\"></p>\n<h2><span id=\"趯锋\"> 趯锋</span></h2>\n<p>趯锋，紧御涩进，如锥画石是也。</p>\n<hr>\n<h1><span id=\"侧锋\"> 侧锋</span></h1>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213453460946.jpg\" alt=\"-w400\"></p>\n<p>通常不用笔腰写字，笔锋会散开。所以通常只弯到三分笔。</p>\n<h2><span id=\"笔心弯多少-蹲锋\"> 笔心弯多少 蹲锋</span></h2>\n<p>蹲，就是增加中轴弯曲度的动作。节就是关节点，在关节点上，往往要用到蹲这个动作。但弯曲笔心会把笔锋按开，所以提醒你做蹲的动作，要缓，就是慢。“轻重有准”，用力轻重要准确。</p>\n<p>一、乙等用之。起笔、收笔都有一个节点。起笔很轻，线条尖细，后来变粗了，这就用到了蹲锋。当然还要用其他动作，不止蹲锋一种。线条粗细变化，跟蹲锋这动作很有关系。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213458437201.jpg\" alt=\"-w300\"></p>\n<h2><span id=\"笔心向什么方向弯-八面锋\"> 笔心向什么方向弯 八面锋</span></h2>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213459855128.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213461560494.jpg\" alt=\"-w300\"></p>\n<h2><span id=\"侧锋特点\"> 侧锋特点：</span></h2>\n<ul>\n<li>侧锋轻重有一、二、三分笔。</li>\n<li>侧锋方向有八面，可以八面出锋。</li>\n<li>蹲锋是压弯笔心（中轴）的动作。</li>\n</ul>\n<h2><span id=\"侧锋线的本质\"> 侧锋线的本质</span></h2>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213462808443.jpg\" alt=\"-w300\"></p>\n<p>对比尖锋线<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213427812249.jpg\" alt=\"-w300\"></p>\n<h2><span id=\"挫笔\"> 挫笔</span></h2>\n<ul>\n<li>挫笔就是运用侧锋（或者说副毫）的技法。</li>\n<li>挫笔写的线条，特征是尾部如折断的形状。</li>\n<li>挫笔推进速度较快，还可以连续挫。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"尖峰\"><a class=\"markdownIt-Anchor\" href=\"#尖峰\"></a> 尖峰</h1>\n<p>一是笔头的尖端，二是笔头的侧面。 笔锋=尖锋+侧锋。</p>\n<h2 id=\"尖锋的状态\"><a class=\"markdownIt-Anchor\" href=\"#尖锋的状态\"></a> 尖锋的状态</h2>\n<h3 id=\"聚锋\"><a class=\"markdownIt-Anchor\" href=\"#聚锋\"></a> 聚锋</h3>\n<p>所谓聚锋，指笔心下端聚焦为一个尖，或者说，笔心保持圆锥形。</p>\n<h3 id=\"开锋\"><a class=\"markdownIt-Anchor\" href=\"#开锋\"></a> 开锋</h3>\n<p>要想写粗一点的尖 锋线，除了换一枝大笔外， 另外可用的方法是开锋，就是把尖锋拉开一点。从几何学上说，这时 笔心是一个倒置的圆台形。“摇也”，就是摇动笔管，把笔锋拉开。</p>\n<h3 id=\"偏锋\"><a class=\"markdownIt-Anchor\" href=\"#偏锋\"></a> 偏锋</h3>\n<p>扁锋是尖锋呈扁平状，笔根部分还是圆的，笔尖部分却是扁的。 这种情况紧常见于副毫一起铺开。后面侧锋也有介绍。</p>\n<h3 id=\"破锋\"><a class=\"markdownIt-Anchor\" href=\"#破锋\"></a> 破锋</h3>\n<p>破锋就是笔心分叉。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213432216045.jpg\" alt=\"-w150\"></p>\n<h3 id=\"散锋\"><a class=\"markdownIt-Anchor\" href=\"#散锋\"></a> 散锋</h3>\n<p>尖锋的毫毛不 能粘合在一起，笔心就变成下面散乱的情况。 这往往是用笔不当，或者墨太干而导致的。 在王羲之系统中，散锋是不正常的。现在有很多书法作品，有大量的飞白，很多观众， 误以为这就是豪放，其实是用笔、用墨都有毛病。</p>\n<h3 id=\"绞锋\"><a class=\"markdownIt-Anchor\" href=\"#绞锋\"></a> 绞锋</h3>\n<p>注意绞锋有两种：一种可能是笔心未绞，只是笔头 表面的被毛绞起来了；第二种最要命的，就是笔心的毫毛绞了，这时 关锋呈螺旋状散开，书写时线条有大量的飞白。绞锋往往是不懂八面 锋，硬拉著毛笔运行而引起的。或者按住了尖锋时转手指，结果笔锋 就绞起来了。</p>\n<h2 id=\"尖锋线形态\"><a class=\"markdownIt-Anchor\" href=\"#尖锋线形态\"></a> 尖锋线形态</h2>\n<h3 id=\"简单的尖锋线\"><a class=\"markdownIt-Anchor\" href=\"#简单的尖锋线\"></a> 简单的尖锋线</h3>\n<p>《玉堂禁经》 直撞是也；有点连物，则名“暗筑”，“目”、“其”是也。”<br>\n驭锋就是直撞，垂直下笔，撞击纸面。因为你无论做什么优美的动作，你做了也看不见。下图“目”字中间两横就是“暗筑”的驭锋。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213437780441.jpg\" alt=\"-w100\"></p>\n<p>驭锋运笔时候，手腕向右 -&gt; 写完之后 -&gt; 向左的动作。<br>\n使中轴回复垂直，然后迅速离开纸面。</p>\n<h3 id=\"细尖锋线\"><a class=\"markdownIt-Anchor\" href=\"#细尖锋线\"></a> 细尖锋线</h3>\n<p>细细的尖锋线：不用开锋；润墨或者干墨；驭锋直下，中轴垂直纸面，取得正锋位置。手腕向右， 用笔管带动尖锋运行。扶直中轴，离开纸面。</p>\n<h3 id=\"粗尖锋线\"><a class=\"markdownIt-Anchor\" href=\"#粗尖锋线\"></a> 粗尖锋线</h3>\n<p>下笔先做开锋动作。其他步骤同前。</p>\n<h2 id=\"尖峰的本质\"><a class=\"markdownIt-Anchor\" href=\"#尖峰的本质\"></a> 尖峰的本质</h2>\n<p>尖锋线是一 连串的圆点所组成的。所以古代又称“鳞勒”。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213427812249.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213446078152.jpg\" alt=\"-w200\"></p>\n<h2 id=\"趯锋\"><a class=\"markdownIt-Anchor\" href=\"#趯锋\"></a> 趯锋</h2>\n<p>趯锋，紧御涩进，如锥画石是也。</p>\n<hr>\n<h1 id=\"侧锋\"><a class=\"markdownIt-Anchor\" href=\"#侧锋\"></a> 侧锋</h1>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213453460946.jpg\" alt=\"-w400\"></p>\n<p>通常不用笔腰写字，笔锋会散开。所以通常只弯到三分笔。</p>\n<h2 id=\"笔心弯多少-蹲锋\"><a class=\"markdownIt-Anchor\" href=\"#笔心弯多少-蹲锋\"></a> 笔心弯多少 蹲锋</h2>\n<p>蹲，就是增加中轴弯曲度的动作。节就是关节点，在关节点上，往往要用到蹲这个动作。但弯曲笔心会把笔锋按开，所以提醒你做蹲的动作，要缓，就是慢。“轻重有准”，用力轻重要准确。</p>\n<p>一、乙等用之。起笔、收笔都有一个节点。起笔很轻，线条尖细，后来变粗了，这就用到了蹲锋。当然还要用其他动作，不止蹲锋一种。线条粗细变化，跟蹲锋这动作很有关系。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213458437201.jpg\" alt=\"-w300\"></p>\n<h2 id=\"笔心向什么方向弯-八面锋\"><a class=\"markdownIt-Anchor\" href=\"#笔心向什么方向弯-八面锋\"></a> 笔心向什么方向弯 八面锋</h2>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213459855128.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213461560494.jpg\" alt=\"-w300\"></p>\n<h2 id=\"侧锋特点\"><a class=\"markdownIt-Anchor\" href=\"#侧锋特点\"></a> 侧锋特点：</h2>\n<ul>\n<li>侧锋轻重有一、二、三分笔。</li>\n<li>侧锋方向有八面，可以八面出锋。</li>\n<li>蹲锋是压弯笔心（中轴）的动作。</li>\n</ul>\n<h2 id=\"侧锋线的本质\"><a class=\"markdownIt-Anchor\" href=\"#侧锋线的本质\"></a> 侧锋线的本质</h2>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213462808443.jpg\" alt=\"-w300\"></p>\n<p>对比尖锋线<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-18-15213427812249.jpg\" alt=\"-w300\"></p>\n<h2 id=\"挫笔\"><a class=\"markdownIt-Anchor\" href=\"#挫笔\"></a> 挫笔</h2>\n<ul>\n<li>挫笔就是运用侧锋（或者说副毫）的技法。</li>\n<li>挫笔写的线条，特征是尾部如折断的形状。</li>\n<li>挫笔推进速度较快，还可以连续挫。</li>\n</ul>\n"},{"title":"书法 - 工具","catalog":true,"date":"2017-11-22T09:21:29.000Z","subtitle":"笔墨纸砚","header-img":"/img/03.jpg","_content":"\n\n# 2 工具\n\n标签： 书法\n\n---\n## 认识毛笔\n#### 外扎式\n    最简单最原始的作法。早期的毛笔好象扫帚。\n#### 夹扎式\n    后来就聪明点了，把笔杆一头劈开，把笔毛夹在里面了。\n    这样一改进，笔毛就靠在一起了，也就是说笔头中间不是空的了。\n#### 插入式\n    当时还没有普遍用竹管，笔杆普遍比较细，所以要在笔杆的一端，钻一个洞以纳入笔头。\n    这个洞，我们称为毛腔。\n   \n    要注意，这时候开始先制作笔头了，把笔头的根部扎紧，然后塞入毛腔之中。\n    \n    先做笔头，这在制笔工艺上是重大的进步。但是这种笔没有笔锋，或者说没有一个锐利的尖锋。\n    \n    李柏文书，或者陆机《平复贴》，可以看到，他们所使用的毛笔，没有一个尖锋。\n    这在书法上用起来还是不能如意。\n#### 心副式\n    所以后来，又有了重大的改进，那就是在笔头中间加入一个笔心。\n    笔心是用硬毫做的，有弹性又尖锐，保证有尖锋。笔心的四围再加毛，这我们就称为副毫。\n### 韦诞笔\n真正的书法用笔，称之为有心三副二毫笔。产生于大概是汉末魏晋时期，以韦诞为代表人物。那末这里有四个名词术语：韦诞，有心，三副，二毫。我下面解释一下。\n![image_1bgaqm3nmjqp14ah1b5118cl18fh9.png-114.1kB][1]\n\n![image_1bgaqp6dn16bg1iun1k851b58mdhm.png-59.6kB][2]\n\n#### 二毫\n笔毛分两种。健者为毫，弱者为毳（cuì）。毳就是短毛、弱毛、软毛。好的毛笔，是利用两种毛，一刚一柔，搭配制成。\n古人认为，刚健的毛，最佳的就是野兔毛。通常所说的兔毫，就是野兔背脊上的毛。而且一定要秋天，最好就农历八月所新换的毛，那是最好的。但是要注意兔毫有好几种，最上等的是紫色的，所以我们又叫紫毫。也有杂色的兔毫，比如说黑尖兔毫，颜色就比较杂一些。\n软毛最常用的就是羊毫。羊身上不同的部位，毛的质量也不同，浙江湖州的羊毛，是很适宜做毛笔的，这是选好，不理好的羊毛，就可以做毛笔了。\n用一刚一柔，两种毛做笔，称为叫兼毫笔。\n### 散卓笔(宋代以后)\n韦诞笔好！但韦诞笔制作复杂，成本高。到宋代，就开始流行一种制作简化的毛笔，叫做散卓笔。\n就是解散原来韦诞笔的小笔心，把中心的硬毛和一副、二副的软毛混合在一起，形成一个大笔心，取消了二副，就是取消了墨池，所以散卓笔是没有墨池功能的。简言之：散卓笔的结构，是一心一副，心大，被薄。这种笔，在工艺制作上要简单得多。**现在市场上所卖的毛笔，大多数都是散卓笔。**\n### 用毫范围扩大(宋代以后)\n>* 宋以后不止于用兔毫、羊毫为主，包括：\n    * 狼毫，狼毫刚性不及兔毫，狼是黄鼠狼，是取自黄鼠狼的尾巴，“正冬北地狼毫”，那意思就是冬天取自北方的黄鼠狼毛。\n    * 山马，现在也经常看到山马笔。山马不是马，是水鹿，实际上就是鹿毫。山马笔在日本很普遍，中国古代也用鹿毫，但是现代并不多。\n    *    石貛，石貛是一种小动物，在欧亚大陆都有，都生活在北方，因为现在黄鼠狼数量很少了，所以多用了石貛毛。石貛毛的刚性接近狼毫，日本、大陆都有出产石貛笔。\n\n\n\n>* 毛笔按其所用笔毛，可以分为三种：\n    * 硬毫笔：如纯狼毫笔，刚性很强。用它来画兰竹很好用，写字往往觉得太刚。\n    * 软毫笔：最普遍的就是纯羊毫笔，性质比较软，但笔锋可以很长，做大笔也没问题。纯羊毫，纯狼毫，就是心副都用同一种毛，韦诞笔羊毫只做副毫，不做中心。纯羊毫笔流行很晚，到明清才开始普遍使用。\n       兼毫笔：刚柔适当，最佳。\n\n### 制笔\n同一品牌厚的比薄的笔好用。\n笔芯捆扎的越紧越好，一毛出，即不堪用。\n笔头插入笔管越深越好。\n\n### 购笔\n#### 大小\n大笔还是小笔,取决于要写多大的字。通常学书法,应该从大字开始。\n    \n    大楷,八岁至十岁,《中兴颂》、《东方朔碑》、《万安桥记》”,这是大楷的字帖。 “中楷,十一岁至十三岁,《九成宫铭》、《虞恭公墓志》、《姚恭公墓志《、《遗教经》”, 这些是中楷的字帖。“小楷,十四岁到十六岁,《宣示表》、《戎路表》、《力命表》、《乐 魏表》、《曹娥表》”这是小楷。\n\n以寸楷为标准,大致来说,大过寸楷就是大楷,小过寸楷就是小楷。一般大楷至少要寸楷两倍大。\n\n## 墨法\n一是笔锋实际写过的部分，我称之为笔道。\n二是墨色显示出来的部分，我称之为墨道。\n\n湿墨墨道最宽\n\n![15056181691411](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056181691411.jpg)\n\n润墨\n\n![15056182644846](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182644846.jpg)\n\n\n![15056182806656](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182806656.jpg)\n\n干墨\n\n![15056182954486](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182954486.jpg)\n\n沙笔、燥锋和枯笔\n\n![15056183313856](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056183313856.jpg)\n\n  [1]: http://static.zybuluo.com/allon6/ghtv62traugll27d1n4auaor/image_1bgaqm3nmjqp14ah1b5118cl18fh9.png\n  [2]: http://static.zybuluo.com/allon6/t2ukt97yz9wnibdrmuc0hk8t/image_1bgaqp6dn16bg1iun1k851b58mdhm.png\n  \n  \n\n\n","source":"_posts/书法/书法-工具.md","raw":"---\ntitle: 书法 - 工具 \ncatalog: true\ndate: 2017-11-22 17:21:29\nsubtitle: \"笔墨纸砚\"\nheader-img: \"/img/03.jpg\"\ntags: \"书法\"\n---\n\n\n# 2 工具\n\n标签： 书法\n\n---\n## 认识毛笔\n#### 外扎式\n    最简单最原始的作法。早期的毛笔好象扫帚。\n#### 夹扎式\n    后来就聪明点了，把笔杆一头劈开，把笔毛夹在里面了。\n    这样一改进，笔毛就靠在一起了，也就是说笔头中间不是空的了。\n#### 插入式\n    当时还没有普遍用竹管，笔杆普遍比较细，所以要在笔杆的一端，钻一个洞以纳入笔头。\n    这个洞，我们称为毛腔。\n   \n    要注意，这时候开始先制作笔头了，把笔头的根部扎紧，然后塞入毛腔之中。\n    \n    先做笔头，这在制笔工艺上是重大的进步。但是这种笔没有笔锋，或者说没有一个锐利的尖锋。\n    \n    李柏文书，或者陆机《平复贴》，可以看到，他们所使用的毛笔，没有一个尖锋。\n    这在书法上用起来还是不能如意。\n#### 心副式\n    所以后来，又有了重大的改进，那就是在笔头中间加入一个笔心。\n    笔心是用硬毫做的，有弹性又尖锐，保证有尖锋。笔心的四围再加毛，这我们就称为副毫。\n### 韦诞笔\n真正的书法用笔，称之为有心三副二毫笔。产生于大概是汉末魏晋时期，以韦诞为代表人物。那末这里有四个名词术语：韦诞，有心，三副，二毫。我下面解释一下。\n![image_1bgaqm3nmjqp14ah1b5118cl18fh9.png-114.1kB][1]\n\n![image_1bgaqp6dn16bg1iun1k851b58mdhm.png-59.6kB][2]\n\n#### 二毫\n笔毛分两种。健者为毫，弱者为毳（cuì）。毳就是短毛、弱毛、软毛。好的毛笔，是利用两种毛，一刚一柔，搭配制成。\n古人认为，刚健的毛，最佳的就是野兔毛。通常所说的兔毫，就是野兔背脊上的毛。而且一定要秋天，最好就农历八月所新换的毛，那是最好的。但是要注意兔毫有好几种，最上等的是紫色的，所以我们又叫紫毫。也有杂色的兔毫，比如说黑尖兔毫，颜色就比较杂一些。\n软毛最常用的就是羊毫。羊身上不同的部位，毛的质量也不同，浙江湖州的羊毛，是很适宜做毛笔的，这是选好，不理好的羊毛，就可以做毛笔了。\n用一刚一柔，两种毛做笔，称为叫兼毫笔。\n### 散卓笔(宋代以后)\n韦诞笔好！但韦诞笔制作复杂，成本高。到宋代，就开始流行一种制作简化的毛笔，叫做散卓笔。\n就是解散原来韦诞笔的小笔心，把中心的硬毛和一副、二副的软毛混合在一起，形成一个大笔心，取消了二副，就是取消了墨池，所以散卓笔是没有墨池功能的。简言之：散卓笔的结构，是一心一副，心大，被薄。这种笔，在工艺制作上要简单得多。**现在市场上所卖的毛笔，大多数都是散卓笔。**\n### 用毫范围扩大(宋代以后)\n>* 宋以后不止于用兔毫、羊毫为主，包括：\n    * 狼毫，狼毫刚性不及兔毫，狼是黄鼠狼，是取自黄鼠狼的尾巴，“正冬北地狼毫”，那意思就是冬天取自北方的黄鼠狼毛。\n    * 山马，现在也经常看到山马笔。山马不是马，是水鹿，实际上就是鹿毫。山马笔在日本很普遍，中国古代也用鹿毫，但是现代并不多。\n    *    石貛，石貛是一种小动物，在欧亚大陆都有，都生活在北方，因为现在黄鼠狼数量很少了，所以多用了石貛毛。石貛毛的刚性接近狼毫，日本、大陆都有出产石貛笔。\n\n\n\n>* 毛笔按其所用笔毛，可以分为三种：\n    * 硬毫笔：如纯狼毫笔，刚性很强。用它来画兰竹很好用，写字往往觉得太刚。\n    * 软毫笔：最普遍的就是纯羊毫笔，性质比较软，但笔锋可以很长，做大笔也没问题。纯羊毫，纯狼毫，就是心副都用同一种毛，韦诞笔羊毫只做副毫，不做中心。纯羊毫笔流行很晚，到明清才开始普遍使用。\n       兼毫笔：刚柔适当，最佳。\n\n### 制笔\n同一品牌厚的比薄的笔好用。\n笔芯捆扎的越紧越好，一毛出，即不堪用。\n笔头插入笔管越深越好。\n\n### 购笔\n#### 大小\n大笔还是小笔,取决于要写多大的字。通常学书法,应该从大字开始。\n    \n    大楷,八岁至十岁,《中兴颂》、《东方朔碑》、《万安桥记》”,这是大楷的字帖。 “中楷,十一岁至十三岁,《九成宫铭》、《虞恭公墓志》、《姚恭公墓志《、《遗教经》”, 这些是中楷的字帖。“小楷,十四岁到十六岁,《宣示表》、《戎路表》、《力命表》、《乐 魏表》、《曹娥表》”这是小楷。\n\n以寸楷为标准,大致来说,大过寸楷就是大楷,小过寸楷就是小楷。一般大楷至少要寸楷两倍大。\n\n## 墨法\n一是笔锋实际写过的部分，我称之为笔道。\n二是墨色显示出来的部分，我称之为墨道。\n\n湿墨墨道最宽\n\n![15056181691411](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056181691411.jpg)\n\n润墨\n\n![15056182644846](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182644846.jpg)\n\n\n![15056182806656](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182806656.jpg)\n\n干墨\n\n![15056182954486](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182954486.jpg)\n\n沙笔、燥锋和枯笔\n\n![15056183313856](http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056183313856.jpg)\n\n  [1]: http://static.zybuluo.com/allon6/ghtv62traugll27d1n4auaor/image_1bgaqm3nmjqp14ah1b5118cl18fh9.png\n  [2]: http://static.zybuluo.com/allon6/t2ukt97yz9wnibdrmuc0hk8t/image_1bgaqp6dn16bg1iun1k851b58mdhm.png\n  \n  \n\n\n","slug":"书法/书法-工具","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhb000rj5lyghcicac1","content":"<h1><span id=\"2-工具\"> 2 工具</span></h1>\n<p>标签： 书法</p>\n<hr>\n<h2><span id=\"认识毛笔\"> 认识毛笔</span></h2>\n<h4><span id=\"外扎式\"> 外扎式</span></h4>\n<pre><code>最简单最原始的作法。早期的毛笔好象扫帚。\n</code></pre>\n<h4><span id=\"夹扎式\"> 夹扎式</span></h4>\n<pre><code>后来就聪明点了，把笔杆一头劈开，把笔毛夹在里面了。\n这样一改进，笔毛就靠在一起了，也就是说笔头中间不是空的了。\n</code></pre>\n<h4><span id=\"插入式\"> 插入式</span></h4>\n<pre><code>当时还没有普遍用竹管，笔杆普遍比较细，所以要在笔杆的一端，钻一个洞以纳入笔头。\n这个洞，我们称为毛腔。\n\n要注意，这时候开始先制作笔头了，把笔头的根部扎紧，然后塞入毛腔之中。\n\n先做笔头，这在制笔工艺上是重大的进步。但是这种笔没有笔锋，或者说没有一个锐利的尖锋。\n\n李柏文书，或者陆机《平复贴》，可以看到，他们所使用的毛笔，没有一个尖锋。\n这在书法上用起来还是不能如意。\n</code></pre>\n<h4><span id=\"心副式\"> 心副式</span></h4>\n<pre><code>所以后来，又有了重大的改进，那就是在笔头中间加入一个笔心。\n笔心是用硬毫做的，有弹性又尖锐，保证有尖锋。笔心的四围再加毛，这我们就称为副毫。\n</code></pre>\n<h3><span id=\"韦诞笔\"> 韦诞笔</span></h3>\n<p>真正的书法用笔，称之为有心三副二毫笔。产生于大概是汉末魏晋时期，以韦诞为代表人物。那末这里有四个名词术语：韦诞，有心，三副，二毫。我下面解释一下。<br>\n<img src=\"http://static.zybuluo.com/allon6/ghtv62traugll27d1n4auaor/image_1bgaqm3nmjqp14ah1b5118cl18fh9.png\" alt=\"image_1bgaqm3nmjqp14ah1b5118cl18fh9.png-114.1kB\"></p>\n<p><img src=\"http://static.zybuluo.com/allon6/t2ukt97yz9wnibdrmuc0hk8t/image_1bgaqp6dn16bg1iun1k851b58mdhm.png\" alt=\"image_1bgaqp6dn16bg1iun1k851b58mdhm.png-59.6kB\"></p>\n<h4><span id=\"二毫\"> 二毫</span></h4>\n<p>笔毛分两种。健者为毫，弱者为毳（cuì）。毳就是短毛、弱毛、软毛。好的毛笔，是利用两种毛，一刚一柔，搭配制成。<br>\n古人认为，刚健的毛，最佳的就是野兔毛。通常所说的兔毫，就是野兔背脊上的毛。而且一定要秋天，最好就农历八月所新换的毛，那是最好的。但是要注意兔毫有好几种，最上等的是紫色的，所以我们又叫紫毫。也有杂色的兔毫，比如说黑尖兔毫，颜色就比较杂一些。<br>\n软毛最常用的就是羊毫。羊身上不同的部位，毛的质量也不同，浙江湖州的羊毛，是很适宜做毛笔的，这是选好，不理好的羊毛，就可以做毛笔了。<br>\n用一刚一柔，两种毛做笔，称为叫兼毫笔。</p>\n<h3><span id=\"散卓笔宋代以后\"> 散卓笔(宋代以后)</span></h3>\n<p>韦诞笔好！但韦诞笔制作复杂，成本高。到宋代，就开始流行一种制作简化的毛笔，叫做散卓笔。<br>\n就是解散原来韦诞笔的小笔心，把中心的硬毛和一副、二副的软毛混合在一起，形成一个大笔心，取消了二副，就是取消了墨池，所以散卓笔是没有墨池功能的。简言之：散卓笔的结构，是一心一副，心大，被薄。这种笔，在工艺制作上要简单得多。<strong>现在市场上所卖的毛笔，大多数都是散卓笔。</strong></p>\n<h3><span id=\"用毫范围扩大宋代以后\"> 用毫范围扩大(宋代以后)</span></h3>\n<blockquote>\n<ul>\n<li>宋以后不止于用兔毫、羊毫为主，包括：<br>\n* 狼毫，狼毫刚性不及兔毫，狼是黄鼠狼，是取自黄鼠狼的尾巴，“正冬北地狼毫”，那意思就是冬天取自北方的黄鼠狼毛。<br>\n* 山马，现在也经常看到山马笔。山马不是马，是水鹿，实际上就是鹿毫。山马笔在日本很普遍，中国古代也用鹿毫，但是现代并不多。<br>\n*    石貛，石貛是一种小动物，在欧亚大陆都有，都生活在北方，因为现在黄鼠狼数量很少了，所以多用了石貛毛。石貛毛的刚性接近狼毫，日本、大陆都有出产石貛笔。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>毛笔按其所用笔毛，可以分为三种：<br>\n* 硬毫笔：如纯狼毫笔，刚性很强。用它来画兰竹很好用，写字往往觉得太刚。<br>\n* 软毫笔：最普遍的就是纯羊毫笔，性质比较软，但笔锋可以很长，做大笔也没问题。纯羊毫，纯狼毫，就是心副都用同一种毛，韦诞笔羊毫只做副毫，不做中心。纯羊毫笔流行很晚，到明清才开始普遍使用。<br>\n       兼毫笔：刚柔适当，最佳。</li>\n</ul>\n</blockquote>\n<h3><span id=\"制笔\"> 制笔</span></h3>\n<p>同一品牌厚的比薄的笔好用。<br>\n笔芯捆扎的越紧越好，一毛出，即不堪用。<br>\n笔头插入笔管越深越好。</p>\n<h3><span id=\"购笔\"> 购笔</span></h3>\n<h4><span id=\"大小\"> 大小</span></h4>\n<p>大笔还是小笔,取决于要写多大的字。通常学书法,应该从大字开始。</p>\n<pre><code>大楷,八岁至十岁,《中兴颂》、《东方朔碑》、《万安桥记》”,这是大楷的字帖。 “中楷,十一岁至十三岁,《九成宫铭》、《虞恭公墓志》、《姚恭公墓志《、《遗教经》”, 这些是中楷的字帖。“小楷,十四岁到十六岁,《宣示表》、《戎路表》、《力命表》、《乐 魏表》、《曹娥表》”这是小楷。\n</code></pre>\n<p>以寸楷为标准,大致来说,大过寸楷就是大楷,小过寸楷就是小楷。一般大楷至少要寸楷两倍大。</p>\n<h2><span id=\"墨法\"> 墨法</span></h2>\n<p>一是笔锋实际写过的部分，我称之为笔道。<br>\n二是墨色显示出来的部分，我称之为墨道。</p>\n<p>湿墨墨道最宽</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056181691411.jpg\" alt=\"15056181691411\"></p>\n<p>润墨</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182644846.jpg\" alt=\"15056182644846\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182806656.jpg\" alt=\"15056182806656\"></p>\n<p>干墨</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182954486.jpg\" alt=\"15056182954486\"></p>\n<p>沙笔、燥锋和枯笔</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056183313856.jpg\" alt=\"15056183313856\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2-工具\"><a class=\"markdownIt-Anchor\" href=\"#2-工具\"></a> 2 工具</h1>\n<p>标签： 书法</p>\n<hr>\n<h2 id=\"认识毛笔\"><a class=\"markdownIt-Anchor\" href=\"#认识毛笔\"></a> 认识毛笔</h2>\n<h4 id=\"外扎式\"><a class=\"markdownIt-Anchor\" href=\"#外扎式\"></a> 外扎式</h4>\n<pre><code>最简单最原始的作法。早期的毛笔好象扫帚。\n</code></pre>\n<h4 id=\"夹扎式\"><a class=\"markdownIt-Anchor\" href=\"#夹扎式\"></a> 夹扎式</h4>\n<pre><code>后来就聪明点了，把笔杆一头劈开，把笔毛夹在里面了。\n这样一改进，笔毛就靠在一起了，也就是说笔头中间不是空的了。\n</code></pre>\n<h4 id=\"插入式\"><a class=\"markdownIt-Anchor\" href=\"#插入式\"></a> 插入式</h4>\n<pre><code>当时还没有普遍用竹管，笔杆普遍比较细，所以要在笔杆的一端，钻一个洞以纳入笔头。\n这个洞，我们称为毛腔。\n\n要注意，这时候开始先制作笔头了，把笔头的根部扎紧，然后塞入毛腔之中。\n\n先做笔头，这在制笔工艺上是重大的进步。但是这种笔没有笔锋，或者说没有一个锐利的尖锋。\n\n李柏文书，或者陆机《平复贴》，可以看到，他们所使用的毛笔，没有一个尖锋。\n这在书法上用起来还是不能如意。\n</code></pre>\n<h4 id=\"心副式\"><a class=\"markdownIt-Anchor\" href=\"#心副式\"></a> 心副式</h4>\n<pre><code>所以后来，又有了重大的改进，那就是在笔头中间加入一个笔心。\n笔心是用硬毫做的，有弹性又尖锐，保证有尖锋。笔心的四围再加毛，这我们就称为副毫。\n</code></pre>\n<h3 id=\"韦诞笔\"><a class=\"markdownIt-Anchor\" href=\"#韦诞笔\"></a> 韦诞笔</h3>\n<p>真正的书法用笔，称之为有心三副二毫笔。产生于大概是汉末魏晋时期，以韦诞为代表人物。那末这里有四个名词术语：韦诞，有心，三副，二毫。我下面解释一下。<br>\n<img src=\"http://static.zybuluo.com/allon6/ghtv62traugll27d1n4auaor/image_1bgaqm3nmjqp14ah1b5118cl18fh9.png\" alt=\"image_1bgaqm3nmjqp14ah1b5118cl18fh9.png-114.1kB\"></p>\n<p><img src=\"http://static.zybuluo.com/allon6/t2ukt97yz9wnibdrmuc0hk8t/image_1bgaqp6dn16bg1iun1k851b58mdhm.png\" alt=\"image_1bgaqp6dn16bg1iun1k851b58mdhm.png-59.6kB\"></p>\n<h4 id=\"二毫\"><a class=\"markdownIt-Anchor\" href=\"#二毫\"></a> 二毫</h4>\n<p>笔毛分两种。健者为毫，弱者为毳（cuì）。毳就是短毛、弱毛、软毛。好的毛笔，是利用两种毛，一刚一柔，搭配制成。<br>\n古人认为，刚健的毛，最佳的就是野兔毛。通常所说的兔毫，就是野兔背脊上的毛。而且一定要秋天，最好就农历八月所新换的毛，那是最好的。但是要注意兔毫有好几种，最上等的是紫色的，所以我们又叫紫毫。也有杂色的兔毫，比如说黑尖兔毫，颜色就比较杂一些。<br>\n软毛最常用的就是羊毫。羊身上不同的部位，毛的质量也不同，浙江湖州的羊毛，是很适宜做毛笔的，这是选好，不理好的羊毛，就可以做毛笔了。<br>\n用一刚一柔，两种毛做笔，称为叫兼毫笔。</p>\n<h3 id=\"散卓笔宋代以后\"><a class=\"markdownIt-Anchor\" href=\"#散卓笔宋代以后\"></a> 散卓笔(宋代以后)</h3>\n<p>韦诞笔好！但韦诞笔制作复杂，成本高。到宋代，就开始流行一种制作简化的毛笔，叫做散卓笔。<br>\n就是解散原来韦诞笔的小笔心，把中心的硬毛和一副、二副的软毛混合在一起，形成一个大笔心，取消了二副，就是取消了墨池，所以散卓笔是没有墨池功能的。简言之：散卓笔的结构，是一心一副，心大，被薄。这种笔，在工艺制作上要简单得多。<strong>现在市场上所卖的毛笔，大多数都是散卓笔。</strong></p>\n<h3 id=\"用毫范围扩大宋代以后\"><a class=\"markdownIt-Anchor\" href=\"#用毫范围扩大宋代以后\"></a> 用毫范围扩大(宋代以后)</h3>\n<blockquote>\n<ul>\n<li>宋以后不止于用兔毫、羊毫为主，包括：<br>\n* 狼毫，狼毫刚性不及兔毫，狼是黄鼠狼，是取自黄鼠狼的尾巴，“正冬北地狼毫”，那意思就是冬天取自北方的黄鼠狼毛。<br>\n* 山马，现在也经常看到山马笔。山马不是马，是水鹿，实际上就是鹿毫。山马笔在日本很普遍，中国古代也用鹿毫，但是现代并不多。<br>\n*    石貛，石貛是一种小动物，在欧亚大陆都有，都生活在北方，因为现在黄鼠狼数量很少了，所以多用了石貛毛。石貛毛的刚性接近狼毫，日本、大陆都有出产石貛笔。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>毛笔按其所用笔毛，可以分为三种：<br>\n* 硬毫笔：如纯狼毫笔，刚性很强。用它来画兰竹很好用，写字往往觉得太刚。<br>\n* 软毫笔：最普遍的就是纯羊毫笔，性质比较软，但笔锋可以很长，做大笔也没问题。纯羊毫，纯狼毫，就是心副都用同一种毛，韦诞笔羊毫只做副毫，不做中心。纯羊毫笔流行很晚，到明清才开始普遍使用。<br>\n       兼毫笔：刚柔适当，最佳。</li>\n</ul>\n</blockquote>\n<h3 id=\"制笔\"><a class=\"markdownIt-Anchor\" href=\"#制笔\"></a> 制笔</h3>\n<p>同一品牌厚的比薄的笔好用。<br>\n笔芯捆扎的越紧越好，一毛出，即不堪用。<br>\n笔头插入笔管越深越好。</p>\n<h3 id=\"购笔\"><a class=\"markdownIt-Anchor\" href=\"#购笔\"></a> 购笔</h3>\n<h4 id=\"大小\"><a class=\"markdownIt-Anchor\" href=\"#大小\"></a> 大小</h4>\n<p>大笔还是小笔,取决于要写多大的字。通常学书法,应该从大字开始。</p>\n<pre><code>大楷,八岁至十岁,《中兴颂》、《东方朔碑》、《万安桥记》”,这是大楷的字帖。 “中楷,十一岁至十三岁,《九成宫铭》、《虞恭公墓志》、《姚恭公墓志《、《遗教经》”, 这些是中楷的字帖。“小楷,十四岁到十六岁,《宣示表》、《戎路表》、《力命表》、《乐 魏表》、《曹娥表》”这是小楷。\n</code></pre>\n<p>以寸楷为标准,大致来说,大过寸楷就是大楷,小过寸楷就是小楷。一般大楷至少要寸楷两倍大。</p>\n<h2 id=\"墨法\"><a class=\"markdownIt-Anchor\" href=\"#墨法\"></a> 墨法</h2>\n<p>一是笔锋实际写过的部分，我称之为笔道。<br>\n二是墨色显示出来的部分，我称之为墨道。</p>\n<p>湿墨墨道最宽</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056181691411.jpg\" alt=\"15056181691411\"></p>\n<p>润墨</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182644846.jpg\" alt=\"15056182644846\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182806656.jpg\" alt=\"15056182806656\"></p>\n<p>干墨</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056182954486.jpg\" alt=\"15056182954486\"></p>\n<p>沙笔、燥锋和枯笔</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-04-23-15056183313856.jpg\" alt=\"15056183313856\"></p>\n"},{"title":"书法 - 笔心","catalog":true,"date":"2018-03-25T02:20:20.000Z","subtitle":"运笔","header-img":"/img/03.jpg","_content":"\n\n# 换笔心\n\n笔锋到了要转弯的地方，就要做点动作。这动作就就如同司机转方向盘。控制笔锋的方向盘， 就是笔心。只要把笔心扭过来，笔锋就顺了。这个扭笔心的动作，书法上称为“换笔心”。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219054852443.jpg)\n\n# 衄（nǜ）锋\n“九用”之六的衄（nǜ）锋。《玉堂禁经》说：“六是衄（nǜ）锋，住锋暗挼（ruó）是也，烈火用之。” \n\n* 在书法中，“衄锋”其实就是“扭锋”。\n* “住锋”就是驻锋，暂时停止， 停一停做什么？“挼”，挼就是揉搓。《说文解字》说“挼，推也”。颜师古说“揉谓矫而正之也。”所以“暗挼”，就是暗中揉搓一下。把笔 心后退调整一下。\n* “烈火”就是烈火势，常用的笔势之一。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219060873020.jpg)\n\n这些地方就要换笔心，也就是扭锋。回过头来看《玉堂禁经》九用之六：“六曰衄锋，住锋暗 挼是也，烈火用之”。所谓衄锋，就是扭动笔心，调整方向。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219061305930.jpg)\n\n打游戏的操纵杆，当抓住它前后左右摇动，就可以控制方向，毛笔也一样，笔管是笔心的延长，当你执住笔管，那就等于握住了操纵杆。可以自由地操纵笔心的方向。\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219063869545.jpg)\n\n\n# 中锋和偏锋\n## 复合线条的衄锋\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219415089476.jpg)\n\n## 单一线条中的衄锋\n\n* 当笔心弯曲时，它只能向弯曲的方向前进。这时候，你只享有一面锋，一个方向。\n\n* 笔心弯曲时，不能向左右走，也不能倒退。其他七个方向，这时候你都用不到，也不能用。\n\n* 只有笔锋垂直时，才有八面锋的自由。\n\n## 中锋和偏锋\n中锋和偏锋。 中锋和偏锋不是两种技法，而是指行笔时的两种情况。\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219418719154.jpg)\n行笔时，笔心左右对称，称为**中锋**，请注意，写一竖，毛笔是从外向自己这边拉过来，就好像 一个人对面向我走过来。所以他的前后左右和我是相反的。因为这个 时候，笔心两边左右对称，所以写出来的线条，左右两边也是对称的。\n\n假如行笔时笔心左右不对称，这就是**“偏锋”**。偏锋线条，尖锋 偏在一边，这一边边缘是光滑的，而另一边呢，你看到是用笔腰擦出 来的，造成这一边凹凸不平，简单地说，就是两边不对称。\n\n偏锋会造成笔毫散乱，很早就引起古人的注意。汉代蔡邕《九势》 说：“令笔心常在点画中行。”这是最早重视“中锋”的著录。\n\n中锋是主要的根本的，因为中锋可以保持笔毫顺。偏锋会把笔毫弄乱，所以是暂时的，短时间出现的。\n\n* 中锋线条圆满稳定。\n* 偏锋线条富有姿态。\n\n\n把三个术语比较一下： \n\n1. 正锋是笔心四面对称； \n2. 中锋是笔心左右对称； \n3. 偏锋是笔心左右不对称。\n\n结论：正锋是八面锋的中心位置。中锋是行笔时保持笔毫顺畅的基本位置。偏锋是笔毫偏移引起线条变形的位置。\n\n## 笔锋位置的调整\n“中锋”和“偏锋”，是可以调节的。是可以控制的，可以互相调整。摆动笔管可以控制笔心，调整尖锋位置；行笔中有意连续摇动手腕，称为振。手腕的摆动，不但可以调整尖锋的位置，还可以造成线条的波动。 所以有时候书家特地摇动手腕，以创造动的效果。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219422572974.jpg)   ![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219422688392.jpg)\n\n宋代姜夔《续书谱》：“余尝历观古之名书，无不点画振动，如见其挥运之时。”\n\n# 运笔\n## 运笔和线条\n一根线条，从头写到尾，称这一次运笔。\n\n![-w500](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219424632337.jpg)\n\n![-w500](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219430661648.jpg)\n\n## 单一线条和复合线条\n\n写字，是以笔画为单位的。\n\n书法，是以线条为单位的。\n\n复合线条，是单一线条的组合。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219432411179.jpg)\n烈火势就是撇捺竖横四大笔画的组合。红色部分原来没有笔画，仅仅因为连写产生，书法中称为牵带，或者牵丝。牵带不写也不要紧，它可有可无，所以叫虚笔。但本来就有的笔画，不能省略，那是实笔。所以，书法中的长线条，有时候是由实笔和虚笔所组成的。它和笔画未必是一一对应的。\n\n1. 书法线条的背后，是文字的笔画。\n2. 反映文字笔画的书法线条，这是实笔。\n3. 反映笔画联系的书法线条，这是虚笔。虚笔有时表现出来，有时不表露在纸上。\n\n## 运笔\n一次完整的运笔，包括三个部分：起笔、行笔和收笔。从起笔到收笔，就产生一根线条，反过来说，只要没有收笔，这根线条就没有结束。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219434818934.jpg)\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219434952534.jpg)\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219435117820.jpg)\n\n\n## 在线条中运用技法\n最简单的线条有两种。一是尖锋线，二是侧锋线。尖锋驭锋直下，这是起笔动作，得到一个圆点。然后行笔，推动笔尖，产生跳跃，这个技法叫趯锋。写完时还要做收笔动作。把弯曲的笔心向后扭，这叫衄锋，就可以回到正锋状态。回到正锋时，笔尖应该在最后一个圆点。\n\n这条尖锋线是圆头、圆尾。如果画出中线，就是完全平的，欠缺一点姿态。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219437965704.jpg)\n\n侧锋线起笔以侧锋下纸，得到一个烫斗形的点，如果是侧锋直下纸面，这也是驭锋。有些人称为“打”，意思是一样的。写到最后，也 扭直笔心。收笔时把弯曲的笔心 扭直，注意看，侧锋线回到正锋时，笔尖应该在最后一点的尖部。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219439435292.jpg)\n\n圆头的线条，看不见尖锋，称为藏锋。 尖头的线条，看见尖锋，称为露锋。\n\n## 变动中线\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219441172943.jpg)\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219441315688.jpg)\n\n\n\n","source":"_posts/书法/书法-笔心.md","raw":"---\ntitle: 书法 - 笔心\ncatalog: true\ndate: 2018-03-25 10:20:20\nsubtitle: \"运笔\"\nheader-img: \"/img/03.jpg\"\ntags: \"书法\"\n---\n\n\n# 换笔心\n\n笔锋到了要转弯的地方，就要做点动作。这动作就就如同司机转方向盘。控制笔锋的方向盘， 就是笔心。只要把笔心扭过来，笔锋就顺了。这个扭笔心的动作，书法上称为“换笔心”。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219054852443.jpg)\n\n# 衄（nǜ）锋\n“九用”之六的衄（nǜ）锋。《玉堂禁经》说：“六是衄（nǜ）锋，住锋暗挼（ruó）是也，烈火用之。” \n\n* 在书法中，“衄锋”其实就是“扭锋”。\n* “住锋”就是驻锋，暂时停止， 停一停做什么？“挼”，挼就是揉搓。《说文解字》说“挼，推也”。颜师古说“揉谓矫而正之也。”所以“暗挼”，就是暗中揉搓一下。把笔 心后退调整一下。\n* “烈火”就是烈火势，常用的笔势之一。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219060873020.jpg)\n\n这些地方就要换笔心，也就是扭锋。回过头来看《玉堂禁经》九用之六：“六曰衄锋，住锋暗 挼是也，烈火用之”。所谓衄锋，就是扭动笔心，调整方向。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219061305930.jpg)\n\n打游戏的操纵杆，当抓住它前后左右摇动，就可以控制方向，毛笔也一样，笔管是笔心的延长，当你执住笔管，那就等于握住了操纵杆。可以自由地操纵笔心的方向。\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219063869545.jpg)\n\n\n# 中锋和偏锋\n## 复合线条的衄锋\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219415089476.jpg)\n\n## 单一线条中的衄锋\n\n* 当笔心弯曲时，它只能向弯曲的方向前进。这时候，你只享有一面锋，一个方向。\n\n* 笔心弯曲时，不能向左右走，也不能倒退。其他七个方向，这时候你都用不到，也不能用。\n\n* 只有笔锋垂直时，才有八面锋的自由。\n\n## 中锋和偏锋\n中锋和偏锋。 中锋和偏锋不是两种技法，而是指行笔时的两种情况。\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219418719154.jpg)\n行笔时，笔心左右对称，称为**中锋**，请注意，写一竖，毛笔是从外向自己这边拉过来，就好像 一个人对面向我走过来。所以他的前后左右和我是相反的。因为这个 时候，笔心两边左右对称，所以写出来的线条，左右两边也是对称的。\n\n假如行笔时笔心左右不对称，这就是**“偏锋”**。偏锋线条，尖锋 偏在一边，这一边边缘是光滑的，而另一边呢，你看到是用笔腰擦出 来的，造成这一边凹凸不平，简单地说，就是两边不对称。\n\n偏锋会造成笔毫散乱，很早就引起古人的注意。汉代蔡邕《九势》 说：“令笔心常在点画中行。”这是最早重视“中锋”的著录。\n\n中锋是主要的根本的，因为中锋可以保持笔毫顺。偏锋会把笔毫弄乱，所以是暂时的，短时间出现的。\n\n* 中锋线条圆满稳定。\n* 偏锋线条富有姿态。\n\n\n把三个术语比较一下： \n\n1. 正锋是笔心四面对称； \n2. 中锋是笔心左右对称； \n3. 偏锋是笔心左右不对称。\n\n结论：正锋是八面锋的中心位置。中锋是行笔时保持笔毫顺畅的基本位置。偏锋是笔毫偏移引起线条变形的位置。\n\n## 笔锋位置的调整\n“中锋”和“偏锋”，是可以调节的。是可以控制的，可以互相调整。摆动笔管可以控制笔心，调整尖锋位置；行笔中有意连续摇动手腕，称为振。手腕的摆动，不但可以调整尖锋的位置，还可以造成线条的波动。 所以有时候书家特地摇动手腕，以创造动的效果。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219422572974.jpg)   ![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219422688392.jpg)\n\n宋代姜夔《续书谱》：“余尝历观古之名书，无不点画振动，如见其挥运之时。”\n\n# 运笔\n## 运笔和线条\n一根线条，从头写到尾，称这一次运笔。\n\n![-w500](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219424632337.jpg)\n\n![-w500](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219430661648.jpg)\n\n## 单一线条和复合线条\n\n写字，是以笔画为单位的。\n\n书法，是以线条为单位的。\n\n复合线条，是单一线条的组合。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219432411179.jpg)\n烈火势就是撇捺竖横四大笔画的组合。红色部分原来没有笔画，仅仅因为连写产生，书法中称为牵带，或者牵丝。牵带不写也不要紧，它可有可无，所以叫虚笔。但本来就有的笔画，不能省略，那是实笔。所以，书法中的长线条，有时候是由实笔和虚笔所组成的。它和笔画未必是一一对应的。\n\n1. 书法线条的背后，是文字的笔画。\n2. 反映文字笔画的书法线条，这是实笔。\n3. 反映笔画联系的书法线条，这是虚笔。虚笔有时表现出来，有时不表露在纸上。\n\n## 运笔\n一次完整的运笔，包括三个部分：起笔、行笔和收笔。从起笔到收笔，就产生一根线条，反过来说，只要没有收笔，这根线条就没有结束。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219434818934.jpg)\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219434952534.jpg)\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219435117820.jpg)\n\n\n## 在线条中运用技法\n最简单的线条有两种。一是尖锋线，二是侧锋线。尖锋驭锋直下，这是起笔动作，得到一个圆点。然后行笔，推动笔尖，产生跳跃，这个技法叫趯锋。写完时还要做收笔动作。把弯曲的笔心向后扭，这叫衄锋，就可以回到正锋状态。回到正锋时，笔尖应该在最后一个圆点。\n\n这条尖锋线是圆头、圆尾。如果画出中线，就是完全平的，欠缺一点姿态。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219437965704.jpg)\n\n侧锋线起笔以侧锋下纸，得到一个烫斗形的点，如果是侧锋直下纸面，这也是驭锋。有些人称为“打”，意思是一样的。写到最后，也 扭直笔心。收笔时把弯曲的笔心 扭直，注意看，侧锋线回到正锋时，笔尖应该在最后一点的尖部。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219439435292.jpg)\n\n圆头的线条，看不见尖锋，称为藏锋。 尖头的线条，看见尖锋，称为露锋。\n\n## 变动中线\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219441172943.jpg)\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219441315688.jpg)\n\n\n\n","slug":"书法/书法-笔心","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhc000tj5ly3ysjv5ww","content":"<h1><span id=\"换笔心\"> 换笔心</span></h1>\n<p>笔锋到了要转弯的地方，就要做点动作。这动作就就如同司机转方向盘。控制笔锋的方向盘， 就是笔心。只要把笔心扭过来，笔锋就顺了。这个扭笔心的动作，书法上称为“换笔心”。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219054852443.jpg\" alt=\"-w200\"></p>\n<h1><span id=\"衄nǜ锋\"> 衄（nǜ）锋</span></h1>\n<p>“九用”之六的衄（nǜ）锋。《玉堂禁经》说：“六是衄（nǜ）锋，住锋暗挼（ruó）是也，烈火用之。”</p>\n<ul>\n<li>在书法中，“衄锋”其实就是“扭锋”。</li>\n<li>“住锋”就是驻锋，暂时停止， 停一停做什么？“挼”，挼就是揉搓。《说文解字》说“挼，推也”。颜师古说“揉谓矫而正之也。”所以“暗挼”，就是暗中揉搓一下。把笔 心后退调整一下。</li>\n<li>“烈火”就是烈火势，常用的笔势之一。</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219060873020.jpg\" alt=\"-w200\"></p>\n<p>这些地方就要换笔心，也就是扭锋。回过头来看《玉堂禁经》九用之六：“六曰衄锋，住锋暗 挼是也，烈火用之”。所谓衄锋，就是扭动笔心，调整方向。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219061305930.jpg\" alt=\"-w300\"></p>\n<p>打游戏的操纵杆，当抓住它前后左右摇动，就可以控制方向，毛笔也一样，笔管是笔心的延长，当你执住笔管，那就等于握住了操纵杆。可以自由地操纵笔心的方向。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219063869545.jpg\" alt=\"-w200\"></p>\n<h1><span id=\"中锋和偏锋\"> 中锋和偏锋</span></h1>\n<h2><span id=\"复合线条的衄锋\"> 复合线条的衄锋</span></h2>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219415089476.jpg\" alt=\"-w400\"></p>\n<h2><span id=\"单一线条中的衄锋\"> 单一线条中的衄锋</span></h2>\n<ul>\n<li>\n<p>当笔心弯曲时，它只能向弯曲的方向前进。这时候，你只享有一面锋，一个方向。</p>\n</li>\n<li>\n<p>笔心弯曲时，不能向左右走，也不能倒退。其他七个方向，这时候你都用不到，也不能用。</p>\n</li>\n<li>\n<p>只有笔锋垂直时，才有八面锋的自由。</p>\n</li>\n</ul>\n<h2><span id=\"中锋和偏锋\"> 中锋和偏锋</span></h2>\n<p>中锋和偏锋。 中锋和偏锋不是两种技法，而是指行笔时的两种情况。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219418719154.jpg\" alt=\"-w400\"><br>\n行笔时，笔心左右对称，称为<strong>中锋</strong>，请注意，写一竖，毛笔是从外向自己这边拉过来，就好像 一个人对面向我走过来。所以他的前后左右和我是相反的。因为这个 时候，笔心两边左右对称，所以写出来的线条，左右两边也是对称的。</p>\n<p>假如行笔时笔心左右不对称，这就是**“偏锋”**。偏锋线条，尖锋 偏在一边，这一边边缘是光滑的，而另一边呢，你看到是用笔腰擦出 来的，造成这一边凹凸不平，简单地说，就是两边不对称。</p>\n<p>偏锋会造成笔毫散乱，很早就引起古人的注意。汉代蔡邕《九势》 说：“令笔心常在点画中行。”这是最早重视“中锋”的著录。</p>\n<p>中锋是主要的根本的，因为中锋可以保持笔毫顺。偏锋会把笔毫弄乱，所以是暂时的，短时间出现的。</p>\n<ul>\n<li>中锋线条圆满稳定。</li>\n<li>偏锋线条富有姿态。</li>\n</ul>\n<p>把三个术语比较一下：</p>\n<ol>\n<li>正锋是笔心四面对称；</li>\n<li>中锋是笔心左右对称；</li>\n<li>偏锋是笔心左右不对称。</li>\n</ol>\n<p>结论：正锋是八面锋的中心位置。中锋是行笔时保持笔毫顺畅的基本位置。偏锋是笔毫偏移引起线条变形的位置。</p>\n<h2><span id=\"笔锋位置的调整\"> 笔锋位置的调整</span></h2>\n<p>“中锋”和“偏锋”，是可以调节的。是可以控制的，可以互相调整。摆动笔管可以控制笔心，调整尖锋位置；行笔中有意连续摇动手腕，称为振。手腕的摆动，不但可以调整尖锋的位置，还可以造成线条的波动。 所以有时候书家特地摇动手腕，以创造动的效果。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219422572974.jpg\" alt=\"-w200\">   <img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219422688392.jpg\" alt=\"-w200\"></p>\n<p>宋代姜夔《续书谱》：“余尝历观古之名书，无不点画振动，如见其挥运之时。”</p>\n<h1><span id=\"运笔\"> 运笔</span></h1>\n<h2><span id=\"运笔和线条\"> 运笔和线条</span></h2>\n<p>一根线条，从头写到尾，称这一次运笔。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219424632337.jpg\" alt=\"-w500\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219430661648.jpg\" alt=\"-w500\"></p>\n<h2><span id=\"单一线条和复合线条\"> 单一线条和复合线条</span></h2>\n<p>写字，是以笔画为单位的。</p>\n<p>书法，是以线条为单位的。</p>\n<p>复合线条，是单一线条的组合。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219432411179.jpg\" alt=\"-w300\"><br>\n烈火势就是撇捺竖横四大笔画的组合。红色部分原来没有笔画，仅仅因为连写产生，书法中称为牵带，或者牵丝。牵带不写也不要紧，它可有可无，所以叫虚笔。但本来就有的笔画，不能省略，那是实笔。所以，书法中的长线条，有时候是由实笔和虚笔所组成的。它和笔画未必是一一对应的。</p>\n<ol>\n<li>书法线条的背后，是文字的笔画。</li>\n<li>反映文字笔画的书法线条，这是实笔。</li>\n<li>反映笔画联系的书法线条，这是虚笔。虚笔有时表现出来，有时不表露在纸上。</li>\n</ol>\n<h2><span id=\"运笔\"> 运笔</span></h2>\n<p>一次完整的运笔，包括三个部分：起笔、行笔和收笔。从起笔到收笔，就产生一根线条，反过来说，只要没有收笔，这根线条就没有结束。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219434818934.jpg\" alt=\"-w300\"><br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219434952534.jpg\" alt=\"-w300\"><br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219435117820.jpg\" alt=\"-w200\"></p>\n<h2><span id=\"在线条中运用技法\"> 在线条中运用技法</span></h2>\n<p>最简单的线条有两种。一是尖锋线，二是侧锋线。尖锋驭锋直下，这是起笔动作，得到一个圆点。然后行笔，推动笔尖，产生跳跃，这个技法叫趯锋。写完时还要做收笔动作。把弯曲的笔心向后扭，这叫衄锋，就可以回到正锋状态。回到正锋时，笔尖应该在最后一个圆点。</p>\n<p>这条尖锋线是圆头、圆尾。如果画出中线，就是完全平的，欠缺一点姿态。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219437965704.jpg\" alt=\"-w300\"></p>\n<p>侧锋线起笔以侧锋下纸，得到一个烫斗形的点，如果是侧锋直下纸面，这也是驭锋。有些人称为“打”，意思是一样的。写到最后，也 扭直笔心。收笔时把弯曲的笔心 扭直，注意看，侧锋线回到正锋时，笔尖应该在最后一点的尖部。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219439435292.jpg\" alt=\"-w300\"></p>\n<p>圆头的线条，看不见尖锋，称为藏锋。 尖头的线条，看见尖锋，称为露锋。</p>\n<h2><span id=\"变动中线\"> 变动中线</span></h2>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219441172943.jpg\" alt=\"-w400\"><br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219441315688.jpg\" alt=\"-w400\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"换笔心\"><a class=\"markdownIt-Anchor\" href=\"#换笔心\"></a> 换笔心</h1>\n<p>笔锋到了要转弯的地方，就要做点动作。这动作就就如同司机转方向盘。控制笔锋的方向盘， 就是笔心。只要把笔心扭过来，笔锋就顺了。这个扭笔心的动作，书法上称为“换笔心”。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219054852443.jpg\" alt=\"-w200\"></p>\n<h1 id=\"衄nǜ锋\"><a class=\"markdownIt-Anchor\" href=\"#衄nǜ锋\"></a> 衄（nǜ）锋</h1>\n<p>“九用”之六的衄（nǜ）锋。《玉堂禁经》说：“六是衄（nǜ）锋，住锋暗挼（ruó）是也，烈火用之。”</p>\n<ul>\n<li>在书法中，“衄锋”其实就是“扭锋”。</li>\n<li>“住锋”就是驻锋，暂时停止， 停一停做什么？“挼”，挼就是揉搓。《说文解字》说“挼，推也”。颜师古说“揉谓矫而正之也。”所以“暗挼”，就是暗中揉搓一下。把笔 心后退调整一下。</li>\n<li>“烈火”就是烈火势，常用的笔势之一。</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219060873020.jpg\" alt=\"-w200\"></p>\n<p>这些地方就要换笔心，也就是扭锋。回过头来看《玉堂禁经》九用之六：“六曰衄锋，住锋暗 挼是也，烈火用之”。所谓衄锋，就是扭动笔心，调整方向。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219061305930.jpg\" alt=\"-w300\"></p>\n<p>打游戏的操纵杆，当抓住它前后左右摇动，就可以控制方向，毛笔也一样，笔管是笔心的延长，当你执住笔管，那就等于握住了操纵杆。可以自由地操纵笔心的方向。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-24-15219063869545.jpg\" alt=\"-w200\"></p>\n<h1 id=\"中锋和偏锋\"><a class=\"markdownIt-Anchor\" href=\"#中锋和偏锋\"></a> 中锋和偏锋</h1>\n<h2 id=\"复合线条的衄锋\"><a class=\"markdownIt-Anchor\" href=\"#复合线条的衄锋\"></a> 复合线条的衄锋</h2>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219415089476.jpg\" alt=\"-w400\"></p>\n<h2 id=\"单一线条中的衄锋\"><a class=\"markdownIt-Anchor\" href=\"#单一线条中的衄锋\"></a> 单一线条中的衄锋</h2>\n<ul>\n<li>\n<p>当笔心弯曲时，它只能向弯曲的方向前进。这时候，你只享有一面锋，一个方向。</p>\n</li>\n<li>\n<p>笔心弯曲时，不能向左右走，也不能倒退。其他七个方向，这时候你都用不到，也不能用。</p>\n</li>\n<li>\n<p>只有笔锋垂直时，才有八面锋的自由。</p>\n</li>\n</ul>\n<h2 id=\"中锋和偏锋-2\"><a class=\"markdownIt-Anchor\" href=\"#中锋和偏锋-2\"></a> 中锋和偏锋</h2>\n<p>中锋和偏锋。 中锋和偏锋不是两种技法，而是指行笔时的两种情况。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219418719154.jpg\" alt=\"-w400\"><br>\n行笔时，笔心左右对称，称为<strong>中锋</strong>，请注意，写一竖，毛笔是从外向自己这边拉过来，就好像 一个人对面向我走过来。所以他的前后左右和我是相反的。因为这个 时候，笔心两边左右对称，所以写出来的线条，左右两边也是对称的。</p>\n<p>假如行笔时笔心左右不对称，这就是**“偏锋”**。偏锋线条，尖锋 偏在一边，这一边边缘是光滑的，而另一边呢，你看到是用笔腰擦出 来的，造成这一边凹凸不平，简单地说，就是两边不对称。</p>\n<p>偏锋会造成笔毫散乱，很早就引起古人的注意。汉代蔡邕《九势》 说：“令笔心常在点画中行。”这是最早重视“中锋”的著录。</p>\n<p>中锋是主要的根本的，因为中锋可以保持笔毫顺。偏锋会把笔毫弄乱，所以是暂时的，短时间出现的。</p>\n<ul>\n<li>中锋线条圆满稳定。</li>\n<li>偏锋线条富有姿态。</li>\n</ul>\n<p>把三个术语比较一下：</p>\n<ol>\n<li>正锋是笔心四面对称；</li>\n<li>中锋是笔心左右对称；</li>\n<li>偏锋是笔心左右不对称。</li>\n</ol>\n<p>结论：正锋是八面锋的中心位置。中锋是行笔时保持笔毫顺畅的基本位置。偏锋是笔毫偏移引起线条变形的位置。</p>\n<h2 id=\"笔锋位置的调整\"><a class=\"markdownIt-Anchor\" href=\"#笔锋位置的调整\"></a> 笔锋位置的调整</h2>\n<p>“中锋”和“偏锋”，是可以调节的。是可以控制的，可以互相调整。摆动笔管可以控制笔心，调整尖锋位置；行笔中有意连续摇动手腕，称为振。手腕的摆动，不但可以调整尖锋的位置，还可以造成线条的波动。 所以有时候书家特地摇动手腕，以创造动的效果。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219422572974.jpg\" alt=\"-w200\">   <img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219422688392.jpg\" alt=\"-w200\"></p>\n<p>宋代姜夔《续书谱》：“余尝历观古之名书，无不点画振动，如见其挥运之时。”</p>\n<h1 id=\"运笔\"><a class=\"markdownIt-Anchor\" href=\"#运笔\"></a> 运笔</h1>\n<h2 id=\"运笔和线条\"><a class=\"markdownIt-Anchor\" href=\"#运笔和线条\"></a> 运笔和线条</h2>\n<p>一根线条，从头写到尾，称这一次运笔。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219424632337.jpg\" alt=\"-w500\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219430661648.jpg\" alt=\"-w500\"></p>\n<h2 id=\"单一线条和复合线条\"><a class=\"markdownIt-Anchor\" href=\"#单一线条和复合线条\"></a> 单一线条和复合线条</h2>\n<p>写字，是以笔画为单位的。</p>\n<p>书法，是以线条为单位的。</p>\n<p>复合线条，是单一线条的组合。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219432411179.jpg\" alt=\"-w300\"><br>\n烈火势就是撇捺竖横四大笔画的组合。红色部分原来没有笔画，仅仅因为连写产生，书法中称为牵带，或者牵丝。牵带不写也不要紧，它可有可无，所以叫虚笔。但本来就有的笔画，不能省略，那是实笔。所以，书法中的长线条，有时候是由实笔和虚笔所组成的。它和笔画未必是一一对应的。</p>\n<ol>\n<li>书法线条的背后，是文字的笔画。</li>\n<li>反映文字笔画的书法线条，这是实笔。</li>\n<li>反映笔画联系的书法线条，这是虚笔。虚笔有时表现出来，有时不表露在纸上。</li>\n</ol>\n<h2 id=\"运笔-2\"><a class=\"markdownIt-Anchor\" href=\"#运笔-2\"></a> 运笔</h2>\n<p>一次完整的运笔，包括三个部分：起笔、行笔和收笔。从起笔到收笔，就产生一根线条，反过来说，只要没有收笔，这根线条就没有结束。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219434818934.jpg\" alt=\"-w300\"><br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219434952534.jpg\" alt=\"-w300\"><br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219435117820.jpg\" alt=\"-w200\"></p>\n<h2 id=\"在线条中运用技法\"><a class=\"markdownIt-Anchor\" href=\"#在线条中运用技法\"></a> 在线条中运用技法</h2>\n<p>最简单的线条有两种。一是尖锋线，二是侧锋线。尖锋驭锋直下，这是起笔动作，得到一个圆点。然后行笔，推动笔尖，产生跳跃，这个技法叫趯锋。写完时还要做收笔动作。把弯曲的笔心向后扭，这叫衄锋，就可以回到正锋状态。回到正锋时，笔尖应该在最后一个圆点。</p>\n<p>这条尖锋线是圆头、圆尾。如果画出中线，就是完全平的，欠缺一点姿态。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219437965704.jpg\" alt=\"-w300\"></p>\n<p>侧锋线起笔以侧锋下纸，得到一个烫斗形的点，如果是侧锋直下纸面，这也是驭锋。有些人称为“打”，意思是一样的。写到最后，也 扭直笔心。收笔时把弯曲的笔心 扭直，注意看，侧锋线回到正锋时，笔尖应该在最后一点的尖部。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219439435292.jpg\" alt=\"-w300\"></p>\n<p>圆头的线条，看不见尖锋，称为藏锋。 尖头的线条，看见尖锋，称为露锋。</p>\n<h2 id=\"变动中线\"><a class=\"markdownIt-Anchor\" href=\"#变动中线\"></a> 变动中线</h2>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219441172943.jpg\" alt=\"-w400\"><br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219441315688.jpg\" alt=\"-w400\"></p>\n"},{"title":"八卦","catalog":true,"date":"2010-12-26T04:11:52.000Z","subtitle":"八卦五行，天干地支，演绎天地万物","header-img":"/img/22.jpg","_content":"\n\n# 八卦\n\n![](https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142612495572.jpg)\n\n* 乾三连\n* 坤六断\n* 震仰盂\n* 艮覆碗\n* 离中虚\n* 坎中满\n* 兑上缺\n* 巽下断\n\n---\n    六爻之动，三极之道也：三极就是天地人三才，人有男女，亦即有阴阳，三才有阴阳相对，三二得六。\n\n    六爻卦：上三爻为外挂，下三爻为内挂，自下而上画卦，说明宇宙事物的变，是内在开始变。\n\n# 六十四卦：\n\n![](https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142611749513.jpg)\n\n\n乾为天，天风姤，天山遁，天地否\n风地观，山地剥，火地晋，火天大有\n坎为水，水泽节，水雷屯，水火既济\n泽火革，雷火丰，地火明夷，地水师\n艮为山，山火贲，山天大畜，山泽损\n火泽睽，天泽履，风泽中孚，风山渐\n震为雷，雷地豫，雷水解，雷风恒\n地风升，水风井，泽风大过，泽雷随\n巽为风，风天小畜，风火家人，风雷益\n天雷无妄，火雷噬嗑，山雷颐，山风蛊\n离为火，火山旅，火风鼎，水火未济\n山水蒙，风水涣，天水讼，天火同人\n坤为地，地雷复，地泽临，地天泰\n雷天大壮，泽天夬，水天需，水地比\n兑为泽，泽水困，泽地萃，泽山咸\n水山蹇，地山谦，雷山小过，雷泽归妹\n\n# 五行\n    五种物质相互在变化，相互在影响，就是生、克\n金：物质世界中有坚固性能的\n木：代表树木，草，生命中生的功能和根源\n水：流动性，川流不息的作用\n火:   代表了热能\n土：代表地球本身\n\n相生：木生火，火生土，土生金，金生水，水生木。\n相克：金克木，水克火，木克土，火克金，土克水。\n\n### 五行方位\n\n易经方位。西方金，在西藏，越到西方藏金越多；东方木植物易生发，早受阳光热能；南方火，气候炎热；北方水，冰雪最多。\n\n![](https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142649072848.jpg)\n\n\n![](https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142614656818.jpg)\n\n### 天干五行\n\n由于五行的生克法则不够用，因此用发现天干，代表五行的双重运用。天干是五行的两极之道。\n甲木事代表生长的元素，乙木代表形成的组织，其他亦是如此。而这中间又分阴阳，甲木为阳木，乙木为阴木，丙为阳火，丁为阴火，以此类推。\n中医五行：木属肝，火属心，金属肺，水属肾，土属脾\n\n### 地支\n支六位数，阴阳之道产生十二位\n子，丑，寅，卯，辰，巳，午，未，申，酉，戌，亥。\n\n\n\n","source":"_posts/八卦/八卦.md","raw":"---\ntitle: 八卦\ncatalog: true\ndate: 2010-12-26 12:11:52\nsubtitle: \"八卦五行，天干地支，演绎天地万物\"\nheader-img: \"/img/22.jpg\"\ntags: \"八卦\"\n---\n\n\n# 八卦\n\n![](https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142612495572.jpg)\n\n* 乾三连\n* 坤六断\n* 震仰盂\n* 艮覆碗\n* 离中虚\n* 坎中满\n* 兑上缺\n* 巽下断\n\n---\n    六爻之动，三极之道也：三极就是天地人三才，人有男女，亦即有阴阳，三才有阴阳相对，三二得六。\n\n    六爻卦：上三爻为外挂，下三爻为内挂，自下而上画卦，说明宇宙事物的变，是内在开始变。\n\n# 六十四卦：\n\n![](https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142611749513.jpg)\n\n\n乾为天，天风姤，天山遁，天地否\n风地观，山地剥，火地晋，火天大有\n坎为水，水泽节，水雷屯，水火既济\n泽火革，雷火丰，地火明夷，地水师\n艮为山，山火贲，山天大畜，山泽损\n火泽睽，天泽履，风泽中孚，风山渐\n震为雷，雷地豫，雷水解，雷风恒\n地风升，水风井，泽风大过，泽雷随\n巽为风，风天小畜，风火家人，风雷益\n天雷无妄，火雷噬嗑，山雷颐，山风蛊\n离为火，火山旅，火风鼎，水火未济\n山水蒙，风水涣，天水讼，天火同人\n坤为地，地雷复，地泽临，地天泰\n雷天大壮，泽天夬，水天需，水地比\n兑为泽，泽水困，泽地萃，泽山咸\n水山蹇，地山谦，雷山小过，雷泽归妹\n\n# 五行\n    五种物质相互在变化，相互在影响，就是生、克\n金：物质世界中有坚固性能的\n木：代表树木，草，生命中生的功能和根源\n水：流动性，川流不息的作用\n火:   代表了热能\n土：代表地球本身\n\n相生：木生火，火生土，土生金，金生水，水生木。\n相克：金克木，水克火，木克土，火克金，土克水。\n\n### 五行方位\n\n易经方位。西方金，在西藏，越到西方藏金越多；东方木植物易生发，早受阳光热能；南方火，气候炎热；北方水，冰雪最多。\n\n![](https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142649072848.jpg)\n\n\n![](https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142614656818.jpg)\n\n### 天干五行\n\n由于五行的生克法则不够用，因此用发现天干，代表五行的双重运用。天干是五行的两极之道。\n甲木事代表生长的元素，乙木代表形成的组织，其他亦是如此。而这中间又分阴阳，甲木为阳木，乙木为阴木，丙为阳火，丁为阴火，以此类推。\n中医五行：木属肝，火属心，金属肺，水属肾，土属脾\n\n### 地支\n支六位数，阴阳之道产生十二位\n子，丑，寅，卯，辰，巳，午，未，申，酉，戌，亥。\n\n\n\n","slug":"八卦/八卦","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhc000vj5lyhgvjl75i","content":"<h1><span id=\"八卦\"> 八卦</span></h1>\n<p><img src=\"https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142612495572.jpg\" alt=\"\"></p>\n<ul>\n<li>乾三连</li>\n<li>坤六断</li>\n<li>震仰盂</li>\n<li>艮覆碗</li>\n<li>离中虚</li>\n<li>坎中满</li>\n<li>兑上缺</li>\n<li>巽下断</li>\n</ul>\n<hr>\n<pre><code>六爻之动，三极之道也：三极就是天地人三才，人有男女，亦即有阴阳，三才有阴阳相对，三二得六。\n\n六爻卦：上三爻为外挂，下三爻为内挂，自下而上画卦，说明宇宙事物的变，是内在开始变。\n</code></pre>\n<h1><span id=\"六十四卦\"> 六十四卦：</span></h1>\n<p><img src=\"https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142611749513.jpg\" alt=\"\"></p>\n<p>乾为天，天风姤，天山遁，天地否<br>\n风地观，山地剥，火地晋，火天大有<br>\n坎为水，水泽节，水雷屯，水火既济<br>\n泽火革，雷火丰，地火明夷，地水师<br>\n艮为山，山火贲，山天大畜，山泽损<br>\n火泽睽，天泽履，风泽中孚，风山渐<br>\n震为雷，雷地豫，雷水解，雷风恒<br>\n地风升，水风井，泽风大过，泽雷随<br>\n巽为风，风天小畜，风火家人，风雷益<br>\n天雷无妄，火雷噬嗑，山雷颐，山风蛊<br>\n离为火，火山旅，火风鼎，水火未济<br>\n山水蒙，风水涣，天水讼，天火同人<br>\n坤为地，地雷复，地泽临，地天泰<br>\n雷天大壮，泽天夬，水天需，水地比<br>\n兑为泽，泽水困，泽地萃，泽山咸<br>\n水山蹇，地山谦，雷山小过，雷泽归妹</p>\n<h1><span id=\"五行\"> 五行</span></h1>\n<pre><code>五种物质相互在变化，相互在影响，就是生、克\n</code></pre>\n<p>金：物质世界中有坚固性能的<br>\n木：代表树木，草，生命中生的功能和根源<br>\n水：流动性，川流不息的作用<br>\n火:   代表了热能<br>\n土：代表地球本身</p>\n<p>相生：木生火，火生土，土生金，金生水，水生木。<br>\n相克：金克木，水克火，木克土，火克金，土克水。</p>\n<h3><span id=\"五行方位\"> 五行方位</span></h3>\n<p>易经方位。西方金，在西藏，越到西方藏金越多；东方木植物易生发，早受阳光热能；南方火，气候炎热；北方水，冰雪最多。</p>\n<p><img src=\"https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142649072848.jpg\" alt=\"\"></p>\n<p><img src=\"https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142614656818.jpg\" alt=\"\"></p>\n<h3><span id=\"天干五行\"> 天干五行</span></h3>\n<p>由于五行的生克法则不够用，因此用发现天干，代表五行的双重运用。天干是五行的两极之道。<br>\n甲木事代表生长的元素，乙木代表形成的组织，其他亦是如此。而这中间又分阴阳，甲木为阳木，乙木为阴木，丙为阳火，丁为阴火，以此类推。<br>\n中医五行：木属肝，火属心，金属肺，水属肾，土属脾</p>\n<h3><span id=\"地支\"> 地支</span></h3>\n<p>支六位数，阴阳之道产生十二位<br>\n子，丑，寅，卯，辰，巳，午，未，申，酉，戌，亥。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"八卦\"><a class=\"markdownIt-Anchor\" href=\"#八卦\"></a> 八卦</h1>\n<p><img src=\"https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142612495572.jpg\" alt=\"\"></p>\n<ul>\n<li>乾三连</li>\n<li>坤六断</li>\n<li>震仰盂</li>\n<li>艮覆碗</li>\n<li>离中虚</li>\n<li>坎中满</li>\n<li>兑上缺</li>\n<li>巽下断</li>\n</ul>\n<hr>\n<pre><code>六爻之动，三极之道也：三极就是天地人三才，人有男女，亦即有阴阳，三才有阴阳相对，三二得六。\n\n六爻卦：上三爻为外挂，下三爻为内挂，自下而上画卦，说明宇宙事物的变，是内在开始变。\n</code></pre>\n<h1 id=\"六十四卦\"><a class=\"markdownIt-Anchor\" href=\"#六十四卦\"></a> 六十四卦：</h1>\n<p><img src=\"https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142611749513.jpg\" alt=\"\"></p>\n<p>乾为天，天风姤，天山遁，天地否<br>\n风地观，山地剥，火地晋，火天大有<br>\n坎为水，水泽节，水雷屯，水火既济<br>\n泽火革，雷火丰，地火明夷，地水师<br>\n艮为山，山火贲，山天大畜，山泽损<br>\n火泽睽，天泽履，风泽中孚，风山渐<br>\n震为雷，雷地豫，雷水解，雷风恒<br>\n地风升，水风井，泽风大过，泽雷随<br>\n巽为风，风天小畜，风火家人，风雷益<br>\n天雷无妄，火雷噬嗑，山雷颐，山风蛊<br>\n离为火，火山旅，火风鼎，水火未济<br>\n山水蒙，风水涣，天水讼，天火同人<br>\n坤为地，地雷复，地泽临，地天泰<br>\n雷天大壮，泽天夬，水天需，水地比<br>\n兑为泽，泽水困，泽地萃，泽山咸<br>\n水山蹇，地山谦，雷山小过，雷泽归妹</p>\n<h1 id=\"五行\"><a class=\"markdownIt-Anchor\" href=\"#五行\"></a> 五行</h1>\n<pre><code>五种物质相互在变化，相互在影响，就是生、克\n</code></pre>\n<p>金：物质世界中有坚固性能的<br>\n木：代表树木，草，生命中生的功能和根源<br>\n水：流动性，川流不息的作用<br>\n火:   代表了热能<br>\n土：代表地球本身</p>\n<p>相生：木生火，火生土，土生金，金生水，水生木。<br>\n相克：金克木，水克火，木克土，火克金，土克水。</p>\n<h3 id=\"五行方位\"><a class=\"markdownIt-Anchor\" href=\"#五行方位\"></a> 五行方位</h3>\n<p>易经方位。西方金，在西藏，越到西方藏金越多；东方木植物易生发，早受阳光热能；南方火，气候炎热；北方水，冰雪最多。</p>\n<p><img src=\"https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142649072848.jpg\" alt=\"\"></p>\n<p><img src=\"https://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142614656818.jpg\" alt=\"\"></p>\n<h3 id=\"天干五行\"><a class=\"markdownIt-Anchor\" href=\"#天干五行\"></a> 天干五行</h3>\n<p>由于五行的生克法则不够用，因此用发现天干，代表五行的双重运用。天干是五行的两极之道。<br>\n甲木事代表生长的元素，乙木代表形成的组织，其他亦是如此。而这中间又分阴阳，甲木为阳木，乙木为阴木，丙为阳火，丁为阴火，以此类推。<br>\n中医五行：木属肝，火属心，金属肺，水属肾，土属脾</p>\n<h3 id=\"地支\"><a class=\"markdownIt-Anchor\" href=\"#地支\"></a> 地支</h3>\n<p>支六位数，阴阳之道产生十二位<br>\n子，丑，寅，卯，辰，巳，午，未，申，酉，戌，亥。</p>\n"},{"title":"微积分","catalog":true,"date":"2017-11-22T07:22:41.000Z","subtitle":null,"header-img":"/img/02.jpg","_content":"\n\n# 微积分\n\n#### 微积分是描述两个函数关系的学科，函数一为原函数，函数二为微分函数。\n\n### 微分 - 从函数一求函数二就是微分\n△y、△x表示很小的一段，dy、dx表示极限小接近0但不是0。             \n\n$$\\frac{dy}{dx} = lim\\frac{\\Delta{y}}{\\Delta{x}}$$\n\n![image_1bbgkn5l9sco1fvgvme1ai1m0u13.png-30kB][1]\n\n**推导$y=x^2$ 的微分函数**\n![image_1bbgkkrg71s4ipt6tfh1c0h1d1d9.png-50.1kB][2]![image_1bbgklarj1r3bchivk6leha4tm.png-11.9kB][3]\n\n>* $\\frac{dy}{dx}$ 简写为 y`，二阶导数简写为y''\n>* 一阶导数正负表示增长，二阶导数正负表示凹凸。凹：向下弯曲；凸：向上弯曲。\n>* 拐点的 y''=0\n\n### 积分 - 从函数二反求函数一就是积分（原函数是其导数的积分）\n\n*   方法一：函数一是函数二倒过来的函数，分别有算术法和代数（字母）法。通过推导哪些函数的微分函数是已知函数。【主要是求和】 \n*   方法二：函数一是函数二图像下的面积。通过面积求原函数，原函数是x到0围成的面积。\n\n### 乘法和除法法则\n**乘法法则**\n若： \n$$P(x) = f(x).g(x)$$\n则有：\n$$\\frac{dP}{dx}=f(x)\\frac{dg}{dx} + g(x)\\frac{df}{dx}$$\n\n非常重要的公式\n\n$$f(x) = x^n$$\n\nf(x)的导数为：\n$$\\frac{df(x)}{dx}=\\frac{d}{dx}x^n=nx^{n-1}$$\n\n**除法法则**\n\n$$\\frac{d}{dx}(\\frac{f(x)}{g(x)})=\\frac{\\frac{g(x).df(x)}{dx}-\\frac{f(x).dg(x)}{f(x)}}{g(x)^2}$$\n\n### 链式法则\n\n$$\\frac{dz}{dx}=\\frac{dz}{dy}\\frac{dy}{dx}$$                                      \n\n\n\n\n  [1]: http://static.zybuluo.com/allon6/n33eezcv4492gc8dt5lc1l2z/image_1bbgkn5l9sco1fvgvme1ai1m0u13.png\n  [2]: http://static.zybuluo.com/allon6/2j6faulyh11r1t0s4n8in6pq/image_1bbgkkrg71s4ipt6tfh1c0h1d1d9.png\n  [3]: http://static.zybuluo.com/allon6/tccb61nlk8faqy27k94k6290/image_1bbgklarj1r3bchivk6leha4tm.png\n  [4]: http://static.zybuluo.com/allon6/ulsbrua9byf7oangfkk2jyyd/image_1bbkh30at9tv10jaln9cfvjbr1g.png\n\n\n","source":"_posts/数学/微积分.md","raw":"---\ntitle: 微积分\ncatalog: true\ndate: 2017-11-22 15:22:41\nsubtitle:\nheader-img: \"/img/02.jpg\"\ntags: \"数学\"\n---\n\n\n# 微积分\n\n#### 微积分是描述两个函数关系的学科，函数一为原函数，函数二为微分函数。\n\n### 微分 - 从函数一求函数二就是微分\n△y、△x表示很小的一段，dy、dx表示极限小接近0但不是0。             \n\n$$\\frac{dy}{dx} = lim\\frac{\\Delta{y}}{\\Delta{x}}$$\n\n![image_1bbgkn5l9sco1fvgvme1ai1m0u13.png-30kB][1]\n\n**推导$y=x^2$ 的微分函数**\n![image_1bbgkkrg71s4ipt6tfh1c0h1d1d9.png-50.1kB][2]![image_1bbgklarj1r3bchivk6leha4tm.png-11.9kB][3]\n\n>* $\\frac{dy}{dx}$ 简写为 y`，二阶导数简写为y''\n>* 一阶导数正负表示增长，二阶导数正负表示凹凸。凹：向下弯曲；凸：向上弯曲。\n>* 拐点的 y''=0\n\n### 积分 - 从函数二反求函数一就是积分（原函数是其导数的积分）\n\n*   方法一：函数一是函数二倒过来的函数，分别有算术法和代数（字母）法。通过推导哪些函数的微分函数是已知函数。【主要是求和】 \n*   方法二：函数一是函数二图像下的面积。通过面积求原函数，原函数是x到0围成的面积。\n\n### 乘法和除法法则\n**乘法法则**\n若： \n$$P(x) = f(x).g(x)$$\n则有：\n$$\\frac{dP}{dx}=f(x)\\frac{dg}{dx} + g(x)\\frac{df}{dx}$$\n\n非常重要的公式\n\n$$f(x) = x^n$$\n\nf(x)的导数为：\n$$\\frac{df(x)}{dx}=\\frac{d}{dx}x^n=nx^{n-1}$$\n\n**除法法则**\n\n$$\\frac{d}{dx}(\\frac{f(x)}{g(x)})=\\frac{\\frac{g(x).df(x)}{dx}-\\frac{f(x).dg(x)}{f(x)}}{g(x)^2}$$\n\n### 链式法则\n\n$$\\frac{dz}{dx}=\\frac{dz}{dy}\\frac{dy}{dx}$$                                      \n\n\n\n\n  [1]: http://static.zybuluo.com/allon6/n33eezcv4492gc8dt5lc1l2z/image_1bbgkn5l9sco1fvgvme1ai1m0u13.png\n  [2]: http://static.zybuluo.com/allon6/2j6faulyh11r1t0s4n8in6pq/image_1bbgkkrg71s4ipt6tfh1c0h1d1d9.png\n  [3]: http://static.zybuluo.com/allon6/tccb61nlk8faqy27k94k6290/image_1bbgklarj1r3bchivk6leha4tm.png\n  [4]: http://static.zybuluo.com/allon6/ulsbrua9byf7oangfkk2jyyd/image_1bbkh30at9tv10jaln9cfvjbr1g.png\n\n\n","slug":"数学/微积分","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhd000yj5lygqu7f0lf","content":"<h1><span id=\"微积分\"> 微积分</span></h1>\n<h4><span id=\"微积分是描述两个函数关系的学科函数一为原函数函数二为微分函数\"> 微积分是描述两个函数关系的学科，函数一为原函数，函数二为微分函数。</span></h4>\n<h3><span id=\"微分-从函数一求函数二就是微分\"> 微分 - 从函数一求函数二就是微分</span></h3>\n<p>△y、△x表示很小的一段，dy、dx表示极限小接近0但不是0。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mi>l</mi><mi>i</mi><mi>m</mi><mfrac><mrow><mi mathvariant=\"normal\">Δ</mi><mrow><mi>y</mi></mrow></mrow><mrow><mi mathvariant=\"normal\">Δ</mi><mrow><mi>x</mi></mrow></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{dy}{dx} = lim\\frac{\\Delta{y}}{\\Delta{x}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">m</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathrm\">Δ</span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathrm\">Δ</span><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p>\n<p><img src=\"http://static.zybuluo.com/allon6/n33eezcv4492gc8dt5lc1l2z/image_1bbgkn5l9sco1fvgvme1ai1m0u13.png\" alt=\"image_1bbgkn5l9sco1fvgvme1ai1m0u13.png-30kB\"></p>\n<p><strong>推导<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">y=x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span> 的微分函数</strong><br>\n<img src=\"http://static.zybuluo.com/allon6/2j6faulyh11r1t0s4n8in6pq/image_1bbgkkrg71s4ipt6tfh1c0h1d1d9.png\" alt=\"image_1bbgkkrg71s4ipt6tfh1c0h1d1d9.png-50.1kB\"><img src=\"http://static.zybuluo.com/allon6/tccb61nlk8faqy27k94k6290/image_1bbgklarj1r3bchivk6leha4tm.png\" alt=\"image_1bbgklarj1r3bchivk6leha4tm.png-11.9kB\"></p>\n<blockquote>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{dy}{dx}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.9322159999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.277216em;vertical-align:-0.345em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord reset-textstyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.345em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.44610799999999995em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span> 简写为 y`，二阶导数简写为y’’</li>\n<li>一阶导数正负表示增长，二阶导数正负表示凹凸。凹：向下弯曲；凸：向上弯曲。</li>\n<li>拐点的 y’’=0</li>\n</ul>\n</blockquote>\n<h3><span id=\"积分-从函数二反求函数一就是积分原函数是其导数的积分\"> 积分 - 从函数二反求函数一就是积分（原函数是其导数的积分）</span></h3>\n<ul>\n<li>方法一：函数一是函数二倒过来的函数，分别有算术法和代数（字母）法。通过推导哪些函数的微分函数是已知函数。【主要是求和】</li>\n<li>方法二：函数一是函数二图像下的面积。通过面积求原函数，原函数是x到0围成的面积。</li>\n</ul>\n<h3><span id=\"乘法和除法法则\"> 乘法和除法法则</span></h3>\n<p><strong>乘法法则</strong><br>\n若：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mi mathvariant=\"normal\">.</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">P(x) = f(x).g(x)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">.</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>则有：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>P</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mfrac><mrow><mi>d</mi><mi>g</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>+</mo><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mfrac><mrow><mi>d</mi><mi>f</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{dP}{dx}=f(x)\\frac{dg}{dx} + g(x)\\frac{df}{dx}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mbin\">+</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p>\n<p>非常重要的公式</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">f(x) = x^n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<p>f(x)的导数为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mi>n</mi><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\frac{df(x)}{dx}=\\frac{d}{dx}x^n=nx^{n-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.427em;\"></span><span class=\"strut bottom\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord mathit\">n</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.41300000000000003em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathit\">n</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<p><strong>除法法则</strong></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><mfrac><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo><mo>=</mo><mfrac><mrow><mfrac><mrow><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mi mathvariant=\"normal\">.</mi><mi>d</mi><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>−</mo><mfrac><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mi mathvariant=\"normal\">.</mi><mi>d</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac></mrow><mrow><mi>g</mi><mo>(</mo><mi>x</mi><msup><mo>)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{d}{dx}(\\frac{f(x)}{g(x)})=\\frac{\\frac{g(x).df(x)}{dx}-\\frac{f(x).dg(x)}{f(x)}}{g(x)^2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.92em;\"></span><span class=\"strut bottom\" style=\"height:2.856em;vertical-align:-0.936em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span style=\"top:-0.2300000000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"vlist\"><span style=\"top:-0.289em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span><span style=\"top:-0.2300000000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.91em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord reset-textstyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.345em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.485em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">.</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mbin\">−</span><span class=\"mord reset-textstyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.34500000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.485em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">.</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p>\n<h3><span id=\"链式法则\"> 链式法则</span></h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>z</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>d</mi><mi>z</mi></mrow><mrow><mi>d</mi><mi>y</mi></mrow></mfrac><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{dz}{dx}=\\frac{dz}{dy}\\frac{dy}{dx}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.25188em;vertical-align:-0.8804400000000001em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.6860000000000002em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"微积分\"><a class=\"markdownIt-Anchor\" href=\"#微积分\"></a> 微积分</h1>\n<h4 id=\"微积分是描述两个函数关系的学科函数一为原函数函数二为微分函数\"><a class=\"markdownIt-Anchor\" href=\"#微积分是描述两个函数关系的学科函数一为原函数函数二为微分函数\"></a> 微积分是描述两个函数关系的学科，函数一为原函数，函数二为微分函数。</h4>\n<h3 id=\"微分-从函数一求函数二就是微分\"><a class=\"markdownIt-Anchor\" href=\"#微分-从函数一求函数二就是微分\"></a> 微分 - 从函数一求函数二就是微分</h3>\n<p>△y、△x表示很小的一段，dy、dx表示极限小接近0但不是0。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mi>l</mi><mi>i</mi><mi>m</mi><mfrac><mrow><mi mathvariant=\"normal\">Δ</mi><mrow><mi>y</mi></mrow></mrow><mrow><mi mathvariant=\"normal\">Δ</mi><mrow><mi>x</mi></mrow></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{dy}{dx} = lim\\frac{\\Delta{y}}{\\Delta{x}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">m</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathrm\">Δ</span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathrm\">Δ</span><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p>\n<p><img src=\"http://static.zybuluo.com/allon6/n33eezcv4492gc8dt5lc1l2z/image_1bbgkn5l9sco1fvgvme1ai1m0u13.png\" alt=\"image_1bbgkn5l9sco1fvgvme1ai1m0u13.png-30kB\"></p>\n<p><strong>推导<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">y=x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span> 的微分函数</strong><br>\n<img src=\"http://static.zybuluo.com/allon6/2j6faulyh11r1t0s4n8in6pq/image_1bbgkkrg71s4ipt6tfh1c0h1d1d9.png\" alt=\"image_1bbgkkrg71s4ipt6tfh1c0h1d1d9.png-50.1kB\"><img src=\"http://static.zybuluo.com/allon6/tccb61nlk8faqy27k94k6290/image_1bbgklarj1r3bchivk6leha4tm.png\" alt=\"image_1bbgklarj1r3bchivk6leha4tm.png-11.9kB\"></p>\n<blockquote>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{dy}{dx}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.9322159999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.277216em;vertical-align:-0.345em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord reset-textstyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.345em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.44610799999999995em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span> 简写为 y`，二阶导数简写为y’’</li>\n<li>一阶导数正负表示增长，二阶导数正负表示凹凸。凹：向下弯曲；凸：向上弯曲。</li>\n<li>拐点的 y’’=0</li>\n</ul>\n</blockquote>\n<h3 id=\"积分-从函数二反求函数一就是积分原函数是其导数的积分\"><a class=\"markdownIt-Anchor\" href=\"#积分-从函数二反求函数一就是积分原函数是其导数的积分\"></a> 积分 - 从函数二反求函数一就是积分（原函数是其导数的积分）</h3>\n<ul>\n<li>方法一：函数一是函数二倒过来的函数，分别有算术法和代数（字母）法。通过推导哪些函数的微分函数是已知函数。【主要是求和】</li>\n<li>方法二：函数一是函数二图像下的面积。通过面积求原函数，原函数是x到0围成的面积。</li>\n</ul>\n<h3 id=\"乘法和除法法则\"><a class=\"markdownIt-Anchor\" href=\"#乘法和除法法则\"></a> 乘法和除法法则</h3>\n<p><strong>乘法法则</strong><br>\n若：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mi mathvariant=\"normal\">.</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">P(x) = f(x).g(x)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">.</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>则有：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>P</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mfrac><mrow><mi>d</mi><mi>g</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>+</mo><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mfrac><mrow><mi>d</mi><mi>f</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{dP}{dx}=f(x)\\frac{dg}{dx} + g(x)\\frac{df}{dx}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mbin\">+</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p>\n<p>非常重要的公式</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">f(x) = x^n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<p>f(x)的导数为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mi>n</mi><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\frac{df(x)}{dx}=\\frac{d}{dx}x^n=nx^{n-1}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.427em;\"></span><span class=\"strut bottom\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord mathit\">n</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.41300000000000003em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathit\">n</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<p><strong>除法法则</strong></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><mfrac><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mo>)</mo><mo>=</mo><mfrac><mrow><mfrac><mrow><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo><mi mathvariant=\"normal\">.</mi><mi>d</mi><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>−</mo><mfrac><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mi mathvariant=\"normal\">.</mi><mi>d</mi><mi>g</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac></mrow><mrow><mi>g</mi><mo>(</mo><mi>x</mi><msup><mo>)</mo><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{d}{dx}(\\frac{f(x)}{g(x)})=\\frac{\\frac{g(x).df(x)}{dx}-\\frac{f(x).dg(x)}{f(x)}}{g(x)^2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.92em;\"></span><span class=\"strut bottom\" style=\"height:2.856em;vertical-align:-0.936em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span style=\"top:-0.2300000000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"vlist\"><span style=\"top:-0.289em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span><span style=\"top:-0.2300000000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.91em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord reset-textstyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.345em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.485em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">.</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mbin\">−</span><span class=\"mord reset-textstyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.34500000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.485em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mord mathrm\">.</span><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p>\n<h3 id=\"链式法则\"><a class=\"markdownIt-Anchor\" href=\"#链式法则\"></a> 链式法则</h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>z</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>d</mi><mi>z</mi></mrow><mrow><mi>d</mi><mi>y</mi></mrow></mfrac><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{dz}{dx}=\\frac{dz}{dy}\\frac{dy}{dx}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.25188em;vertical-align:-0.8804400000000001em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.6860000000000002em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span></span></span></span></span></p>\n"},{"title":"线性代数这点事","catalog":true,"date":"2017-11-21T08:05:31.000Z","subtitle":null,"header-img":"/img/02.jpg","mathjax":true,"_content":"\n# 线性代数\n\n线性代数最重要的概念就是矩阵，理解矩阵，一定要先从变换起手。\n\n## 矩阵\n\n矩阵的本质就是在描述坐标系变换，比如一个二维直角坐标系向左旋转了90度，那么怎么才能描述这种运动呢，其实就可以盯住（1，0）和（0，1）这两个基本点的坐标在新的坐标系跑哪去了。\n\n如果我告诉你那两个坐标现在分别跑到了（0，1）和（-1，0）就明白新坐标系长什么样了。\n\n如果把这两个坐标竖起来写到一起，就是矩阵了！如下式：\n$$A = \\left[\n    \\begin{array}{}\n      0&-1\\\\\n      1& 0\n    \\end{array}\n\\right]$$\n\n* 矩阵A是变换的结果，也用来表示变换的过程。也就是说，矩阵A可以把标准坐标系旋转90度。\n\n* 由于坐标轴旋转了，整个坐标系也就随之旋转了，所有的坐标系内的向量也就一起旋转。\n\n* 当原坐标系里的任意向量被矩阵A施加变换以后，就得到了新坐标系内对应的向量，在这个该例中，就是得到了旋转90度后的向量。\n\n![-w250](http://otkwwi4x8.bkt.clouddn.com/15108096020947.jpg)\n\n    标准直角坐标系中，向量[1,0]和[0,1]构成了最基本的二维单位矩阵。\n    所有的矩阵都可以看成是对单位矩阵的变换。\n    所有的矩阵都是一套坐标系。\n\n## 变换\n变换和函数的作用是一样的。被称为变换也是体现了图形上的含义。\n\n线性变换就是原来是根线，变完还是根线。同时，原点不能动。简单讲线性变换就是拉伸、旋转。\n\n向量$v$是$x,y$的线性组合，那么不管$x,y$经历怎么样的线性变换，你大爷永远是你大爷。$v$永远是$x,y$的变换后相同系数的线性组合。\n$$v=3x + 4y$$\n$$\\hat{v}=3\\hat{x} + 4\\hat{y}$$\n\n* 二维空间中，只要知道两个变换后的向量，就可以求出任意向量经过变换后结果。\n* 下图中$x,y$为变换前的坐标，$\\hat j$,$\\hat i$都是已知w变换后的向量，可以求出经过变换后的向量。\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/15105677933631.jpg)\n\n\n\n\n下图解读为矩阵对向量$[x,y]$进行作用后得到的结果，其实也可以理解为向量对矩阵里的各列进行线性组合：\n![-w400](http://otkwwi4x8.bkt.clouddn.com/15105681717369.jpg)\n\n* **上图矩阵可以看成是将[1,0]变换成[a,c]，将[0,1]变换成[b,d]，OK，那么就可以由变换后的矩阵求得向量[x,y]被变换后的向量是什么。这也说明了为什么单位矩阵的乘法具有不变性，因为经过单位矩阵的作用之后还是原来的向量。**\n\n![-w150](http://otkwwi4x8.bkt.clouddn.com/15106401190857.jpg)\n\n* **上图中的x,y就是在新座系中的两个坐标。**\n\n\n\n    矩阵乘法的本质就是线性变换，所有的矩阵都是逐行对单位向量做变换\n\n\n## 矩阵乘法\n\n$$A \\times B = C$$\n\n    两个矩阵相乘，就是两个线性变换的叠加，结果矩阵也就是“增强”后的效果。\n\n下图中，可以看作是$M_2$对$M_1$的两个向量($[e,g]$、$[f,h]$)分别进行线性变换。\n![-w500](http://otkwwi4x8.bkt.clouddn.com/15106446775428.jpg)\n\n\n\n## 行列式\n\n$$ det( \\left[\n    \\begin{array}{}\n      a&b\\\\\n      c&d\n    \\end{array}\n\\right] )= e$$\n\n如上图行列式的结果$e$就是经过变换后，固定区域的缩放比例。\n![-w500](http://otkwwi4x8.bkt.clouddn.com/15106477083108.jpg)\n\n行列式可以为负值，当为负值时，空间定向变了。简单讲就是翻个儿了。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/15106483421572.jpg)\n\n## 逆\n\n    矩阵的逆，就是矩阵变换后，再变回来。\n    \n下图中向量$\\vec{x}$经过矩阵$A$的变换后得到向量$\\vec{v}$，由此可得将$\\vec{v}$沿着${A}^{-1}$的还原回去，就会得到向量$\\vec{x}$。\n\n$$\\vec{x}={A}^{-1} \\cdot \\vec{v}$$\n\n![-w500](http://otkwwi4x8.bkt.clouddn.com/15107489431518.jpg)\n\n* $det(A)$不等于0，意味着空间没有被压缩到丢维的程度。那么不管$A$有多大能耐，制造出多邪乎的变换，都可以还原，也就是说$A$可逆。\n\n    \n        比如你把二维空间给变换成了一条直线，那还怎么可能恢复成平面。\n    \n## 秩\n\n秩就是变换后的空间维数。$n$维矩阵变换后还是$n$维空间叫满秩。\n    \n    经过线性变换后的空间，如果是一条一维的直接，秩就是1。二维平面秩就是2。\n\n## 列空间\n\n列(基)向量的线性组合组成的空间。\n\n## 零空间\n\n线性变换后，被压缩到原点的那部分，叫零空间。\n\n    一个直线被线性压缩变换后只有原点保持不变；\n    一个平面被线性变换压缩成直线，原平面中有一条直线的空间就被压缩到了原点。\n    那么这条被压缩到原点的直线就是零空间。\n    \n\n如下式可以看出，所有可以被$A$变换压缩到原点的向量$\\vec{x}$集合组成了零空间。也就是方程组可能是解的集合。下式中如果向量$\\vec{x}$不在零空间内，也一定无解。\n$$A \\cdot \\vec{x} = \\left[\n    \\begin{array}{}\n      0\\\\\n      0\\\\\n      .\\\\\n      .\\\\\n      .\n    \\end{array}\n\\right]$$\n\n## 点积\n两个向量$\\vec{v},\\vec{j}$点积，几何意义就是$\\vec{v}$在$\\vec{j}$的投影长度，乘以$\\vec{j}$的长度。反之也成立，这是一个对称的。\n\n## 叉积\n* 两个向量围成的平行四边形的面积，有正有负。\n* 计算方式相对简单，将两个向量看成是由单位矩阵变换而来的两个基，行列式的值就是该面积。\n* 在求出该面积后，也就得出来叉积向量。它和上述的平行四边形平面垂直，长度就是面积值。如下图红色向量（需要用到右手定则）。\n\n![-w240](http://otkwwi4x8.bkt.clouddn.com/15108854308734.jpg)\n\n![-w240](http://otkwwi4x8.bkt.clouddn.com/15108855479844.jpg)\n\n## 基变换\n$${A}^{-1} \\cdot M \\cdot A$$\n\n## 特征\n在经历矩阵线性变换后，该向量还保持方向不变，该向量就是特征向量，且长度是放大比例就是特征值。零空间和特征有紧密联系。\n\n$$A \\vec{v} =  \\lambda \\vec{v}$$\n\n粉色轴是长度为1的特征向量，那么整个正方体可以在该方向旋转而不变形。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/15114215605944.jpg)\n\n如果$\\lambda$大于1了，也就意味着在所有维度都放大$\\lambda$倍，否则就被拉歪了。各维度都牵扯相同的比例也不会“倾倒”。就像下面的矩阵一样，它们正是一组由单位矩阵缩放$\\lambda$倍得到的基。\n$$\n\\left[\n    \\begin{array}{}\n      1&0\\\\\n      0& 1\n    \\end{array}\n\\right]$$\n\n$$\\left[\n    \\begin{array}{}\n      \\lambda&0\\\\\n      0&\\lambda\n    \\end{array}\n\\right]\n$$\n\n## 抽象向量空间\n\n世间万物，符合线性特征者，皆可矩阵化运算。\n$$\nL(\\vec{v} + \\vec{w}) = L(\\vec{v}) + L(\\vec{w}) \n$$\n\n$$\nL(c\\vec{v}) = cL(\\vec{v})\n$$\n\n* 上一式表示一起整和分开整，一个效果\n* 上二式表示变一个大向量和变一个小向量再倍乘一个效果\n\n符合以上两点就是线性的。导数就是这样的\n$$\\frac{d}{dx}(x^3+x^2) = \\frac{d}{dx}(x^3)+\\frac{d}{dx}(x^2)$$\n$$\\frac{d}{dx}(4x^3) = 4\\frac{d}{dx}(x^3)$$\n\n不管多么复杂的多项式，它们的区别只是系数不同（有的位置是零）。导数函数也不过是个多项式而已。求导的过程就可以理解为：源函数系数向量经过基导数矩阵的变换作用，得出导数多项式的系数向量。\n\n下面这张图表示了用矩阵来求导数的过程，箭头为标准基，它由$x^0$,$x^1$,$x^2$…$x^n$一组基函数分别求导得出的一组导数基。\n![-w500](http://otkwwi4x8.bkt.clouddn.com/15114339843705.jpg)\n","source":"_posts/数学/线性代数.md","raw":"---\ntitle: 线性代数这点事\ncatalog: true\ndate: 2017-11-21 16:05:31\nsubtitle:\nheader-img: \"/img/02.jpg\" \nmathjax: true\ntags: \"数学\"\n---\n\n# 线性代数\n\n线性代数最重要的概念就是矩阵，理解矩阵，一定要先从变换起手。\n\n## 矩阵\n\n矩阵的本质就是在描述坐标系变换，比如一个二维直角坐标系向左旋转了90度，那么怎么才能描述这种运动呢，其实就可以盯住（1，0）和（0，1）这两个基本点的坐标在新的坐标系跑哪去了。\n\n如果我告诉你那两个坐标现在分别跑到了（0，1）和（-1，0）就明白新坐标系长什么样了。\n\n如果把这两个坐标竖起来写到一起，就是矩阵了！如下式：\n$$A = \\left[\n    \\begin{array}{}\n      0&-1\\\\\n      1& 0\n    \\end{array}\n\\right]$$\n\n* 矩阵A是变换的结果，也用来表示变换的过程。也就是说，矩阵A可以把标准坐标系旋转90度。\n\n* 由于坐标轴旋转了，整个坐标系也就随之旋转了，所有的坐标系内的向量也就一起旋转。\n\n* 当原坐标系里的任意向量被矩阵A施加变换以后，就得到了新坐标系内对应的向量，在这个该例中，就是得到了旋转90度后的向量。\n\n![-w250](http://otkwwi4x8.bkt.clouddn.com/15108096020947.jpg)\n\n    标准直角坐标系中，向量[1,0]和[0,1]构成了最基本的二维单位矩阵。\n    所有的矩阵都可以看成是对单位矩阵的变换。\n    所有的矩阵都是一套坐标系。\n\n## 变换\n变换和函数的作用是一样的。被称为变换也是体现了图形上的含义。\n\n线性变换就是原来是根线，变完还是根线。同时，原点不能动。简单讲线性变换就是拉伸、旋转。\n\n向量$v$是$x,y$的线性组合，那么不管$x,y$经历怎么样的线性变换，你大爷永远是你大爷。$v$永远是$x,y$的变换后相同系数的线性组合。\n$$v=3x + 4y$$\n$$\\hat{v}=3\\hat{x} + 4\\hat{y}$$\n\n* 二维空间中，只要知道两个变换后的向量，就可以求出任意向量经过变换后结果。\n* 下图中$x,y$为变换前的坐标，$\\hat j$,$\\hat i$都是已知w变换后的向量，可以求出经过变换后的向量。\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/15105677933631.jpg)\n\n\n\n\n下图解读为矩阵对向量$[x,y]$进行作用后得到的结果，其实也可以理解为向量对矩阵里的各列进行线性组合：\n![-w400](http://otkwwi4x8.bkt.clouddn.com/15105681717369.jpg)\n\n* **上图矩阵可以看成是将[1,0]变换成[a,c]，将[0,1]变换成[b,d]，OK，那么就可以由变换后的矩阵求得向量[x,y]被变换后的向量是什么。这也说明了为什么单位矩阵的乘法具有不变性，因为经过单位矩阵的作用之后还是原来的向量。**\n\n![-w150](http://otkwwi4x8.bkt.clouddn.com/15106401190857.jpg)\n\n* **上图中的x,y就是在新座系中的两个坐标。**\n\n\n\n    矩阵乘法的本质就是线性变换，所有的矩阵都是逐行对单位向量做变换\n\n\n## 矩阵乘法\n\n$$A \\times B = C$$\n\n    两个矩阵相乘，就是两个线性变换的叠加，结果矩阵也就是“增强”后的效果。\n\n下图中，可以看作是$M_2$对$M_1$的两个向量($[e,g]$、$[f,h]$)分别进行线性变换。\n![-w500](http://otkwwi4x8.bkt.clouddn.com/15106446775428.jpg)\n\n\n\n## 行列式\n\n$$ det( \\left[\n    \\begin{array}{}\n      a&b\\\\\n      c&d\n    \\end{array}\n\\right] )= e$$\n\n如上图行列式的结果$e$就是经过变换后，固定区域的缩放比例。\n![-w500](http://otkwwi4x8.bkt.clouddn.com/15106477083108.jpg)\n\n行列式可以为负值，当为负值时，空间定向变了。简单讲就是翻个儿了。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/15106483421572.jpg)\n\n## 逆\n\n    矩阵的逆，就是矩阵变换后，再变回来。\n    \n下图中向量$\\vec{x}$经过矩阵$A$的变换后得到向量$\\vec{v}$，由此可得将$\\vec{v}$沿着${A}^{-1}$的还原回去，就会得到向量$\\vec{x}$。\n\n$$\\vec{x}={A}^{-1} \\cdot \\vec{v}$$\n\n![-w500](http://otkwwi4x8.bkt.clouddn.com/15107489431518.jpg)\n\n* $det(A)$不等于0，意味着空间没有被压缩到丢维的程度。那么不管$A$有多大能耐，制造出多邪乎的变换，都可以还原，也就是说$A$可逆。\n\n    \n        比如你把二维空间给变换成了一条直线，那还怎么可能恢复成平面。\n    \n## 秩\n\n秩就是变换后的空间维数。$n$维矩阵变换后还是$n$维空间叫满秩。\n    \n    经过线性变换后的空间，如果是一条一维的直接，秩就是1。二维平面秩就是2。\n\n## 列空间\n\n列(基)向量的线性组合组成的空间。\n\n## 零空间\n\n线性变换后，被压缩到原点的那部分，叫零空间。\n\n    一个直线被线性压缩变换后只有原点保持不变；\n    一个平面被线性变换压缩成直线，原平面中有一条直线的空间就被压缩到了原点。\n    那么这条被压缩到原点的直线就是零空间。\n    \n\n如下式可以看出，所有可以被$A$变换压缩到原点的向量$\\vec{x}$集合组成了零空间。也就是方程组可能是解的集合。下式中如果向量$\\vec{x}$不在零空间内，也一定无解。\n$$A \\cdot \\vec{x} = \\left[\n    \\begin{array}{}\n      0\\\\\n      0\\\\\n      .\\\\\n      .\\\\\n      .\n    \\end{array}\n\\right]$$\n\n## 点积\n两个向量$\\vec{v},\\vec{j}$点积，几何意义就是$\\vec{v}$在$\\vec{j}$的投影长度，乘以$\\vec{j}$的长度。反之也成立，这是一个对称的。\n\n## 叉积\n* 两个向量围成的平行四边形的面积，有正有负。\n* 计算方式相对简单，将两个向量看成是由单位矩阵变换而来的两个基，行列式的值就是该面积。\n* 在求出该面积后，也就得出来叉积向量。它和上述的平行四边形平面垂直，长度就是面积值。如下图红色向量（需要用到右手定则）。\n\n![-w240](http://otkwwi4x8.bkt.clouddn.com/15108854308734.jpg)\n\n![-w240](http://otkwwi4x8.bkt.clouddn.com/15108855479844.jpg)\n\n## 基变换\n$${A}^{-1} \\cdot M \\cdot A$$\n\n## 特征\n在经历矩阵线性变换后，该向量还保持方向不变，该向量就是特征向量，且长度是放大比例就是特征值。零空间和特征有紧密联系。\n\n$$A \\vec{v} =  \\lambda \\vec{v}$$\n\n粉色轴是长度为1的特征向量，那么整个正方体可以在该方向旋转而不变形。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/15114215605944.jpg)\n\n如果$\\lambda$大于1了，也就意味着在所有维度都放大$\\lambda$倍，否则就被拉歪了。各维度都牵扯相同的比例也不会“倾倒”。就像下面的矩阵一样，它们正是一组由单位矩阵缩放$\\lambda$倍得到的基。\n$$\n\\left[\n    \\begin{array}{}\n      1&0\\\\\n      0& 1\n    \\end{array}\n\\right]$$\n\n$$\\left[\n    \\begin{array}{}\n      \\lambda&0\\\\\n      0&\\lambda\n    \\end{array}\n\\right]\n$$\n\n## 抽象向量空间\n\n世间万物，符合线性特征者，皆可矩阵化运算。\n$$\nL(\\vec{v} + \\vec{w}) = L(\\vec{v}) + L(\\vec{w}) \n$$\n\n$$\nL(c\\vec{v}) = cL(\\vec{v})\n$$\n\n* 上一式表示一起整和分开整，一个效果\n* 上二式表示变一个大向量和变一个小向量再倍乘一个效果\n\n符合以上两点就是线性的。导数就是这样的\n$$\\frac{d}{dx}(x^3+x^2) = \\frac{d}{dx}(x^3)+\\frac{d}{dx}(x^2)$$\n$$\\frac{d}{dx}(4x^3) = 4\\frac{d}{dx}(x^3)$$\n\n不管多么复杂的多项式，它们的区别只是系数不同（有的位置是零）。导数函数也不过是个多项式而已。求导的过程就可以理解为：源函数系数向量经过基导数矩阵的变换作用，得出导数多项式的系数向量。\n\n下面这张图表示了用矩阵来求导数的过程，箭头为标准基，它由$x^0$,$x^1$,$x^2$…$x^n$一组基函数分别求导得出的一组导数基。\n![-w500](http://otkwwi4x8.bkt.clouddn.com/15114339843705.jpg)\n","slug":"数学/线性代数","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhf0010j5lymhub0zs6","content":"<h1><span id=\"线性代数\"> 线性代数</span></h1>\n<p>线性代数最重要的概念就是矩阵，理解矩阵，一定要先从变换起手。</p>\n<h2><span id=\"矩阵\"> 矩阵</span></h2>\n<p>矩阵的本质就是在描述坐标系变换，比如一个二维直角坐标系向左旋转了90度，那么怎么才能描述这种运动呢，其实就可以盯住（1，0）和（0，1）这两个基本点的坐标在新的坐标系跑哪去了。</p>\n<p>如果我告诉你那两个坐标现在分别跑到了（0，1）和（-1，0）就明白新坐标系长什么样了。</p>\n<p>如果把这两个坐标竖起来写到一起，就是矩阵了！如下式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mo>−</mo><mn>1</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">A = \\left[\n    \\begin{array}{}\n      0&amp;-1\\\\\n      1&amp; 0\n    \\end{array}\n\\right]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span><span class=\"mrel\">=</span><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span></span></p>\n<ul>\n<li>\n<p>矩阵A是变换的结果，也用来表示变换的过程。也就是说，矩阵A可以把标准坐标系旋转90度。</p>\n</li>\n<li>\n<p>由于坐标轴旋转了，整个坐标系也就随之旋转了，所有的坐标系内的向量也就一起旋转。</p>\n</li>\n<li>\n<p>当原坐标系里的任意向量被矩阵A施加变换以后，就得到了新坐标系内对应的向量，在这个该例中，就是得到了旋转90度后的向量。</p>\n</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15108096020947.jpg\" alt=\"-w250\"></p>\n<pre><code>标准直角坐标系中，向量[1,0]和[0,1]构成了最基本的二维单位矩阵。\n所有的矩阵都可以看成是对单位矩阵的变换。\n所有的矩阵都是一套坐标系。\n</code></pre>\n<h2><span id=\"变换\"> 变换</span></h2>\n<p>变换和函数的作用是一样的。被称为变换也是体现了图形上的含义。</p>\n<p>线性变换就是原来是根线，变完还是根线。同时，原点不能动。简单讲线性变换就是拉伸、旋转。</p>\n<p>向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>的线性组合，那么不管<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>经历怎么样的线性变换，你大爷永远是你大爷。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span></span>永远是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>的变换后相同系数的线性组合。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi><mo>=</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">v=3x + 4y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">3</span><span class=\"mord mathit\">x</span><span class=\"mbin\">+</span><span class=\"mord mathrm\">4</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>^</mo></mover><mo>=</mo><mn>3</mn><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>^</mo></mover><mo>+</mo><mn>4</mn><mover accent=\"true\"><mrow><mi>y</mi></mrow><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{v}=3\\hat{x} + 4\\hat{y}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">3</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">4</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:0em;margin-left:0.11112em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<ul>\n<li>二维空间中，只要知道两个变换后的向量，就可以求出任意向量经过变换后结果。</li>\n<li>下图中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>为变换前的坐标，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>j</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.92296em;\"></span><span class=\"strut bottom\" style=\"height:1.1174em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span></span><span style=\"top:-0.2285200000000001em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>i</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.92296em;\"></span><span class=\"strut bottom\" style=\"height:0.92296em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord mathit\">i</span></span><span style=\"top:-0.22852em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>都是已知w变换后的向量，可以求出经过变换后的向量。</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15105677933631.jpg\" alt=\"-w400\"></p>\n<p>下图解读为矩阵对向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[x,y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">[</span><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span>进行作用后得到的结果，其实也可以理解为向量对矩阵里的各列进行线性组合：<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15105681717369.jpg\" alt=\"-w400\"></p>\n<ul>\n<li><strong>上图矩阵可以看成是将[1,0]变换成[a,c]，将[0,1]变换成[b,d]，OK，那么就可以由变换后的矩阵求得向量[x,y]被变换后的向量是什么。这也说明了为什么单位矩阵的乘法具有不变性，因为经过单位矩阵的作用之后还是原来的向量。</strong></li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15106401190857.jpg\" alt=\"-w150\"></p>\n<ul>\n<li>\n<p><strong>上图中的x,y就是在新座系中的两个坐标。</strong></p>\n<p>矩阵乘法的本质就是线性变换，所有的矩阵都是逐行对单位向量做变换</p>\n</li>\n</ul>\n<h2><span id=\"矩阵乘法\"> 矩阵乘法</span></h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A \\times B = C\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span><span class=\"mbin\">×</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span></span></span></span></span></p>\n<pre><code>两个矩阵相乘，就是两个线性变换的叠加，结果矩阵也就是“增强”后的效果。\n</code></pre>\n<p>下图中，可以看作是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.10903em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>对<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.10903em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>的两个向量(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mi>e</mi><mo separator=\"true\">,</mo><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[e,g]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">[</span><span class=\"mord mathit\">e</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>h</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[f,h]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mord mathit\">h</span><span class=\"mclose\">]</span></span></span></span>)分别进行线性变换。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15106446775428.jpg\" alt=\"-w500\"></p>\n<h2><span id=\"行列式\"> 行列式</span></h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo>(</mo><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mi>a</mi></mrow></mtd><mtd><mrow><mi>b</mi></mrow></mtd></mtr><mtr><mtd><mrow><mi>c</mi></mrow></mtd><mtd><mrow><mi>d</mi></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mo>)</mo><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\"> det( \\left[\n    \\begin{array}{}\n      a&amp;b\\\\\n      c&amp;d\n    \\end{array}\n\\right] )= e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">t</span><span class=\"mopen\">(</span><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">a</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">c</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">b</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\">e</span></span></span></span></span></p>\n<p>如上图行列式的结果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">e</span></span></span></span>就是经过变换后，固定区域的缩放比例。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15106477083108.jpg\" alt=\"-w500\"></p>\n<p>行列式可以为负值，当为负值时，空间定向变了。简单讲就是翻个儿了。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15106483421572.jpg\" alt=\"-w300\"></p>\n<h2><span id=\"逆\"> 逆</span></h2>\n<pre><code>矩阵的逆，就是矩阵变换后，再变回来。\n</code></pre>\n<p>下图中向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>经过矩阵<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">A</span></span></span></span>的变换后得到向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{v}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>，由此可得将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{v}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>沿着<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mrow><mi>A</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">{A}^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">A</span></span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>的还原回去，就会得到向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover><mo>=</mo><msup><mrow><mi>A</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>⋅</mo><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}={A}^{-1} \\cdot \\vec{v}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.864108em;\"></span><span class=\"strut bottom\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span></span><span class=\"vlist\"><span style=\"top:-0.41300000000000003em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">⋅</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15107489431518.jpg\" alt=\"-w500\"></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo>(</mo><mi>A</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">det(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">t</span><span class=\"mopen\">(</span><span class=\"mord mathit\">A</span><span class=\"mclose\">)</span></span></span></span>不等于0，意味着空间没有被压缩到丢维的程度。那么不管<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">A</span></span></span></span>有多大能耐，制造出多邪乎的变换，都可以还原，也就是说<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">A</span></span></span></span>可逆。</p>\n<pre><code>  比如你把二维空间给变换成了一条直线，那还怎么可能恢复成平面。\n</code></pre>\n</li>\n</ul>\n<h2><span id=\"秩\"> 秩</span></h2>\n<p>秩就是变换后的空间维数。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">n</span></span></span></span>维矩阵变换后还是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">n</span></span></span></span>维空间叫满秩。</p>\n<pre><code>经过线性变换后的空间，如果是一条一维的直接，秩就是1。二维平面秩就是2。\n</code></pre>\n<h2><span id=\"列空间\"> 列空间</span></h2>\n<p>列(基)向量的线性组合组成的空间。</p>\n<h2><span id=\"零空间\"> 零空间</span></h2>\n<p>线性变换后，被压缩到原点的那部分，叫零空间。</p>\n<pre><code>一个直线被线性压缩变换后只有原点保持不变；\n一个平面被线性变换压缩成直线，原平面中有一条直线的空间就被压缩到了原点。\n那么这条被压缩到原点的直线就是零空间。\n</code></pre>\n<p>如下式可以看出，所有可以被<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">A</span></span></span></span>变换压缩到原点的向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>集合组成了零空间。也就是方程组可能是解的集合。下式中如果向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>不在零空间内，也一定无解。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>⋅</mo><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mi mathvariant=\"normal\">.</mi></mrow></mtd></mtr><mtr><mtd><mrow><mi mathvariant=\"normal\">.</mi></mrow></mtd></mtr><mtr><mtd><mrow><mi mathvariant=\"normal\">.</mi></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">A \\cdot \\vec{x} = \\left[\n    \\begin{array}{}\n      0\\\\\n      0\\\\\n      .\\\\\n      .\\\\\n      .\n    \\end{array}\n\\right]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:3.2540000000000004em;\"></span><span class=\"strut bottom\" style=\"height:6.00404em;vertical-align:-2.75004em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span><span class=\"mbin\">⋅</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\"><span class=\"delimsizing mult\"><span class=\"vlist\"><span style=\"top:2.1050199999999997em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:0.9500199999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:0.3490199999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-0.2519800000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-0.8529800000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.099em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-2.41em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:-1.2100000000000002em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:-0.009999999999999953em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">.</span></span></span><span style=\"top:1.1900000000000002em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">.</span></span></span><span style=\"top:2.3900000000000006em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">.</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\"><span class=\"delimsizing mult\"><span class=\"vlist\"><span style=\"top:2.1050199999999997em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:0.9500199999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:0.3490199999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-0.2519800000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-0.8529800000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.099em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></span></span></p>\n<h2><span id=\"点积\"> 点积</span></h2>\n<p>两个向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo separator=\"true\">,</mo><mover accent=\"true\"><mrow><mi>j</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{v},\\vec{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.94296em;\"></span><span class=\"strut bottom\" style=\"height:1.1374em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mpunct\">,</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span></span></span><span style=\"top:-0.2285200000000001em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>点积，几何意义就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{v}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>j</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.94296em;\"></span><span class=\"strut bottom\" style=\"height:1.1374em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span></span></span><span style=\"top:-0.2285200000000001em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>的投影长度，乘以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>j</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.94296em;\"></span><span class=\"strut bottom\" style=\"height:1.1374em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span></span></span><span style=\"top:-0.2285200000000001em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>的长度。反之也成立，这是一个对称的。</p>\n<h2><span id=\"叉积\"> 叉积</span></h2>\n<ul>\n<li>两个向量围成的平行四边形的面积，有正有负。</li>\n<li>计算方式相对简单，将两个向量看成是由单位矩阵变换而来的两个基，行列式的值就是该面积。</li>\n<li>在求出该面积后，也就得出来叉积向量。它和上述的平行四边形平面垂直，长度就是面积值。如下图红色向量（需要用到右手定则）。</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15108854308734.jpg\" alt=\"-w240\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15108855479844.jpg\" alt=\"-w240\"></p>\n<h2><span id=\"基变换\"> 基变换</span></h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mrow><mi>A</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>⋅</mo><mi>M</mi><mo>⋅</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">{A}^{-1} \\cdot M \\cdot A\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.864108em;\"></span><span class=\"strut bottom\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord\"><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span></span><span class=\"vlist\"><span style=\"top:-0.41300000000000003em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">⋅</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mbin\">⋅</span><span class=\"mord mathit\">A</span></span></span></span></span></p>\n<h2><span id=\"特征\"> 特征</span></h2>\n<p>在经历矩阵线性变换后，该向量还保持方向不变，该向量就是特征向量，且长度是放大比例就是特征值。零空间和特征有紧密联系。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>=</mo><mi>λ</mi><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">A \\vec{v} =  \\lambda \\vec{v}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord mathit\">λ</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<p>粉色轴是长度为1的特征向量，那么整个正方体可以在该方向旋转而不变形。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15114215605944.jpg\" alt=\"-w300\"></p>\n<p>如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span></span>大于1了，也就意味着在所有维度都放大<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span></span>倍，否则就被拉歪了。各维度都牵扯相同的比例也不会“倾倒”。就像下面的矩阵一样，它们正是一组由单位矩阵缩放<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span></span>倍得到的基。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\left[\n    \\begin{array}{}\n      1&amp;0\\\\\n      0&amp; 1\n    \\end{array}\n\\right]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mi>λ</mi></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mi>λ</mi></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\left[\n    \\begin{array}{}\n      \\lambda&amp;0\\\\\n      0&amp;\\lambda\n    \\end{array}\n\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span></span></p>\n<h2><span id=\"抽象向量空间\"> 抽象向量空间</span></h2>\n<p>世间万物，符合线性特征者，皆可矩阵化运算。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>(</mo><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>+</mo><mover accent=\"true\"><mrow><mi>w</mi></mrow><mo>⃗</mo></mover><mo>)</mo><mo>=</mo><mi>L</mi><mo>(</mo><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>)</mo><mo>+</mo><mi>L</mi><mo>(</mo><mover accent=\"true\"><mrow><mi>w</mi></mrow><mo>⃗</mo></mover><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">L(\\vec{v} + \\vec{w}) = L(\\vec{v}) + L(\\vec{w}) \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.02691em;\">w</span></span></span><span style=\"top:0em;margin-left:0.16668em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mbin\">+</span><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.02691em;\">w</span></span></span><span style=\"top:0em;margin-left:0.16668em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>(</mo><mi>c</mi><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>)</mo><mo>=</mo><mi>c</mi><mi>L</mi><mo>(</mo><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">L(c\\vec{v}) = cL(\\vec{v})\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord mathit\">c</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\">c</span><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li>上一式表示一起整和分开整，一个效果</li>\n<li>上二式表示变一个大向量和变一个小向量再倍乘一个效果</li>\n</ul>\n<p>符合以上两点就是线性的。导数就是这样的</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo>)</mo><mo>=</mo><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>)</mo><mo>+</mo><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{d}{dx}(x^3+x^2) = \\frac{d}{dx}(x^3)+\\frac{d}{dx}(x^2)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mbin\">+</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><mn>4</mn><msup><mi>x</mi><mn>3</mn></msup><mo>)</mo><mo>=</mo><mn>4</mn><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{d}{dx}(4x^3) = 4\\frac{d}{dx}(x^3)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathrm\">4</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">4</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>不管多么复杂的多项式，它们的区别只是系数不同（有的位置是零）。导数函数也不过是个多项式而已。求导的过程就可以理解为：源函数系数向量经过基导数矩阵的变换作用，得出导数多项式的系数向量。</p>\n<p>下面这张图表示了用矩阵来求导数的过程，箭头为标准基，它由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>…<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>一组基函数分别求导得出的一组导数基。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15114339843705.jpg\" alt=\"-w500\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"线性代数\"><a class=\"markdownIt-Anchor\" href=\"#线性代数\"></a> 线性代数</h1>\n<p>线性代数最重要的概念就是矩阵，理解矩阵，一定要先从变换起手。</p>\n<h2 id=\"矩阵\"><a class=\"markdownIt-Anchor\" href=\"#矩阵\"></a> 矩阵</h2>\n<p>矩阵的本质就是在描述坐标系变换，比如一个二维直角坐标系向左旋转了90度，那么怎么才能描述这种运动呢，其实就可以盯住（1，0）和（0，1）这两个基本点的坐标在新的坐标系跑哪去了。</p>\n<p>如果我告诉你那两个坐标现在分别跑到了（0，1）和（-1，0）就明白新坐标系长什么样了。</p>\n<p>如果把这两个坐标竖起来写到一起，就是矩阵了！如下式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mo>−</mo><mn>1</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">A = \\left[\n    \\begin{array}{}\n      0&amp;-1\\\\\n      1&amp; 0\n    \\end{array}\n\\right]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span><span class=\"mrel\">=</span><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span></span></p>\n<ul>\n<li>\n<p>矩阵A是变换的结果，也用来表示变换的过程。也就是说，矩阵A可以把标准坐标系旋转90度。</p>\n</li>\n<li>\n<p>由于坐标轴旋转了，整个坐标系也就随之旋转了，所有的坐标系内的向量也就一起旋转。</p>\n</li>\n<li>\n<p>当原坐标系里的任意向量被矩阵A施加变换以后，就得到了新坐标系内对应的向量，在这个该例中，就是得到了旋转90度后的向量。</p>\n</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15108096020947.jpg\" alt=\"-w250\"></p>\n<pre><code>标准直角坐标系中，向量[1,0]和[0,1]构成了最基本的二维单位矩阵。\n所有的矩阵都可以看成是对单位矩阵的变换。\n所有的矩阵都是一套坐标系。\n</code></pre>\n<h2 id=\"变换\"><a class=\"markdownIt-Anchor\" href=\"#变换\"></a> 变换</h2>\n<p>变换和函数的作用是一样的。被称为变换也是体现了图形上的含义。</p>\n<p>线性变换就是原来是根线，变完还是根线。同时，原点不能动。简单讲线性变换就是拉伸、旋转。</p>\n<p>向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>的线性组合，那么不管<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>经历怎么样的线性变换，你大爷永远是你大爷。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span></span>永远是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>的变换后相同系数的线性组合。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>v</mi><mo>=</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">v=3x + 4y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">3</span><span class=\"mord mathit\">x</span><span class=\"mbin\">+</span><span class=\"mord mathrm\">4</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>^</mo></mover><mo>=</mo><mn>3</mn><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>^</mo></mover><mo>+</mo><mn>4</mn><mover accent=\"true\"><mrow><mi>y</mi></mrow><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{v}=3\\hat{x} + 4\\hat{y}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">3</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">4</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:0em;margin-left:0.11112em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<ul>\n<li>二维空间中，只要知道两个变换后的向量，就可以求出任意向量经过变换后结果。</li>\n<li>下图中<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>为变换前的坐标，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>j</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.92296em;\"></span><span class=\"strut bottom\" style=\"height:1.1174em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span></span><span style=\"top:-0.2285200000000001em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mi>i</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.92296em;\"></span><span class=\"strut bottom\" style=\"height:0.92296em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord mathit\">i</span></span><span style=\"top:-0.22852em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body\"><span>^</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>都是已知w变换后的向量，可以求出经过变换后的向量。</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15105677933631.jpg\" alt=\"-w400\"></p>\n<p>下图解读为矩阵对向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[x,y]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">[</span><span class=\"mord mathit\">x</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">]</span></span></span></span>进行作用后得到的结果，其实也可以理解为向量对矩阵里的各列进行线性组合：<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15105681717369.jpg\" alt=\"-w400\"></p>\n<ul>\n<li><strong>上图矩阵可以看成是将[1,0]变换成[a,c]，将[0,1]变换成[b,d]，OK，那么就可以由变换后的矩阵求得向量[x,y]被变换后的向量是什么。这也说明了为什么单位矩阵的乘法具有不变性，因为经过单位矩阵的作用之后还是原来的向量。</strong></li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15106401190857.jpg\" alt=\"-w150\"></p>\n<ul>\n<li>\n<p><strong>上图中的x,y就是在新座系中的两个坐标。</strong></p>\n<p>矩阵乘法的本质就是线性变换，所有的矩阵都是逐行对单位向量做变换</p>\n</li>\n</ul>\n<h2 id=\"矩阵乘法\"><a class=\"markdownIt-Anchor\" href=\"#矩阵乘法\"></a> 矩阵乘法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>×</mo><mi>B</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">A \\times B = C\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span><span class=\"mbin\">×</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span></span></span></span></span></p>\n<pre><code>两个矩阵相乘，就是两个线性变换的叠加，结果矩阵也就是“增强”后的效果。\n</code></pre>\n<p>下图中，可以看作是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.10903em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>对<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">M_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.10903em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>的两个向量(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mi>e</mi><mo separator=\"true\">,</mo><mi>g</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[e,g]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">[</span><span class=\"mord mathit\">e</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">]</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>[</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>h</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">[f,h]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mord mathit\">h</span><span class=\"mclose\">]</span></span></span></span>)分别进行线性变换。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15106446775428.jpg\" alt=\"-w500\"></p>\n<h2 id=\"行列式\"><a class=\"markdownIt-Anchor\" href=\"#行列式\"></a> 行列式</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo>(</mo><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mi>a</mi></mrow></mtd><mtd><mrow><mi>b</mi></mrow></mtd></mtr><mtr><mtd><mrow><mi>c</mi></mrow></mtd><mtd><mrow><mi>d</mi></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mo>)</mo><mo>=</mo><mi>e</mi></mrow><annotation encoding=\"application/x-tex\"> det( \\left[\n    \\begin{array}{}\n      a&amp;b\\\\\n      c&amp;d\n    \\end{array}\n\\right] )= e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">t</span><span class=\"mopen\">(</span><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">a</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">c</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">b</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\">e</span></span></span></span></span></p>\n<p>如上图行列式的结果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">e</span></span></span></span>就是经过变换后，固定区域的缩放比例。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15106477083108.jpg\" alt=\"-w500\"></p>\n<p>行列式可以为负值，当为负值时，空间定向变了。简单讲就是翻个儿了。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15106483421572.jpg\" alt=\"-w300\"></p>\n<h2 id=\"逆\"><a class=\"markdownIt-Anchor\" href=\"#逆\"></a> 逆</h2>\n<pre><code>矩阵的逆，就是矩阵变换后，再变回来。\n</code></pre>\n<p>下图中向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>经过矩阵<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">A</span></span></span></span>的变换后得到向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{v}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>，由此可得将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{v}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>沿着<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mrow><mi>A</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">{A}^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">A</span></span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>的还原回去，就会得到向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover><mo>=</mo><msup><mrow><mi>A</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>⋅</mo><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}={A}^{-1} \\cdot \\vec{v}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.864108em;\"></span><span class=\"strut bottom\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span></span><span class=\"vlist\"><span style=\"top:-0.41300000000000003em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">⋅</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15107489431518.jpg\" alt=\"-w500\"></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mo>(</mo><mi>A</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">det(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">t</span><span class=\"mopen\">(</span><span class=\"mord mathit\">A</span><span class=\"mclose\">)</span></span></span></span>不等于0，意味着空间没有被压缩到丢维的程度。那么不管<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">A</span></span></span></span>有多大能耐，制造出多邪乎的变换，都可以还原，也就是说<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">A</span></span></span></span>可逆。</p>\n<pre><code>  比如你把二维空间给变换成了一条直线，那还怎么可能恢复成平面。\n</code></pre>\n</li>\n</ul>\n<h2 id=\"秩\"><a class=\"markdownIt-Anchor\" href=\"#秩\"></a> 秩</h2>\n<p>秩就是变换后的空间维数。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">n</span></span></span></span>维矩阵变换后还是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">n</span></span></span></span>维空间叫满秩。</p>\n<pre><code>经过线性变换后的空间，如果是一条一维的直接，秩就是1。二维平面秩就是2。\n</code></pre>\n<h2 id=\"列空间\"><a class=\"markdownIt-Anchor\" href=\"#列空间\"></a> 列空间</h2>\n<p>列(基)向量的线性组合组成的空间。</p>\n<h2 id=\"零空间\"><a class=\"markdownIt-Anchor\" href=\"#零空间\"></a> 零空间</h2>\n<p>线性变换后，被压缩到原点的那部分，叫零空间。</p>\n<pre><code>一个直线被线性压缩变换后只有原点保持不变；\n一个平面被线性变换压缩成直线，原平面中有一条直线的空间就被压缩到了原点。\n那么这条被压缩到原点的直线就是零空间。\n</code></pre>\n<p>如下式可以看出，所有可以被<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">A</span></span></span></span>变换压缩到原点的向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>集合组成了零空间。也就是方程组可能是解的集合。下式中如果向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>不在零空间内，也一定无解。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>⋅</mo><mover accent=\"true\"><mrow><mi>x</mi></mrow><mo>⃗</mo></mover><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mi mathvariant=\"normal\">.</mi></mrow></mtd></mtr><mtr><mtd><mrow><mi mathvariant=\"normal\">.</mi></mrow></mtd></mtr><mtr><mtd><mrow><mi mathvariant=\"normal\">.</mi></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">A \\cdot \\vec{x} = \\left[\n    \\begin{array}{}\n      0\\\\\n      0\\\\\n      .\\\\\n      .\\\\\n      .\n    \\end{array}\n\\right]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:3.2540000000000004em;\"></span><span class=\"strut bottom\" style=\"height:6.00404em;vertical-align:-2.75004em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span><span class=\"mbin\">⋅</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\">x</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\"><span class=\"delimsizing mult\"><span class=\"vlist\"><span style=\"top:2.1050199999999997em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:0.9500199999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:0.3490199999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-0.2519800000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-0.8529800000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.099em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-2.41em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:-1.2100000000000002em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:-0.009999999999999953em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">.</span></span></span><span style=\"top:1.1900000000000002em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">.</span></span></span><span style=\"top:2.3900000000000006em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">.</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\"><span class=\"delimsizing mult\"><span class=\"vlist\"><span style=\"top:2.1050199999999997em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:0.9500199999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:0.3490199999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-0.2519800000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-0.8529800000000001em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.099em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"点积\"><a class=\"markdownIt-Anchor\" href=\"#点积\"></a> 点积</h2>\n<p>两个向量<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo separator=\"true\">,</mo><mover accent=\"true\"><mrow><mi>j</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{v},\\vec{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.94296em;\"></span><span class=\"strut bottom\" style=\"height:1.1374em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mpunct\">,</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span></span></span><span style=\"top:-0.2285200000000001em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>点积，几何意义就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{v}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>j</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.94296em;\"></span><span class=\"strut bottom\" style=\"height:1.1374em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span></span></span><span style=\"top:-0.2285200000000001em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>的投影长度，乘以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mover accent=\"true\"><mrow><mi>j</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\vec{j}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.94296em;\"></span><span class=\"strut bottom\" style=\"height:1.1374em;vertical-align:-0.19444em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.05724em;\">j</span></span></span><span style=\"top:-0.2285200000000001em;margin-left:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>的长度。反之也成立，这是一个对称的。</p>\n<h2 id=\"叉积\"><a class=\"markdownIt-Anchor\" href=\"#叉积\"></a> 叉积</h2>\n<ul>\n<li>两个向量围成的平行四边形的面积，有正有负。</li>\n<li>计算方式相对简单，将两个向量看成是由单位矩阵变换而来的两个基，行列式的值就是该面积。</li>\n<li>在求出该面积后，也就得出来叉积向量。它和上述的平行四边形平面垂直，长度就是面积值。如下图红色向量（需要用到右手定则）。</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15108854308734.jpg\" alt=\"-w240\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/15108855479844.jpg\" alt=\"-w240\"></p>\n<h2 id=\"基变换\"><a class=\"markdownIt-Anchor\" href=\"#基变换\"></a> 基变换</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mrow><mi>A</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>⋅</mo><mi>M</mi><mo>⋅</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">{A}^{-1} \\cdot M \\cdot A\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.864108em;\"></span><span class=\"strut bottom\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord\"><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span></span><span class=\"vlist\"><span style=\"top:-0.41300000000000003em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">⋅</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mbin\">⋅</span><span class=\"mord mathit\">A</span></span></span></span></span></p>\n<h2 id=\"特征\"><a class=\"markdownIt-Anchor\" href=\"#特征\"></a> 特征</h2>\n<p>在经历矩阵线性变换后，该向量还保持方向不变，该向量就是特征向量，且长度是放大比例就是特征值。零空间和特征有紧密联系。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>=</mo><mi>λ</mi><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding=\"application/x-tex\">A \\vec{v} =  \\lambda \\vec{v}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.71444em;\"></span><span class=\"strut bottom\" style=\"height:0.71444em;vertical-align:0em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">A</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord mathit\">λ</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></span></p>\n<p>粉色轴是长度为1的特征向量，那么整个正方体可以在该方向旋转而不变形。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15114215605944.jpg\" alt=\"-w300\"></p>\n<p>如果<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span></span>大于1了，也就意味着在所有维度都放大<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span></span>倍，否则就被拉歪了。各维度都牵扯相同的比例也不会“倾倒”。就像下面的矩阵一样，它们正是一组由单位矩阵缩放<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span></span>倍得到的基。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mn>1</mn></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mn>1</mn></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\left[\n    \\begin{array}{}\n      1&amp;0\\\\\n      0&amp; 1\n    \\end{array}\n\\right]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">[</mo><mtable><mtr><mtd><mrow><mi>λ</mi></mrow></mtd><mtd><mrow><mn>0</mn></mrow></mtd></mtr><mtr><mtd><mrow><mn>0</mn></mrow></mtd><mtd><mrow><mi>λ</mi></mrow></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\left[\n    \\begin{array}{}\n      \\lambda&amp;0\\\\\n      0&amp;\\lambda\n    \\end{array}\n\\right]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"minner displaystyle textstyle uncramped\"><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">[</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist\"><span style=\"top:-0.6099999999999999em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:0.5900000000000003em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle uncramped\"><span class=\"mord mathit\">λ</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span><span class=\"style-wrap reset-textstyle textstyle uncramped\" style=\"top:0em;\"><span class=\"delimsizing size3\">]</span></span></span></span></span></span></span></p>\n<h2 id=\"抽象向量空间\"><a class=\"markdownIt-Anchor\" href=\"#抽象向量空间\"></a> 抽象向量空间</h2>\n<p>世间万物，符合线性特征者，皆可矩阵化运算。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>(</mo><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>+</mo><mover accent=\"true\"><mrow><mi>w</mi></mrow><mo>⃗</mo></mover><mo>)</mo><mo>=</mo><mi>L</mi><mo>(</mo><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>)</mo><mo>+</mo><mi>L</mi><mo>(</mo><mover accent=\"true\"><mrow><mi>w</mi></mrow><mo>⃗</mo></mover><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">L(\\vec{v} + \\vec{w}) = L(\\vec{v}) + L(\\vec{w}) \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.02691em;\">w</span></span></span><span style=\"top:0em;margin-left:0.16668em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mbin\">+</span><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.02691em;\">w</span></span></span><span style=\"top:0em;margin-left:0.16668em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>(</mo><mi>c</mi><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>)</mo><mo>=</mo><mi>c</mi><mi>L</mi><mo>(</mo><mover accent=\"true\"><mrow><mi>v</mi></mrow><mo>⃗</mo></mover><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">L(c\\vec{v}) = cL(\\vec{v})\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord mathit\">c</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\">c</span><span class=\"mord mathit\">L</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist\"><span style=\"top:0em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"mord displaystyle textstyle cramped\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">v</span></span></span><span style=\"top:0em;margin-left:0.05556em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"accent-body accent-vec\"><span>⃗</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li>上一式表示一起整和分开整，一个效果</li>\n<li>上二式表示变一个大向量和变一个小向量再倍乘一个效果</li>\n</ul>\n<p>符合以上两点就是线性的。导数就是这样的</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo>)</mo><mo>=</mo><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>)</mo><mo>+</mo><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{d}{dx}(x^3+x^2) = \\frac{d}{dx}(x^3)+\\frac{d}{dx}(x^2)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mbin\">+</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><mn>4</mn><msup><mi>x</mi><mn>3</mn></msup><mo>)</mo><mo>=</mo><mn>4</mn><mfrac><mrow><mi>d</mi></mrow><mrow><mi>d</mi><mi>x</mi></mrow></mfrac><mo>(</mo><msup><mi>x</mi><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{d}{dx}(4x^3) = 4\\frac{d}{dx}(x^3)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:1.37144em;\"></span><span class=\"strut bottom\" style=\"height:2.05744em;vertical-align:-0.686em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathrm\">4</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">4</span><span class=\"mord reset-textstyle displaystyle textstyle uncramped\"><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist\"><span style=\"top:0.686em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle cramped\"><span class=\"mord textstyle cramped\"><span class=\"mord mathit\">d</span><span class=\"mord mathit\">x</span></span></span></span><span style=\"top:-0.22999999999999998em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped frac-line\"></span></span><span style=\"top:-0.677em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle textstyle uncramped\"><span class=\"mord textstyle uncramped\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>不管多么复杂的多项式，它们的区别只是系数不同（有的位置是零）。导数函数也不过是个多项式而已。求导的过程就可以理解为：源函数系数向量经过基导数矩阵的变换作用，得出导数多项式的系数向量。</p>\n<p>下面这张图表示了用矩阵来求导数的过程，箭头为标准基，它由<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>,<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>…<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>一组基函数分别求导得出的一组导数基。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/15114339843705.jpg\" alt=\"-w500\"></p>\n"},{"title":"第01章 计算机系统漫游","catalog":true,"date":"2017-02-22T09:21:29.000Z","header-img":"/img/05.jpg","_content":"\n#第01章 计算机系统漫游\n\nTags: 深入理解计算机系统\n\n[TOC]\n\n---\n## 第一章\n---\n![image_1beikj90n1f6gv9a1fjbv6n18m49.png-133.7kB][1]\n>* 预编译阶段 - 生成.i文件：  g++ -E hello.c -o hello.i\n>* 编译阶段 - 生成汇编文本.s文件： g++ -S hello.i -o hello.s\n>* 汇编阶段 -  生成.o文件： g++ -c hello.s -o hello.o\n>* 链接阶段 -  生成可执行文件： g++ hello.o -o hello\n\n**g++ gcc编译参数**\n|参数        | 说明   |  \n| ----------| --------| \n| -c    |  只编译不链接，生成*.o文件|  \n| -S        |   生成汇编代码*.s文件   | \n| -E        |   预编译 生成*.i文件   |  \n|-g         |在可执行程序里包含了调试信息，可用 gdb 调试|\n|-o         |把输出文件输出到指定文件里|\n|-static  |链接静态链接库|\n|-library |链接名为library的链接库|\n\n###系统硬件组成\n![image_1beionion1pao1p14p7u5v81kbo13.png-320.4kB][2]\n####总线####\n32位系统总线是4个字节（32个位）\n64位系统总线是8个字节（64个位）\n总线宽度一般就是一个字长\n\n####I/O设备\nI/O设备通过控制器和适配器与I/O总线相连：\n>* 控制器是镶在主板的芯片组，如集显。\n>* 适配器就是插槽，如独显。\n\n####CPU 中央处理单元（Central Processing Unit）\n\n 1. 处理器的核心是一个大小为一个**字**的存储设备（或寄存器），称为程序计数器（PC)。在任何时 刻，PC都指向主存中的某条机器语言指令（即含有该条指令的地址）。\n 2. 从开机到关机，CPU一直更新PC使其指向一下条指令地址。\n 3. 指令是按照严格顺序执行的，执行完一条就更新PC指向下一条。两条指令地址不一定是相邻的。\n\n####主存\n主内存就是一个从index 0开始的字节数组，每个内存字节都有唯一的index也就是唯一的地址。\n\n#### 寄存器\n寄存器文件是一个小的存储设备，由一组单个字长的寄存器组成。每个寄存器都有唯一的名字。\n\n#### CPU指令执行过程\n几乎所有的冯•诺伊曼型计算机的CPU，其工作都可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回\n![image_1bgvo3oi51mtlrjp1ijf1ek4t39m.png-46.2kB][3]\n\n（1）指令周期\n\nCPU取出一条指令并执行该指令所需的时间称为指令周期。\n指令周期的长短与指令的复杂程度有关。\n\n（2）CPU周期\n\n指令周期常常用若干个CPU周期数来表示。\n由于CPU内部的操作速度较快，而CPU访问一次主存所花的时间较长，因此通常用从主存读取一条指令的最短时间来规定CPU周期。\nCPU周期也称为机器周期。\n\n（3）时钟周期\n\n一个CPU周期包含有若干个时钟周期。\n时钟周期是处理操作的最基本时间单位，由机器的主频决定。\n一个CPU周期的时间宽度由若干个时钟周期的总和决定。\n\n![采用定长CPU周期的指令周期示意图][4]\n\n（4）取出和执行任何一条指令所需的最短时间为两个CPU周期。\n\n任何一条指令，它的指令周期至少需要两个CPU周期，而复杂指令的指令周期则需要更多的CPU周期。这是因为，一条指令的取出阶段需要一个CPU周期时间，而一条指令的执行阶段则需要至少一个CPU周期时间。由于不同复杂度指令的执行周期所需的CPU周期数不尽相等，因此，各种指令的指令周期也是不尽相同的。z\n\n#### 一个hello world程序执行过程\n - 利用直接存储器存取（DMA）直接从磁盘不经过cpu拷贝运行文件到主存\n - cpu从主存拷贝字符串到寄存器再从寄存器拷贝到显示器\n \n### 存储器\n####CPU缓存\n运行速度很多消耗在拷贝过程， 由于寄存器越来越快，主存的速度严重跟不上。中间出现了L1 L2 L3这种高速缓存。为CPU提前从主存中获取数据到缓存。\n\n - 寄存器(几百字节)速度最快比主存快100倍\n - L1(几万字节，位于处理器芯片上) 访问速度和寄存器几乎一样\n - L2(数十至百万字节特殊总线连接到处理器)比主存快5-10倍\n - 主存(几十亿字节)\n - 磁盘读取单个字的时间开销比主存大1000万倍\n![image_1bejtnn9t1lp2aiqk2a1hrjes0m.png-138.7kB][5]\n\n#### 结构图\n![image_1bejuddb8lan1ou51l0v93915bp13.png-281kB][6]\n#### 虚拟内存\n虚拟内存和CPU缓存作用一样，它是用来做磁盘的缓存。\n\n### 多核处理器结构\n![image_1bel90rvjdr376a1ag913e84951g.png-433.5kB][7]\n\n* 由高到低：线程级->多指令并行->单指令并行\n#### 超线程\n4核能跑8条线程，就是一种超线程。比如当一个CPU在正等L1缓存的数据，那么这会它也可以跑另一个线程的运算。Intel Core I7就带有超线程技术。\n#### 指令级并行\n一口气执行多条指令，超标量。\n#### 单指令多数据并行（SIMD）\n> SIMD 指令多是为了提高处理影像 、 声音和视频数据应用的执行速度。虽然有些编译器试图从程序中自动抽取 SIMD 并行性，但是更可靠的方法是使用编译器支持的特殊向量数据类型来写程序，例如GCC 就支持向量数据类型。作为对比较通用的程序优化讲述的补充，在网络旁注 OPT:SIMD 中描述了这种编程方式 。\n\n\n  [1]: http://static.zybuluo.com/allon6/qciw23zdgnf96cr1yys34mjo/image_1beikj90n1f6gv9a1fjbv6n18m49.png\n  [2]: http://static.zybuluo.com/allon6/k5g8amzzepo43qi1de8lb2ir/image_1beionion1pao1p14p7u5v81kbo13.png\n  [3]: http://static.zybuluo.com/allon6/hoxu6w8adddrf52uy7a302ap/image_1bgvo3oi51mtlrjp1ijf1ek4t39m.png\n  [4]: http://static.zybuluo.com/allon6/se1cnxl50kpwfdfr1qrk3p7x/image_1bgvp0q9ksh5hdop3n1i2f3g31g.png\n  [5]: http://static.zybuluo.com/allon6/tw906gbl5wwhkrrmrzxmga18/image_1bejtnn9t1lp2aiqk2a1hrjes0m.png\n  [6]: http://static.zybuluo.com/allon6/rbd8q1olikakhvm6lkcibeh1/image_1bejuddb8lan1ou51l0v93915bp13.png\n  [7]: http://static.zybuluo.com/allon6/wgf5sxdj3c7sxuxq4z194v4n/image_1bel90rvjdr376a1ag913e84951g.png\n","source":"_posts/深入理解计算机系统/第01章 计算机系统漫游.md","raw":"---\ntitle: \"第01章 计算机系统漫游\"\ncatalog: true\ndate: 2017-02-22 17:21:29\nheader-img: \"/img/05.jpg\"\ntags: \"深入理解计算机系统\"\n---\n\n#第01章 计算机系统漫游\n\nTags: 深入理解计算机系统\n\n[TOC]\n\n---\n## 第一章\n---\n![image_1beikj90n1f6gv9a1fjbv6n18m49.png-133.7kB][1]\n>* 预编译阶段 - 生成.i文件：  g++ -E hello.c -o hello.i\n>* 编译阶段 - 生成汇编文本.s文件： g++ -S hello.i -o hello.s\n>* 汇编阶段 -  生成.o文件： g++ -c hello.s -o hello.o\n>* 链接阶段 -  生成可执行文件： g++ hello.o -o hello\n\n**g++ gcc编译参数**\n|参数        | 说明   |  \n| ----------| --------| \n| -c    |  只编译不链接，生成*.o文件|  \n| -S        |   生成汇编代码*.s文件   | \n| -E        |   预编译 生成*.i文件   |  \n|-g         |在可执行程序里包含了调试信息，可用 gdb 调试|\n|-o         |把输出文件输出到指定文件里|\n|-static  |链接静态链接库|\n|-library |链接名为library的链接库|\n\n###系统硬件组成\n![image_1beionion1pao1p14p7u5v81kbo13.png-320.4kB][2]\n####总线####\n32位系统总线是4个字节（32个位）\n64位系统总线是8个字节（64个位）\n总线宽度一般就是一个字长\n\n####I/O设备\nI/O设备通过控制器和适配器与I/O总线相连：\n>* 控制器是镶在主板的芯片组，如集显。\n>* 适配器就是插槽，如独显。\n\n####CPU 中央处理单元（Central Processing Unit）\n\n 1. 处理器的核心是一个大小为一个**字**的存储设备（或寄存器），称为程序计数器（PC)。在任何时 刻，PC都指向主存中的某条机器语言指令（即含有该条指令的地址）。\n 2. 从开机到关机，CPU一直更新PC使其指向一下条指令地址。\n 3. 指令是按照严格顺序执行的，执行完一条就更新PC指向下一条。两条指令地址不一定是相邻的。\n\n####主存\n主内存就是一个从index 0开始的字节数组，每个内存字节都有唯一的index也就是唯一的地址。\n\n#### 寄存器\n寄存器文件是一个小的存储设备，由一组单个字长的寄存器组成。每个寄存器都有唯一的名字。\n\n#### CPU指令执行过程\n几乎所有的冯•诺伊曼型计算机的CPU，其工作都可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回\n![image_1bgvo3oi51mtlrjp1ijf1ek4t39m.png-46.2kB][3]\n\n（1）指令周期\n\nCPU取出一条指令并执行该指令所需的时间称为指令周期。\n指令周期的长短与指令的复杂程度有关。\n\n（2）CPU周期\n\n指令周期常常用若干个CPU周期数来表示。\n由于CPU内部的操作速度较快，而CPU访问一次主存所花的时间较长，因此通常用从主存读取一条指令的最短时间来规定CPU周期。\nCPU周期也称为机器周期。\n\n（3）时钟周期\n\n一个CPU周期包含有若干个时钟周期。\n时钟周期是处理操作的最基本时间单位，由机器的主频决定。\n一个CPU周期的时间宽度由若干个时钟周期的总和决定。\n\n![采用定长CPU周期的指令周期示意图][4]\n\n（4）取出和执行任何一条指令所需的最短时间为两个CPU周期。\n\n任何一条指令，它的指令周期至少需要两个CPU周期，而复杂指令的指令周期则需要更多的CPU周期。这是因为，一条指令的取出阶段需要一个CPU周期时间，而一条指令的执行阶段则需要至少一个CPU周期时间。由于不同复杂度指令的执行周期所需的CPU周期数不尽相等，因此，各种指令的指令周期也是不尽相同的。z\n\n#### 一个hello world程序执行过程\n - 利用直接存储器存取（DMA）直接从磁盘不经过cpu拷贝运行文件到主存\n - cpu从主存拷贝字符串到寄存器再从寄存器拷贝到显示器\n \n### 存储器\n####CPU缓存\n运行速度很多消耗在拷贝过程， 由于寄存器越来越快，主存的速度严重跟不上。中间出现了L1 L2 L3这种高速缓存。为CPU提前从主存中获取数据到缓存。\n\n - 寄存器(几百字节)速度最快比主存快100倍\n - L1(几万字节，位于处理器芯片上) 访问速度和寄存器几乎一样\n - L2(数十至百万字节特殊总线连接到处理器)比主存快5-10倍\n - 主存(几十亿字节)\n - 磁盘读取单个字的时间开销比主存大1000万倍\n![image_1bejtnn9t1lp2aiqk2a1hrjes0m.png-138.7kB][5]\n\n#### 结构图\n![image_1bejuddb8lan1ou51l0v93915bp13.png-281kB][6]\n#### 虚拟内存\n虚拟内存和CPU缓存作用一样，它是用来做磁盘的缓存。\n\n### 多核处理器结构\n![image_1bel90rvjdr376a1ag913e84951g.png-433.5kB][7]\n\n* 由高到低：线程级->多指令并行->单指令并行\n#### 超线程\n4核能跑8条线程，就是一种超线程。比如当一个CPU在正等L1缓存的数据，那么这会它也可以跑另一个线程的运算。Intel Core I7就带有超线程技术。\n#### 指令级并行\n一口气执行多条指令，超标量。\n#### 单指令多数据并行（SIMD）\n> SIMD 指令多是为了提高处理影像 、 声音和视频数据应用的执行速度。虽然有些编译器试图从程序中自动抽取 SIMD 并行性，但是更可靠的方法是使用编译器支持的特殊向量数据类型来写程序，例如GCC 就支持向量数据类型。作为对比较通用的程序优化讲述的补充，在网络旁注 OPT:SIMD 中描述了这种编程方式 。\n\n\n  [1]: http://static.zybuluo.com/allon6/qciw23zdgnf96cr1yys34mjo/image_1beikj90n1f6gv9a1fjbv6n18m49.png\n  [2]: http://static.zybuluo.com/allon6/k5g8amzzepo43qi1de8lb2ir/image_1beionion1pao1p14p7u5v81kbo13.png\n  [3]: http://static.zybuluo.com/allon6/hoxu6w8adddrf52uy7a302ap/image_1bgvo3oi51mtlrjp1ijf1ek4t39m.png\n  [4]: http://static.zybuluo.com/allon6/se1cnxl50kpwfdfr1qrk3p7x/image_1bgvp0q9ksh5hdop3n1i2f3g31g.png\n  [5]: http://static.zybuluo.com/allon6/tw906gbl5wwhkrrmrzxmga18/image_1bejtnn9t1lp2aiqk2a1hrjes0m.png\n  [6]: http://static.zybuluo.com/allon6/rbd8q1olikakhvm6lkcibeh1/image_1bejuddb8lan1ou51l0v93915bp13.png\n  [7]: http://static.zybuluo.com/allon6/wgf5sxdj3c7sxuxq4z194v4n/image_1bel90rvjdr376a1ag913e84951g.png\n","slug":"深入理解计算机系统/第01章 计算机系统漫游","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhg0013j5ly42ghq1ti","content":"<p>#第01章 计算机系统漫游</p>\n<p>Tags: 深入理解计算机系统</p>\n<p>[TOC]</p>\n<hr>\n<h2><span id=\"第一章\"> 第一章</span></h2>\n<hr>\n<p><img src=\"http://static.zybuluo.com/allon6/qciw23zdgnf96cr1yys34mjo/image_1beikj90n1f6gv9a1fjbv6n18m49.png\" alt=\"image_1beikj90n1f6gv9a1fjbv6n18m49.png-133.7kB\"></p>\n<blockquote>\n<ul>\n<li>预编译阶段 - 生成.i文件：  g++ -E hello.c -o hello.i</li>\n<li>编译阶段 - 生成汇编文本.s文件： g++ -S hello.i -o hello.s</li>\n<li>汇编阶段 -  生成.o文件： g++ -c hello.s -o hello.o</li>\n<li>链接阶段 -  生成可执行文件： g++ hello.o -o hello</li>\n</ul>\n</blockquote>\n<p><strong>g++ gcc编译参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-c</td>\n<td>只编译不链接，生成*.o文件</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>生成汇编代码*.s文件</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>预编译 生成*.i文件</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>在可执行程序里包含了调试信息，可用 gdb 调试</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>把输出文件输出到指定文件里</td>\n</tr>\n<tr>\n<td>-static</td>\n<td>链接静态链接库</td>\n</tr>\n<tr>\n<td>-library</td>\n<td>链接名为library的链接库</td>\n</tr>\n</tbody>\n</table>\n<p>###系统硬件组成<br>\n<img src=\"http://static.zybuluo.com/allon6/k5g8amzzepo43qi1de8lb2ir/image_1beionion1pao1p14p7u5v81kbo13.png\" alt=\"image_1beionion1pao1p14p7u5v81kbo13.png-320.4kB\"><br>\n####总线####<br>\n32位系统总线是4个字节（32个位）<br>\n64位系统总线是8个字节（64个位）<br>\n总线宽度一般就是一个字长</p>\n<p>####I/O设备<br>\nI/O设备通过控制器和适配器与I/O总线相连：</p>\n<blockquote>\n<ul>\n<li>控制器是镶在主板的芯片组，如集显。</li>\n<li>适配器就是插槽，如独显。</li>\n</ul>\n</blockquote>\n<p>####CPU 中央处理单元（Central Processing Unit）</p>\n<ol>\n<li>处理器的核心是一个大小为一个<strong>字</strong>的存储设备（或寄存器），称为程序计数器（PC)。在任何时 刻，PC都指向主存中的某条机器语言指令（即含有该条指令的地址）。</li>\n<li>从开机到关机，CPU一直更新PC使其指向一下条指令地址。</li>\n<li>指令是按照严格顺序执行的，执行完一条就更新PC指向下一条。两条指令地址不一定是相邻的。</li>\n</ol>\n<p>####主存<br>\n主内存就是一个从index 0开始的字节数组，每个内存字节都有唯一的index也就是唯一的地址。</p>\n<h4><span id=\"寄存器\"> 寄存器</span></h4>\n<p>寄存器文件是一个小的存储设备，由一组单个字长的寄存器组成。每个寄存器都有唯一的名字。</p>\n<h4><span id=\"cpu指令执行过程\"> CPU指令执行过程</span></h4>\n<p>几乎所有的冯•诺伊曼型计算机的CPU，其工作都可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回<br>\n<img src=\"http://static.zybuluo.com/allon6/hoxu6w8adddrf52uy7a302ap/image_1bgvo3oi51mtlrjp1ijf1ek4t39m.png\" alt=\"image_1bgvo3oi51mtlrjp1ijf1ek4t39m.png-46.2kB\"></p>\n<p>（1）指令周期</p>\n<p>CPU取出一条指令并执行该指令所需的时间称为指令周期。<br>\n指令周期的长短与指令的复杂程度有关。</p>\n<p>（2）CPU周期</p>\n<p>指令周期常常用若干个CPU周期数来表示。<br>\n由于CPU内部的操作速度较快，而CPU访问一次主存所花的时间较长，因此通常用从主存读取一条指令的最短时间来规定CPU周期。<br>\nCPU周期也称为机器周期。</p>\n<p>（3）时钟周期</p>\n<p>一个CPU周期包含有若干个时钟周期。<br>\n时钟周期是处理操作的最基本时间单位，由机器的主频决定。<br>\n一个CPU周期的时间宽度由若干个时钟周期的总和决定。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/se1cnxl50kpwfdfr1qrk3p7x/image_1bgvp0q9ksh5hdop3n1i2f3g31g.png\" alt=\"采用定长CPU周期的指令周期示意图\"></p>\n<p>（4）取出和执行任何一条指令所需的最短时间为两个CPU周期。</p>\n<p>任何一条指令，它的指令周期至少需要两个CPU周期，而复杂指令的指令周期则需要更多的CPU周期。这是因为，一条指令的取出阶段需要一个CPU周期时间，而一条指令的执行阶段则需要至少一个CPU周期时间。由于不同复杂度指令的执行周期所需的CPU周期数不尽相等，因此，各种指令的指令周期也是不尽相同的。z</p>\n<h4><span id=\"一个hello-world程序执行过程\"> 一个hello world程序执行过程</span></h4>\n<ul>\n<li>利用直接存储器存取（DMA）直接从磁盘不经过cpu拷贝运行文件到主存</li>\n<li>cpu从主存拷贝字符串到寄存器再从寄存器拷贝到显示器</li>\n</ul>\n<h3><span id=\"存储器\"> 存储器</span></h3>\n<p>####CPU缓存<br>\n运行速度很多消耗在拷贝过程， 由于寄存器越来越快，主存的速度严重跟不上。中间出现了L1 L2 L3这种高速缓存。为CPU提前从主存中获取数据到缓存。</p>\n<ul>\n<li>寄存器(几百字节)速度最快比主存快100倍</li>\n<li>L1(几万字节，位于处理器芯片上) 访问速度和寄存器几乎一样</li>\n<li>L2(数十至百万字节特殊总线连接到处理器)比主存快5-10倍</li>\n<li>主存(几十亿字节)</li>\n<li>磁盘读取单个字的时间开销比主存大1000万倍<br>\n<img src=\"http://static.zybuluo.com/allon6/tw906gbl5wwhkrrmrzxmga18/image_1bejtnn9t1lp2aiqk2a1hrjes0m.png\" alt=\"image_1bejtnn9t1lp2aiqk2a1hrjes0m.png-138.7kB\"></li>\n</ul>\n<h4><span id=\"结构图\"> 结构图</span></h4>\n<p><img src=\"http://static.zybuluo.com/allon6/rbd8q1olikakhvm6lkcibeh1/image_1bejuddb8lan1ou51l0v93915bp13.png\" alt=\"image_1bejuddb8lan1ou51l0v93915bp13.png-281kB\"></p>\n<h4><span id=\"虚拟内存\"> 虚拟内存</span></h4>\n<p>虚拟内存和CPU缓存作用一样，它是用来做磁盘的缓存。</p>\n<h3><span id=\"多核处理器结构\"> 多核处理器结构</span></h3>\n<p><img src=\"http://static.zybuluo.com/allon6/wgf5sxdj3c7sxuxq4z194v4n/image_1bel90rvjdr376a1ag913e84951g.png\" alt=\"image_1bel90rvjdr376a1ag913e84951g.png-433.5kB\"></p>\n<ul>\n<li>由高到低：线程级-&gt;多指令并行-&gt;单指令并行</li>\n</ul>\n<h4><span id=\"超线程\"> 超线程</span></h4>\n<p>4核能跑8条线程，就是一种超线程。比如当一个CPU在正等L1缓存的数据，那么这会它也可以跑另一个线程的运算。Intel Core I7就带有超线程技术。</p>\n<h4><span id=\"指令级并行\"> 指令级并行</span></h4>\n<p>一口气执行多条指令，超标量。</p>\n<h4><span id=\"单指令多数据并行simd\"> 单指令多数据并行（SIMD）</span></h4>\n<blockquote>\n<p>SIMD 指令多是为了提高处理影像 、 声音和视频数据应用的执行速度。虽然有些编译器试图从程序中自动抽取 SIMD 并行性，但是更可靠的方法是使用编译器支持的特殊向量数据类型来写程序，例如GCC 就支持向量数据类型。作为对比较通用的程序优化讲述的补充，在网络旁注 OPT:SIMD 中描述了这种编程方式 。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>#第01章 计算机系统漫游</p>\n<p>Tags: 深入理解计算机系统</p>\n<p>[TOC]</p>\n<hr>\n<h2 id=\"第一章\"><a class=\"markdownIt-Anchor\" href=\"#第一章\"></a> 第一章</h2>\n<hr>\n<p><img src=\"http://static.zybuluo.com/allon6/qciw23zdgnf96cr1yys34mjo/image_1beikj90n1f6gv9a1fjbv6n18m49.png\" alt=\"image_1beikj90n1f6gv9a1fjbv6n18m49.png-133.7kB\"></p>\n<blockquote>\n<ul>\n<li>预编译阶段 - 生成.i文件：  g++ -E hello.c -o hello.i</li>\n<li>编译阶段 - 生成汇编文本.s文件： g++ -S hello.i -o hello.s</li>\n<li>汇编阶段 -  生成.o文件： g++ -c hello.s -o hello.o</li>\n<li>链接阶段 -  生成可执行文件： g++ hello.o -o hello</li>\n</ul>\n</blockquote>\n<p><strong>g++ gcc编译参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-c</td>\n<td>只编译不链接，生成*.o文件</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>生成汇编代码*.s文件</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>预编译 生成*.i文件</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>在可执行程序里包含了调试信息，可用 gdb 调试</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>把输出文件输出到指定文件里</td>\n</tr>\n<tr>\n<td>-static</td>\n<td>链接静态链接库</td>\n</tr>\n<tr>\n<td>-library</td>\n<td>链接名为library的链接库</td>\n</tr>\n</tbody>\n</table>\n<p>###系统硬件组成<br>\n<img src=\"http://static.zybuluo.com/allon6/k5g8amzzepo43qi1de8lb2ir/image_1beionion1pao1p14p7u5v81kbo13.png\" alt=\"image_1beionion1pao1p14p7u5v81kbo13.png-320.4kB\"><br>\n####总线####<br>\n32位系统总线是4个字节（32个位）<br>\n64位系统总线是8个字节（64个位）<br>\n总线宽度一般就是一个字长</p>\n<p>####I/O设备<br>\nI/O设备通过控制器和适配器与I/O总线相连：</p>\n<blockquote>\n<ul>\n<li>控制器是镶在主板的芯片组，如集显。</li>\n<li>适配器就是插槽，如独显。</li>\n</ul>\n</blockquote>\n<p>####CPU 中央处理单元（Central Processing Unit）</p>\n<ol>\n<li>处理器的核心是一个大小为一个<strong>字</strong>的存储设备（或寄存器），称为程序计数器（PC)。在任何时 刻，PC都指向主存中的某条机器语言指令（即含有该条指令的地址）。</li>\n<li>从开机到关机，CPU一直更新PC使其指向一下条指令地址。</li>\n<li>指令是按照严格顺序执行的，执行完一条就更新PC指向下一条。两条指令地址不一定是相邻的。</li>\n</ol>\n<p>####主存<br>\n主内存就是一个从index 0开始的字节数组，每个内存字节都有唯一的index也就是唯一的地址。</p>\n<h4 id=\"寄存器\"><a class=\"markdownIt-Anchor\" href=\"#寄存器\"></a> 寄存器</h4>\n<p>寄存器文件是一个小的存储设备，由一组单个字长的寄存器组成。每个寄存器都有唯一的名字。</p>\n<h4 id=\"cpu指令执行过程\"><a class=\"markdownIt-Anchor\" href=\"#cpu指令执行过程\"></a> CPU指令执行过程</h4>\n<p>几乎所有的冯•诺伊曼型计算机的CPU，其工作都可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回<br>\n<img src=\"http://static.zybuluo.com/allon6/hoxu6w8adddrf52uy7a302ap/image_1bgvo3oi51mtlrjp1ijf1ek4t39m.png\" alt=\"image_1bgvo3oi51mtlrjp1ijf1ek4t39m.png-46.2kB\"></p>\n<p>（1）指令周期</p>\n<p>CPU取出一条指令并执行该指令所需的时间称为指令周期。<br>\n指令周期的长短与指令的复杂程度有关。</p>\n<p>（2）CPU周期</p>\n<p>指令周期常常用若干个CPU周期数来表示。<br>\n由于CPU内部的操作速度较快，而CPU访问一次主存所花的时间较长，因此通常用从主存读取一条指令的最短时间来规定CPU周期。<br>\nCPU周期也称为机器周期。</p>\n<p>（3）时钟周期</p>\n<p>一个CPU周期包含有若干个时钟周期。<br>\n时钟周期是处理操作的最基本时间单位，由机器的主频决定。<br>\n一个CPU周期的时间宽度由若干个时钟周期的总和决定。</p>\n<p><img src=\"http://static.zybuluo.com/allon6/se1cnxl50kpwfdfr1qrk3p7x/image_1bgvp0q9ksh5hdop3n1i2f3g31g.png\" alt=\"采用定长CPU周期的指令周期示意图\"></p>\n<p>（4）取出和执行任何一条指令所需的最短时间为两个CPU周期。</p>\n<p>任何一条指令，它的指令周期至少需要两个CPU周期，而复杂指令的指令周期则需要更多的CPU周期。这是因为，一条指令的取出阶段需要一个CPU周期时间，而一条指令的执行阶段则需要至少一个CPU周期时间。由于不同复杂度指令的执行周期所需的CPU周期数不尽相等，因此，各种指令的指令周期也是不尽相同的。z</p>\n<h4 id=\"一个hello-world程序执行过程\"><a class=\"markdownIt-Anchor\" href=\"#一个hello-world程序执行过程\"></a> 一个hello world程序执行过程</h4>\n<ul>\n<li>利用直接存储器存取（DMA）直接从磁盘不经过cpu拷贝运行文件到主存</li>\n<li>cpu从主存拷贝字符串到寄存器再从寄存器拷贝到显示器</li>\n</ul>\n<h3 id=\"存储器\"><a class=\"markdownIt-Anchor\" href=\"#存储器\"></a> 存储器</h3>\n<p>####CPU缓存<br>\n运行速度很多消耗在拷贝过程， 由于寄存器越来越快，主存的速度严重跟不上。中间出现了L1 L2 L3这种高速缓存。为CPU提前从主存中获取数据到缓存。</p>\n<ul>\n<li>寄存器(几百字节)速度最快比主存快100倍</li>\n<li>L1(几万字节，位于处理器芯片上) 访问速度和寄存器几乎一样</li>\n<li>L2(数十至百万字节特殊总线连接到处理器)比主存快5-10倍</li>\n<li>主存(几十亿字节)</li>\n<li>磁盘读取单个字的时间开销比主存大1000万倍<br>\n<img src=\"http://static.zybuluo.com/allon6/tw906gbl5wwhkrrmrzxmga18/image_1bejtnn9t1lp2aiqk2a1hrjes0m.png\" alt=\"image_1bejtnn9t1lp2aiqk2a1hrjes0m.png-138.7kB\"></li>\n</ul>\n<h4 id=\"结构图\"><a class=\"markdownIt-Anchor\" href=\"#结构图\"></a> 结构图</h4>\n<p><img src=\"http://static.zybuluo.com/allon6/rbd8q1olikakhvm6lkcibeh1/image_1bejuddb8lan1ou51l0v93915bp13.png\" alt=\"image_1bejuddb8lan1ou51l0v93915bp13.png-281kB\"></p>\n<h4 id=\"虚拟内存\"><a class=\"markdownIt-Anchor\" href=\"#虚拟内存\"></a> 虚拟内存</h4>\n<p>虚拟内存和CPU缓存作用一样，它是用来做磁盘的缓存。</p>\n<h3 id=\"多核处理器结构\"><a class=\"markdownIt-Anchor\" href=\"#多核处理器结构\"></a> 多核处理器结构</h3>\n<p><img src=\"http://static.zybuluo.com/allon6/wgf5sxdj3c7sxuxq4z194v4n/image_1bel90rvjdr376a1ag913e84951g.png\" alt=\"image_1bel90rvjdr376a1ag913e84951g.png-433.5kB\"></p>\n<ul>\n<li>由高到低：线程级-&gt;多指令并行-&gt;单指令并行</li>\n</ul>\n<h4 id=\"超线程\"><a class=\"markdownIt-Anchor\" href=\"#超线程\"></a> 超线程</h4>\n<p>4核能跑8条线程，就是一种超线程。比如当一个CPU在正等L1缓存的数据，那么这会它也可以跑另一个线程的运算。Intel Core I7就带有超线程技术。</p>\n<h4 id=\"指令级并行\"><a class=\"markdownIt-Anchor\" href=\"#指令级并行\"></a> 指令级并行</h4>\n<p>一口气执行多条指令，超标量。</p>\n<h4 id=\"单指令多数据并行simd\"><a class=\"markdownIt-Anchor\" href=\"#单指令多数据并行simd\"></a> 单指令多数据并行（SIMD）</h4>\n<blockquote>\n<p>SIMD 指令多是为了提高处理影像 、 声音和视频数据应用的执行速度。虽然有些编译器试图从程序中自动抽取 SIMD 并行性，但是更可靠的方法是使用编译器支持的特殊向量数据类型来写程序，例如GCC 就支持向量数据类型。作为对比较通用的程序优化讲述的补充，在网络旁注 OPT:SIMD 中描述了这种编程方式 。</p>\n</blockquote>\n"},{"title":"第02章 程序结构和执行","catalog":true,"date":"2017-02-22T09:21:29.000Z","header-img":"/img/05.jpg","_content":"\n# 第02章 程序结构和执行\n\nTags: 深入理解计算机系统\n\n[TOC]\n\n---\n\n## 信息的存储\n总线宽度一般就是一个字长，一个字长的位数，就决定着这个系统的寻址宽度。\n字长为 $n$ 那么它的寻址宽度为：$0$ ~ $(2^n - 1)$  程序最多访问$2^n$个字节。\n\nlittle endian(小端）目前android和ios都采用的是little endian。linux和windows也一样。\nbig endian(大端）  java是继承了SUN的系统规则属于小端。所以在java网络传输时尤其注意。\n![image_1benbhdpfh541jgr13s3fs1qs39.png-172.3kB][1]\n\nC、C++都支持无符号类型，java仅支持有符号。\n\n## 整数的表示\n![image_1bep6k353hh3apb1a1j12hn1oilm.png-271.8kB][2]\n<br>\n### 无符号编码\n全是正的，所以表示的正数值域很宽。\n$$B2U_4([1111]) = 1\\cdot2^3+1\\cdot2^2+1\\cdot2^1+1\\cdot2^0 = 15$$\n#### 有符号补码 - 常用\n最高位为负数，表示的值域：$-2^{4-1}$ ~ $2^{4-1} -1$，由此可以看出，因为0是非负数，所以多占了一个。有符号的位不是对称的。负数比正位大1。负数最小值在正方向上没有与之对应的数。\n$$B2T_4([1111]) = -1\\cdot2^3+1\\cdot2^2+1\\cdot2^1+1\\cdot2^0 = -1$$\n### 有符号反码\n和补码一样，只是最高位多减个1  ：$-2^{4-1} -1$\n###有符号原码\n最高位是-1： $-1\\cdot\\sum_{i=1}^nx\\cdot2^n$\n### 有无符号转换\n![image_1bepe8di71l3kvjgbkjlvii9p9.png-190kB][3]\n### 整数类型转换\n如果称位数少的为“小”，位数多的为“大”\n小 $\\to$ 大 ：零扩展\n大 $\\to$ 小 ：截断\n## 整数的运算\n判断加法溢出。用最大或者最小值跟目标值求差，再用差和另一个加数比较。如果那个加数比这个差大。就溢出。\n![image_1bepg9fg81sp6ceh1k5j1b4t16adm.png-599.8kB][4]\n\n## 浮点数\n![image_1beqdtlenf5q74h1v8214951gc013.png-126.1kB][5]\n>* 定点表示：**约定**机器中所有数据的小数点位置是固定不变的。由于约定在固定的位置，小数点就不再使用记号“.”来表示。通常将数据表示成纯小数或纯整数。定点数的表示方法就是整数是$\\sum_{i=1}^n 2^i $ ，小数就是2的负幂次。这种的缺点是表达的数据很窄。\n\n>* 浮点表示  - IEEE 754标准：浮点指小数点不是固定的，任意十进制数可以表示为：$$N = M \\cdot10^E$$\n比如：$$234.56 = 2.3456*10^2$$\n只保留一位整数这种方式叫规格化表示。\n$E$(Exponent) 阶码，它控制着小数点在什么位置上。\n$M$(Significand)尾数，也叫有效数。是核心数值。下图中的Fraction。\n![image_1besrrtt31jj3i8b17c1jfkohd1g.png-13.9kB][6]\n\n**这样就可以通过阶码E做为幂次来表示小数点在什么位置，以上情况在二进制上亦然:**\n### $$V = (-1)^s \\cdot M \\cdot 2^E$$\n\n### 为什么32位浮点数阶码要有偏移量 ？\n阶码有正有负，为了方便计算，加上一个比较大的正数。把所有阶码转为正值。这使得两个浮点数的指数大小的比较更为容易，实际上可以按照字典序比较两个浮点表示的大小。\n### 为什么偏移是127 ？\n1. 8位移码的取值范围为0~255（00000000~11111111），但在浮点数的阶码中，00000000与11111111被保留用作特殊情况，所以阶码可用范围只有1~254，总共有254个值。\n2. 8位有符号数取值范围为-128~+127（10000000~01111111），这里的二进制用补码表示，其中特别规定补码10000000没有原码，为-128的补码，总共有256个值。\n3. 如果采用偏置128，在表达+127时会产生上溢（移码11111111被保留），所以在阶码中偏置为（128-1），与此同时，在表达-127时会产生下溢（移码00000000被保留），所以阶码中去掉-127与-128，取值范围为-126~127，总共254个值。\n### 浮点运算\n编译器对于浮点型运算可以开启优化，而部分优化会丢失极小的精度。但是默认情况下编译器比较保守的不会主动进行指令优化。\n\n\n  [1]: http://static.zybuluo.com/allon6/xugxaf8oenhxkyvemsekx8xg/image_1benbhdpfh541jgr13s3fs1qs39.png\n  [2]: http://static.zybuluo.com/allon6/qhvg4rb4ss9sylo1l4bufwba/image_1bep6k353hh3apb1a1j12hn1oilm.png\n  [3]: http://static.zybuluo.com/allon6/7hxlly2j213a2w4864qn4vhn/image_1bepe8di71l3kvjgbkjlvii9p9.png\n  [4]: http://static.zybuluo.com/allon6/tlrw3y8lg8nqwidsuw9f36cj/image_1bepg9fg81sp6ceh1k5j1b4t16adm.png\n  [5]: http://static.zybuluo.com/allon6/f4v4p80nrlyvueonpxejq2wi/image_1beqdtlenf5q74h1v8214951gc013.png\n  [6]: http://static.zybuluo.com/allon6/g3ei6s88dmjp66u2da89ixr7/image_1besrrtt31jj3i8b17c1jfkohd1g.png\n","source":"_posts/深入理解计算机系统/第02章 程序结构和执行.md","raw":"---\ntitle: \"第02章 程序结构和执行\"\ncatalog: true\ndate: 2017-02-22 17:21:29\nheader-img: \"/img/05.jpg\"\ntags: \"深入理解计算机系统\"\n---\n\n# 第02章 程序结构和执行\n\nTags: 深入理解计算机系统\n\n[TOC]\n\n---\n\n## 信息的存储\n总线宽度一般就是一个字长，一个字长的位数，就决定着这个系统的寻址宽度。\n字长为 $n$ 那么它的寻址宽度为：$0$ ~ $(2^n - 1)$  程序最多访问$2^n$个字节。\n\nlittle endian(小端）目前android和ios都采用的是little endian。linux和windows也一样。\nbig endian(大端）  java是继承了SUN的系统规则属于小端。所以在java网络传输时尤其注意。\n![image_1benbhdpfh541jgr13s3fs1qs39.png-172.3kB][1]\n\nC、C++都支持无符号类型，java仅支持有符号。\n\n## 整数的表示\n![image_1bep6k353hh3apb1a1j12hn1oilm.png-271.8kB][2]\n<br>\n### 无符号编码\n全是正的，所以表示的正数值域很宽。\n$$B2U_4([1111]) = 1\\cdot2^3+1\\cdot2^2+1\\cdot2^1+1\\cdot2^0 = 15$$\n#### 有符号补码 - 常用\n最高位为负数，表示的值域：$-2^{4-1}$ ~ $2^{4-1} -1$，由此可以看出，因为0是非负数，所以多占了一个。有符号的位不是对称的。负数比正位大1。负数最小值在正方向上没有与之对应的数。\n$$B2T_4([1111]) = -1\\cdot2^3+1\\cdot2^2+1\\cdot2^1+1\\cdot2^0 = -1$$\n### 有符号反码\n和补码一样，只是最高位多减个1  ：$-2^{4-1} -1$\n###有符号原码\n最高位是-1： $-1\\cdot\\sum_{i=1}^nx\\cdot2^n$\n### 有无符号转换\n![image_1bepe8di71l3kvjgbkjlvii9p9.png-190kB][3]\n### 整数类型转换\n如果称位数少的为“小”，位数多的为“大”\n小 $\\to$ 大 ：零扩展\n大 $\\to$ 小 ：截断\n## 整数的运算\n判断加法溢出。用最大或者最小值跟目标值求差，再用差和另一个加数比较。如果那个加数比这个差大。就溢出。\n![image_1bepg9fg81sp6ceh1k5j1b4t16adm.png-599.8kB][4]\n\n## 浮点数\n![image_1beqdtlenf5q74h1v8214951gc013.png-126.1kB][5]\n>* 定点表示：**约定**机器中所有数据的小数点位置是固定不变的。由于约定在固定的位置，小数点就不再使用记号“.”来表示。通常将数据表示成纯小数或纯整数。定点数的表示方法就是整数是$\\sum_{i=1}^n 2^i $ ，小数就是2的负幂次。这种的缺点是表达的数据很窄。\n\n>* 浮点表示  - IEEE 754标准：浮点指小数点不是固定的，任意十进制数可以表示为：$$N = M \\cdot10^E$$\n比如：$$234.56 = 2.3456*10^2$$\n只保留一位整数这种方式叫规格化表示。\n$E$(Exponent) 阶码，它控制着小数点在什么位置上。\n$M$(Significand)尾数，也叫有效数。是核心数值。下图中的Fraction。\n![image_1besrrtt31jj3i8b17c1jfkohd1g.png-13.9kB][6]\n\n**这样就可以通过阶码E做为幂次来表示小数点在什么位置，以上情况在二进制上亦然:**\n### $$V = (-1)^s \\cdot M \\cdot 2^E$$\n\n### 为什么32位浮点数阶码要有偏移量 ？\n阶码有正有负，为了方便计算，加上一个比较大的正数。把所有阶码转为正值。这使得两个浮点数的指数大小的比较更为容易，实际上可以按照字典序比较两个浮点表示的大小。\n### 为什么偏移是127 ？\n1. 8位移码的取值范围为0~255（00000000~11111111），但在浮点数的阶码中，00000000与11111111被保留用作特殊情况，所以阶码可用范围只有1~254，总共有254个值。\n2. 8位有符号数取值范围为-128~+127（10000000~01111111），这里的二进制用补码表示，其中特别规定补码10000000没有原码，为-128的补码，总共有256个值。\n3. 如果采用偏置128，在表达+127时会产生上溢（移码11111111被保留），所以在阶码中偏置为（128-1），与此同时，在表达-127时会产生下溢（移码00000000被保留），所以阶码中去掉-127与-128，取值范围为-126~127，总共254个值。\n### 浮点运算\n编译器对于浮点型运算可以开启优化，而部分优化会丢失极小的精度。但是默认情况下编译器比较保守的不会主动进行指令优化。\n\n\n  [1]: http://static.zybuluo.com/allon6/xugxaf8oenhxkyvemsekx8xg/image_1benbhdpfh541jgr13s3fs1qs39.png\n  [2]: http://static.zybuluo.com/allon6/qhvg4rb4ss9sylo1l4bufwba/image_1bep6k353hh3apb1a1j12hn1oilm.png\n  [3]: http://static.zybuluo.com/allon6/7hxlly2j213a2w4864qn4vhn/image_1bepe8di71l3kvjgbkjlvii9p9.png\n  [4]: http://static.zybuluo.com/allon6/tlrw3y8lg8nqwidsuw9f36cj/image_1bepg9fg81sp6ceh1k5j1b4t16adm.png\n  [5]: http://static.zybuluo.com/allon6/f4v4p80nrlyvueonpxejq2wi/image_1beqdtlenf5q74h1v8214951gc013.png\n  [6]: http://static.zybuluo.com/allon6/g3ei6s88dmjp66u2da89ixr7/image_1besrrtt31jj3i8b17c1jfkohd1g.png\n","slug":"深入理解计算机系统/第02章 程序结构和执行","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhh0014j5lyc3sp0hmr","content":"<h1><span id=\"第02章-程序结构和执行\"> 第02章 程序结构和执行</span></h1>\n<p>Tags: 深入理解计算机系统</p>\n<p>[TOC]</p>\n<hr>\n<h2><span id=\"信息的存储\"> 信息的存储</span></h2>\n<p>总线宽度一般就是一个字长，一个字长的位数，就决定着这个系统的寻址宽度。<br>\n字长为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">n</span></span></span></span> 那么它的寻址宽度为：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(2^n - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span></span></span></span>  程序最多访问<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>个字节。</p>\n<p>little endian(小端）目前android和ios都采用的是little endian。linux和windows也一样。<br>\nbig endian(大端）  java是继承了SUN的系统规则属于小端。所以在java网络传输时尤其注意。<br>\n<img src=\"http://static.zybuluo.com/allon6/xugxaf8oenhxkyvemsekx8xg/image_1benbhdpfh541jgr13s3fs1qs39.png\" alt=\"image_1benbhdpfh541jgr13s3fs1qs39.png-172.3kB\"></p>\n<p>C、C++都支持无符号类型，java仅支持有符号。</p>\n<h2><span id=\"整数的表示\"> 整数的表示</span></h2>\n<p><img src=\"http://static.zybuluo.com/allon6/qhvg4rb4ss9sylo1l4bufwba/image_1bep6k353hh3apb1a1j12hn1oilm.png\" alt=\"image_1bep6k353hh3apb1a1j12hn1oilm.png-271.8kB\"><br>\n<br></p>\n<h3><span id=\"无符号编码\"> 无符号编码</span></h3>\n<p>全是正的，所以表示的正数值域很宽。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mn>2</mn><msub><mi>U</mi><mn>4</mn></msub><mo>(</mo><mo>[</mo><mn>1</mn><mn>1</mn><mn>1</mn><mn>1</mn><mo>]</mo><mo>)</mo><mo>=</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>1</mn><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">B2U_4([1111]) = 1\\cdot2^3+1\\cdot2^2+1\\cdot2^1+1\\cdot2^0 = 15\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8641079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathrm\">2</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.10903em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">4</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mopen\">(</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">5</span></span></span></span></span></p>\n<h4><span id=\"有符号补码-常用\"> 有符号补码 - 常用</span></h4>\n<p>最高位为负数，表示的值域：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mn>4</mn><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">-2^{4-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathrm\">4</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>4</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{4-1} -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathrm\">4</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span>，由此可以看出，因为0是非负数，所以多占了一个。有符号的位不是对称的。负数比正位大1。负数最小值在正方向上没有与之对应的数。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mn>2</mn><msub><mi>T</mi><mn>4</mn></msub><mo>(</mo><mo>[</mo><mn>1</mn><mn>1</mn><mn>1</mn><mn>1</mn><mo>]</mo><mo>)</mo><mo>=</mo><mo>−</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">B2T_4([1111]) = -1\\cdot2^3+1\\cdot2^2+1\\cdot2^1+1\\cdot2^0 = -1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8641079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathrm\">2</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.13889em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">4</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mopen\">(</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span></span></span></p>\n<h3><span id=\"有符号反码\"> 有符号反码</span></h3>\n<p>和补码一样，只是最高位多减个1  ：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mn>4</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^{4-1} -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathrm\">4</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><br>\n###有符号原码<br>\n最高位是-1： <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn><mo>⋅</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>x</mi><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">-1\\cdot\\sum_{i=1}^nx\\cdot2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.0500099999999999em;vertical-align:-0.30001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">∑</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-left:0em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">i</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span></span></span></span><span style=\"top:-0.364em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mord mathit\">x</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></p>\n<h3><span id=\"有无符号转换\"> 有无符号转换</span></h3>\n<p><img src=\"http://static.zybuluo.com/allon6/7hxlly2j213a2w4864qn4vhn/image_1bepe8di71l3kvjgbkjlvii9p9.png\" alt=\"image_1bepe8di71l3kvjgbkjlvii9p9.png-190kB\"></p>\n<h3><span id=\"整数类型转换\"> 整数类型转换</span></h3>\n<p>如果称位数少的为“小”，位数多的为“大”<br>\n小 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.36687em;\"></span><span class=\"strut bottom\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mrel\">→</span></span></span></span> 大 ：零扩展<br>\n大 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.36687em;\"></span><span class=\"strut bottom\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mrel\">→</span></span></span></span> 小 ：截断</p>\n<h2><span id=\"整数的运算\"> 整数的运算</span></h2>\n<p>判断加法溢出。用最大或者最小值跟目标值求差，再用差和另一个加数比较。如果那个加数比这个差大。就溢出。<br>\n<img src=\"http://static.zybuluo.com/allon6/tlrw3y8lg8nqwidsuw9f36cj/image_1bepg9fg81sp6ceh1k5j1b4t16adm.png\" alt=\"image_1bepg9fg81sp6ceh1k5j1b4t16adm.png-599.8kB\"></p>\n<h2><span id=\"浮点数\"> 浮点数</span></h2>\n<p><img src=\"http://static.zybuluo.com/allon6/f4v4p80nrlyvueonpxejq2wi/image_1beqdtlenf5q74h1v8214951gc013.png\" alt=\"image_1beqdtlenf5q74h1v8214951gc013.png-126.1kB\"></p>\n<blockquote>\n<ul>\n<li>定点表示：<strong>约定</strong>机器中所有数据的小数点位置是固定不变的。由于约定在固定的位置，小数点就不再使用记号“.”来表示。通常将数据表示成纯小数或纯整数。定点数的表示方法就是整数是$\\sum_{i=1}^n 2^i $ ，小数就是2的负幂次。这种的缺点是表达的数据很窄。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>浮点表示  - IEEE 754标准：浮点指小数点不是固定的，任意十进制数可以表示为：$$N = M \\cdot10^E$$<br>\n比如：$$234.56 = 2.3456*10^2$$<br>\n只保留一位整数这种方式叫规格化表示。<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">E</span></span></span></span>(Exponent) 阶码，它控制着小数点在什么位置上。<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span>(Significand)尾数，也叫有效数。是核心数值。下图中的Fraction。<br>\n<img src=\"http://static.zybuluo.com/allon6/g3ei6s88dmjp66u2da89ixr7/image_1besrrtt31jj3i8b17c1jfkohd1g.png\" alt=\"image_1besrrtt31jj3i8b17c1jfkohd1g.png-13.9kB\"></li>\n</ul>\n</blockquote>\n<p><strong>这样就可以通过阶码E做为幂次来表示小数点在什么位置，以上情况在二进制上亦然:</strong></p>\n<h3><span id=\"v-1s-cdot-m-cdot-2e\"> $$V = (-1)^s \\cdot M \\cdot 2^E$$</span></h3>\n<h3><span id=\"为什么32位浮点数阶码要有偏移量\"> 为什么32位浮点数阶码要有偏移量 ？</span></h3>\n<p>阶码有正有负，为了方便计算，加上一个比较大的正数。把所有阶码转为正值。这使得两个浮点数的指数大小的比较更为容易，实际上可以按照字典序比较两个浮点表示的大小。</p>\n<h3><span id=\"为什么偏移是127\"> 为什么偏移是127 ？</span></h3>\n<ol>\n<li>8位移码的取值范围为0<sub>255（00000000</sub>11111111），但在浮点数的阶码中，00000000与11111111被保留用作特殊情况，所以阶码可用范围只有1~254，总共有254个值。</li>\n<li>8位有符号数取值范围为-128<sub>+127（10000000</sub>01111111），这里的二进制用补码表示，其中特别规定补码10000000没有原码，为-128的补码，总共有256个值。</li>\n<li>如果采用偏置128，在表达+127时会产生上溢（移码11111111被保留），所以在阶码中偏置为（128-1），与此同时，在表达-127时会产生下溢（移码00000000被保留），所以阶码中去掉-127与-128，取值范围为-126~127，总共254个值。</li>\n</ol>\n<h3><span id=\"浮点运算\"> 浮点运算</span></h3>\n<p>编译器对于浮点型运算可以开启优化，而部分优化会丢失极小的精度。但是默认情况下编译器比较保守的不会主动进行指令优化。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第02章-程序结构和执行\"><a class=\"markdownIt-Anchor\" href=\"#第02章-程序结构和执行\"></a> 第02章 程序结构和执行</h1>\n<p>Tags: 深入理解计算机系统</p>\n<p>[TOC]</p>\n<hr>\n<h2 id=\"信息的存储\"><a class=\"markdownIt-Anchor\" href=\"#信息的存储\"></a> 信息的存储</h2>\n<p>总线宽度一般就是一个字长，一个字长的位数，就决定着这个系统的寻址宽度。<br>\n字长为 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\">n</span></span></span></span> 那么它的寻址宽度为：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(2^n - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span></span></span></span>  程序最多访问<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span>个字节。</p>\n<p>little endian(小端）目前android和ios都采用的是little endian。linux和windows也一样。<br>\nbig endian(大端）  java是继承了SUN的系统规则属于小端。所以在java网络传输时尤其注意。<br>\n<img src=\"http://static.zybuluo.com/allon6/xugxaf8oenhxkyvemsekx8xg/image_1benbhdpfh541jgr13s3fs1qs39.png\" alt=\"image_1benbhdpfh541jgr13s3fs1qs39.png-172.3kB\"></p>\n<p>C、C++都支持无符号类型，java仅支持有符号。</p>\n<h2 id=\"整数的表示\"><a class=\"markdownIt-Anchor\" href=\"#整数的表示\"></a> 整数的表示</h2>\n<p><img src=\"http://static.zybuluo.com/allon6/qhvg4rb4ss9sylo1l4bufwba/image_1bep6k353hh3apb1a1j12hn1oilm.png\" alt=\"image_1bep6k353hh3apb1a1j12hn1oilm.png-271.8kB\"><br>\n<br></p>\n<h3 id=\"无符号编码\"><a class=\"markdownIt-Anchor\" href=\"#无符号编码\"></a> 无符号编码</h3>\n<p>全是正的，所以表示的正数值域很宽。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mn>2</mn><msub><mi>U</mi><mn>4</mn></msub><mo>(</mo><mo>[</mo><mn>1</mn><mn>1</mn><mn>1</mn><mn>1</mn><mo>]</mo><mo>)</mo><mo>=</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mn>1</mn><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">B2U_4([1111]) = 1\\cdot2^3+1\\cdot2^2+1\\cdot2^1+1\\cdot2^0 = 15\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8641079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathrm\">2</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.10903em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">4</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mopen\">(</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">5</span></span></span></span></span></p>\n<h4 id=\"有符号补码-常用\"><a class=\"markdownIt-Anchor\" href=\"#有符号补码-常用\"></a> 有符号补码 - 常用</h4>\n<p>最高位为负数，表示的值域：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mn>4</mn><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">-2^{4-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathrm\">4</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>4</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{4-1} -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathrm\">4</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span>，由此可以看出，因为0是非负数，所以多占了一个。有符号的位不是对称的。负数比正位大1。负数最小值在正方向上没有与之对应的数。</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mn>2</mn><msub><mi>T</mi><mn>4</mn></msub><mo>(</mo><mo>[</mo><mn>1</mn><mn>1</mn><mn>1</mn><mn>1</mn><mo>]</mo><mo>)</mo><mo>=</mo><mo>−</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>⋅</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">B2T_4([1111]) = -1\\cdot2^3+1\\cdot2^2+1\\cdot2^1+1\\cdot2^0 = -1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8641079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"base displaystyle textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathrm\">2</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span><span class=\"vlist\"><span style=\"top:0.15em;margin-right:0.05em;margin-left:-0.13889em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord mathrm\">4</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mopen\">(</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">3</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">2</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">1</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">+</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.413em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathrm\">0</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mrel\">=</span><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span></span></span></p>\n<h3 id=\"有符号反码\"><a class=\"markdownIt-Anchor\" href=\"#有符号反码\"></a> 有符号反码</h3>\n<p>和补码一样，只是最高位多减个1  ：<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mn>4</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-2^{4-1} -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord scriptstyle uncramped\"><span class=\"mord mathrm\">4</span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span></span></span></span><br>\n###有符号原码<br>\n最高位是-1： <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn><mo>⋅</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>x</mi><mo>⋅</mo><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">-1\\cdot\\sum_{i=1}^nx\\cdot2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.0500099999999999em;vertical-align:-0.30001em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span><span class=\"mbin\">⋅</span><span class=\"mop\"><span class=\"op-symbol small-op mop\" style=\"top:-0.0000050000000000050004em;\">∑</span><span class=\"vlist\"><span style=\"top:0.30001em;margin-left:0em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle cramped\"><span class=\"mord scriptstyle cramped\"><span class=\"mord mathit\">i</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span></span></span></span><span style=\"top:-0.364em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span><span class=\"mord mathit\">x</span><span class=\"mbin\">⋅</span><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"vlist\"><span style=\"top:-0.363em;margin-right:0.05em;\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span><span class=\"reset-textstyle scriptstyle uncramped\"><span class=\"mord mathit\">n</span></span></span><span class=\"baseline-fix\"><span class=\"fontsize-ensurer reset-size5 size5\"><span style=\"font-size:0em;\">​</span></span>​</span></span></span></span></span></span></p>\n<h3 id=\"有无符号转换\"><a class=\"markdownIt-Anchor\" href=\"#有无符号转换\"></a> 有无符号转换</h3>\n<p><img src=\"http://static.zybuluo.com/allon6/7hxlly2j213a2w4864qn4vhn/image_1bepe8di71l3kvjgbkjlvii9p9.png\" alt=\"image_1bepe8di71l3kvjgbkjlvii9p9.png-190kB\"></p>\n<h3 id=\"整数类型转换\"><a class=\"markdownIt-Anchor\" href=\"#整数类型转换\"></a> 整数类型转换</h3>\n<p>如果称位数少的为“小”，位数多的为“大”<br>\n小 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.36687em;\"></span><span class=\"strut bottom\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mrel\">→</span></span></span></span> 大 ：零扩展<br>\n大 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.36687em;\"></span><span class=\"strut bottom\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mrel\">→</span></span></span></span> 小 ：截断</p>\n<h2 id=\"整数的运算\"><a class=\"markdownIt-Anchor\" href=\"#整数的运算\"></a> 整数的运算</h2>\n<p>判断加法溢出。用最大或者最小值跟目标值求差，再用差和另一个加数比较。如果那个加数比这个差大。就溢出。<br>\n<img src=\"http://static.zybuluo.com/allon6/tlrw3y8lg8nqwidsuw9f36cj/image_1bepg9fg81sp6ceh1k5j1b4t16adm.png\" alt=\"image_1bepg9fg81sp6ceh1k5j1b4t16adm.png-599.8kB\"></p>\n<h2 id=\"浮点数\"><a class=\"markdownIt-Anchor\" href=\"#浮点数\"></a> 浮点数</h2>\n<p><img src=\"http://static.zybuluo.com/allon6/f4v4p80nrlyvueonpxejq2wi/image_1beqdtlenf5q74h1v8214951gc013.png\" alt=\"image_1beqdtlenf5q74h1v8214951gc013.png-126.1kB\"></p>\n<blockquote>\n<ul>\n<li>定点表示：<strong>约定</strong>机器中所有数据的小数点位置是固定不变的。由于约定在固定的位置，小数点就不再使用记号“.”来表示。通常将数据表示成纯小数或纯整数。定点数的表示方法就是整数是$\\sum_{i=1}^n 2^i $ ，小数就是2的负幂次。这种的缺点是表达的数据很窄。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>浮点表示  - IEEE 754标准：浮点指小数点不是固定的，任意十进制数可以表示为：$$N = M \\cdot10^E$$<br>\n比如：$$234.56 = 2.3456*10^2$$<br>\n只保留一位整数这种方式叫规格化表示。<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">E</span></span></span></span>(Exponent) 阶码，它控制着小数点在什么位置上。<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base textstyle uncramped\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span>(Significand)尾数，也叫有效数。是核心数值。下图中的Fraction。<br>\n<img src=\"http://static.zybuluo.com/allon6/g3ei6s88dmjp66u2da89ixr7/image_1besrrtt31jj3i8b17c1jfkohd1g.png\" alt=\"image_1besrrtt31jj3i8b17c1jfkohd1g.png-13.9kB\"></li>\n</ul>\n</blockquote>\n<p><strong>这样就可以通过阶码E做为幂次来表示小数点在什么位置，以上情况在二进制上亦然:</strong></p>\n<h3 id=\"v-1s-cdot-m-cdot-2e\"><a class=\"markdownIt-Anchor\" href=\"#v-1s-cdot-m-cdot-2e\"></a> $$V = (-1)^s \\cdot M \\cdot 2^E$$</h3>\n<h3 id=\"为什么32位浮点数阶码要有偏移量\"><a class=\"markdownIt-Anchor\" href=\"#为什么32位浮点数阶码要有偏移量\"></a> 为什么32位浮点数阶码要有偏移量 ？</h3>\n<p>阶码有正有负，为了方便计算，加上一个比较大的正数。把所有阶码转为正值。这使得两个浮点数的指数大小的比较更为容易，实际上可以按照字典序比较两个浮点表示的大小。</p>\n<h3 id=\"为什么偏移是127\"><a class=\"markdownIt-Anchor\" href=\"#为什么偏移是127\"></a> 为什么偏移是127 ？</h3>\n<ol>\n<li>8位移码的取值范围为0<sub>255（00000000</sub>11111111），但在浮点数的阶码中，00000000与11111111被保留用作特殊情况，所以阶码可用范围只有1~254，总共有254个值。</li>\n<li>8位有符号数取值范围为-128<sub>+127（10000000</sub>01111111），这里的二进制用补码表示，其中特别规定补码10000000没有原码，为-128的补码，总共有256个值。</li>\n<li>如果采用偏置128，在表达+127时会产生上溢（移码11111111被保留），所以在阶码中偏置为（128-1），与此同时，在表达-127时会产生下溢（移码00000000被保留），所以阶码中去掉-127与-128，取值范围为-126~127，总共254个值。</li>\n</ol>\n<h3 id=\"浮点运算\"><a class=\"markdownIt-Anchor\" href=\"#浮点运算\"></a> 浮点运算</h3>\n<p>编译器对于浮点型运算可以开启优化，而部分优化会丢失极小的精度。但是默认情况下编译器比较保守的不会主动进行指令优化。</p>\n"},{"title":"第03章 程序的机器级表示","catalog":true,"date":"2017-02-22T09:21:29.000Z","header-img":"/img/05.jpg","_content":"\n# 第03章 程序的机器级表示\n\nTags: 深入理解计算机系统\n\n[TOC]\n\n---\n## 程序编码\n汇编或者机器码能操作很多对C语言隐藏的CPU状态：\n>* 程序计数器（PC，在x86-64中用%rip表示）给出将要执行的下一条指令。\n\n>* 整数寄存器文件的16个位置\n\n>* 条件寄存器（实现if、while等）\n\n>* 一组向量寄存器可以存放一个或多个浮点数值。\n\n汇编指令或者机器码特点：\n>* x86-64的指令1到15字节，常用的短，不常用的长。\n\n>* mac上反汇编可以使用otool -tV test.o，linux上可以用objdump \n\n>* 汇编格式分两种：ATT是GCC和objdump默认格式，另外还有intel和微软的使用的都是intel的格式。编译的时候加上-masm=intel。\n\n>* C语言和汇编可以结合编译。另外，C语言的if代价很高。\n\n![image_1bf6nhuvqllm13ro1kuo115m13sm.png-150.4kB][2]\n\n\n> 类型的关键就在汇编指令的后缀决定着汇编指令的大小和类型，这种约定决定了它是float还是int。\n|C声明        | Intel数据类型    | 汇编代码后缀        | 大小（字节）   |  \n| ----------| --------| ----------| --------| \n| char    |  字节|  b |1|\n| short        |   字   | w |2|\n| int        |   双字   |  l |4|\n|long         | 四字 |q |8|\n|char*         |四字| q |8|\n|float  |单精度| s |4|\n|double |双精度| l |8|\n\n## 控制\n###条件码\n除了整数寄存器，CPU还维护着一组单个位的条件码（condition code）寄存器。\n\n\n  [1]: http://static.zybuluo.com/allon6/yzfv9gtjsrji8s0b4p3aihsn/image_1bf6v19m51g921ca71it3129t1nhr13.png\n  [2]: http://static.zybuluo.com/allon6/js1wq6rorgfytob2opajes74/image_1bf6nhuvqllm13ro1kuo115m13sm.png\n","source":"_posts/深入理解计算机系统/第03章 程序的机器级表示.md","raw":"---\ntitle: \"第03章 程序的机器级表示\"\ncatalog: true\ndate: 2017-02-22 17:21:29\nheader-img: \"/img/05.jpg\"\ntags: \"深入理解计算机系统\"\n---\n\n# 第03章 程序的机器级表示\n\nTags: 深入理解计算机系统\n\n[TOC]\n\n---\n## 程序编码\n汇编或者机器码能操作很多对C语言隐藏的CPU状态：\n>* 程序计数器（PC，在x86-64中用%rip表示）给出将要执行的下一条指令。\n\n>* 整数寄存器文件的16个位置\n\n>* 条件寄存器（实现if、while等）\n\n>* 一组向量寄存器可以存放一个或多个浮点数值。\n\n汇编指令或者机器码特点：\n>* x86-64的指令1到15字节，常用的短，不常用的长。\n\n>* mac上反汇编可以使用otool -tV test.o，linux上可以用objdump \n\n>* 汇编格式分两种：ATT是GCC和objdump默认格式，另外还有intel和微软的使用的都是intel的格式。编译的时候加上-masm=intel。\n\n>* C语言和汇编可以结合编译。另外，C语言的if代价很高。\n\n![image_1bf6nhuvqllm13ro1kuo115m13sm.png-150.4kB][2]\n\n\n> 类型的关键就在汇编指令的后缀决定着汇编指令的大小和类型，这种约定决定了它是float还是int。\n|C声明        | Intel数据类型    | 汇编代码后缀        | 大小（字节）   |  \n| ----------| --------| ----------| --------| \n| char    |  字节|  b |1|\n| short        |   字   | w |2|\n| int        |   双字   |  l |4|\n|long         | 四字 |q |8|\n|char*         |四字| q |8|\n|float  |单精度| s |4|\n|double |双精度| l |8|\n\n## 控制\n###条件码\n除了整数寄存器，CPU还维护着一组单个位的条件码（condition code）寄存器。\n\n\n  [1]: http://static.zybuluo.com/allon6/yzfv9gtjsrji8s0b4p3aihsn/image_1bf6v19m51g921ca71it3129t1nhr13.png\n  [2]: http://static.zybuluo.com/allon6/js1wq6rorgfytob2opajes74/image_1bf6nhuvqllm13ro1kuo115m13sm.png\n","slug":"深入理解计算机系统/第03章 程序的机器级表示","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhi0017j5lyerxb7klw","content":"<h1><span id=\"第03章-程序的机器级表示\"> 第03章 程序的机器级表示</span></h1>\n<p>Tags: 深入理解计算机系统</p>\n<p>[TOC]</p>\n<hr>\n<h2><span id=\"程序编码\"> 程序编码</span></h2>\n<p>汇编或者机器码能操作很多对C语言隐藏的CPU状态：</p>\n<blockquote>\n<ul>\n<li>程序计数器（PC，在x86-64中用%rip表示）给出将要执行的下一条指令。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>整数寄存器文件的16个位置</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>条件寄存器（实现if、while等）</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>一组向量寄存器可以存放一个或多个浮点数值。</li>\n</ul>\n</blockquote>\n<p>汇编指令或者机器码特点：</p>\n<blockquote>\n<ul>\n<li>x86-64的指令1到15字节，常用的短，不常用的长。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>mac上反汇编可以使用otool -tV test.o，linux上可以用objdump</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>汇编格式分两种：ATT是GCC和objdump默认格式，另外还有intel和微软的使用的都是intel的格式。编译的时候加上-masm=intel。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>C语言和汇编可以结合编译。另外，C语言的if代价很高。</li>\n</ul>\n</blockquote>\n<p><img src=\"http://static.zybuluo.com/allon6/js1wq6rorgfytob2opajes74/image_1bf6nhuvqllm13ro1kuo115m13sm.png\" alt=\"image_1bf6nhuvqllm13ro1kuo115m13sm.png-150.4kB\"></p>\n<blockquote>\n<p>类型的关键就在汇编指令的后缀决定着汇编指令的大小和类型，这种约定决定了它是float还是int。<br>\n|C声明        | Intel数据类型    | 汇编代码后缀        | 大小（字节）   |<br>\n| ----------| --------| ----------| --------|<br>\n| char    |  字节|  b |1|<br>\n| short        |   字   | w |2|<br>\n| int        |   双字   |  l |4|<br>\n|long         | 四字 |q |8|<br>\n|char*         |四字| q |8|<br>\n|float  |单精度| s |4|<br>\n|double |双精度| l |8|</p>\n</blockquote>\n<h2><span id=\"控制\"> 控制</span></h2>\n<p>###条件码<br>\n除了整数寄存器，CPU还维护着一组单个位的条件码（condition code）寄存器。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第03章-程序的机器级表示\"><a class=\"markdownIt-Anchor\" href=\"#第03章-程序的机器级表示\"></a> 第03章 程序的机器级表示</h1>\n<p>Tags: 深入理解计算机系统</p>\n<p>[TOC]</p>\n<hr>\n<h2 id=\"程序编码\"><a class=\"markdownIt-Anchor\" href=\"#程序编码\"></a> 程序编码</h2>\n<p>汇编或者机器码能操作很多对C语言隐藏的CPU状态：</p>\n<blockquote>\n<ul>\n<li>程序计数器（PC，在x86-64中用%rip表示）给出将要执行的下一条指令。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>整数寄存器文件的16个位置</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>条件寄存器（实现if、while等）</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>一组向量寄存器可以存放一个或多个浮点数值。</li>\n</ul>\n</blockquote>\n<p>汇编指令或者机器码特点：</p>\n<blockquote>\n<ul>\n<li>x86-64的指令1到15字节，常用的短，不常用的长。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>mac上反汇编可以使用otool -tV test.o，linux上可以用objdump</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>汇编格式分两种：ATT是GCC和objdump默认格式，另外还有intel和微软的使用的都是intel的格式。编译的时候加上-masm=intel。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>C语言和汇编可以结合编译。另外，C语言的if代价很高。</li>\n</ul>\n</blockquote>\n<p><img src=\"http://static.zybuluo.com/allon6/js1wq6rorgfytob2opajes74/image_1bf6nhuvqllm13ro1kuo115m13sm.png\" alt=\"image_1bf6nhuvqllm13ro1kuo115m13sm.png-150.4kB\"></p>\n<blockquote>\n<p>类型的关键就在汇编指令的后缀决定着汇编指令的大小和类型，这种约定决定了它是float还是int。<br>\n|C声明        | Intel数据类型    | 汇编代码后缀        | 大小（字节）   |<br>\n| ----------| --------| ----------| --------|<br>\n| char    |  字节|  b |1|<br>\n| short        |   字   | w |2|<br>\n| int        |   双字   |  l |4|<br>\n|long         | 四字 |q |8|<br>\n|char*         |四字| q |8|<br>\n|float  |单精度| s |4|<br>\n|double |双精度| l |8|</p>\n</blockquote>\n<h2 id=\"控制\"><a class=\"markdownIt-Anchor\" href=\"#控制\"></a> 控制</h2>\n<p>###条件码<br>\n除了整数寄存器，CPU还维护着一组单个位的条件码（condition code）寄存器。</p>\n"},{"title":"邺城游记","catalog":true,"date":"2017-12-20T11:55:29.000Z","subtitle":"邺城周边游","header-img":"/img/12.jpg","_content":"\n# 羑里城\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142598937922.jpg)\n\n（又称文王庙，7米的龙山文化和商周文化遗存）：它是最早的国家监狱，也是周易文化的发祥地，因此有“画地为牢”和“文王拘而演周易”的典故。\n周文王：据伏羲八卦推演出64卦384爻\n《周易》文王在羑里坐牢的时候研究出来的结论，儒家文化，道家文化都是从一经之后开始发展下来的。\n\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142598714444.jpg)\n\n\n## 周文王生平:\n* 父死继位-商王文丁为遏制周势力扩张，招季历来殷都实施软禁，后以莫须有罪名将其杀害\n* 勤政爱才-商王朝投奔的人都给予重用\n* 善施仁德-献上周国洛河西岸，以求商纣王废除炮烙之刑\n* 牢狱之灾-商王信馋臣崇侯虎之言，将姬昌囚于羑里。周大臣散宜生，献宝物美女与纣王，使得姬昌被放。\n(1)周太王之孙，季历之子，周朝奠基人，岐周人(陕西岐山人)，其父死后继承西伯侯位，顾称西伯昌。周文王97岁前1056年，病崩于岐周。\n(2)在位期间拜姜尚为国师，发现农业礼贤下士，使天下三分，其二归周。\n(3)妻子太姒(聪明淑贤，分忧国事，严教子女，尊上恤下)谥号文定皇后，长子伯邑考，次子姬发。\n(4)1046年姬发灭商建周\n\n易经有三种叫三易：\n\n* 连山易-神农时代（艮☶卦为始）\n* 归藏易-黄帝时代（坤☷卦开始）\n* 周易-易经时代（乾☰卦开始）\n\n注：乾☰-天，坤☷-地，离☲-日，坎☵-月，震☳-雷，巽☴-风，艮☶-山，兑☱-河\n\n易经三个原则：\n\n* 变易：宇宙中万事万物都在变化，\n* 简易：有事情就一定有他的道理，只是我们的经验不够。知其理无其事-经验不够，只其事不知其理-智慧不够\n* 不易：能变出万物的本体是不变的，如神、上帝、佛、哲学中叫本体。\n\n周文王后天八卦☯\n巽四 离九 坤二\n震三   五   兑七\n艮八 坎一 乾六\n\n六爻之动，三极之道也。\n\n* 天地人三才乃三极\n* 人分阴阳，阴阳相对，二三为六\n* 六爻分上下，下三爻为内挂，上三爻为外卦，卦由内而外变化。--事物都是内在开始变才影响到外部，内卦变完说明思想成熟，可以发展到外部去了。\n* 由内而外第五卦变完，返回来变下爻第四爻，即为游魂卦。内卦还原，变为归魂卦 。\n* 不三不四-三四在两爻中间。乱七八糟-从游魂卦和归魂卦来的\n* 错卦&综卦\n1. 除了这八卦外其余56卦都是相对的即为综卦的道理-看问题的立场不同，观念就两样了\n☰乾 ☷坤 ☵坎 ☱大过 ☳小过 ☲离 ☶颐☴中孚\n☰     ☷    ☵     ☴        ☶        ☲     ☳    ☱\n2. 综卦举例-即对立\n☰姤卦 ☱夬卦\n☴        ☰\n3. 对错卦举例-即相对正反\n☰天风姤卦 ☷地雷复卦\n☴               ☳\n(7)交互卦(二三四爻配，三四五爻交)-牵一发而动全身\n☲雷火噬嗑 ☵水山蹇\n☳               ☶\n\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599210144.jpg)\n\n\n# 武王伐纣经过\n（为后面游西周做准备）\n武王伐纣又称牧野战役：\n武王伐纣指大约是公元前1057年，以西周部落为主的联军起兵反商王帝辛(纣)，最终导致商王朝灭亡的一场战争。牧野之战是周武王的联军与商朝军队在牧野(今河南省淇县南、卫河以北，今卫辉市境内)进行的决战。周武王继位后四年，得知商纣王统治集团分崩离析，商军主力远征东夷，朝歌空虚，即率兵车300乘，虎贲3000人伐商。十二月下旬周军东进至孟津 ，与庸、卢、彭、濮、蜀（均居今汉水流域） 、羌、微 （均居今渭水流域）、（居今山西平陆南）等 8个方国部落军队及各反商诸侯军会合。周武王利用商地人心归周的有利形势，率本部及 8个方国部落军队，于次年一月初四拂晓进至牧野。商纣王惊闻周军来袭，仓促武装大批奴隶等，连同守卫国都的军队 ，开赴牧野迎战 ，初五凌晨，周军布阵毕，庄严誓师，史称“牧誓”。武王在阵前声讨商纣罪行，统一战斗动作以保持阵形严整，严申不准杀降以瓦解商军。随即命吕望率一部精兵冲击商军前阵。商军中奴隶心向武王，纷纷倒向周军。武王以主力猛烈突击，商军土崩瓦解。纣王仓皇逃回朝歌，登鹿台自焚而死。周军占领商都，商朝灭亡。此役是中国古代车战初期的著名战例。周争取人心、翦商羽翼、乘虚进攻的谋略，对古代军事思想的发展有着深远的影响。\n\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599563704.jpg)\n\n\n# 西周和东周\n（为后面游西周做准备）\n西周与东周的划分，是根据国都的变化来划分的。\n\n* 西周从公元前1046年~公元前771年，西周姬发灭商后建立，定都镐京和丰京，经历12代帝王，经历275年左右，西周是各个名族不断融合的过程，华夏逐渐形成，成为汉民族的前身。最后一个为周幽王，周幽王贪婪腐败，任用奸臣，民怨沸腾，最后被西夷犬戎在骊山下杀死。\n* 东周从前770年－前221年， 定都洛邑（今河南洛阳），第一任天子是原先被周幽王废的太子宜臼，史称周平王。共传25王，约525年。东周前200多年诸侯争霸，被称为春秋时代。后半段大诸侯国相互征伐，被称为战国时代。面对诸侯国的相互攻伐和兼并，边境的外族又趁机入侵，天子不能承担天下共主的责任，要像诸侯国求助，在这种情况下，强大的诸侯国便自称霸主。中原诸侯对四夷的侵扰则已准王攘夷的口号团结自卫。\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599459553.jpg)\n\n\n\n","source":"_posts/游记/邺城游记.md","raw":"---\ntitle: 邺城游记\ncatalog: true\ndate: 2017-12-20 19:55:29\nsubtitle: \"邺城周边游\"\nheader-img: \"/img/12.jpg\"\ntags: \"游记\"\n---\n\n# 羑里城\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142598937922.jpg)\n\n（又称文王庙，7米的龙山文化和商周文化遗存）：它是最早的国家监狱，也是周易文化的发祥地，因此有“画地为牢”和“文王拘而演周易”的典故。\n周文王：据伏羲八卦推演出64卦384爻\n《周易》文王在羑里坐牢的时候研究出来的结论，儒家文化，道家文化都是从一经之后开始发展下来的。\n\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142598714444.jpg)\n\n\n## 周文王生平:\n* 父死继位-商王文丁为遏制周势力扩张，招季历来殷都实施软禁，后以莫须有罪名将其杀害\n* 勤政爱才-商王朝投奔的人都给予重用\n* 善施仁德-献上周国洛河西岸，以求商纣王废除炮烙之刑\n* 牢狱之灾-商王信馋臣崇侯虎之言，将姬昌囚于羑里。周大臣散宜生，献宝物美女与纣王，使得姬昌被放。\n(1)周太王之孙，季历之子，周朝奠基人，岐周人(陕西岐山人)，其父死后继承西伯侯位，顾称西伯昌。周文王97岁前1056年，病崩于岐周。\n(2)在位期间拜姜尚为国师，发现农业礼贤下士，使天下三分，其二归周。\n(3)妻子太姒(聪明淑贤，分忧国事，严教子女，尊上恤下)谥号文定皇后，长子伯邑考，次子姬发。\n(4)1046年姬发灭商建周\n\n易经有三种叫三易：\n\n* 连山易-神农时代（艮☶卦为始）\n* 归藏易-黄帝时代（坤☷卦开始）\n* 周易-易经时代（乾☰卦开始）\n\n注：乾☰-天，坤☷-地，离☲-日，坎☵-月，震☳-雷，巽☴-风，艮☶-山，兑☱-河\n\n易经三个原则：\n\n* 变易：宇宙中万事万物都在变化，\n* 简易：有事情就一定有他的道理，只是我们的经验不够。知其理无其事-经验不够，只其事不知其理-智慧不够\n* 不易：能变出万物的本体是不变的，如神、上帝、佛、哲学中叫本体。\n\n周文王后天八卦☯\n巽四 离九 坤二\n震三   五   兑七\n艮八 坎一 乾六\n\n六爻之动，三极之道也。\n\n* 天地人三才乃三极\n* 人分阴阳，阴阳相对，二三为六\n* 六爻分上下，下三爻为内挂，上三爻为外卦，卦由内而外变化。--事物都是内在开始变才影响到外部，内卦变完说明思想成熟，可以发展到外部去了。\n* 由内而外第五卦变完，返回来变下爻第四爻，即为游魂卦。内卦还原，变为归魂卦 。\n* 不三不四-三四在两爻中间。乱七八糟-从游魂卦和归魂卦来的\n* 错卦&综卦\n1. 除了这八卦外其余56卦都是相对的即为综卦的道理-看问题的立场不同，观念就两样了\n☰乾 ☷坤 ☵坎 ☱大过 ☳小过 ☲离 ☶颐☴中孚\n☰     ☷    ☵     ☴        ☶        ☲     ☳    ☱\n2. 综卦举例-即对立\n☰姤卦 ☱夬卦\n☴        ☰\n3. 对错卦举例-即相对正反\n☰天风姤卦 ☷地雷复卦\n☴               ☳\n(7)交互卦(二三四爻配，三四五爻交)-牵一发而动全身\n☲雷火噬嗑 ☵水山蹇\n☳               ☶\n\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599210144.jpg)\n\n\n# 武王伐纣经过\n（为后面游西周做准备）\n武王伐纣又称牧野战役：\n武王伐纣指大约是公元前1057年，以西周部落为主的联军起兵反商王帝辛(纣)，最终导致商王朝灭亡的一场战争。牧野之战是周武王的联军与商朝军队在牧野(今河南省淇县南、卫河以北，今卫辉市境内)进行的决战。周武王继位后四年，得知商纣王统治集团分崩离析，商军主力远征东夷，朝歌空虚，即率兵车300乘，虎贲3000人伐商。十二月下旬周军东进至孟津 ，与庸、卢、彭、濮、蜀（均居今汉水流域） 、羌、微 （均居今渭水流域）、（居今山西平陆南）等 8个方国部落军队及各反商诸侯军会合。周武王利用商地人心归周的有利形势，率本部及 8个方国部落军队，于次年一月初四拂晓进至牧野。商纣王惊闻周军来袭，仓促武装大批奴隶等，连同守卫国都的军队 ，开赴牧野迎战 ，初五凌晨，周军布阵毕，庄严誓师，史称“牧誓”。武王在阵前声讨商纣罪行，统一战斗动作以保持阵形严整，严申不准杀降以瓦解商军。随即命吕望率一部精兵冲击商军前阵。商军中奴隶心向武王，纷纷倒向周军。武王以主力猛烈突击，商军土崩瓦解。纣王仓皇逃回朝歌，登鹿台自焚而死。周军占领商都，商朝灭亡。此役是中国古代车战初期的著名战例。周争取人心、翦商羽翼、乘虚进攻的谋略，对古代军事思想的发展有着深远的影响。\n\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599563704.jpg)\n\n\n# 西周和东周\n（为后面游西周做准备）\n西周与东周的划分，是根据国都的变化来划分的。\n\n* 西周从公元前1046年~公元前771年，西周姬发灭商后建立，定都镐京和丰京，经历12代帝王，经历275年左右，西周是各个名族不断融合的过程，华夏逐渐形成，成为汉民族的前身。最后一个为周幽王，周幽王贪婪腐败，任用奸臣，民怨沸腾，最后被西夷犬戎在骊山下杀死。\n* 东周从前770年－前221年， 定都洛邑（今河南洛阳），第一任天子是原先被周幽王废的太子宜臼，史称周平王。共传25王，约525年。东周前200多年诸侯争霸，被称为春秋时代。后半段大诸侯国相互征伐，被称为战国时代。面对诸侯国的相互攻伐和兼并，边境的外族又趁机入侵，天子不能承担天下共主的责任，要像诸侯国求助，在这种情况下，强大的诸侯国便自称霸主。中原诸侯对四夷的侵扰则已准王攘夷的口号团结自卫。\n![](http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599459553.jpg)\n\n\n\n","slug":"游记/邺城游记","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhj0018j5lyiu9pqq7v","content":"<h1><span id=\"羑里城\"> 羑里城</span></h1>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142598937922.jpg\" alt=\"\"></p>\n<p>（又称文王庙，7米的龙山文化和商周文化遗存）：它是最早的国家监狱，也是周易文化的发祥地，因此有“画地为牢”和“文王拘而演周易”的典故。<br>\n周文王：据伏羲八卦推演出64卦384爻<br>\n《周易》文王在羑里坐牢的时候研究出来的结论，儒家文化，道家文化都是从一经之后开始发展下来的。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142598714444.jpg\" alt=\"\"></p>\n<h2><span id=\"周文王生平\"> 周文王生平:</span></h2>\n<ul>\n<li>父死继位-商王文丁为遏制周势力扩张，招季历来殷都实施软禁，后以莫须有罪名将其杀害</li>\n<li>勤政爱才-商王朝投奔的人都给予重用</li>\n<li>善施仁德-献上周国洛河西岸，以求商纣王废除炮烙之刑</li>\n<li>牢狱之灾-商王信馋臣崇侯虎之言，将姬昌囚于羑里。周大臣散宜生，献宝物美女与纣王，使得姬昌被放。<br>\n(1)周太王之孙，季历之子，周朝奠基人，岐周人(陕西岐山人)，其父死后继承西伯侯位，顾称西伯昌。周文王97岁前1056年，病崩于岐周。<br>\n(2)在位期间拜姜尚为国师，发现农业礼贤下士，使天下三分，其二归周。<br>\n(3)妻子太姒(聪明淑贤，分忧国事，严教子女，尊上恤下)谥号文定皇后，长子伯邑考，次子姬发。<br>\n(4)1046年姬发灭商建周</li>\n</ul>\n<p>易经有三种叫三易：</p>\n<ul>\n<li>连山易-神农时代（艮☶卦为始）</li>\n<li>归藏易-黄帝时代（坤☷卦开始）</li>\n<li>周易-易经时代（乾☰卦开始）</li>\n</ul>\n<p>注：乾☰-天，坤☷-地，离☲-日，坎☵-月，震☳-雷，巽☴-风，艮☶-山，兑☱-河</p>\n<p>易经三个原则：</p>\n<ul>\n<li>变易：宇宙中万事万物都在变化，</li>\n<li>简易：有事情就一定有他的道理，只是我们的经验不够。知其理无其事-经验不够，只其事不知其理-智慧不够</li>\n<li>不易：能变出万物的本体是不变的，如神、上帝、佛、哲学中叫本体。</li>\n</ul>\n<p>周文王后天八卦☯<br>\n巽四 离九 坤二<br>\n震三   五   兑七<br>\n艮八 坎一 乾六</p>\n<p>六爻之动，三极之道也。</p>\n<ul>\n<li>天地人三才乃三极</li>\n<li>人分阴阳，阴阳相对，二三为六</li>\n<li>六爻分上下，下三爻为内挂，上三爻为外卦，卦由内而外变化。–事物都是内在开始变才影响到外部，内卦变完说明思想成熟，可以发展到外部去了。</li>\n<li>由内而外第五卦变完，返回来变下爻第四爻，即为游魂卦。内卦还原，变为归魂卦 。</li>\n<li>不三不四-三四在两爻中间。乱七八糟-从游魂卦和归魂卦来的</li>\n<li>错卦&amp;综卦</li>\n</ul>\n<ol>\n<li>除了这八卦外其余56卦都是相对的即为综卦的道理-看问题的立场不同，观念就两样了<br>\n☰乾 ☷坤 ☵坎 ☱大过 ☳小过 ☲离 ☶颐☴中孚<br>\n☰     ☷    ☵     ☴        ☶        ☲     ☳    ☱</li>\n<li>综卦举例-即对立<br>\n☰姤卦 ☱夬卦<br>\n☴        ☰</li>\n<li>对错卦举例-即相对正反<br>\n☰天风姤卦 ☷地雷复卦<br>\n☴               ☳<br>\n(7)交互卦(二三四爻配，三四五爻交)-牵一发而动全身<br>\n☲雷火噬嗑 ☵水山蹇<br>\n☳               ☶</li>\n</ol>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599210144.jpg\" alt=\"\"></p>\n<h1><span id=\"武王伐纣经过\"> 武王伐纣经过</span></h1>\n<p>（为后面游西周做准备）<br>\n武王伐纣又称牧野战役：<br>\n武王伐纣指大约是公元前1057年，以西周部落为主的联军起兵反商王帝辛(纣)，最终导致商王朝灭亡的一场战争。牧野之战是周武王的联军与商朝军队在牧野(今河南省淇县南、卫河以北，今卫辉市境内)进行的决战。周武王继位后四年，得知商纣王统治集团分崩离析，商军主力远征东夷，朝歌空虚，即率兵车300乘，虎贲3000人伐商。十二月下旬周军东进至孟津 ，与庸、卢、彭、濮、蜀（均居今汉水流域） 、羌、微 （均居今渭水流域）、（居今山西平陆南）等 8个方国部落军队及各反商诸侯军会合。周武王利用商地人心归周的有利形势，率本部及 8个方国部落军队，于次年一月初四拂晓进至牧野。商纣王惊闻周军来袭，仓促武装大批奴隶等，连同守卫国都的军队 ，开赴牧野迎战 ，初五凌晨，周军布阵毕，庄严誓师，史称“牧誓”。武王在阵前声讨商纣罪行，统一战斗动作以保持阵形严整，严申不准杀降以瓦解商军。随即命吕望率一部精兵冲击商军前阵。商军中奴隶心向武王，纷纷倒向周军。武王以主力猛烈突击，商军土崩瓦解。纣王仓皇逃回朝歌，登鹿台自焚而死。周军占领商都，商朝灭亡。此役是中国古代车战初期的著名战例。周争取人心、翦商羽翼、乘虚进攻的谋略，对古代军事思想的发展有着深远的影响。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599563704.jpg\" alt=\"\"></p>\n<h1><span id=\"西周和东周\"> 西周和东周</span></h1>\n<p>（为后面游西周做准备）<br>\n西周与东周的划分，是根据国都的变化来划分的。</p>\n<ul>\n<li>西周从公元前1046年~公元前771年，西周姬发灭商后建立，定都镐京和丰京，经历12代帝王，经历275年左右，西周是各个名族不断融合的过程，华夏逐渐形成，成为汉民族的前身。最后一个为周幽王，周幽王贪婪腐败，任用奸臣，民怨沸腾，最后被西夷犬戎在骊山下杀死。</li>\n<li>东周从前770年－前221年， 定都洛邑（今河南洛阳），第一任天子是原先被周幽王废的太子宜臼，史称周平王。共传25王，约525年。东周前200多年诸侯争霸，被称为春秋时代。后半段大诸侯国相互征伐，被称为战国时代。面对诸侯国的相互攻伐和兼并，边境的外族又趁机入侵，天子不能承担天下共主的责任，要像诸侯国求助，在这种情况下，强大的诸侯国便自称霸主。中原诸侯对四夷的侵扰则已准王攘夷的口号团结自卫。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599459553.jpg\" alt=\"\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"羑里城\"><a class=\"markdownIt-Anchor\" href=\"#羑里城\"></a> 羑里城</h1>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142598937922.jpg\" alt=\"\"></p>\n<p>（又称文王庙，7米的龙山文化和商周文化遗存）：它是最早的国家监狱，也是周易文化的发祥地，因此有“画地为牢”和“文王拘而演周易”的典故。<br>\n周文王：据伏羲八卦推演出64卦384爻<br>\n《周易》文王在羑里坐牢的时候研究出来的结论，儒家文化，道家文化都是从一经之后开始发展下来的。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142598714444.jpg\" alt=\"\"></p>\n<h2 id=\"周文王生平\"><a class=\"markdownIt-Anchor\" href=\"#周文王生平\"></a> 周文王生平:</h2>\n<ul>\n<li>父死继位-商王文丁为遏制周势力扩张，招季历来殷都实施软禁，后以莫须有罪名将其杀害</li>\n<li>勤政爱才-商王朝投奔的人都给予重用</li>\n<li>善施仁德-献上周国洛河西岸，以求商纣王废除炮烙之刑</li>\n<li>牢狱之灾-商王信馋臣崇侯虎之言，将姬昌囚于羑里。周大臣散宜生，献宝物美女与纣王，使得姬昌被放。<br>\n(1)周太王之孙，季历之子，周朝奠基人，岐周人(陕西岐山人)，其父死后继承西伯侯位，顾称西伯昌。周文王97岁前1056年，病崩于岐周。<br>\n(2)在位期间拜姜尚为国师，发现农业礼贤下士，使天下三分，其二归周。<br>\n(3)妻子太姒(聪明淑贤，分忧国事，严教子女，尊上恤下)谥号文定皇后，长子伯邑考，次子姬发。<br>\n(4)1046年姬发灭商建周</li>\n</ul>\n<p>易经有三种叫三易：</p>\n<ul>\n<li>连山易-神农时代（艮☶卦为始）</li>\n<li>归藏易-黄帝时代（坤☷卦开始）</li>\n<li>周易-易经时代（乾☰卦开始）</li>\n</ul>\n<p>注：乾☰-天，坤☷-地，离☲-日，坎☵-月，震☳-雷，巽☴-风，艮☶-山，兑☱-河</p>\n<p>易经三个原则：</p>\n<ul>\n<li>变易：宇宙中万事万物都在变化，</li>\n<li>简易：有事情就一定有他的道理，只是我们的经验不够。知其理无其事-经验不够，只其事不知其理-智慧不够</li>\n<li>不易：能变出万物的本体是不变的，如神、上帝、佛、哲学中叫本体。</li>\n</ul>\n<p>周文王后天八卦☯<br>\n巽四 离九 坤二<br>\n震三   五   兑七<br>\n艮八 坎一 乾六</p>\n<p>六爻之动，三极之道也。</p>\n<ul>\n<li>天地人三才乃三极</li>\n<li>人分阴阳，阴阳相对，二三为六</li>\n<li>六爻分上下，下三爻为内挂，上三爻为外卦，卦由内而外变化。–事物都是内在开始变才影响到外部，内卦变完说明思想成熟，可以发展到外部去了。</li>\n<li>由内而外第五卦变完，返回来变下爻第四爻，即为游魂卦。内卦还原，变为归魂卦 。</li>\n<li>不三不四-三四在两爻中间。乱七八糟-从游魂卦和归魂卦来的</li>\n<li>错卦&amp;综卦</li>\n</ul>\n<ol>\n<li>除了这八卦外其余56卦都是相对的即为综卦的道理-看问题的立场不同，观念就两样了<br>\n☰乾 ☷坤 ☵坎 ☱大过 ☳小过 ☲离 ☶颐☴中孚<br>\n☰     ☷    ☵     ☴        ☶        ☲     ☳    ☱</li>\n<li>综卦举例-即对立<br>\n☰姤卦 ☱夬卦<br>\n☴        ☰</li>\n<li>对错卦举例-即相对正反<br>\n☰天风姤卦 ☷地雷复卦<br>\n☴               ☳<br>\n(7)交互卦(二三四爻配，三四五爻交)-牵一发而动全身<br>\n☲雷火噬嗑 ☵水山蹇<br>\n☳               ☶</li>\n</ol>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599210144.jpg\" alt=\"\"></p>\n<h1 id=\"武王伐纣经过\"><a class=\"markdownIt-Anchor\" href=\"#武王伐纣经过\"></a> 武王伐纣经过</h1>\n<p>（为后面游西周做准备）<br>\n武王伐纣又称牧野战役：<br>\n武王伐纣指大约是公元前1057年，以西周部落为主的联军起兵反商王帝辛(纣)，最终导致商王朝灭亡的一场战争。牧野之战是周武王的联军与商朝军队在牧野(今河南省淇县南、卫河以北，今卫辉市境内)进行的决战。周武王继位后四年，得知商纣王统治集团分崩离析，商军主力远征东夷，朝歌空虚，即率兵车300乘，虎贲3000人伐商。十二月下旬周军东进至孟津 ，与庸、卢、彭、濮、蜀（均居今汉水流域） 、羌、微 （均居今渭水流域）、（居今山西平陆南）等 8个方国部落军队及各反商诸侯军会合。周武王利用商地人心归周的有利形势，率本部及 8个方国部落军队，于次年一月初四拂晓进至牧野。商纣王惊闻周军来袭，仓促武装大批奴隶等，连同守卫国都的军队 ，开赴牧野迎战 ，初五凌晨，周军布阵毕，庄严誓师，史称“牧誓”。武王在阵前声讨商纣罪行，统一战斗动作以保持阵形严整，严申不准杀降以瓦解商军。随即命吕望率一部精兵冲击商军前阵。商军中奴隶心向武王，纷纷倒向周军。武王以主力猛烈突击，商军土崩瓦解。纣王仓皇逃回朝歌，登鹿台自焚而死。周军占领商都，商朝灭亡。此役是中国古代车战初期的著名战例。周争取人心、翦商羽翼、乘虚进攻的谋略，对古代军事思想的发展有着深远的影响。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599563704.jpg\" alt=\"\"></p>\n<h1 id=\"西周和东周\"><a class=\"markdownIt-Anchor\" href=\"#西周和东周\"></a> 西周和东周</h1>\n<p>（为后面游西周做准备）<br>\n西周与东周的划分，是根据国都的变化来划分的。</p>\n<ul>\n<li>西周从公元前1046年~公元前771年，西周姬发灭商后建立，定都镐京和丰京，经历12代帝王，经历275年左右，西周是各个名族不断融合的过程，华夏逐渐形成，成为汉民族的前身。最后一个为周幽王，周幽王贪婪腐败，任用奸臣，民怨沸腾，最后被西夷犬戎在骊山下杀死。</li>\n<li>东周从前770年－前221年， 定都洛邑（今河南洛阳），第一任天子是原先被周幽王废的太子宜臼，史称周平王。共传25王，约525年。东周前200多年诸侯争霸，被称为春秋时代。后半段大诸侯国相互征伐，被称为战国时代。面对诸侯国的相互攻伐和兼并，边境的外族又趁机入侵，天子不能承担天下共主的责任，要像诸侯国求助，在这种情况下，强大的诸侯国便自称霸主。中原诸侯对四夷的侵扰则已准王攘夷的口号团结自卫。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2017-12-26-15142599459553.jpg\" alt=\"\"></li>\n</ul>\n"},{"title":"資治通鑑總覽","catalog":true,"date":"2017-11-27T07:08:06.000Z","subtitle":"鑑于往事，有資於治道","header-img":"/img/17.jpg","_content":"\n# 資治通鑑總覽\n\n編年體，二百九十四卷，十六朝，凡一千三百六十二年。\n\n進書表：重念臣違離闕庭，十有五年，雖身處于外，區區之心，朝夕寤寐，何嘗不在陛下之左右！顧以駑蹇，無施而可，是以專事鉛槧，用酬大恩，庶竭涓塵，少裨海嶽。臣今骸骨癯瘁，目視昏近，齒牙無幾，神識衰耗，目前所為，旋踵遺忘。臣之精力，盡於此書。伏望陛下寬其妄作之誅，察其願忠之意，以清閒之宴，時賜有覽，監前世之興衰，考當今之得失，嘉善矜惡，取得捨非，足以懋稽古之盛德，躋無前之至治。俾四海羣生，咸蒙其福，則臣雖委骨九泉，志願永畢矣！\n\n謹奉表陳進以聞。臣光誠惶誠懼，頓首頓首，謹言。\n\n| 紀 | 範圍 | 卷數| \n| --- | --- | --- |\n|周紀 | 1 - 5 | 共5卷 |\n|秦紀 | 6 - 8 |共3卷 |\n|漢紀 | 9 - 68 | 共60卷 |\n|魏紀 | 69 - 78 | 共10卷 |\n|晉紀 | 79 - 118 | 共40卷 |\n|宋紀 | 119 - 134 | 共16卷 |\n|齊紀| 135 - 144 | 共10卷 |\n|梁紀| 145 - 166 | 共22卷 |\n|陳紀| 167 - 176 |共10卷 |\n|隋紀| 177 - 184 | 共7卷 |\n|唐紀| 185 - 265 | 共81卷 |\n|後梁紀| 266 - 271 | 共5卷|\n|後唐紀| 272 - 279 | 共8卷|\n|後晉紀| 280 - 285 | 共6卷 |\n|後漢紀| 286 - 289 | 共4卷 |\n|後周紀| 290 - 294 | 共5卷 |\n\n    進展：\n    2017年11月27日 第101卷 晉紀。\n    2018年03月08日 第111卷 晉紀。\n    \n\n\n\n\n","source":"_posts/資治通鑑/資治通鑑總覽.md","raw":"---\ntitle: 資治通鑑總覽\ncatalog: true\ndate: 2017-11-27 15:08:06\nsubtitle: '鑑于往事，有資於治道'\nheader-img: '/img/17.jpg'\ntags: 資治通鑑\n---\n\n# 資治通鑑總覽\n\n編年體，二百九十四卷，十六朝，凡一千三百六十二年。\n\n進書表：重念臣違離闕庭，十有五年，雖身處于外，區區之心，朝夕寤寐，何嘗不在陛下之左右！顧以駑蹇，無施而可，是以專事鉛槧，用酬大恩，庶竭涓塵，少裨海嶽。臣今骸骨癯瘁，目視昏近，齒牙無幾，神識衰耗，目前所為，旋踵遺忘。臣之精力，盡於此書。伏望陛下寬其妄作之誅，察其願忠之意，以清閒之宴，時賜有覽，監前世之興衰，考當今之得失，嘉善矜惡，取得捨非，足以懋稽古之盛德，躋無前之至治。俾四海羣生，咸蒙其福，則臣雖委骨九泉，志願永畢矣！\n\n謹奉表陳進以聞。臣光誠惶誠懼，頓首頓首，謹言。\n\n| 紀 | 範圍 | 卷數| \n| --- | --- | --- |\n|周紀 | 1 - 5 | 共5卷 |\n|秦紀 | 6 - 8 |共3卷 |\n|漢紀 | 9 - 68 | 共60卷 |\n|魏紀 | 69 - 78 | 共10卷 |\n|晉紀 | 79 - 118 | 共40卷 |\n|宋紀 | 119 - 134 | 共16卷 |\n|齊紀| 135 - 144 | 共10卷 |\n|梁紀| 145 - 166 | 共22卷 |\n|陳紀| 167 - 176 |共10卷 |\n|隋紀| 177 - 184 | 共7卷 |\n|唐紀| 185 - 265 | 共81卷 |\n|後梁紀| 266 - 271 | 共5卷|\n|後唐紀| 272 - 279 | 共8卷|\n|後晉紀| 280 - 285 | 共6卷 |\n|後漢紀| 286 - 289 | 共4卷 |\n|後周紀| 290 - 294 | 共5卷 |\n\n    進展：\n    2017年11月27日 第101卷 晉紀。\n    2018年03月08日 第111卷 晉紀。\n    \n\n\n\n\n","slug":"資治通鑑/資治通鑑總覽","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhk001aj5ly15dy92r0","content":"<h1><span id=\"資治通鑑總覽\"> 資治通鑑總覽</span></h1>\n<p>編年體，二百九十四卷，十六朝，凡一千三百六十二年。</p>\n<p>進書表：重念臣違離闕庭，十有五年，雖身處于外，區區之心，朝夕寤寐，何嘗不在陛下之左右！顧以駑蹇，無施而可，是以專事鉛槧，用酬大恩，庶竭涓塵，少裨海嶽。臣今骸骨癯瘁，目視昏近，齒牙無幾，神識衰耗，目前所為，旋踵遺忘。臣之精力，盡於此書。伏望陛下寬其妄作之誅，察其願忠之意，以清閒之宴，時賜有覽，監前世之興衰，考當今之得失，嘉善矜惡，取得捨非，足以懋稽古之盛德，躋無前之至治。俾四海羣生，咸蒙其福，則臣雖委骨九泉，志願永畢矣！</p>\n<p>謹奉表陳進以聞。臣光誠惶誠懼，頓首頓首，謹言。</p>\n<table>\n<thead>\n<tr>\n<th>紀</th>\n<th>範圍</th>\n<th>卷數</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>周紀</td>\n<td>1 - 5</td>\n<td>共5卷</td>\n</tr>\n<tr>\n<td>秦紀</td>\n<td>6 - 8</td>\n<td>共3卷</td>\n</tr>\n<tr>\n<td>漢紀</td>\n<td>9 - 68</td>\n<td>共60卷</td>\n</tr>\n<tr>\n<td>魏紀</td>\n<td>69 - 78</td>\n<td>共10卷</td>\n</tr>\n<tr>\n<td>晉紀</td>\n<td>79 - 118</td>\n<td>共40卷</td>\n</tr>\n<tr>\n<td>宋紀</td>\n<td>119 - 134</td>\n<td>共16卷</td>\n</tr>\n<tr>\n<td>齊紀</td>\n<td>135 - 144</td>\n<td>共10卷</td>\n</tr>\n<tr>\n<td>梁紀</td>\n<td>145 - 166</td>\n<td>共22卷</td>\n</tr>\n<tr>\n<td>陳紀</td>\n<td>167 - 176</td>\n<td>共10卷</td>\n</tr>\n<tr>\n<td>隋紀</td>\n<td>177 - 184</td>\n<td>共7卷</td>\n</tr>\n<tr>\n<td>唐紀</td>\n<td>185 - 265</td>\n<td>共81卷</td>\n</tr>\n<tr>\n<td>後梁紀</td>\n<td>266 - 271</td>\n<td>共5卷</td>\n</tr>\n<tr>\n<td>後唐紀</td>\n<td>272 - 279</td>\n<td>共8卷</td>\n</tr>\n<tr>\n<td>後晉紀</td>\n<td>280 - 285</td>\n<td>共6卷</td>\n</tr>\n<tr>\n<td>後漢紀</td>\n<td>286 - 289</td>\n<td>共4卷</td>\n</tr>\n<tr>\n<td>後周紀</td>\n<td>290 - 294</td>\n<td>共5卷</td>\n</tr>\n</tbody>\n</table>\n<pre><code>進展：\n2017年11月27日 第101卷 晉紀。\n2018年03月08日 第111卷 晉紀。\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"資治通鑑總覽\"><a class=\"markdownIt-Anchor\" href=\"#資治通鑑總覽\"></a> 資治通鑑總覽</h1>\n<p>編年體，二百九十四卷，十六朝，凡一千三百六十二年。</p>\n<p>進書表：重念臣違離闕庭，十有五年，雖身處于外，區區之心，朝夕寤寐，何嘗不在陛下之左右！顧以駑蹇，無施而可，是以專事鉛槧，用酬大恩，庶竭涓塵，少裨海嶽。臣今骸骨癯瘁，目視昏近，齒牙無幾，神識衰耗，目前所為，旋踵遺忘。臣之精力，盡於此書。伏望陛下寬其妄作之誅，察其願忠之意，以清閒之宴，時賜有覽，監前世之興衰，考當今之得失，嘉善矜惡，取得捨非，足以懋稽古之盛德，躋無前之至治。俾四海羣生，咸蒙其福，則臣雖委骨九泉，志願永畢矣！</p>\n<p>謹奉表陳進以聞。臣光誠惶誠懼，頓首頓首，謹言。</p>\n<table>\n<thead>\n<tr>\n<th>紀</th>\n<th>範圍</th>\n<th>卷數</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>周紀</td>\n<td>1 - 5</td>\n<td>共5卷</td>\n</tr>\n<tr>\n<td>秦紀</td>\n<td>6 - 8</td>\n<td>共3卷</td>\n</tr>\n<tr>\n<td>漢紀</td>\n<td>9 - 68</td>\n<td>共60卷</td>\n</tr>\n<tr>\n<td>魏紀</td>\n<td>69 - 78</td>\n<td>共10卷</td>\n</tr>\n<tr>\n<td>晉紀</td>\n<td>79 - 118</td>\n<td>共40卷</td>\n</tr>\n<tr>\n<td>宋紀</td>\n<td>119 - 134</td>\n<td>共16卷</td>\n</tr>\n<tr>\n<td>齊紀</td>\n<td>135 - 144</td>\n<td>共10卷</td>\n</tr>\n<tr>\n<td>梁紀</td>\n<td>145 - 166</td>\n<td>共22卷</td>\n</tr>\n<tr>\n<td>陳紀</td>\n<td>167 - 176</td>\n<td>共10卷</td>\n</tr>\n<tr>\n<td>隋紀</td>\n<td>177 - 184</td>\n<td>共7卷</td>\n</tr>\n<tr>\n<td>唐紀</td>\n<td>185 - 265</td>\n<td>共81卷</td>\n</tr>\n<tr>\n<td>後梁紀</td>\n<td>266 - 271</td>\n<td>共5卷</td>\n</tr>\n<tr>\n<td>後唐紀</td>\n<td>272 - 279</td>\n<td>共8卷</td>\n</tr>\n<tr>\n<td>後晉紀</td>\n<td>280 - 285</td>\n<td>共6卷</td>\n</tr>\n<tr>\n<td>後漢紀</td>\n<td>286 - 289</td>\n<td>共4卷</td>\n</tr>\n<tr>\n<td>後周紀</td>\n<td>290 - 294</td>\n<td>共5卷</td>\n</tr>\n</tbody>\n</table>\n<pre><code>進展：\n2017年11月27日 第101卷 晉紀。\n2018年03月08日 第111卷 晉紀。\n</code></pre>\n"},{"title":"资治通鉴小结001-005卷周纪","catalog":true,"date":"2017-12-07T09:11:29.000Z","header-img":"/img/17.jpg","subtitle":"资治通鉴小结001-005卷周纪","_content":"\n# 资治通鉴小结 001 - 005 卷 周纪\n\n## 卷1\n各诸侯国国君接连不断的去世，就连周朝天子也是经历了周威烈王姬午--周安王姬骄---周烈王姬喜的更替。其中以下事情值得记述：\n\n1. 智瑶胁迫魏恒子、韩康子攻打赵襄子，反被三家联合灭掉，三家分晋！之后，三姓开国诸侯的孙子被周威烈王批准为诸侯。\n2. 豫让为智瑶报仇，两次刺杀赵襄子，被杀死。\n3. 聂政为严仲子杀死了韩国国相侠累后毁容自杀，其姐自杀为其扬名\n4. 魏文侯时代贤才环绕。\n5. 齐国田和流放国君齐康公，魏文侯为其求请，周安王批准其为诸侯。第三代国君齐\n威王名声远播\n6. 吴起命运多劫，从齐入卫国，再到魏国，最后死于楚国。在后三国多有贡献，而最\n终被迫逃亡！\n7. 韩国灭掉郑国，将国都迁往新郑。\n\n## 卷2\n1. 秦孝公即位，商鞅变法，国富兵强。秦孝公去世，商鞅身死家灭。\n2. 韩国申不害变法，韩国国力也得以提升\n3. 魏国庞涓攻打赵、韩，孙膑2次围魏救赵，庞涓自杀\n4. 苏秦合纵抗秦，说服路线：燕-赵-魏（张仪）-韩-齐-楚。后魏齐被秦国胁迫攻打赵国，合纵失败。\n5. 赵武灵位即位。\n6. 齐国孟尝君侠义远播\n\n## 卷3\n1. 张仪连横六国事秦成功，恰逢秦惠王去世，连横失败。张仪失势，甘茂崛起。秦武王去世，甘茂失势，秦昭襄王即位，魏冉崛起。\n2. 燕昭王即位，乐毅来投，被重用。\n3. 赵武灵王，胡服骑射。传位给幼子赵何，自称“主父”\n4. 楚怀王屡次被骗，最后被骗往秦国，被软禁，楚顷襄王即位\n\n## 卷4\n1. 赵国原太子赵章在田不礼的怂恿下，发动叛乱，杀死肥义，赵成和李兑发兵杀死了赵章，并饿死了赵武灵王。政权便掌握在赵成和李兑手中。以后，赵国蔺相如脱颖而出，出现将相和。\n2. 秦国白起崛起，带兵攻城略地，所向披靡。秦国疆土靠征战和接受割地而日益辽阔\n3. 宋康王听信太史占卜，以为能够称霸天下，并四处攻城掠地，被齐国灭掉。\n4. 齐王灭掉宋国后非常骄傲，也四处攻打。乐毅率领5国联军伐齐，齐国只剩下莒城和即墨没有攻下。 \n5. 燕昭王去世，燕惠王即位，田单施反间计，乐毅被撤换，投奔赵国。田单用计，用火牛阵打败燕军，齐国复国。然而，齐襄王猜忌田单，幸好臣下劝服。\n\n## 卷5\n1. 秦国围攻赵国阏（yan）与城，赵奢和许历打败秦国，这是秦国变法以来首次大败。范睢（sui）相秦，提出“远交近攻”，并解除了王太后和魏冉的权力。报复魏国魏齐，赵国奇才虞卿跟随逃亡，魏齐自杀。\n2. 田单被任命为赵国国相\n3. 秦军围攻韩国上党，郡守冯亭将上党献与赵国，虞卿建议不被采纳。赵国接受上党。秦军攻打赵军，长平之战，赵国45万将士覆灭。\n4. 秦王不顾白起反对，攻打赵国首都邯郸。赵国毛遂自荐，说服楚国出兵。魏国信陵君窃符救赵，联军在信陵君的率领下大败秦军。郑安平投降，重用郑安平的范睢被治罪。白起在此期间一直不肯领军，被赐死。秦人可怜他。这一时期，鲁仲连也有表现\n5. 卫国商人吕不韦看上赢异人，奇货可居，搭线联系上了华阳夫人，谋划做秦国太子。\n\n","source":"_posts/資治通鑑/资治通鉴小结001-005卷-周纪.md","raw":"---\ntitle: '资治通鉴小结001-005卷周纪'\ncatalog: true\ndate: 2017-12-07 17:11:29\nheader-img: \"/img/17.jpg\"\nsubtitle: '资治通鉴小结001-005卷周纪' \ntags: \"資治通鑑\"\n---\n\n# 资治通鉴小结 001 - 005 卷 周纪\n\n## 卷1\n各诸侯国国君接连不断的去世，就连周朝天子也是经历了周威烈王姬午--周安王姬骄---周烈王姬喜的更替。其中以下事情值得记述：\n\n1. 智瑶胁迫魏恒子、韩康子攻打赵襄子，反被三家联合灭掉，三家分晋！之后，三姓开国诸侯的孙子被周威烈王批准为诸侯。\n2. 豫让为智瑶报仇，两次刺杀赵襄子，被杀死。\n3. 聂政为严仲子杀死了韩国国相侠累后毁容自杀，其姐自杀为其扬名\n4. 魏文侯时代贤才环绕。\n5. 齐国田和流放国君齐康公，魏文侯为其求请，周安王批准其为诸侯。第三代国君齐\n威王名声远播\n6. 吴起命运多劫，从齐入卫国，再到魏国，最后死于楚国。在后三国多有贡献，而最\n终被迫逃亡！\n7. 韩国灭掉郑国，将国都迁往新郑。\n\n## 卷2\n1. 秦孝公即位，商鞅变法，国富兵强。秦孝公去世，商鞅身死家灭。\n2. 韩国申不害变法，韩国国力也得以提升\n3. 魏国庞涓攻打赵、韩，孙膑2次围魏救赵，庞涓自杀\n4. 苏秦合纵抗秦，说服路线：燕-赵-魏（张仪）-韩-齐-楚。后魏齐被秦国胁迫攻打赵国，合纵失败。\n5. 赵武灵位即位。\n6. 齐国孟尝君侠义远播\n\n## 卷3\n1. 张仪连横六国事秦成功，恰逢秦惠王去世，连横失败。张仪失势，甘茂崛起。秦武王去世，甘茂失势，秦昭襄王即位，魏冉崛起。\n2. 燕昭王即位，乐毅来投，被重用。\n3. 赵武灵王，胡服骑射。传位给幼子赵何，自称“主父”\n4. 楚怀王屡次被骗，最后被骗往秦国，被软禁，楚顷襄王即位\n\n## 卷4\n1. 赵国原太子赵章在田不礼的怂恿下，发动叛乱，杀死肥义，赵成和李兑发兵杀死了赵章，并饿死了赵武灵王。政权便掌握在赵成和李兑手中。以后，赵国蔺相如脱颖而出，出现将相和。\n2. 秦国白起崛起，带兵攻城略地，所向披靡。秦国疆土靠征战和接受割地而日益辽阔\n3. 宋康王听信太史占卜，以为能够称霸天下，并四处攻城掠地，被齐国灭掉。\n4. 齐王灭掉宋国后非常骄傲，也四处攻打。乐毅率领5国联军伐齐，齐国只剩下莒城和即墨没有攻下。 \n5. 燕昭王去世，燕惠王即位，田单施反间计，乐毅被撤换，投奔赵国。田单用计，用火牛阵打败燕军，齐国复国。然而，齐襄王猜忌田单，幸好臣下劝服。\n\n## 卷5\n1. 秦国围攻赵国阏（yan）与城，赵奢和许历打败秦国，这是秦国变法以来首次大败。范睢（sui）相秦，提出“远交近攻”，并解除了王太后和魏冉的权力。报复魏国魏齐，赵国奇才虞卿跟随逃亡，魏齐自杀。\n2. 田单被任命为赵国国相\n3. 秦军围攻韩国上党，郡守冯亭将上党献与赵国，虞卿建议不被采纳。赵国接受上党。秦军攻打赵军，长平之战，赵国45万将士覆灭。\n4. 秦王不顾白起反对，攻打赵国首都邯郸。赵国毛遂自荐，说服楚国出兵。魏国信陵君窃符救赵，联军在信陵君的率领下大败秦军。郑安平投降，重用郑安平的范睢被治罪。白起在此期间一直不肯领军，被赐死。秦人可怜他。这一时期，鲁仲连也有表现\n5. 卫国商人吕不韦看上赢异人，奇货可居，搭线联系上了华阳夫人，谋划做秦国太子。\n\n","slug":"資治通鑑/资治通鉴小结001-005卷-周纪","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhl001cj5ly6l78t8xq","content":"<h1><span id=\"资治通鉴小结-001-005-卷-周纪\"> 资治通鉴小结 001 - 005 卷 周纪</span></h1>\n<h2><span id=\"卷1\"> 卷1</span></h2>\n<p>各诸侯国国君接连不断的去世，就连周朝天子也是经历了周威烈王姬午–周安王姬骄—周烈王姬喜的更替。其中以下事情值得记述：</p>\n<ol>\n<li>智瑶胁迫魏恒子、韩康子攻打赵襄子，反被三家联合灭掉，三家分晋！之后，三姓开国诸侯的孙子被周威烈王批准为诸侯。</li>\n<li>豫让为智瑶报仇，两次刺杀赵襄子，被杀死。</li>\n<li>聂政为严仲子杀死了韩国国相侠累后毁容自杀，其姐自杀为其扬名</li>\n<li>魏文侯时代贤才环绕。</li>\n<li>齐国田和流放国君齐康公，魏文侯为其求请，周安王批准其为诸侯。第三代国君齐<br>\n威王名声远播</li>\n<li>吴起命运多劫，从齐入卫国，再到魏国，最后死于楚国。在后三国多有贡献，而最<br>\n终被迫逃亡！</li>\n<li>韩国灭掉郑国，将国都迁往新郑。</li>\n</ol>\n<h2><span id=\"卷2\"> 卷2</span></h2>\n<ol>\n<li>秦孝公即位，商鞅变法，国富兵强。秦孝公去世，商鞅身死家灭。</li>\n<li>韩国申不害变法，韩国国力也得以提升</li>\n<li>魏国庞涓攻打赵、韩，孙膑2次围魏救赵，庞涓自杀</li>\n<li>苏秦合纵抗秦，说服路线：燕-赵-魏（张仪）-韩-齐-楚。后魏齐被秦国胁迫攻打赵国，合纵失败。</li>\n<li>赵武灵位即位。</li>\n<li>齐国孟尝君侠义远播</li>\n</ol>\n<h2><span id=\"卷3\"> 卷3</span></h2>\n<ol>\n<li>张仪连横六国事秦成功，恰逢秦惠王去世，连横失败。张仪失势，甘茂崛起。秦武王去世，甘茂失势，秦昭襄王即位，魏冉崛起。</li>\n<li>燕昭王即位，乐毅来投，被重用。</li>\n<li>赵武灵王，胡服骑射。传位给幼子赵何，自称“主父”</li>\n<li>楚怀王屡次被骗，最后被骗往秦国，被软禁，楚顷襄王即位</li>\n</ol>\n<h2><span id=\"卷4\"> 卷4</span></h2>\n<ol>\n<li>赵国原太子赵章在田不礼的怂恿下，发动叛乱，杀死肥义，赵成和李兑发兵杀死了赵章，并饿死了赵武灵王。政权便掌握在赵成和李兑手中。以后，赵国蔺相如脱颖而出，出现将相和。</li>\n<li>秦国白起崛起，带兵攻城略地，所向披靡。秦国疆土靠征战和接受割地而日益辽阔</li>\n<li>宋康王听信太史占卜，以为能够称霸天下，并四处攻城掠地，被齐国灭掉。</li>\n<li>齐王灭掉宋国后非常骄傲，也四处攻打。乐毅率领5国联军伐齐，齐国只剩下莒城和即墨没有攻下。</li>\n<li>燕昭王去世，燕惠王即位，田单施反间计，乐毅被撤换，投奔赵国。田单用计，用火牛阵打败燕军，齐国复国。然而，齐襄王猜忌田单，幸好臣下劝服。</li>\n</ol>\n<h2><span id=\"卷5\"> 卷5</span></h2>\n<ol>\n<li>秦国围攻赵国阏（yan）与城，赵奢和许历打败秦国，这是秦国变法以来首次大败。范睢（sui）相秦，提出“远交近攻”，并解除了王太后和魏冉的权力。报复魏国魏齐，赵国奇才虞卿跟随逃亡，魏齐自杀。</li>\n<li>田单被任命为赵国国相</li>\n<li>秦军围攻韩国上党，郡守冯亭将上党献与赵国，虞卿建议不被采纳。赵国接受上党。秦军攻打赵军，长平之战，赵国45万将士覆灭。</li>\n<li>秦王不顾白起反对，攻打赵国首都邯郸。赵国毛遂自荐，说服楚国出兵。魏国信陵君窃符救赵，联军在信陵君的率领下大败秦军。郑安平投降，重用郑安平的范睢被治罪。白起在此期间一直不肯领军，被赐死。秦人可怜他。这一时期，鲁仲连也有表现</li>\n<li>卫国商人吕不韦看上赢异人，奇货可居，搭线联系上了华阳夫人，谋划做秦国太子。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"资治通鉴小结-001-005-卷-周纪\"><a class=\"markdownIt-Anchor\" href=\"#资治通鉴小结-001-005-卷-周纪\"></a> 资治通鉴小结 001 - 005 卷 周纪</h1>\n<h2 id=\"卷1\"><a class=\"markdownIt-Anchor\" href=\"#卷1\"></a> 卷1</h2>\n<p>各诸侯国国君接连不断的去世，就连周朝天子也是经历了周威烈王姬午–周安王姬骄—周烈王姬喜的更替。其中以下事情值得记述：</p>\n<ol>\n<li>智瑶胁迫魏恒子、韩康子攻打赵襄子，反被三家联合灭掉，三家分晋！之后，三姓开国诸侯的孙子被周威烈王批准为诸侯。</li>\n<li>豫让为智瑶报仇，两次刺杀赵襄子，被杀死。</li>\n<li>聂政为严仲子杀死了韩国国相侠累后毁容自杀，其姐自杀为其扬名</li>\n<li>魏文侯时代贤才环绕。</li>\n<li>齐国田和流放国君齐康公，魏文侯为其求请，周安王批准其为诸侯。第三代国君齐<br>\n威王名声远播</li>\n<li>吴起命运多劫，从齐入卫国，再到魏国，最后死于楚国。在后三国多有贡献，而最<br>\n终被迫逃亡！</li>\n<li>韩国灭掉郑国，将国都迁往新郑。</li>\n</ol>\n<h2 id=\"卷2\"><a class=\"markdownIt-Anchor\" href=\"#卷2\"></a> 卷2</h2>\n<ol>\n<li>秦孝公即位，商鞅变法，国富兵强。秦孝公去世，商鞅身死家灭。</li>\n<li>韩国申不害变法，韩国国力也得以提升</li>\n<li>魏国庞涓攻打赵、韩，孙膑2次围魏救赵，庞涓自杀</li>\n<li>苏秦合纵抗秦，说服路线：燕-赵-魏（张仪）-韩-齐-楚。后魏齐被秦国胁迫攻打赵国，合纵失败。</li>\n<li>赵武灵位即位。</li>\n<li>齐国孟尝君侠义远播</li>\n</ol>\n<h2 id=\"卷3\"><a class=\"markdownIt-Anchor\" href=\"#卷3\"></a> 卷3</h2>\n<ol>\n<li>张仪连横六国事秦成功，恰逢秦惠王去世，连横失败。张仪失势，甘茂崛起。秦武王去世，甘茂失势，秦昭襄王即位，魏冉崛起。</li>\n<li>燕昭王即位，乐毅来投，被重用。</li>\n<li>赵武灵王，胡服骑射。传位给幼子赵何，自称“主父”</li>\n<li>楚怀王屡次被骗，最后被骗往秦国，被软禁，楚顷襄王即位</li>\n</ol>\n<h2 id=\"卷4\"><a class=\"markdownIt-Anchor\" href=\"#卷4\"></a> 卷4</h2>\n<ol>\n<li>赵国原太子赵章在田不礼的怂恿下，发动叛乱，杀死肥义，赵成和李兑发兵杀死了赵章，并饿死了赵武灵王。政权便掌握在赵成和李兑手中。以后，赵国蔺相如脱颖而出，出现将相和。</li>\n<li>秦国白起崛起，带兵攻城略地，所向披靡。秦国疆土靠征战和接受割地而日益辽阔</li>\n<li>宋康王听信太史占卜，以为能够称霸天下，并四处攻城掠地，被齐国灭掉。</li>\n<li>齐王灭掉宋国后非常骄傲，也四处攻打。乐毅率领5国联军伐齐，齐国只剩下莒城和即墨没有攻下。</li>\n<li>燕昭王去世，燕惠王即位，田单施反间计，乐毅被撤换，投奔赵国。田单用计，用火牛阵打败燕军，齐国复国。然而，齐襄王猜忌田单，幸好臣下劝服。</li>\n</ol>\n<h2 id=\"卷5\"><a class=\"markdownIt-Anchor\" href=\"#卷5\"></a> 卷5</h2>\n<ol>\n<li>秦国围攻赵国阏（yan）与城，赵奢和许历打败秦国，这是秦国变法以来首次大败。范睢（sui）相秦，提出“远交近攻”，并解除了王太后和魏冉的权力。报复魏国魏齐，赵国奇才虞卿跟随逃亡，魏齐自杀。</li>\n<li>田单被任命为赵国国相</li>\n<li>秦军围攻韩国上党，郡守冯亭将上党献与赵国，虞卿建议不被采纳。赵国接受上党。秦军攻打赵军，长平之战，赵国45万将士覆灭。</li>\n<li>秦王不顾白起反对，攻打赵国首都邯郸。赵国毛遂自荐，说服楚国出兵。魏国信陵君窃符救赵，联军在信陵君的率领下大败秦军。郑安平投降，重用郑安平的范睢被治罪。白起在此期间一直不肯领军，被赐死。秦人可怜他。这一时期，鲁仲连也有表现</li>\n<li>卫国商人吕不韦看上赢异人，奇货可居，搭线联系上了华阳夫人，谋划做秦国太子。</li>\n</ol>\n"},{"title":"资治通鉴小结006-008卷秦纪","catalog":true,"date":"2017-12-08T09:11:29.000Z","header-img":"/img/17.jpg","subtitle":"资治通鉴小结006-008卷秦纪","_content":"\n# 资治通鉴小结 006 - 008 卷 秦纪\n## 卷6\n1. 燕国客卿蔡泽劝说秦国相国范睢让贤成功，蔡泽被任命为相国，几个月即被解职。\n2. 荀况论道。\n3. 秦昭襄王去世，孝文王即位，立赢异人为太子。孝文王在位3天去世，秦庄襄王赢\n异人即位，吕不韦被任命为相国。不久，秦庄襄王去世，13岁嬴政即位，吕不韦掌权\n4. 东周谋划攻秦，吕不韦灭亡了东周。\n5. 楚国灭亡了鲁国。\n6. 信陵君听从毛公、薛公的劝说，从赵国返回魏国，率领5国联军打败了蒙骜率领的\n秦军。不久，秦国使用反间计，信陵君被冷落，沉湎女色而亡。\n7. 秦国郑国渠完成，赵国廉颇逃亡楚国，赵国李牧斩杀匈奴10多万兵马。\n8. 楚国春申君率领5国联军攻打秦国，在函谷关大败而逃。不久，楚王去世，李园杀死春申君，楚幽王即位。\n9. 嬴政平定嫪毐叛乱，软禁母后。吕不韦被罢相，不久，因为在封地交结宾客而被秦王逼死。秦国下逐客令，李斯上书劝谏被重用。李斯采用钱和剑削弱各国。\n10. 秦国内史腾率军灭亡韩国，设立颍川郡。\n11. 秦赵对抗，秦军多次被李牧打败。秦国收买赵国宠臣郭开，使用反间计撤换李牧\n，李牧不从，被杀死。不久，王翦率军灭亡赵国。赵国公子赵嘉建立代国。\n12. 燕国太子丹谋划荆轲刺秦。\n\n## 卷7\n1. 荆轲刺秦失败，王翦攻克燕都蓟，燕太子丹被燕王杀死。不久，王翦儿子王贲（ben）攻克辽东，俘获燕王，燕国灭亡。再攻代，俘获代王，代国灭亡。\n2. 秦将王贲水淹魏都大梁，魏王魏假投降，被杀。魏国灭亡。\n3. 李信、蒙恬带兵20万攻楚，楚军尾随，大败秦军。不久，王翦率兵60万攻楚，先避战，后尾随楚军，大败楚军，杀死项燕。不久，俘获楚王，楚国灭亡。\n4. 秦将王贲突然攻入齐都临淄，诱降了齐王，齐国灭亡，齐王被饿死。\n5. 秦王嬴政统一天下，便收缴民间武器铸成12铜人，又统一法制和度量衡等。\n6. 秦始皇巡游天下，张良刺杀秦始皇失败，李斯提出“焚书”\n7. 秦始皇大修阿房宫和骊山陵墓\n8. 秦始皇尊敬的侯生、卢生讥讽秦始皇，秦始皇大怒，引发“坑儒”。\n9. 有人在东郡陨石上刻字“始皇死而地分”\n10. 秦始皇在巡游途中去世，赵高和李斯联合，立胡亥为帝，逼杀扶苏。不久杀掉蒙毅蒙恬兄弟。赵高掌权，秦二世行乐！\n11. 陈胜吴广在安徽大泽乡起义，口号：王侯将相宁有种乎?号称“大楚”。楚国复立。各地起义军蜂起，官员害怕被杀，报喜不报忧。\n12. 楚将武臣攻占故赵旧地10多个城池，手下蒯彻说降了故燕赵30多个城池，武臣便自立为赵王，张耳陈余分任丞相和大将军。赵国复立。\n13. 秦将章邯用骊山劳工打败楚将周文的大军。\n14. 刘邦在沛起兵，项梁项羽在吴起兵，田儋（dan）和从弟田荣、田横平定旧齐之地，田儋自立齐王，齐国复立。\n15. 赵将韩广受命攻掠故燕地，被众人拥立为燕王。燕国复立。\n16. 魏咎（jiu）被拥立为魏王。魏国复立\n17. 秦二世废卫国国君为平民，卫国灭亡。\n\n## 卷8\n1. 秦将章邯追击楚将周文，周文自杀。\n2. 楚将田藏杀死吴广，陈胜为之封官。田藏攻打章邯，被杀死。\n3. 章邯打败楚国陈胜势力，陈胜被车夫庄贾杀死，楚将吕臣杀死了庄贾。\n4. 赵将李良杀死了赵王，张耳陈馀打败李良，拥立赵歇为赵王。\n5. 项羽攻破襄城，活埋了襄城军民\n6. 项梁打败秦嘉势力，拥立楚怀王。\n7. 项梁听从张良劝说，立韩成为韩王，最后一个国家韩国复立。\n8. 章邯攻打魏国，齐楚支援魏国，被章邯打败，魏王魏咎自焚而死，弟弟魏豹投奔楚国，被拥立为魏王。齐王田儋被秦军杀死，齐国田荣打败田假，拥立田儋的儿子田市为齐王。\n9. 项梁出兵，打败章邯。项梁多次打败章邯，骄傲自大，定陶之战，项梁战死。\n10. 秦国赵高杀死李斯，独掌大权。\n11. 楚怀王派刘邦西进攻秦，彭越，带兵跟随；张良，帮忙夺取了旧韩地；郦食其，来投奔，说服陈留；宛城陈恢献上宛城。在西进中，刘邦也屠城。\n12. 章邯攻打赵国邯郸，项羽杀死滞留40多天不援赵的主将宋义，带领楚军，破釜沉舟，以一当十，巨鹿之战消灭秦军主力。项羽成为各诸侯的上将军。\n13. 秦国赵高杀死秦二世，立子婴为帝，子婴杀死了赵高。\n14. 刘邦攻打秦国，秦将想求和，而秦兵有战意，张良则劝说刘邦乘机攻打，蓝田之战，秦军土崩瓦解。\n\n\n\n","source":"_posts/資治通鑑/资治通鉴小结006-008卷-秦纪.md","raw":"---\ntitle: '资治通鉴小结006-008卷秦纪'\ncatalog: true\ndate: 2017-12-08 17:11:29\nheader-img: \"/img/17.jpg\"\nsubtitle: '资治通鉴小结006-008卷秦纪' \ntags: \"資治通鑑\"\n---\n\n# 资治通鉴小结 006 - 008 卷 秦纪\n## 卷6\n1. 燕国客卿蔡泽劝说秦国相国范睢让贤成功，蔡泽被任命为相国，几个月即被解职。\n2. 荀况论道。\n3. 秦昭襄王去世，孝文王即位，立赢异人为太子。孝文王在位3天去世，秦庄襄王赢\n异人即位，吕不韦被任命为相国。不久，秦庄襄王去世，13岁嬴政即位，吕不韦掌权\n4. 东周谋划攻秦，吕不韦灭亡了东周。\n5. 楚国灭亡了鲁国。\n6. 信陵君听从毛公、薛公的劝说，从赵国返回魏国，率领5国联军打败了蒙骜率领的\n秦军。不久，秦国使用反间计，信陵君被冷落，沉湎女色而亡。\n7. 秦国郑国渠完成，赵国廉颇逃亡楚国，赵国李牧斩杀匈奴10多万兵马。\n8. 楚国春申君率领5国联军攻打秦国，在函谷关大败而逃。不久，楚王去世，李园杀死春申君，楚幽王即位。\n9. 嬴政平定嫪毐叛乱，软禁母后。吕不韦被罢相，不久，因为在封地交结宾客而被秦王逼死。秦国下逐客令，李斯上书劝谏被重用。李斯采用钱和剑削弱各国。\n10. 秦国内史腾率军灭亡韩国，设立颍川郡。\n11. 秦赵对抗，秦军多次被李牧打败。秦国收买赵国宠臣郭开，使用反间计撤换李牧\n，李牧不从，被杀死。不久，王翦率军灭亡赵国。赵国公子赵嘉建立代国。\n12. 燕国太子丹谋划荆轲刺秦。\n\n## 卷7\n1. 荆轲刺秦失败，王翦攻克燕都蓟，燕太子丹被燕王杀死。不久，王翦儿子王贲（ben）攻克辽东，俘获燕王，燕国灭亡。再攻代，俘获代王，代国灭亡。\n2. 秦将王贲水淹魏都大梁，魏王魏假投降，被杀。魏国灭亡。\n3. 李信、蒙恬带兵20万攻楚，楚军尾随，大败秦军。不久，王翦率兵60万攻楚，先避战，后尾随楚军，大败楚军，杀死项燕。不久，俘获楚王，楚国灭亡。\n4. 秦将王贲突然攻入齐都临淄，诱降了齐王，齐国灭亡，齐王被饿死。\n5. 秦王嬴政统一天下，便收缴民间武器铸成12铜人，又统一法制和度量衡等。\n6. 秦始皇巡游天下，张良刺杀秦始皇失败，李斯提出“焚书”\n7. 秦始皇大修阿房宫和骊山陵墓\n8. 秦始皇尊敬的侯生、卢生讥讽秦始皇，秦始皇大怒，引发“坑儒”。\n9. 有人在东郡陨石上刻字“始皇死而地分”\n10. 秦始皇在巡游途中去世，赵高和李斯联合，立胡亥为帝，逼杀扶苏。不久杀掉蒙毅蒙恬兄弟。赵高掌权，秦二世行乐！\n11. 陈胜吴广在安徽大泽乡起义，口号：王侯将相宁有种乎?号称“大楚”。楚国复立。各地起义军蜂起，官员害怕被杀，报喜不报忧。\n12. 楚将武臣攻占故赵旧地10多个城池，手下蒯彻说降了故燕赵30多个城池，武臣便自立为赵王，张耳陈余分任丞相和大将军。赵国复立。\n13. 秦将章邯用骊山劳工打败楚将周文的大军。\n14. 刘邦在沛起兵，项梁项羽在吴起兵，田儋（dan）和从弟田荣、田横平定旧齐之地，田儋自立齐王，齐国复立。\n15. 赵将韩广受命攻掠故燕地，被众人拥立为燕王。燕国复立。\n16. 魏咎（jiu）被拥立为魏王。魏国复立\n17. 秦二世废卫国国君为平民，卫国灭亡。\n\n## 卷8\n1. 秦将章邯追击楚将周文，周文自杀。\n2. 楚将田藏杀死吴广，陈胜为之封官。田藏攻打章邯，被杀死。\n3. 章邯打败楚国陈胜势力，陈胜被车夫庄贾杀死，楚将吕臣杀死了庄贾。\n4. 赵将李良杀死了赵王，张耳陈馀打败李良，拥立赵歇为赵王。\n5. 项羽攻破襄城，活埋了襄城军民\n6. 项梁打败秦嘉势力，拥立楚怀王。\n7. 项梁听从张良劝说，立韩成为韩王，最后一个国家韩国复立。\n8. 章邯攻打魏国，齐楚支援魏国，被章邯打败，魏王魏咎自焚而死，弟弟魏豹投奔楚国，被拥立为魏王。齐王田儋被秦军杀死，齐国田荣打败田假，拥立田儋的儿子田市为齐王。\n9. 项梁出兵，打败章邯。项梁多次打败章邯，骄傲自大，定陶之战，项梁战死。\n10. 秦国赵高杀死李斯，独掌大权。\n11. 楚怀王派刘邦西进攻秦，彭越，带兵跟随；张良，帮忙夺取了旧韩地；郦食其，来投奔，说服陈留；宛城陈恢献上宛城。在西进中，刘邦也屠城。\n12. 章邯攻打赵国邯郸，项羽杀死滞留40多天不援赵的主将宋义，带领楚军，破釜沉舟，以一当十，巨鹿之战消灭秦军主力。项羽成为各诸侯的上将军。\n13. 秦国赵高杀死秦二世，立子婴为帝，子婴杀死了赵高。\n14. 刘邦攻打秦国，秦将想求和，而秦兵有战意，张良则劝说刘邦乘机攻打，蓝田之战，秦军土崩瓦解。\n\n\n\n","slug":"資治通鑑/资治通鉴小结006-008卷-秦纪","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhm001ej5lyo2xjy19t","content":"<h1><span id=\"资治通鉴小结-006-008-卷-秦纪\"> 资治通鉴小结 006 - 008 卷 秦纪</span></h1>\n<h2><span id=\"卷6\"> 卷6</span></h2>\n<ol>\n<li>燕国客卿蔡泽劝说秦国相国范睢让贤成功，蔡泽被任命为相国，几个月即被解职。</li>\n<li>荀况论道。</li>\n<li>秦昭襄王去世，孝文王即位，立赢异人为太子。孝文王在位3天去世，秦庄襄王赢<br>\n异人即位，吕不韦被任命为相国。不久，秦庄襄王去世，13岁嬴政即位，吕不韦掌权</li>\n<li>东周谋划攻秦，吕不韦灭亡了东周。</li>\n<li>楚国灭亡了鲁国。</li>\n<li>信陵君听从毛公、薛公的劝说，从赵国返回魏国，率领5国联军打败了蒙骜率领的<br>\n秦军。不久，秦国使用反间计，信陵君被冷落，沉湎女色而亡。</li>\n<li>秦国郑国渠完成，赵国廉颇逃亡楚国，赵国李牧斩杀匈奴10多万兵马。</li>\n<li>楚国春申君率领5国联军攻打秦国，在函谷关大败而逃。不久，楚王去世，李园杀死春申君，楚幽王即位。</li>\n<li>嬴政平定嫪毐叛乱，软禁母后。吕不韦被罢相，不久，因为在封地交结宾客而被秦王逼死。秦国下逐客令，李斯上书劝谏被重用。李斯采用钱和剑削弱各国。</li>\n<li>秦国内史腾率军灭亡韩国，设立颍川郡。</li>\n<li>秦赵对抗，秦军多次被李牧打败。秦国收买赵国宠臣郭开，使用反间计撤换李牧<br>\n，李牧不从，被杀死。不久，王翦率军灭亡赵国。赵国公子赵嘉建立代国。</li>\n<li>燕国太子丹谋划荆轲刺秦。</li>\n</ol>\n<h2><span id=\"卷7\"> 卷7</span></h2>\n<ol>\n<li>荆轲刺秦失败，王翦攻克燕都蓟，燕太子丹被燕王杀死。不久，王翦儿子王贲（ben）攻克辽东，俘获燕王，燕国灭亡。再攻代，俘获代王，代国灭亡。</li>\n<li>秦将王贲水淹魏都大梁，魏王魏假投降，被杀。魏国灭亡。</li>\n<li>李信、蒙恬带兵20万攻楚，楚军尾随，大败秦军。不久，王翦率兵60万攻楚，先避战，后尾随楚军，大败楚军，杀死项燕。不久，俘获楚王，楚国灭亡。</li>\n<li>秦将王贲突然攻入齐都临淄，诱降了齐王，齐国灭亡，齐王被饿死。</li>\n<li>秦王嬴政统一天下，便收缴民间武器铸成12铜人，又统一法制和度量衡等。</li>\n<li>秦始皇巡游天下，张良刺杀秦始皇失败，李斯提出“焚书”</li>\n<li>秦始皇大修阿房宫和骊山陵墓</li>\n<li>秦始皇尊敬的侯生、卢生讥讽秦始皇，秦始皇大怒，引发“坑儒”。</li>\n<li>有人在东郡陨石上刻字“始皇死而地分”</li>\n<li>秦始皇在巡游途中去世，赵高和李斯联合，立胡亥为帝，逼杀扶苏。不久杀掉蒙毅蒙恬兄弟。赵高掌权，秦二世行乐！</li>\n<li>陈胜吴广在安徽大泽乡起义，口号：王侯将相宁有种乎?号称“大楚”。楚国复立。各地起义军蜂起，官员害怕被杀，报喜不报忧。</li>\n<li>楚将武臣攻占故赵旧地10多个城池，手下蒯彻说降了故燕赵30多个城池，武臣便自立为赵王，张耳陈余分任丞相和大将军。赵国复立。</li>\n<li>秦将章邯用骊山劳工打败楚将周文的大军。</li>\n<li>刘邦在沛起兵，项梁项羽在吴起兵，田儋（dan）和从弟田荣、田横平定旧齐之地，田儋自立齐王，齐国复立。</li>\n<li>赵将韩广受命攻掠故燕地，被众人拥立为燕王。燕国复立。</li>\n<li>魏咎（jiu）被拥立为魏王。魏国复立</li>\n<li>秦二世废卫国国君为平民，卫国灭亡。</li>\n</ol>\n<h2><span id=\"卷8\"> 卷8</span></h2>\n<ol>\n<li>秦将章邯追击楚将周文，周文自杀。</li>\n<li>楚将田藏杀死吴广，陈胜为之封官。田藏攻打章邯，被杀死。</li>\n<li>章邯打败楚国陈胜势力，陈胜被车夫庄贾杀死，楚将吕臣杀死了庄贾。</li>\n<li>赵将李良杀死了赵王，张耳陈馀打败李良，拥立赵歇为赵王。</li>\n<li>项羽攻破襄城，活埋了襄城军民</li>\n<li>项梁打败秦嘉势力，拥立楚怀王。</li>\n<li>项梁听从张良劝说，立韩成为韩王，最后一个国家韩国复立。</li>\n<li>章邯攻打魏国，齐楚支援魏国，被章邯打败，魏王魏咎自焚而死，弟弟魏豹投奔楚国，被拥立为魏王。齐王田儋被秦军杀死，齐国田荣打败田假，拥立田儋的儿子田市为齐王。</li>\n<li>项梁出兵，打败章邯。项梁多次打败章邯，骄傲自大，定陶之战，项梁战死。</li>\n<li>秦国赵高杀死李斯，独掌大权。</li>\n<li>楚怀王派刘邦西进攻秦，彭越，带兵跟随；张良，帮忙夺取了旧韩地；郦食其，来投奔，说服陈留；宛城陈恢献上宛城。在西进中，刘邦也屠城。</li>\n<li>章邯攻打赵国邯郸，项羽杀死滞留40多天不援赵的主将宋义，带领楚军，破釜沉舟，以一当十，巨鹿之战消灭秦军主力。项羽成为各诸侯的上将军。</li>\n<li>秦国赵高杀死秦二世，立子婴为帝，子婴杀死了赵高。</li>\n<li>刘邦攻打秦国，秦将想求和，而秦兵有战意，张良则劝说刘邦乘机攻打，蓝田之战，秦军土崩瓦解。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"资治通鉴小结-006-008-卷-秦纪\"><a class=\"markdownIt-Anchor\" href=\"#资治通鉴小结-006-008-卷-秦纪\"></a> 资治通鉴小结 006 - 008 卷 秦纪</h1>\n<h2 id=\"卷6\"><a class=\"markdownIt-Anchor\" href=\"#卷6\"></a> 卷6</h2>\n<ol>\n<li>燕国客卿蔡泽劝说秦国相国范睢让贤成功，蔡泽被任命为相国，几个月即被解职。</li>\n<li>荀况论道。</li>\n<li>秦昭襄王去世，孝文王即位，立赢异人为太子。孝文王在位3天去世，秦庄襄王赢<br>\n异人即位，吕不韦被任命为相国。不久，秦庄襄王去世，13岁嬴政即位，吕不韦掌权</li>\n<li>东周谋划攻秦，吕不韦灭亡了东周。</li>\n<li>楚国灭亡了鲁国。</li>\n<li>信陵君听从毛公、薛公的劝说，从赵国返回魏国，率领5国联军打败了蒙骜率领的<br>\n秦军。不久，秦国使用反间计，信陵君被冷落，沉湎女色而亡。</li>\n<li>秦国郑国渠完成，赵国廉颇逃亡楚国，赵国李牧斩杀匈奴10多万兵马。</li>\n<li>楚国春申君率领5国联军攻打秦国，在函谷关大败而逃。不久，楚王去世，李园杀死春申君，楚幽王即位。</li>\n<li>嬴政平定嫪毐叛乱，软禁母后。吕不韦被罢相，不久，因为在封地交结宾客而被秦王逼死。秦国下逐客令，李斯上书劝谏被重用。李斯采用钱和剑削弱各国。</li>\n<li>秦国内史腾率军灭亡韩国，设立颍川郡。</li>\n<li>秦赵对抗，秦军多次被李牧打败。秦国收买赵国宠臣郭开，使用反间计撤换李牧<br>\n，李牧不从，被杀死。不久，王翦率军灭亡赵国。赵国公子赵嘉建立代国。</li>\n<li>燕国太子丹谋划荆轲刺秦。</li>\n</ol>\n<h2 id=\"卷7\"><a class=\"markdownIt-Anchor\" href=\"#卷7\"></a> 卷7</h2>\n<ol>\n<li>荆轲刺秦失败，王翦攻克燕都蓟，燕太子丹被燕王杀死。不久，王翦儿子王贲（ben）攻克辽东，俘获燕王，燕国灭亡。再攻代，俘获代王，代国灭亡。</li>\n<li>秦将王贲水淹魏都大梁，魏王魏假投降，被杀。魏国灭亡。</li>\n<li>李信、蒙恬带兵20万攻楚，楚军尾随，大败秦军。不久，王翦率兵60万攻楚，先避战，后尾随楚军，大败楚军，杀死项燕。不久，俘获楚王，楚国灭亡。</li>\n<li>秦将王贲突然攻入齐都临淄，诱降了齐王，齐国灭亡，齐王被饿死。</li>\n<li>秦王嬴政统一天下，便收缴民间武器铸成12铜人，又统一法制和度量衡等。</li>\n<li>秦始皇巡游天下，张良刺杀秦始皇失败，李斯提出“焚书”</li>\n<li>秦始皇大修阿房宫和骊山陵墓</li>\n<li>秦始皇尊敬的侯生、卢生讥讽秦始皇，秦始皇大怒，引发“坑儒”。</li>\n<li>有人在东郡陨石上刻字“始皇死而地分”</li>\n<li>秦始皇在巡游途中去世，赵高和李斯联合，立胡亥为帝，逼杀扶苏。不久杀掉蒙毅蒙恬兄弟。赵高掌权，秦二世行乐！</li>\n<li>陈胜吴广在安徽大泽乡起义，口号：王侯将相宁有种乎?号称“大楚”。楚国复立。各地起义军蜂起，官员害怕被杀，报喜不报忧。</li>\n<li>楚将武臣攻占故赵旧地10多个城池，手下蒯彻说降了故燕赵30多个城池，武臣便自立为赵王，张耳陈余分任丞相和大将军。赵国复立。</li>\n<li>秦将章邯用骊山劳工打败楚将周文的大军。</li>\n<li>刘邦在沛起兵，项梁项羽在吴起兵，田儋（dan）和从弟田荣、田横平定旧齐之地，田儋自立齐王，齐国复立。</li>\n<li>赵将韩广受命攻掠故燕地，被众人拥立为燕王。燕国复立。</li>\n<li>魏咎（jiu）被拥立为魏王。魏国复立</li>\n<li>秦二世废卫国国君为平民，卫国灭亡。</li>\n</ol>\n<h2 id=\"卷8\"><a class=\"markdownIt-Anchor\" href=\"#卷8\"></a> 卷8</h2>\n<ol>\n<li>秦将章邯追击楚将周文，周文自杀。</li>\n<li>楚将田藏杀死吴广，陈胜为之封官。田藏攻打章邯，被杀死。</li>\n<li>章邯打败楚国陈胜势力，陈胜被车夫庄贾杀死，楚将吕臣杀死了庄贾。</li>\n<li>赵将李良杀死了赵王，张耳陈馀打败李良，拥立赵歇为赵王。</li>\n<li>项羽攻破襄城，活埋了襄城军民</li>\n<li>项梁打败秦嘉势力，拥立楚怀王。</li>\n<li>项梁听从张良劝说，立韩成为韩王，最后一个国家韩国复立。</li>\n<li>章邯攻打魏国，齐楚支援魏国，被章邯打败，魏王魏咎自焚而死，弟弟魏豹投奔楚国，被拥立为魏王。齐王田儋被秦军杀死，齐国田荣打败田假，拥立田儋的儿子田市为齐王。</li>\n<li>项梁出兵，打败章邯。项梁多次打败章邯，骄傲自大，定陶之战，项梁战死。</li>\n<li>秦国赵高杀死李斯，独掌大权。</li>\n<li>楚怀王派刘邦西进攻秦，彭越，带兵跟随；张良，帮忙夺取了旧韩地；郦食其，来投奔，说服陈留；宛城陈恢献上宛城。在西进中，刘邦也屠城。</li>\n<li>章邯攻打赵国邯郸，项羽杀死滞留40多天不援赵的主将宋义，带领楚军，破釜沉舟，以一当十，巨鹿之战消灭秦军主力。项羽成为各诸侯的上将军。</li>\n<li>秦国赵高杀死秦二世，立子婴为帝，子婴杀死了赵高。</li>\n<li>刘邦攻打秦国，秦将想求和，而秦兵有战意，张良则劝说刘邦乘机攻打，蓝田之战，秦军土崩瓦解。</li>\n</ol>\n"},{"title":"Chapter-10-特质","catalog":true,"date":"2015-06-22T09:21:29.000Z","header-img":"/img/04.jpg","_content":"\n## Chapter-10-特质\n\n特质 trait 接口 interface \n\n---\n\n### 当做接口使用的特质\n特质的部分功能和java中的接口十分类似。例如：\n\n```scala\ntrait Logger {\n    def log(msg: String) //这个是抽象方法，不要写abstract，特质中默认未实现的方法就是抽象的。\n}\n\nclass ConsoleLogger extends Logger { // 实现Logger。用extends，不是implements\n    def log(msg: String) { println(msg) } // 不需要写override \n}\n```\n如果要实现多个特质，可以用with关键字来串联：\n\n```scala\nclass ConsoleLogger extends Logger with Cloneable with Serializable // 所有的java接口都可以做为scala的特质使用，scala中同样只能有一个父类，但是可以实现多个特质。\n```\n    上面这行代码要解读为Logger with Cloneable with Serializable是一个整体，然后再由ConsoleLogger类继承。\n\n---\n\n### 带有具体实现的特质\n在scala中，特质是可以有实现的。\n\n```scala\ntrait Logger {\n    def log(msg: String) { println(msg) }\n}\n\nclass SavingsAccount extends Logger {\n    def withdraw(amount: Double) {\n        log(\"Insufficeient funds\") // 使用特质中的方法\n    }\n}\n```\n让特质有具体实现有一个弊端，就是特质修改，子类要重新编译。\n\n---\n\n### 使用特质的对象\n\n```scala\nval acct = new SavingsAccount with Logger\nacct.withdraw(1.0)\n// Insufficeient funds\n```\n\n---\n\n### 特质继承顺序\n\n```scala\n//父特质\ntrait Logger {\n  def log(msg: String) {\n    println(\"Logger.log\")\n    println(msg)\n  }\n}\n\n//给日志加时间戳\ntrait TimestampLogger extends Logger {\n  override def log(msg: String) {\n    println(\"TimestampLogger.log\")\n    super.log(new java.util.Date() + \" \" + msg)\n  }\n}\n\n//截断日志\ntrait ShortLogger extends Logger {\n  val maxLength = 15\n\n  // 特质中的字段，下面会讲\n  override def log(msg: String) {\n    println(\"ShortLogger.log\")\n    super.log(if (msg.length <= maxLength) msg else msg.substring(0, maxLength - 3) + \"...\")\n  }\n}\n\nclass SavingsAccount\n\nobject MyTest10 extends App {\n  val acct = new SavingsAccount with TimestampLogger with ShortLogger\n  val acct2 = new SavingsAccount with ShortLogger with TimestampLogger\n  acct.log(\"1234567890123456\")\n  println()\n  acct2.log(\"1234567890123456\")\n}\n// 输出：\n// ShortLogger.log\n// TimestampLogger.log\n// Logger.log\n// Tue Dec 01 10:38:35 CST 2015 123456789012...\n//\n// TimestampLogger.log\n// ShortLogger.log\n// Logger.log\n// Tue Dec 01 1...\n```\n上面代码已经可以看出端倪，当对象使用一串特质时，调用顺序是从后到前（从右至左）的。逐层调用时，如果当前特质的左边没有特质了，那么它的super就会调用自己的父特质。\n\n* spuer的调用关系，取决于特质的顺序。\n* 如果要指定调用父类特质可以：super[TimestampLogger].log(...)。但是只能指定自己的直接父类特质。\n\n以下代码是等价的：\n```scala\nval acct = new SavingsAccount with Logger with TimestampLogger with ShortLogger\n//等价于\nval acct = new SavingsAccount with TimestampLogger with ShortLogger\n```\n\n---\n\n### 在特质中使用抽象方法\n如果在子特质中使用super，而父特质中的方法为抽象方法时，子特质对应的方法要加上override和abstract\n\n```scala\ntrait Logger {\n    def log(msg: String) // 这是个抽象方法\n}\nabstract override def log() {\n    super.log(...)\n}\n```\n\n---\n\n### 模板方法\n\n```scala\ntrait Logger {\n  def log(msg: String)\n  def info(msg: String) { log(\"INFO: \" + msg) }\n  def warn(msg: String) { log(\"WARN: \" + msg) }\n  def error(msg: String) { log(\"ERROR: \" + msg) }\n}\n\nclass SavingsAccount extends Logger {\n  override def log(msg: String) = { println(msg) }\n}\n\nval acct = new SavingsAccount\nacct.error(\"oh my god!\")\n```\n\n---\n\n### 特质中的具体字段\nscala中的特质，字段如果有初始化值就是具体的，反之则为抽象。\n特质中的具体字段不会被子类继承，而只是被简单的添加进去。\n\n```scala\ntrait ShortLogger extends Logger {\n    val maxLength = 15 //具体字段\n}\n\nclass Account {\n    var balance = 0.0\n}\n\nclass SavingsAccount extends Account with ShortLogger {\n    var interest = 0.0\n}\n```\n\n\n    | balance   |  -> 父类对象\n    -------------\n    | interest  |  -> 子类字段\n    | maxLength |  -> 子类字段\n\n具体的特质字段，可以视为是一个装配指令，表示任何混入该字段的子类，都自动拷贝该字段给自己。\n\n---\n\n### 特质中的抽象字段\n\n特质中的未初始化的字段都是抽象的，子类必须重写，但是不用加override关键字。\n\n---\n\n### 特质构造顺序\n特质也有构造器，由字段的初始化和其他语句组成。\n\n```scala\ntrait FileLogger extends Logger {\n    val out = new PrintWriter(\"app.log\") //构造器的一部分\n    out.println(\"# \" + new Date().toString) //同样是物质构造器的一部分\n    def log(msg: String) {...} //不属于构造器的一部分\n}\n```\n构造顺序如下：\n\n* 对象首先调用父类构造器。\n* 特质构造器在父类构造器之后、类构造器之前执行。\n* 特质构造顺序和调用顺序相反，由左至右。\n* 每个特质中，父特质先构造。\n* 如果多个特质共有一个父特质，那么这个父特质在已经构造的情况下，不会再次构造。\n* 所有特质构造器完成，子类再构造。\n\n```scala\nclass SavingsAccount extends Account with FileLogger with ShortLogger\n```\n构造顺序\n1. Account // 对象首先调用父类构造器。\n2. Logger // 每个特质中，父特质先构造。\n3. FileLogger // 对象首先调用父类构造器。\n4. ShortLogger // 特质构造顺序和调用顺序相反，由左至右。\n5. SavingsAccount // 所有特质构造器完成，子类再构造。\n\n同样是之前的例子，调用顺序和初始化顺序放到一起打印：\n\n```scala\n//父特质\ntrait Logger {\n  println(\"Logger init\")\n\n  def log(msg: String) {\n    println(\"Logger.log\")\n    println(msg)\n  }\n}\n\n//给日志加时间戳\ntrait TimestampLogger extends Logger {\n  println(\"TimestampLogger init\")\n\n  override def log(msg: String) {\n    println(\"TimestampLogger.log\")\n    super.log(new java.util.Date() + \" \" + msg)\n  }\n}\n\n//截断日志\ntrait ShortLogger extends Logger {\n  println(\"ShortLogger init\")\n\n  val maxLength = 15\n\n  // 特质中的字段，下面会讲\n  override def log(msg: String) {\n    println(\"ShortLogger.log\")\n    super.log(if (msg.length <= maxLength) msg else msg.substring(0, maxLength - 3) + \"...\")\n  }\n}\n\n\nclass Account {\n  println(\"Account init\")\n}\n\nclass SavingsAccount extends Account with TimestampLogger with ShortLogger\n\nobject MyTest10 extends App {\n  val acct = new SavingsAccount\n  println(\"初始化顺序打印完成！下面开始打印调用顺序：\")\n  acct.log(\"1234567890123456\")\n}\n\n// 输出\n// Account init\n// Logger init\n// TimestampLogger init\n// ShortLogger init\n// 初始化顺序打印完成！下面开始打印调用顺序：\n// ShortLogger.log\n// TimestampLogger.log\n// Logger.log\n```\n可见第一轮全部先初始化，第二轮开始调用。顺序正好相反。\n\n线性化是描述某个类型的所有父类型的规范，定义：\n如果C extends C1 with C2 with ... Cn，则 lin(C) = C >> lin(Cn) >> ... >> lin(C2) >> lin(C1)\n“>>”表示串联并去掉重复项，右侧胜出。\n线性化顺序就是之前所说的super调用顺序。\n\n---\n\n### 初始化特质中的字段\n特质不能有构造参数，每个特质都有一个无参的构造函数。\n    \n    缺少构造参数是特质和类的唯一差别\n\n由于特质是无参构造，而且先于子类构造，那么如果想在常规构造之前初始化一些字段时，可以：\n\n```scala\nval acct = new { val filename = \"myapp.log\" } with FileLogger with ShortLogger\n//如果在类中实现\nclass SavingsAccount extends { val filename = \"myapp.log\" } with FileLogger with ShortLogger\n```\n也可以使用lazy值，只是效率不是很高。\n\n---\n\n继承类的特质\n类也可以被特质继承（变态啊）。若如此，该类也将自动成为该特质子类的父类。\n\n```scala\ntrait LoggedException extends Exception with Logger {\n  def log() { log(getMessage()) }\n}\n\nclass UnhappyException extends LoggedException {\n  override def getMessage() = \"arggh\"\n}\n```\n\n\n    | Exception |   | LoggedException |\n            ↖           ↗ \n          | UnhappyException |\n\n如果子类已经有一个父类，那么该父类必须是那个特质父类的子类。\n\n---\n\n### 自身类型\n当特质继承类时，编译器会把所有该特质的子类都认这个类为父类。scala还有另一套机制可以保证这一点：自身类型（self type）。\n定义如下：\n\n```scala\nthis: 类型 =>\n```\n例：\n\n```scala\ntrait LoggedException extends Logger {\n  this: Exception => def log() { log(getMessage()) }\n}\n\nclass UnhappyException extends Exception with LoggedException{\n  override def getMessage() = \"arggh\"\n}\n```\nLoggedException类这样就只能被Exception的子类继承。\n后面会更详细介绍这里自身类型。\n\n* 自身类型就是强制要求一些类型必须是某些类的子类。\n* 还有一种结构类型是强制要求一些类具有种个方法，属于一种轻量的接口。\n\n### 特质的背后\n特质会被翻译成jvm的类和接口。\n\n* 没有具体实现的特质，会直接翻译成java中的接口。\n* 有具体实现的方法scala会帮我们创建一个伴生类，该类用静态方法来存方法。\n* 这些伴生类不会有任何字段，对应的字段用getter和setter方法来表示。\n* 如果特质继承了某个父类，则伴生类不会继承这个父类。这个父类会被所有实现该特质的子类继承。\n\n\n","source":"_posts/scala/Chapter-10-特质.md","raw":"---\ntitle: 'Chapter-10-特质'\ncatalog: true\ndate: 2015-06-22 17:21:29\nheader-img: \"/img/04.jpg\"\ntags: \"scala\"\n---\n\n## Chapter-10-特质\n\n特质 trait 接口 interface \n\n---\n\n### 当做接口使用的特质\n特质的部分功能和java中的接口十分类似。例如：\n\n```scala\ntrait Logger {\n    def log(msg: String) //这个是抽象方法，不要写abstract，特质中默认未实现的方法就是抽象的。\n}\n\nclass ConsoleLogger extends Logger { // 实现Logger。用extends，不是implements\n    def log(msg: String) { println(msg) } // 不需要写override \n}\n```\n如果要实现多个特质，可以用with关键字来串联：\n\n```scala\nclass ConsoleLogger extends Logger with Cloneable with Serializable // 所有的java接口都可以做为scala的特质使用，scala中同样只能有一个父类，但是可以实现多个特质。\n```\n    上面这行代码要解读为Logger with Cloneable with Serializable是一个整体，然后再由ConsoleLogger类继承。\n\n---\n\n### 带有具体实现的特质\n在scala中，特质是可以有实现的。\n\n```scala\ntrait Logger {\n    def log(msg: String) { println(msg) }\n}\n\nclass SavingsAccount extends Logger {\n    def withdraw(amount: Double) {\n        log(\"Insufficeient funds\") // 使用特质中的方法\n    }\n}\n```\n让特质有具体实现有一个弊端，就是特质修改，子类要重新编译。\n\n---\n\n### 使用特质的对象\n\n```scala\nval acct = new SavingsAccount with Logger\nacct.withdraw(1.0)\n// Insufficeient funds\n```\n\n---\n\n### 特质继承顺序\n\n```scala\n//父特质\ntrait Logger {\n  def log(msg: String) {\n    println(\"Logger.log\")\n    println(msg)\n  }\n}\n\n//给日志加时间戳\ntrait TimestampLogger extends Logger {\n  override def log(msg: String) {\n    println(\"TimestampLogger.log\")\n    super.log(new java.util.Date() + \" \" + msg)\n  }\n}\n\n//截断日志\ntrait ShortLogger extends Logger {\n  val maxLength = 15\n\n  // 特质中的字段，下面会讲\n  override def log(msg: String) {\n    println(\"ShortLogger.log\")\n    super.log(if (msg.length <= maxLength) msg else msg.substring(0, maxLength - 3) + \"...\")\n  }\n}\n\nclass SavingsAccount\n\nobject MyTest10 extends App {\n  val acct = new SavingsAccount with TimestampLogger with ShortLogger\n  val acct2 = new SavingsAccount with ShortLogger with TimestampLogger\n  acct.log(\"1234567890123456\")\n  println()\n  acct2.log(\"1234567890123456\")\n}\n// 输出：\n// ShortLogger.log\n// TimestampLogger.log\n// Logger.log\n// Tue Dec 01 10:38:35 CST 2015 123456789012...\n//\n// TimestampLogger.log\n// ShortLogger.log\n// Logger.log\n// Tue Dec 01 1...\n```\n上面代码已经可以看出端倪，当对象使用一串特质时，调用顺序是从后到前（从右至左）的。逐层调用时，如果当前特质的左边没有特质了，那么它的super就会调用自己的父特质。\n\n* spuer的调用关系，取决于特质的顺序。\n* 如果要指定调用父类特质可以：super[TimestampLogger].log(...)。但是只能指定自己的直接父类特质。\n\n以下代码是等价的：\n```scala\nval acct = new SavingsAccount with Logger with TimestampLogger with ShortLogger\n//等价于\nval acct = new SavingsAccount with TimestampLogger with ShortLogger\n```\n\n---\n\n### 在特质中使用抽象方法\n如果在子特质中使用super，而父特质中的方法为抽象方法时，子特质对应的方法要加上override和abstract\n\n```scala\ntrait Logger {\n    def log(msg: String) // 这是个抽象方法\n}\nabstract override def log() {\n    super.log(...)\n}\n```\n\n---\n\n### 模板方法\n\n```scala\ntrait Logger {\n  def log(msg: String)\n  def info(msg: String) { log(\"INFO: \" + msg) }\n  def warn(msg: String) { log(\"WARN: \" + msg) }\n  def error(msg: String) { log(\"ERROR: \" + msg) }\n}\n\nclass SavingsAccount extends Logger {\n  override def log(msg: String) = { println(msg) }\n}\n\nval acct = new SavingsAccount\nacct.error(\"oh my god!\")\n```\n\n---\n\n### 特质中的具体字段\nscala中的特质，字段如果有初始化值就是具体的，反之则为抽象。\n特质中的具体字段不会被子类继承，而只是被简单的添加进去。\n\n```scala\ntrait ShortLogger extends Logger {\n    val maxLength = 15 //具体字段\n}\n\nclass Account {\n    var balance = 0.0\n}\n\nclass SavingsAccount extends Account with ShortLogger {\n    var interest = 0.0\n}\n```\n\n\n    | balance   |  -> 父类对象\n    -------------\n    | interest  |  -> 子类字段\n    | maxLength |  -> 子类字段\n\n具体的特质字段，可以视为是一个装配指令，表示任何混入该字段的子类，都自动拷贝该字段给自己。\n\n---\n\n### 特质中的抽象字段\n\n特质中的未初始化的字段都是抽象的，子类必须重写，但是不用加override关键字。\n\n---\n\n### 特质构造顺序\n特质也有构造器，由字段的初始化和其他语句组成。\n\n```scala\ntrait FileLogger extends Logger {\n    val out = new PrintWriter(\"app.log\") //构造器的一部分\n    out.println(\"# \" + new Date().toString) //同样是物质构造器的一部分\n    def log(msg: String) {...} //不属于构造器的一部分\n}\n```\n构造顺序如下：\n\n* 对象首先调用父类构造器。\n* 特质构造器在父类构造器之后、类构造器之前执行。\n* 特质构造顺序和调用顺序相反，由左至右。\n* 每个特质中，父特质先构造。\n* 如果多个特质共有一个父特质，那么这个父特质在已经构造的情况下，不会再次构造。\n* 所有特质构造器完成，子类再构造。\n\n```scala\nclass SavingsAccount extends Account with FileLogger with ShortLogger\n```\n构造顺序\n1. Account // 对象首先调用父类构造器。\n2. Logger // 每个特质中，父特质先构造。\n3. FileLogger // 对象首先调用父类构造器。\n4. ShortLogger // 特质构造顺序和调用顺序相反，由左至右。\n5. SavingsAccount // 所有特质构造器完成，子类再构造。\n\n同样是之前的例子，调用顺序和初始化顺序放到一起打印：\n\n```scala\n//父特质\ntrait Logger {\n  println(\"Logger init\")\n\n  def log(msg: String) {\n    println(\"Logger.log\")\n    println(msg)\n  }\n}\n\n//给日志加时间戳\ntrait TimestampLogger extends Logger {\n  println(\"TimestampLogger init\")\n\n  override def log(msg: String) {\n    println(\"TimestampLogger.log\")\n    super.log(new java.util.Date() + \" \" + msg)\n  }\n}\n\n//截断日志\ntrait ShortLogger extends Logger {\n  println(\"ShortLogger init\")\n\n  val maxLength = 15\n\n  // 特质中的字段，下面会讲\n  override def log(msg: String) {\n    println(\"ShortLogger.log\")\n    super.log(if (msg.length <= maxLength) msg else msg.substring(0, maxLength - 3) + \"...\")\n  }\n}\n\n\nclass Account {\n  println(\"Account init\")\n}\n\nclass SavingsAccount extends Account with TimestampLogger with ShortLogger\n\nobject MyTest10 extends App {\n  val acct = new SavingsAccount\n  println(\"初始化顺序打印完成！下面开始打印调用顺序：\")\n  acct.log(\"1234567890123456\")\n}\n\n// 输出\n// Account init\n// Logger init\n// TimestampLogger init\n// ShortLogger init\n// 初始化顺序打印完成！下面开始打印调用顺序：\n// ShortLogger.log\n// TimestampLogger.log\n// Logger.log\n```\n可见第一轮全部先初始化，第二轮开始调用。顺序正好相反。\n\n线性化是描述某个类型的所有父类型的规范，定义：\n如果C extends C1 with C2 with ... Cn，则 lin(C) = C >> lin(Cn) >> ... >> lin(C2) >> lin(C1)\n“>>”表示串联并去掉重复项，右侧胜出。\n线性化顺序就是之前所说的super调用顺序。\n\n---\n\n### 初始化特质中的字段\n特质不能有构造参数，每个特质都有一个无参的构造函数。\n    \n    缺少构造参数是特质和类的唯一差别\n\n由于特质是无参构造，而且先于子类构造，那么如果想在常规构造之前初始化一些字段时，可以：\n\n```scala\nval acct = new { val filename = \"myapp.log\" } with FileLogger with ShortLogger\n//如果在类中实现\nclass SavingsAccount extends { val filename = \"myapp.log\" } with FileLogger with ShortLogger\n```\n也可以使用lazy值，只是效率不是很高。\n\n---\n\n继承类的特质\n类也可以被特质继承（变态啊）。若如此，该类也将自动成为该特质子类的父类。\n\n```scala\ntrait LoggedException extends Exception with Logger {\n  def log() { log(getMessage()) }\n}\n\nclass UnhappyException extends LoggedException {\n  override def getMessage() = \"arggh\"\n}\n```\n\n\n    | Exception |   | LoggedException |\n            ↖           ↗ \n          | UnhappyException |\n\n如果子类已经有一个父类，那么该父类必须是那个特质父类的子类。\n\n---\n\n### 自身类型\n当特质继承类时，编译器会把所有该特质的子类都认这个类为父类。scala还有另一套机制可以保证这一点：自身类型（self type）。\n定义如下：\n\n```scala\nthis: 类型 =>\n```\n例：\n\n```scala\ntrait LoggedException extends Logger {\n  this: Exception => def log() { log(getMessage()) }\n}\n\nclass UnhappyException extends Exception with LoggedException{\n  override def getMessage() = \"arggh\"\n}\n```\nLoggedException类这样就只能被Exception的子类继承。\n后面会更详细介绍这里自身类型。\n\n* 自身类型就是强制要求一些类型必须是某些类的子类。\n* 还有一种结构类型是强制要求一些类具有种个方法，属于一种轻量的接口。\n\n### 特质的背后\n特质会被翻译成jvm的类和接口。\n\n* 没有具体实现的特质，会直接翻译成java中的接口。\n* 有具体实现的方法scala会帮我们创建一个伴生类，该类用静态方法来存方法。\n* 这些伴生类不会有任何字段，对应的字段用getter和setter方法来表示。\n* 如果特质继承了某个父类，则伴生类不会继承这个父类。这个父类会被所有实现该特质的子类继承。\n\n\n","slug":"scala/Chapter-10-特质","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrhz001vj5lytxco4vq8","content":"<h2><span id=\"chapter-10-特质\"> Chapter-10-特质</span></h2>\n<p>特质 trait 接口 interface</p>\n<hr>\n<h3><span id=\"当做接口使用的特质\"> 当做接口使用的特质</span></h3>\n<p>特质的部分功能和java中的接口十分类似。例如：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) <span class=\"comment\">//这个是抽象方法，不要写abstract，特质中默认未实现的方法就是抽象的。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsoleLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; <span class=\"comment\">// 实现Logger。用extends，不是implements</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123; println(msg) &#125; <span class=\"comment\">// 不需要写override </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要实现多个特质，可以用with关键字来串联：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsoleLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> <span class=\"keyword\">with</span> <span class=\"title\">Cloneable</span> <span class=\"keyword\">with</span> <span class=\"title\">Serializable</span> <span class=\"title\">//</span> <span class=\"title\">所有的java接口都可以做为scala的特质使用，scala中同样只能有一个父类，但是可以实现多个特质。</span></span></span><br></pre></td></tr></table></figure>\n<pre><code>上面这行代码要解读为Logger with Cloneable with Serializable是一个整体，然后再由ConsoleLogger类继承。\n</code></pre>\n<hr>\n<h3><span id=\"带有具体实现的特质\"> 带有具体实现的特质</span></h3>\n<p>在scala中，特质是可以有实现的。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123; println(msg) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">withdraw</span></span>(amount: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        log(<span class=\"string\">\"Insufficeient funds\"</span>) <span class=\"comment\">// 使用特质中的方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让特质有具体实现有一个弊端，就是特质修改，子类要重新编译。</p>\n<hr>\n<h3><span id=\"使用特质的对象\"> 使用特质的对象</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">Logger</span></span><br><span class=\"line\">acct.withdraw(<span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"comment\">// Insufficeient funds</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3><span id=\"特质继承顺序\"> 特质继承顺序</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父特质</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"Logger.log\"</span>)</span><br><span class=\"line\">    println(msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给日志加时间戳</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">TimestampLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"TimestampLogger.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(<span class=\"keyword\">new</span> java.util.<span class=\"type\">Date</span>() + <span class=\"string\">\" \"</span> + msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//截断日志</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">ShortLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> maxLength = <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 特质中的字段，下面会讲</span></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"ShortLogger.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(<span class=\"keyword\">if</span> (msg.length &lt;= maxLength) msg <span class=\"keyword\">else</span> msg.substring(<span class=\"number\">0</span>, maxLength - <span class=\"number\">3</span>) + <span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">object</span> <span class=\"title\">MyTest10</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">TimestampLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> acct2 = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">TimestampLogger</span></span><br><span class=\"line\">  acct.log(<span class=\"string\">\"1234567890123456\"</span>)</span><br><span class=\"line\">  println()</span><br><span class=\"line\">  acct2.log(<span class=\"string\">\"1234567890123456\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// ShortLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// TimestampLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Logger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Tue Dec 01 10:38:35 CST 2015 123456789012...</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// TimestampLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// ShortLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Logger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Tue Dec 01 1...</span></span><br></pre></td></tr></table></figure>\n<p>上面代码已经可以看出端倪，当对象使用一串特质时，调用顺序是从后到前（从右至左）的。逐层调用时，如果当前特质的左边没有特质了，那么它的super就会调用自己的父特质。</p>\n<ul>\n<li>spuer的调用关系，取决于特质的顺序。</li>\n<li>如果要指定调用父类特质可以：super[TimestampLogger].log(…)。但是只能指定自己的直接父类特质。</li>\n</ul>\n<p>以下代码是等价的：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">Logger</span> <span class=\"keyword\">with</span> <span class=\"type\">TimestampLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">TimestampLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3><span id=\"在特质中使用抽象方法\"> 在特质中使用抽象方法</span></h3>\n<p>如果在子特质中使用super，而父特质中的方法为抽象方法时，子特质对应的方法要加上override和abstract</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) <span class=\"comment\">// 这是个抽象方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3><span id=\"模板方法\"> 模板方法</span></h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span></span>(msg: <span class=\"type\">String</span>) &#123; log(<span class=\"string\">\"INFO: \"</span> + msg) &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">warn</span></span>(msg: <span class=\"type\">String</span>) &#123; log(<span class=\"string\">\"WARN: \"</span> + msg) &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">error</span></span>(msg: <span class=\"type\">String</span>) &#123; log(<span class=\"string\">\"ERROR: \"</span> + msg) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) = &#123; println(msg) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span></span><br><span class=\"line\">acct.error(<span class=\"string\">\"oh my god!\"</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3><span id=\"特质中的具体字段\"> 特质中的具体字段</span></h3>\n<p>scala中的特质，字段如果有初始化值就是具体的，反之则为抽象。<br>\n特质中的具体字段不会被子类继承，而只是被简单的添加进去。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">ShortLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> maxLength = <span class=\"number\">15</span> <span class=\"comment\">//具体字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> balance = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Account</span> <span class=\"keyword\">with</span> <span class=\"title\">ShortLogger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> interest = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>| balance   |  -&gt; 父类对象\n-------------\n| interest  |  -&gt; 子类字段\n| maxLength |  -&gt; 子类字段\n</code></pre>\n<p>具体的特质字段，可以视为是一个装配指令，表示任何混入该字段的子类，都自动拷贝该字段给自己。</p>\n<hr>\n<h3><span id=\"特质中的抽象字段\"> 特质中的抽象字段</span></h3>\n<p>特质中的未初始化的字段都是抽象的，子类必须重写，但是不用加override关键字。</p>\n<hr>\n<h3><span id=\"特质构造顺序\"> 特质构造顺序</span></h3>\n<p>特质也有构造器，由字段的初始化和其他语句组成。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">FileLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> out = <span class=\"keyword\">new</span> <span class=\"type\">PrintWriter</span>(<span class=\"string\">\"app.log\"</span>) <span class=\"comment\">//构造器的一部分</span></span><br><span class=\"line\">    out.println(<span class=\"string\">\"# \"</span> + <span class=\"keyword\">new</span> <span class=\"type\">Date</span>().toString) <span class=\"comment\">//同样是物质构造器的一部分</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;...&#125; <span class=\"comment\">//不属于构造器的一部分</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造顺序如下：</p>\n<ul>\n<li>对象首先调用父类构造器。</li>\n<li>特质构造器在父类构造器之后、类构造器之前执行。</li>\n<li>特质构造顺序和调用顺序相反，由左至右。</li>\n<li>每个特质中，父特质先构造。</li>\n<li>如果多个特质共有一个父特质，那么这个父特质在已经构造的情况下，不会再次构造。</li>\n<li>所有特质构造器完成，子类再构造。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Account</span> <span class=\"keyword\">with</span> <span class=\"title\">FileLogger</span> <span class=\"keyword\">with</span> <span class=\"title\">ShortLogger</span></span></span><br></pre></td></tr></table></figure>\n<p>构造顺序</p>\n<ol>\n<li>Account // 对象首先调用父类构造器。</li>\n<li>Logger // 每个特质中，父特质先构造。</li>\n<li>FileLogger // 对象首先调用父类构造器。</li>\n<li>ShortLogger // 特质构造顺序和调用顺序相反，由左至右。</li>\n<li>SavingsAccount // 所有特质构造器完成，子类再构造。</li>\n</ol>\n<p>同样是之前的例子，调用顺序和初始化顺序放到一起打印：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父特质</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"Logger init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"Logger.log\"</span>)</span><br><span class=\"line\">    println(msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给日志加时间戳</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">TimestampLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"TimestampLogger init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"TimestampLogger.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(<span class=\"keyword\">new</span> java.util.<span class=\"type\">Date</span>() + <span class=\"string\">\" \"</span> + msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//截断日志</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">ShortLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"ShortLogger init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">val</span> maxLength = <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 特质中的字段，下面会讲</span></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"ShortLogger.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(<span class=\"keyword\">if</span> (msg.length &lt;= maxLength) msg <span class=\"keyword\">else</span> msg.substring(<span class=\"number\">0</span>, maxLength - <span class=\"number\">3</span>) + <span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"Account init\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Account</span> <span class=\"keyword\">with</span> <span class=\"title\">TimestampLogger</span> <span class=\"keyword\">with</span> <span class=\"title\">ShortLogger</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">object</span> <span class=\"title\">MyTest10</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span></span><br><span class=\"line\">  println(<span class=\"string\">\"初始化顺序打印完成！下面开始打印调用顺序：\"</span>)</span><br><span class=\"line\">  acct.log(<span class=\"string\">\"1234567890123456\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// Account init</span></span><br><span class=\"line\"><span class=\"comment\">// Logger init</span></span><br><span class=\"line\"><span class=\"comment\">// TimestampLogger init</span></span><br><span class=\"line\"><span class=\"comment\">// ShortLogger init</span></span><br><span class=\"line\"><span class=\"comment\">// 初始化顺序打印完成！下面开始打印调用顺序：</span></span><br><span class=\"line\"><span class=\"comment\">// ShortLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// TimestampLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Logger.log</span></span><br></pre></td></tr></table></figure>\n<p>可见第一轮全部先初始化，第二轮开始调用。顺序正好相反。</p>\n<p>线性化是描述某个类型的所有父类型的规范，定义：<br>\n如果C extends C1 with C2 with … Cn，则 lin© = C &gt;&gt; lin(Cn) &gt;&gt; … &gt;&gt; lin(C2) &gt;&gt; lin(C1)<br>\n“&gt;&gt;”表示串联并去掉重复项，右侧胜出。<br>\n线性化顺序就是之前所说的super调用顺序。</p>\n<hr>\n<h3><span id=\"初始化特质中的字段\"> 初始化特质中的字段</span></h3>\n<p>特质不能有构造参数，每个特质都有一个无参的构造函数。</p>\n<pre><code>缺少构造参数是特质和类的唯一差别\n</code></pre>\n<p>由于特质是无参构造，而且先于子类构造，那么如果想在常规构造之前初始化一些字段时，可以：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> &#123; <span class=\"keyword\">val</span> filename = <span class=\"string\">\"myapp.log\"</span> &#125; <span class=\"keyword\">with</span> <span class=\"type\">FileLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br><span class=\"line\"><span class=\"comment\">//如果在类中实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> </span>&#123; <span class=\"keyword\">val</span> filename = <span class=\"string\">\"myapp.log\"</span> &#125; <span class=\"keyword\">with</span> <span class=\"type\">FileLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用lazy值，只是效率不是很高。</p>\n<hr>\n<p>继承类的特质<br>\n类也可以被特质继承（变态啊）。若如此，该类也将自动成为该特质子类的父类。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">LoggedException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> <span class=\"keyword\">with</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>() &#123; log(getMessage()) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnhappyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">LoggedException</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMessage</span></span>() = <span class=\"string\">\"arggh\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>| Exception |   | LoggedException |\n        ↖           ↗ \n      | UnhappyException |\n</code></pre>\n<p>如果子类已经有一个父类，那么该父类必须是那个特质父类的子类。</p>\n<hr>\n<h3><span id=\"自身类型\"> 自身类型</span></h3>\n<p>当特质继承类时，编译器会把所有该特质的子类都认这个类为父类。scala还有另一套机制可以保证这一点：自身类型（self type）。<br>\n定义如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>: 类型 =&gt;</span><br></pre></td></tr></table></figure>\n<p>例：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">LoggedException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>: <span class=\"type\">Exception</span> =&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>() &#123; log(getMessage()) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnhappyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> <span class=\"keyword\">with</span> <span class=\"title\">LoggedException</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMessage</span></span>() = <span class=\"string\">\"arggh\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LoggedException类这样就只能被Exception的子类继承。<br>\n后面会更详细介绍这里自身类型。</p>\n<ul>\n<li>自身类型就是强制要求一些类型必须是某些类的子类。</li>\n<li>还有一种结构类型是强制要求一些类具有种个方法，属于一种轻量的接口。</li>\n</ul>\n<h3><span id=\"特质的背后\"> 特质的背后</span></h3>\n<p>特质会被翻译成jvm的类和接口。</p>\n<ul>\n<li>没有具体实现的特质，会直接翻译成java中的接口。</li>\n<li>有具体实现的方法scala会帮我们创建一个伴生类，该类用静态方法来存方法。</li>\n<li>这些伴生类不会有任何字段，对应的字段用getter和setter方法来表示。</li>\n<li>如果特质继承了某个父类，则伴生类不会继承这个父类。这个父类会被所有实现该特质的子类继承。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"chapter-10-特质\"><a class=\"markdownIt-Anchor\" href=\"#chapter-10-特质\"></a> Chapter-10-特质</h2>\n<p>特质 trait 接口 interface</p>\n<hr>\n<h3 id=\"当做接口使用的特质\"><a class=\"markdownIt-Anchor\" href=\"#当做接口使用的特质\"></a> 当做接口使用的特质</h3>\n<p>特质的部分功能和java中的接口十分类似。例如：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) <span class=\"comment\">//这个是抽象方法，不要写abstract，特质中默认未实现的方法就是抽象的。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsoleLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123; <span class=\"comment\">// 实现Logger。用extends，不是implements</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123; println(msg) &#125; <span class=\"comment\">// 不需要写override </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要实现多个特质，可以用with关键字来串联：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsoleLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> <span class=\"keyword\">with</span> <span class=\"title\">Cloneable</span> <span class=\"keyword\">with</span> <span class=\"title\">Serializable</span> <span class=\"title\">//</span> <span class=\"title\">所有的java接口都可以做为scala的特质使用，scala中同样只能有一个父类，但是可以实现多个特质。</span></span></span><br></pre></td></tr></table></figure>\n<pre><code>上面这行代码要解读为Logger with Cloneable with Serializable是一个整体，然后再由ConsoleLogger类继承。\n</code></pre>\n<hr>\n<h3 id=\"带有具体实现的特质\"><a class=\"markdownIt-Anchor\" href=\"#带有具体实现的特质\"></a> 带有具体实现的特质</h3>\n<p>在scala中，特质是可以有实现的。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123; println(msg) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">withdraw</span></span>(amount: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\">        log(<span class=\"string\">\"Insufficeient funds\"</span>) <span class=\"comment\">// 使用特质中的方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让特质有具体实现有一个弊端，就是特质修改，子类要重新编译。</p>\n<hr>\n<h3 id=\"使用特质的对象\"><a class=\"markdownIt-Anchor\" href=\"#使用特质的对象\"></a> 使用特质的对象</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">Logger</span></span><br><span class=\"line\">acct.withdraw(<span class=\"number\">1.0</span>)</span><br><span class=\"line\"><span class=\"comment\">// Insufficeient funds</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"特质继承顺序\"><a class=\"markdownIt-Anchor\" href=\"#特质继承顺序\"></a> 特质继承顺序</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父特质</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"Logger.log\"</span>)</span><br><span class=\"line\">    println(msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给日志加时间戳</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">TimestampLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"TimestampLogger.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(<span class=\"keyword\">new</span> java.util.<span class=\"type\">Date</span>() + <span class=\"string\">\" \"</span> + msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//截断日志</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">ShortLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> maxLength = <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 特质中的字段，下面会讲</span></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"ShortLogger.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(<span class=\"keyword\">if</span> (msg.length &lt;= maxLength) msg <span class=\"keyword\">else</span> msg.substring(<span class=\"number\">0</span>, maxLength - <span class=\"number\">3</span>) + <span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">object</span> <span class=\"title\">MyTest10</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">TimestampLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> acct2 = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">TimestampLogger</span></span><br><span class=\"line\">  acct.log(<span class=\"string\">\"1234567890123456\"</span>)</span><br><span class=\"line\">  println()</span><br><span class=\"line\">  acct2.log(<span class=\"string\">\"1234567890123456\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// ShortLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// TimestampLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Logger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Tue Dec 01 10:38:35 CST 2015 123456789012...</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// TimestampLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// ShortLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Logger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Tue Dec 01 1...</span></span><br></pre></td></tr></table></figure>\n<p>上面代码已经可以看出端倪，当对象使用一串特质时，调用顺序是从后到前（从右至左）的。逐层调用时，如果当前特质的左边没有特质了，那么它的super就会调用自己的父特质。</p>\n<ul>\n<li>spuer的调用关系，取决于特质的顺序。</li>\n<li>如果要指定调用父类特质可以：super[TimestampLogger].log(…)。但是只能指定自己的直接父类特质。</li>\n</ul>\n<p>以下代码是等价的：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">Logger</span> <span class=\"keyword\">with</span> <span class=\"type\">TimestampLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span> <span class=\"keyword\">with</span> <span class=\"type\">TimestampLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"在特质中使用抽象方法\"><a class=\"markdownIt-Anchor\" href=\"#在特质中使用抽象方法\"></a> 在特质中使用抽象方法</h3>\n<p>如果在子特质中使用super，而父特质中的方法为抽象方法时，子特质对应的方法要加上override和abstract</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) <span class=\"comment\">// 这是个抽象方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"模板方法\"><a class=\"markdownIt-Anchor\" href=\"#模板方法\"></a> 模板方法</h3>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span></span>(msg: <span class=\"type\">String</span>) &#123; log(<span class=\"string\">\"INFO: \"</span> + msg) &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">warn</span></span>(msg: <span class=\"type\">String</span>) &#123; log(<span class=\"string\">\"WARN: \"</span> + msg) &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">error</span></span>(msg: <span class=\"type\">String</span>) &#123; log(<span class=\"string\">\"ERROR: \"</span> + msg) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) = &#123; println(msg) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span></span><br><span class=\"line\">acct.error(<span class=\"string\">\"oh my god!\"</span>)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"特质中的具体字段\"><a class=\"markdownIt-Anchor\" href=\"#特质中的具体字段\"></a> 特质中的具体字段</h3>\n<p>scala中的特质，字段如果有初始化值就是具体的，反之则为抽象。<br>\n特质中的具体字段不会被子类继承，而只是被简单的添加进去。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">ShortLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> maxLength = <span class=\"number\">15</span> <span class=\"comment\">//具体字段</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> balance = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Account</span> <span class=\"keyword\">with</span> <span class=\"title\">ShortLogger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> interest = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>| balance   |  -&gt; 父类对象\n-------------\n| interest  |  -&gt; 子类字段\n| maxLength |  -&gt; 子类字段\n</code></pre>\n<p>具体的特质字段，可以视为是一个装配指令，表示任何混入该字段的子类，都自动拷贝该字段给自己。</p>\n<hr>\n<h3 id=\"特质中的抽象字段\"><a class=\"markdownIt-Anchor\" href=\"#特质中的抽象字段\"></a> 特质中的抽象字段</h3>\n<p>特质中的未初始化的字段都是抽象的，子类必须重写，但是不用加override关键字。</p>\n<hr>\n<h3 id=\"特质构造顺序\"><a class=\"markdownIt-Anchor\" href=\"#特质构造顺序\"></a> 特质构造顺序</h3>\n<p>特质也有构造器，由字段的初始化和其他语句组成。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">FileLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> out = <span class=\"keyword\">new</span> <span class=\"type\">PrintWriter</span>(<span class=\"string\">\"app.log\"</span>) <span class=\"comment\">//构造器的一部分</span></span><br><span class=\"line\">    out.println(<span class=\"string\">\"# \"</span> + <span class=\"keyword\">new</span> <span class=\"type\">Date</span>().toString) <span class=\"comment\">//同样是物质构造器的一部分</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;...&#125; <span class=\"comment\">//不属于构造器的一部分</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造顺序如下：</p>\n<ul>\n<li>对象首先调用父类构造器。</li>\n<li>特质构造器在父类构造器之后、类构造器之前执行。</li>\n<li>特质构造顺序和调用顺序相反，由左至右。</li>\n<li>每个特质中，父特质先构造。</li>\n<li>如果多个特质共有一个父特质，那么这个父特质在已经构造的情况下，不会再次构造。</li>\n<li>所有特质构造器完成，子类再构造。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Account</span> <span class=\"keyword\">with</span> <span class=\"title\">FileLogger</span> <span class=\"keyword\">with</span> <span class=\"title\">ShortLogger</span></span></span><br></pre></td></tr></table></figure>\n<p>构造顺序</p>\n<ol>\n<li>Account // 对象首先调用父类构造器。</li>\n<li>Logger // 每个特质中，父特质先构造。</li>\n<li>FileLogger // 对象首先调用父类构造器。</li>\n<li>ShortLogger // 特质构造顺序和调用顺序相反，由左至右。</li>\n<li>SavingsAccount // 所有特质构造器完成，子类再构造。</li>\n</ol>\n<p>同样是之前的例子，调用顺序和初始化顺序放到一起打印：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父特质</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"Logger init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"Logger.log\"</span>)</span><br><span class=\"line\">    println(msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给日志加时间戳</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">TimestampLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"TimestampLogger init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"TimestampLogger.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(<span class=\"keyword\">new</span> java.util.<span class=\"type\">Date</span>() + <span class=\"string\">\" \"</span> + msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//截断日志</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">ShortLogger</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"ShortLogger init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">val</span> maxLength = <span class=\"number\">15</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 特质中的字段，下面会讲</span></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(msg: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"ShortLogger.log\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.log(<span class=\"keyword\">if</span> (msg.length &lt;= maxLength) msg <span class=\"keyword\">else</span> msg.substring(<span class=\"number\">0</span>, maxLength - <span class=\"number\">3</span>) + <span class=\"string\">\"...\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"Account init\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> <span class=\"title\">Account</span> <span class=\"keyword\">with</span> <span class=\"title\">TimestampLogger</span> <span class=\"keyword\">with</span> <span class=\"title\">ShortLogger</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">object</span> <span class=\"title\">MyTest10</span> <span class=\"keyword\">extends</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> <span class=\"type\">SavingsAccount</span></span><br><span class=\"line\">  println(<span class=\"string\">\"初始化顺序打印完成！下面开始打印调用顺序：\"</span>)</span><br><span class=\"line\">  acct.log(<span class=\"string\">\"1234567890123456\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// Account init</span></span><br><span class=\"line\"><span class=\"comment\">// Logger init</span></span><br><span class=\"line\"><span class=\"comment\">// TimestampLogger init</span></span><br><span class=\"line\"><span class=\"comment\">// ShortLogger init</span></span><br><span class=\"line\"><span class=\"comment\">// 初始化顺序打印完成！下面开始打印调用顺序：</span></span><br><span class=\"line\"><span class=\"comment\">// ShortLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// TimestampLogger.log</span></span><br><span class=\"line\"><span class=\"comment\">// Logger.log</span></span><br></pre></td></tr></table></figure>\n<p>可见第一轮全部先初始化，第二轮开始调用。顺序正好相反。</p>\n<p>线性化是描述某个类型的所有父类型的规范，定义：<br>\n如果C extends C1 with C2 with … Cn，则 lin© = C &gt;&gt; lin(Cn) &gt;&gt; … &gt;&gt; lin(C2) &gt;&gt; lin(C1)<br>\n“&gt;&gt;”表示串联并去掉重复项，右侧胜出。<br>\n线性化顺序就是之前所说的super调用顺序。</p>\n<hr>\n<h3 id=\"初始化特质中的字段\"><a class=\"markdownIt-Anchor\" href=\"#初始化特质中的字段\"></a> 初始化特质中的字段</h3>\n<p>特质不能有构造参数，每个特质都有一个无参的构造函数。</p>\n<pre><code>缺少构造参数是特质和类的唯一差别\n</code></pre>\n<p>由于特质是无参构造，而且先于子类构造，那么如果想在常规构造之前初始化一些字段时，可以：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> acct = <span class=\"keyword\">new</span> &#123; <span class=\"keyword\">val</span> filename = <span class=\"string\">\"myapp.log\"</span> &#125; <span class=\"keyword\">with</span> <span class=\"type\">FileLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br><span class=\"line\"><span class=\"comment\">//如果在类中实现</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SavingsAccount</span> <span class=\"keyword\">extends</span> </span>&#123; <span class=\"keyword\">val</span> filename = <span class=\"string\">\"myapp.log\"</span> &#125; <span class=\"keyword\">with</span> <span class=\"type\">FileLogger</span> <span class=\"keyword\">with</span> <span class=\"type\">ShortLogger</span></span><br></pre></td></tr></table></figure>\n<p>也可以使用lazy值，只是效率不是很高。</p>\n<hr>\n<p>继承类的特质<br>\n类也可以被特质继承（变态啊）。若如此，该类也将自动成为该特质子类的父类。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">LoggedException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> <span class=\"keyword\">with</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>() &#123; log(getMessage()) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnhappyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">LoggedException</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMessage</span></span>() = <span class=\"string\">\"arggh\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>| Exception |   | LoggedException |\n        ↖           ↗ \n      | UnhappyException |\n</code></pre>\n<p>如果子类已经有一个父类，那么该父类必须是那个特质父类的子类。</p>\n<hr>\n<h3 id=\"自身类型\"><a class=\"markdownIt-Anchor\" href=\"#自身类型\"></a> 自身类型</h3>\n<p>当特质继承类时，编译器会把所有该特质的子类都认这个类为父类。scala还有另一套机制可以保证这一点：自身类型（self type）。<br>\n定义如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>: 类型 =&gt;</span><br></pre></td></tr></table></figure>\n<p>例：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">LoggedException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>: <span class=\"type\">Exception</span> =&gt; <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>() &#123; log(getMessage()) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnhappyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> <span class=\"keyword\">with</span> <span class=\"title\">LoggedException</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMessage</span></span>() = <span class=\"string\">\"arggh\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LoggedException类这样就只能被Exception的子类继承。<br>\n后面会更详细介绍这里自身类型。</p>\n<ul>\n<li>自身类型就是强制要求一些类型必须是某些类的子类。</li>\n<li>还有一种结构类型是强制要求一些类具有种个方法，属于一种轻量的接口。</li>\n</ul>\n<h3 id=\"特质的背后\"><a class=\"markdownIt-Anchor\" href=\"#特质的背后\"></a> 特质的背后</h3>\n<p>特质会被翻译成jvm的类和接口。</p>\n<ul>\n<li>没有具体实现的特质，会直接翻译成java中的接口。</li>\n<li>有具体实现的方法scala会帮我们创建一个伴生类，该类用静态方法来存方法。</li>\n<li>这些伴生类不会有任何字段，对应的字段用getter和setter方法来表示。</li>\n<li>如果特质继承了某个父类，则伴生类不会继承这个父类。这个父类会被所有实现该特质的子类继承。</li>\n</ul>\n"},{"title":"书法 - 横竖","catalog":true,"date":"2018-03-25T14:20:20.000Z","subtitle":"笔画一","header-img":"/img/03.jpg","_content":"\n\n# 横的写法\n## 横的起笔\n### 露锋一面起笔\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219553992280.jpg)\n\n### 两面换\n\n两面换，尤其是 9—6 或者 9—3，是写横最常用的起笔。它是用侧锋写的，起笔、行笔用了侧锋的两个侧面。\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219555117303.jpg)\n\n两面换还可以起到侧锋的开锋作用。以前我们讲过尖锋打开，就 是开锋，是来回摩擦，侧锋的开锋，也就是从一分笔到二分笔，或者是到三分笔。那么侧锋怎么使它打开呢？当然你向下按也可以。但是，一个比较简单的方法是用两面换。只要用手腕扭动一下中线，侧锋就可以由细变粗了。\n\n### 三面换\n\n这个王羲之《兰亭序》中的“一” 字，它的起笔就动了两次 手腕，用了三个面，7—6 —3，那手腕的位置，就 左—中—右。7 是左，入 纸动作，6 是中，手腕在中，笔管这时候是直的。然后换 3 号方向行笔。\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219558259237.jpg)\n\n### 四面换\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219560402939.jpg)\n\n### 藏锋起笔\n\n通常采 用的方法就是：侧锋下纸是倒方向， 然后转过来覆盖掉这个尖，这样就看不见尖锋的痕迹了。这个方法，严格说不是正确的藏锋，是模拟藏锋的效果。\n\n在篆书和隶书中，横笔往往是藏锋起笔。欲右先左，欲下先上。\n这是对侧锋线而言。尖锋线用不到这样麻烦。\n\n蚕头藏锋，就是转两圈。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219562003959.jpg)\n\n## 横的行笔\n两类，一是尖锋行笔， 二是侧锋行笔。\n### 尖锋行笔：趯锋\n尖锋在直管情况下，如果力量够大，推动笔尖就是趯锋。这是阴符经中的“在”字，箭 头所指的一横，就是趯锋写的尖锋线。\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219567623425.jpg)\n\n“尖锋的用法”，先介绍了用拖的方法使用尖锋，这时手腕向右，这是不跳跃的写法，笔力小。\n\n“尖锋线的本质”中，讲了趯锋的写法，趯锋如锥划石，力透纸背， 当然是更好的技巧。这时笔管尽量保持垂直，推动笔尖，所以尖锋也是可推可拖，而趯锋是基本的技法。\n\n### 侧锋行笔：拖\n手腕向右是拖行，手腕向左是推行。\n拖的摩擦力虽然没有推大，但也有 好处：譬如写很粗的线条，三分笔，拖就比较容易。如果用推去写粗 线条，尖锋就容易散掉。写完以后，还要去收拾整理尖锋。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219568435200.jpg)\n\n### 尖锋、侧锋混合行笔\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219569431168.jpg)\n\n右横左竖：线条是手腕运动的记录。 横的起笔：露锋和藏锋。 横的行笔：尖锋和侧锋，推和拖。\n\n## 横的收笔\n* 一是为了通过变动中线，来增加姿态；\n* 二是收直笔心，聚集尖锋， 以便写下一笔。无须再到砚台上掭笔理毫。\n\n### 两面锋收笔\n* 6—6—9\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219572449891.jpg)  ![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219572726190.jpg)\n\n* 9—6—9\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219573827031.jpg)\n\n* 9—3—9\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219574535508.jpg)\n9—6—9上下的距离比较宽，如果我们改用 9 —3—9，就是行笔向右上方向，那么， 上下的距离就比较窄了。9—6—9 和 9—3—9 都是常用的。\n\n#### “尖锋到尾”和“尖锋不到尾”\n手腕尽量向左，迫使尖锋向前行。如果手腕向左的角度小，尖锋就只会走一点点，这是左面这个图。\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219577146738.jpg)\n\n\n当转入 9 号位收尾的时候， 手腕尽量向左，幅度比较大，这个时候，笔尖就拉到尾巴了。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219578541056.jpg)\n\n##### 补尾巴 - 尖峰向前推\n尖锋线的尾巴是圆的，侧锋线的尾巴是断的。侧锋线用的机会比较多，这样一来，就会出现很多断尾的线条。断笔线条太多，会有粗糙的感觉。就要去补上这个尾巴。\n尖锋线是不用补尾巴的， 因为尖锋线本身就是圆点， 不用做什么动作。最多只要扭直笔心就可以收笔了。\n\n就是把尖锋向前移动，具体来说，只要手腕 向左，尖锋就会向右，这样尾巴就补上了，不再是断笔了。\n\n##### 补尾巴 - 回直笔心\n\n也可以写了挫笔之后，先收直笔心。也就是回到 5 号位，然后再次向前行。这就容易多了。\n\n这种先退回到 5 号位，然后重新向前的方法，在书法中是常见的。\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219592821411.jpg)\n\n只不过这次动作做得多了点，这尾巴是最后装上去的。从中线来看，这也是一个三面换。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219595676216.jpg)\n\n### 三面锋收笔\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219596596078.jpg)\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219598144869.jpg)\n\n## 总结\n\n变动中线可以增强姿态。 相反运动可以收直笔心。\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219599528468.jpg)\n\n\n# 竖的写法\n## 竖笔的起笔\n### 一面锋起笔\n一面锋起笔， 因为简单， 所以写起来 速度快。常见于行草书中。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219855002035.jpg)\n\n### 两面换起笔\n两面换姿态好过一面锋，还便于开锋。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219854334546.jpg)\n\n### 三面换起笔\n三面换往往用在一个字 的左边第一竖，或者一个笔势的左边第一竖。 不过，这个规则也不是绝对的。三面换太多，会有花巧的感觉。一个字里边一般最多出现一两次。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219854604684.jpg)\n\n还有横向入纸的，就是 6 号位入纸。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219856833717.jpg)\n\n### 藏锋起笔\n\n**如果用尖锋垂直下纸，就是一个圆点，这是标准的藏锋，看不见锋尖。** 如果侧锋线想要圆头起笔，通常采用的方法就是：侧锋下纸是倒方向，然后转过来覆盖掉这个尖。 这样就看不见尖锋的痕迹了。转的方向，顺时针、逆时针都可以。\n\n这个方法，严格说只是模拟藏锋的效果。这种倒转一圈的方法，又称为**“藏头”**。篆书中和隶书中就开始使用了，影响到后来的书体。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219858972916.jpg)\n\n### 四面换\n\n有转两圈的方法， 来之于隶书“蚕 头”起笔法。横笔是“下上左右”。竖笔是“右左上下”，等于画了一个十字。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219859430332.jpg)\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219859611286.jpg)\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219861092348.jpg)\n\n## 竖的行笔\n### 尖锋一竖\n尖锋行笔，也是趯锋。\n通常竖笔往往写得比横笔粗，但在褚体中，一竖经常会用尖锋去写。这是褚体的一个特点。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219861467711.jpg)\n\n### 侧锋线\n写一竖也可以用侧锋线去写。要记得侧锋线分一、二三分笔。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219862961928.jpg)\n\n我们用右手写字，竖笔行笔会本能偏“右”，因为起笔是右行笔时手腕要扭向“左”来加以调整。这样子写下来， 就是中锋了。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219864307555.jpg)\n\n### 尖锋、侧锋混合行笔\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219865686936.jpg)\n\n* 竖的起笔和行笔各种写法 \n* 手腕“中”不等于竖笔“中” \n* 变动中线，增加姿态。\n\n## 竖的收笔\n竖笔行笔时手腕向左，所以收笔是手腕向右。\n### 尖锋线：圆尾\n\n简单收笔讲起。一是使用尖锋写下来。也就是趯锋，等于一连串圆点。这个情况没什么特别的收笔动作，因为最后也是一个圆点。 唯一要做的，就是把行笔时弯曲的笔心收直。\n\n### 侧锋线：断尾\n侧锋写下来，那就是以挫笔收。挫笔收尾，只要手腕做相反运动，就可以收直笔心。 加一个抢，就可以避免墨汁积聚一点。\n\n### 两面锋收尾：变动中线\n![-w500](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219871545981.jpg)\n\n其实这两笔的收锋动作是一样的，都是右左右，它们的不同，是 中线曲折的幅度不同。当右左右的动作减小，中线就逐渐接近于直线。 这时候你手腕向右，等于把尖锋**逼到**左面。 这个“号”字，我用红色标示出来的两个竖笔，A 这一竖，收笔手腕动作大， 尖锋到尾，是拉到右面来的。B 这一竖， 中线接近于直线，结果把尖锋逼到左面了。 在王羲之系统的书法家中，这种尖锋到尾经常可以见到。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219872624996.jpg)\n\n### 三面换收尾：一来一回\n右左右左，笔心就可以收直了。收笔一来一回，古人称之为“顿笔”。《玉堂禁经》说：“一曰顿笔，摧锋骤衄是也，则努法下脚用之。”\n\n一推一衄， 一下一上，就达到收笔之目的。有人想，现在流行的术语叫“回 锋”。不止于竖笔，你写一横到尾，一去一回收锋，都是“顿笔”。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219873842545.jpg)\n\n**竖笔的收笔：**\n\n* 圆尾、断尾、尖尾 \n* 竖的行笔手向左，收笔就要向右\n* 所谓顿笔，就是一下一上，一推一衄。\n\n**示范：**\n\n* 第一种，尖锋线，下笔用尖锋顶住纸，趯锋行笔，手在左面，写 完了手向右，就是收笔。 \n* 第二个侧锋，可以两面换起笔，用 9—8，9—8 挫笔下去，手 向右收笔，加一个 3 号位抢。 \n* 第三种是尖锋到尾，9—8—9。向右拉，这尖锋在右面。 \n* 第四种，动作是一样的，中线是直线，9—8，手向右，直线走， 尖锋在左面。 \n* 第五种顿笔，一来一回。9—8—9—1，一号面，回过去就收住了。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219880125042.jpg)\n\n\n","source":"_posts/书法/书法-横竖撇捺.md","raw":"---\ntitle: 书法 - 横竖\ncatalog: true\ndate: 2018-03-25 22:20:20\nsubtitle: \"笔画一\"\nheader-img: \"/img/03.jpg\"\ntags: \"书法\"\n---\n\n\n# 横的写法\n## 横的起笔\n### 露锋一面起笔\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219553992280.jpg)\n\n### 两面换\n\n两面换，尤其是 9—6 或者 9—3，是写横最常用的起笔。它是用侧锋写的，起笔、行笔用了侧锋的两个侧面。\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219555117303.jpg)\n\n两面换还可以起到侧锋的开锋作用。以前我们讲过尖锋打开，就 是开锋，是来回摩擦，侧锋的开锋，也就是从一分笔到二分笔，或者是到三分笔。那么侧锋怎么使它打开呢？当然你向下按也可以。但是，一个比较简单的方法是用两面换。只要用手腕扭动一下中线，侧锋就可以由细变粗了。\n\n### 三面换\n\n这个王羲之《兰亭序》中的“一” 字，它的起笔就动了两次 手腕，用了三个面，7—6 —3，那手腕的位置，就 左—中—右。7 是左，入 纸动作，6 是中，手腕在中，笔管这时候是直的。然后换 3 号方向行笔。\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219558259237.jpg)\n\n### 四面换\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219560402939.jpg)\n\n### 藏锋起笔\n\n通常采 用的方法就是：侧锋下纸是倒方向， 然后转过来覆盖掉这个尖，这样就看不见尖锋的痕迹了。这个方法，严格说不是正确的藏锋，是模拟藏锋的效果。\n\n在篆书和隶书中，横笔往往是藏锋起笔。欲右先左，欲下先上。\n这是对侧锋线而言。尖锋线用不到这样麻烦。\n\n蚕头藏锋，就是转两圈。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219562003959.jpg)\n\n## 横的行笔\n两类，一是尖锋行笔， 二是侧锋行笔。\n### 尖锋行笔：趯锋\n尖锋在直管情况下，如果力量够大，推动笔尖就是趯锋。这是阴符经中的“在”字，箭 头所指的一横，就是趯锋写的尖锋线。\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219567623425.jpg)\n\n“尖锋的用法”，先介绍了用拖的方法使用尖锋，这时手腕向右，这是不跳跃的写法，笔力小。\n\n“尖锋线的本质”中，讲了趯锋的写法，趯锋如锥划石，力透纸背， 当然是更好的技巧。这时笔管尽量保持垂直，推动笔尖，所以尖锋也是可推可拖，而趯锋是基本的技法。\n\n### 侧锋行笔：拖\n手腕向右是拖行，手腕向左是推行。\n拖的摩擦力虽然没有推大，但也有 好处：譬如写很粗的线条，三分笔，拖就比较容易。如果用推去写粗 线条，尖锋就容易散掉。写完以后，还要去收拾整理尖锋。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219568435200.jpg)\n\n### 尖锋、侧锋混合行笔\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219569431168.jpg)\n\n右横左竖：线条是手腕运动的记录。 横的起笔：露锋和藏锋。 横的行笔：尖锋和侧锋，推和拖。\n\n## 横的收笔\n* 一是为了通过变动中线，来增加姿态；\n* 二是收直笔心，聚集尖锋， 以便写下一笔。无须再到砚台上掭笔理毫。\n\n### 两面锋收笔\n* 6—6—9\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219572449891.jpg)  ![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219572726190.jpg)\n\n* 9—6—9\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219573827031.jpg)\n\n* 9—3—9\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219574535508.jpg)\n9—6—9上下的距离比较宽，如果我们改用 9 —3—9，就是行笔向右上方向，那么， 上下的距离就比较窄了。9—6—9 和 9—3—9 都是常用的。\n\n#### “尖锋到尾”和“尖锋不到尾”\n手腕尽量向左，迫使尖锋向前行。如果手腕向左的角度小，尖锋就只会走一点点，这是左面这个图。\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219577146738.jpg)\n\n\n当转入 9 号位收尾的时候， 手腕尽量向左，幅度比较大，这个时候，笔尖就拉到尾巴了。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219578541056.jpg)\n\n##### 补尾巴 - 尖峰向前推\n尖锋线的尾巴是圆的，侧锋线的尾巴是断的。侧锋线用的机会比较多，这样一来，就会出现很多断尾的线条。断笔线条太多，会有粗糙的感觉。就要去补上这个尾巴。\n尖锋线是不用补尾巴的， 因为尖锋线本身就是圆点， 不用做什么动作。最多只要扭直笔心就可以收笔了。\n\n就是把尖锋向前移动，具体来说，只要手腕 向左，尖锋就会向右，这样尾巴就补上了，不再是断笔了。\n\n##### 补尾巴 - 回直笔心\n\n也可以写了挫笔之后，先收直笔心。也就是回到 5 号位，然后再次向前行。这就容易多了。\n\n这种先退回到 5 号位，然后重新向前的方法，在书法中是常见的。\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219592821411.jpg)\n\n只不过这次动作做得多了点，这尾巴是最后装上去的。从中线来看，这也是一个三面换。\n\n![-w200](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219595676216.jpg)\n\n### 三面锋收笔\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219596596078.jpg)\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219598144869.jpg)\n\n## 总结\n\n变动中线可以增强姿态。 相反运动可以收直笔心。\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219599528468.jpg)\n\n\n# 竖的写法\n## 竖笔的起笔\n### 一面锋起笔\n一面锋起笔， 因为简单， 所以写起来 速度快。常见于行草书中。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219855002035.jpg)\n\n### 两面换起笔\n两面换姿态好过一面锋，还便于开锋。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219854334546.jpg)\n\n### 三面换起笔\n三面换往往用在一个字 的左边第一竖，或者一个笔势的左边第一竖。 不过，这个规则也不是绝对的。三面换太多，会有花巧的感觉。一个字里边一般最多出现一两次。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219854604684.jpg)\n\n还有横向入纸的，就是 6 号位入纸。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219856833717.jpg)\n\n### 藏锋起笔\n\n**如果用尖锋垂直下纸，就是一个圆点，这是标准的藏锋，看不见锋尖。** 如果侧锋线想要圆头起笔，通常采用的方法就是：侧锋下纸是倒方向，然后转过来覆盖掉这个尖。 这样就看不见尖锋的痕迹了。转的方向，顺时针、逆时针都可以。\n\n这个方法，严格说只是模拟藏锋的效果。这种倒转一圈的方法，又称为**“藏头”**。篆书中和隶书中就开始使用了，影响到后来的书体。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219858972916.jpg)\n\n### 四面换\n\n有转两圈的方法， 来之于隶书“蚕 头”起笔法。横笔是“下上左右”。竖笔是“右左上下”，等于画了一个十字。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219859430332.jpg)\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219859611286.jpg)\n\n![-w400](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219861092348.jpg)\n\n## 竖的行笔\n### 尖锋一竖\n尖锋行笔，也是趯锋。\n通常竖笔往往写得比横笔粗，但在褚体中，一竖经常会用尖锋去写。这是褚体的一个特点。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219861467711.jpg)\n\n### 侧锋线\n写一竖也可以用侧锋线去写。要记得侧锋线分一、二三分笔。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219862961928.jpg)\n\n我们用右手写字，竖笔行笔会本能偏“右”，因为起笔是右行笔时手腕要扭向“左”来加以调整。这样子写下来， 就是中锋了。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219864307555.jpg)\n\n### 尖锋、侧锋混合行笔\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219865686936.jpg)\n\n* 竖的起笔和行笔各种写法 \n* 手腕“中”不等于竖笔“中” \n* 变动中线，增加姿态。\n\n## 竖的收笔\n竖笔行笔时手腕向左，所以收笔是手腕向右。\n### 尖锋线：圆尾\n\n简单收笔讲起。一是使用尖锋写下来。也就是趯锋，等于一连串圆点。这个情况没什么特别的收笔动作，因为最后也是一个圆点。 唯一要做的，就是把行笔时弯曲的笔心收直。\n\n### 侧锋线：断尾\n侧锋写下来，那就是以挫笔收。挫笔收尾，只要手腕做相反运动，就可以收直笔心。 加一个抢，就可以避免墨汁积聚一点。\n\n### 两面锋收尾：变动中线\n![-w500](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219871545981.jpg)\n\n其实这两笔的收锋动作是一样的，都是右左右，它们的不同，是 中线曲折的幅度不同。当右左右的动作减小，中线就逐渐接近于直线。 这时候你手腕向右，等于把尖锋**逼到**左面。 这个“号”字，我用红色标示出来的两个竖笔，A 这一竖，收笔手腕动作大， 尖锋到尾，是拉到右面来的。B 这一竖， 中线接近于直线，结果把尖锋逼到左面了。 在王羲之系统的书法家中，这种尖锋到尾经常可以见到。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219872624996.jpg)\n\n### 三面换收尾：一来一回\n右左右左，笔心就可以收直了。收笔一来一回，古人称之为“顿笔”。《玉堂禁经》说：“一曰顿笔，摧锋骤衄是也，则努法下脚用之。”\n\n一推一衄， 一下一上，就达到收笔之目的。有人想，现在流行的术语叫“回 锋”。不止于竖笔，你写一横到尾，一去一回收锋，都是“顿笔”。\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219873842545.jpg)\n\n**竖笔的收笔：**\n\n* 圆尾、断尾、尖尾 \n* 竖的行笔手向左，收笔就要向右\n* 所谓顿笔，就是一下一上，一推一衄。\n\n**示范：**\n\n* 第一种，尖锋线，下笔用尖锋顶住纸，趯锋行笔，手在左面，写 完了手向右，就是收笔。 \n* 第二个侧锋，可以两面换起笔，用 9—8，9—8 挫笔下去，手 向右收笔，加一个 3 号位抢。 \n* 第三种是尖锋到尾，9—8—9。向右拉，这尖锋在右面。 \n* 第四种，动作是一样的，中线是直线，9—8，手向右，直线走， 尖锋在左面。 \n* 第五种顿笔，一来一回。9—8—9—1，一号面，回过去就收住了。\n\n![-w300](http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219880125042.jpg)\n\n\n","slug":"书法/书法-横竖撇捺","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobri2001wj5lypzw6sqh1","content":"<h1><span id=\"横的写法\"> 横的写法</span></h1>\n<h2><span id=\"横的起笔\"> 横的起笔</span></h2>\n<h3><span id=\"露锋一面起笔\"> 露锋一面起笔</span></h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219553992280.jpg\" alt=\"-w200\"></p>\n<h3><span id=\"两面换\"> 两面换</span></h3>\n<p>两面换，尤其是 9—6 或者 9—3，是写横最常用的起笔。它是用侧锋写的，起笔、行笔用了侧锋的两个侧面。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219555117303.jpg\" alt=\"-w400\"></p>\n<p>两面换还可以起到侧锋的开锋作用。以前我们讲过尖锋打开，就 是开锋，是来回摩擦，侧锋的开锋，也就是从一分笔到二分笔，或者是到三分笔。那么侧锋怎么使它打开呢？当然你向下按也可以。但是，一个比较简单的方法是用两面换。只要用手腕扭动一下中线，侧锋就可以由细变粗了。</p>\n<h3><span id=\"三面换\"> 三面换</span></h3>\n<p>这个王羲之《兰亭序》中的“一” 字，它的起笔就动了两次 手腕，用了三个面，7—6 —3，那手腕的位置，就 左—中—右。7 是左，入 纸动作，6 是中，手腕在中，笔管这时候是直的。然后换 3 号方向行笔。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219558259237.jpg\" alt=\"-w400\"></p>\n<h3><span id=\"四面换\"> 四面换</span></h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219560402939.jpg\" alt=\"-w200\"></p>\n<h3><span id=\"藏锋起笔\"> 藏锋起笔</span></h3>\n<p>通常采 用的方法就是：侧锋下纸是倒方向， 然后转过来覆盖掉这个尖，这样就看不见尖锋的痕迹了。这个方法，严格说不是正确的藏锋，是模拟藏锋的效果。</p>\n<p>在篆书和隶书中，横笔往往是藏锋起笔。欲右先左，欲下先上。<br>\n这是对侧锋线而言。尖锋线用不到这样麻烦。</p>\n<p>蚕头藏锋，就是转两圈。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219562003959.jpg\" alt=\"-w300\"></p>\n<h2><span id=\"横的行笔\"> 横的行笔</span></h2>\n<p>两类，一是尖锋行笔， 二是侧锋行笔。</p>\n<h3><span id=\"尖锋行笔趯锋\"> 尖锋行笔：趯锋</span></h3>\n<p>尖锋在直管情况下，如果力量够大，推动笔尖就是趯锋。这是阴符经中的“在”字，箭 头所指的一横，就是趯锋写的尖锋线。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219567623425.jpg\" alt=\"-w200\"></p>\n<p>“尖锋的用法”，先介绍了用拖的方法使用尖锋，这时手腕向右，这是不跳跃的写法，笔力小。</p>\n<p>“尖锋线的本质”中，讲了趯锋的写法，趯锋如锥划石，力透纸背， 当然是更好的技巧。这时笔管尽量保持垂直，推动笔尖，所以尖锋也是可推可拖，而趯锋是基本的技法。</p>\n<h3><span id=\"侧锋行笔拖\"> 侧锋行笔：拖</span></h3>\n<p>手腕向右是拖行，手腕向左是推行。<br>\n拖的摩擦力虽然没有推大，但也有 好处：譬如写很粗的线条，三分笔，拖就比较容易。如果用推去写粗 线条，尖锋就容易散掉。写完以后，还要去收拾整理尖锋。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219568435200.jpg\" alt=\"-w200\"></p>\n<h3><span id=\"尖锋-侧锋混合行笔\"> 尖锋、侧锋混合行笔</span></h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219569431168.jpg\" alt=\"-w400\"></p>\n<p>右横左竖：线条是手腕运动的记录。 横的起笔：露锋和藏锋。 横的行笔：尖锋和侧锋，推和拖。</p>\n<h2><span id=\"横的收笔\"> 横的收笔</span></h2>\n<ul>\n<li>一是为了通过变动中线，来增加姿态；</li>\n<li>二是收直笔心，聚集尖锋， 以便写下一笔。无须再到砚台上掭笔理毫。</li>\n</ul>\n<h3><span id=\"两面锋收笔\"> 两面锋收笔</span></h3>\n<ul>\n<li>6—6—9</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219572449891.jpg\" alt=\"-w200\">  <img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219572726190.jpg\" alt=\"-w200\"></p>\n<ul>\n<li>9—6—9</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219573827031.jpg\" alt=\"-w300\"></p>\n<ul>\n<li>9—3—9</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219574535508.jpg\" alt=\"-w300\"><br>\n9—6—9上下的距离比较宽，如果我们改用 9 —3—9，就是行笔向右上方向，那么， 上下的距离就比较窄了。9—6—9 和 9—3—9 都是常用的。</p>\n<h4><span id=\"尖锋到尾和尖锋不到尾\"> “尖锋到尾”和“尖锋不到尾”</span></h4>\n<p>手腕尽量向左，迫使尖锋向前行。如果手腕向左的角度小，尖锋就只会走一点点，这是左面这个图。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219577146738.jpg\" alt=\"-w400\"></p>\n<p>当转入 9 号位收尾的时候， 手腕尽量向左，幅度比较大，这个时候，笔尖就拉到尾巴了。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219578541056.jpg\" alt=\"-w300\"></p>\n<h5><span id=\"补尾巴-尖峰向前推\"> 补尾巴 - 尖峰向前推</span></h5>\n<p>尖锋线的尾巴是圆的，侧锋线的尾巴是断的。侧锋线用的机会比较多，这样一来，就会出现很多断尾的线条。断笔线条太多，会有粗糙的感觉。就要去补上这个尾巴。<br>\n尖锋线是不用补尾巴的， 因为尖锋线本身就是圆点， 不用做什么动作。最多只要扭直笔心就可以收笔了。</p>\n<p>就是把尖锋向前移动，具体来说，只要手腕 向左，尖锋就会向右，这样尾巴就补上了，不再是断笔了。</p>\n<h5><span id=\"补尾巴-回直笔心\"> 补尾巴 - 回直笔心</span></h5>\n<p>也可以写了挫笔之后，先收直笔心。也就是回到 5 号位，然后再次向前行。这就容易多了。</p>\n<p>这种先退回到 5 号位，然后重新向前的方法，在书法中是常见的。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219592821411.jpg\" alt=\"-w400\"></p>\n<p>只不过这次动作做得多了点，这尾巴是最后装上去的。从中线来看，这也是一个三面换。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219595676216.jpg\" alt=\"-w200\"></p>\n<h3><span id=\"三面锋收笔\"> 三面锋收笔</span></h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219596596078.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219598144869.jpg\" alt=\"-w400\"></p>\n<h2><span id=\"总结\"> 总结</span></h2>\n<p>变动中线可以增强姿态。 相反运动可以收直笔心。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219599528468.jpg\" alt=\"-w400\"></p>\n<h1><span id=\"竖的写法\"> 竖的写法</span></h1>\n<h2><span id=\"竖笔的起笔\"> 竖笔的起笔</span></h2>\n<h3><span id=\"一面锋起笔\"> 一面锋起笔</span></h3>\n<p>一面锋起笔， 因为简单， 所以写起来 速度快。常见于行草书中。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219855002035.jpg\" alt=\"-w300\"></p>\n<h3><span id=\"两面换起笔\"> 两面换起笔</span></h3>\n<p>两面换姿态好过一面锋，还便于开锋。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219854334546.jpg\" alt=\"-w300\"></p>\n<h3><span id=\"三面换起笔\"> 三面换起笔</span></h3>\n<p>三面换往往用在一个字 的左边第一竖，或者一个笔势的左边第一竖。 不过，这个规则也不是绝对的。三面换太多，会有花巧的感觉。一个字里边一般最多出现一两次。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219854604684.jpg\" alt=\"-w300\"></p>\n<p>还有横向入纸的，就是 6 号位入纸。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219856833717.jpg\" alt=\"-w300\"></p>\n<h3><span id=\"藏锋起笔\"> 藏锋起笔</span></h3>\n<p><strong>如果用尖锋垂直下纸，就是一个圆点，这是标准的藏锋，看不见锋尖。</strong> 如果侧锋线想要圆头起笔，通常采用的方法就是：侧锋下纸是倒方向，然后转过来覆盖掉这个尖。 这样就看不见尖锋的痕迹了。转的方向，顺时针、逆时针都可以。</p>\n<p>这个方法，严格说只是模拟藏锋的效果。这种倒转一圈的方法，又称为**“藏头”**。篆书中和隶书中就开始使用了，影响到后来的书体。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219858972916.jpg\" alt=\"-w300\"></p>\n<h3><span id=\"四面换\"> 四面换</span></h3>\n<p>有转两圈的方法， 来之于隶书“蚕 头”起笔法。横笔是“下上左右”。竖笔是“右左上下”，等于画了一个十字。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219859430332.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219859611286.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219861092348.jpg\" alt=\"-w400\"></p>\n<h2><span id=\"竖的行笔\"> 竖的行笔</span></h2>\n<h3><span id=\"尖锋一竖\"> 尖锋一竖</span></h3>\n<p>尖锋行笔，也是趯锋。<br>\n通常竖笔往往写得比横笔粗，但在褚体中，一竖经常会用尖锋去写。这是褚体的一个特点。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219861467711.jpg\" alt=\"-w300\"></p>\n<h3><span id=\"侧锋线\"> 侧锋线</span></h3>\n<p>写一竖也可以用侧锋线去写。要记得侧锋线分一、二三分笔。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219862961928.jpg\" alt=\"-w300\"></p>\n<p>我们用右手写字，竖笔行笔会本能偏“右”，因为起笔是右行笔时手腕要扭向“左”来加以调整。这样子写下来， 就是中锋了。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219864307555.jpg\" alt=\"-w300\"></p>\n<h3><span id=\"尖锋-侧锋混合行笔\"> 尖锋、侧锋混合行笔</span></h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219865686936.jpg\" alt=\"-w300\"></p>\n<ul>\n<li>竖的起笔和行笔各种写法</li>\n<li>手腕“中”不等于竖笔“中”</li>\n<li>变动中线，增加姿态。</li>\n</ul>\n<h2><span id=\"竖的收笔\"> 竖的收笔</span></h2>\n<p>竖笔行笔时手腕向左，所以收笔是手腕向右。</p>\n<h3><span id=\"尖锋线圆尾\"> 尖锋线：圆尾</span></h3>\n<p>简单收笔讲起。一是使用尖锋写下来。也就是趯锋，等于一连串圆点。这个情况没什么特别的收笔动作，因为最后也是一个圆点。 唯一要做的，就是把行笔时弯曲的笔心收直。</p>\n<h3><span id=\"侧锋线断尾\"> 侧锋线：断尾</span></h3>\n<p>侧锋写下来，那就是以挫笔收。挫笔收尾，只要手腕做相反运动，就可以收直笔心。 加一个抢，就可以避免墨汁积聚一点。</p>\n<h3><span id=\"两面锋收尾变动中线\"> 两面锋收尾：变动中线</span></h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219871545981.jpg\" alt=\"-w500\"></p>\n<p>其实这两笔的收锋动作是一样的，都是右左右，它们的不同，是 中线曲折的幅度不同。当右左右的动作减小，中线就逐渐接近于直线。 这时候你手腕向右，等于把尖锋<strong>逼到</strong>左面。 这个“号”字，我用红色标示出来的两个竖笔，A 这一竖，收笔手腕动作大， 尖锋到尾，是拉到右面来的。B 这一竖， 中线接近于直线，结果把尖锋逼到左面了。 在王羲之系统的书法家中，这种尖锋到尾经常可以见到。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219872624996.jpg\" alt=\"-w300\"></p>\n<h3><span id=\"三面换收尾一来一回\"> 三面换收尾：一来一回</span></h3>\n<p>右左右左，笔心就可以收直了。收笔一来一回，古人称之为“顿笔”。《玉堂禁经》说：“一曰顿笔，摧锋骤衄是也，则努法下脚用之。”</p>\n<p>一推一衄， 一下一上，就达到收笔之目的。有人想，现在流行的术语叫“回 锋”。不止于竖笔，你写一横到尾，一去一回收锋，都是“顿笔”。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219873842545.jpg\" alt=\"-w300\"></p>\n<p><strong>竖笔的收笔：</strong></p>\n<ul>\n<li>圆尾、断尾、尖尾</li>\n<li>竖的行笔手向左，收笔就要向右</li>\n<li>所谓顿笔，就是一下一上，一推一衄。</li>\n</ul>\n<p><strong>示范：</strong></p>\n<ul>\n<li>第一种，尖锋线，下笔用尖锋顶住纸，趯锋行笔，手在左面，写 完了手向右，就是收笔。</li>\n<li>第二个侧锋，可以两面换起笔，用 9—8，9—8 挫笔下去，手 向右收笔，加一个 3 号位抢。</li>\n<li>第三种是尖锋到尾，9—8—9。向右拉，这尖锋在右面。</li>\n<li>第四种，动作是一样的，中线是直线，9—8，手向右，直线走， 尖锋在左面。</li>\n<li>第五种顿笔，一来一回。9—8—9—1，一号面，回过去就收住了。</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219880125042.jpg\" alt=\"-w300\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"横的写法\"><a class=\"markdownIt-Anchor\" href=\"#横的写法\"></a> 横的写法</h1>\n<h2 id=\"横的起笔\"><a class=\"markdownIt-Anchor\" href=\"#横的起笔\"></a> 横的起笔</h2>\n<h3 id=\"露锋一面起笔\"><a class=\"markdownIt-Anchor\" href=\"#露锋一面起笔\"></a> 露锋一面起笔</h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219553992280.jpg\" alt=\"-w200\"></p>\n<h3 id=\"两面换\"><a class=\"markdownIt-Anchor\" href=\"#两面换\"></a> 两面换</h3>\n<p>两面换，尤其是 9—6 或者 9—3，是写横最常用的起笔。它是用侧锋写的，起笔、行笔用了侧锋的两个侧面。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219555117303.jpg\" alt=\"-w400\"></p>\n<p>两面换还可以起到侧锋的开锋作用。以前我们讲过尖锋打开，就 是开锋，是来回摩擦，侧锋的开锋，也就是从一分笔到二分笔，或者是到三分笔。那么侧锋怎么使它打开呢？当然你向下按也可以。但是，一个比较简单的方法是用两面换。只要用手腕扭动一下中线，侧锋就可以由细变粗了。</p>\n<h3 id=\"三面换\"><a class=\"markdownIt-Anchor\" href=\"#三面换\"></a> 三面换</h3>\n<p>这个王羲之《兰亭序》中的“一” 字，它的起笔就动了两次 手腕，用了三个面，7—6 —3，那手腕的位置，就 左—中—右。7 是左，入 纸动作，6 是中，手腕在中，笔管这时候是直的。然后换 3 号方向行笔。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219558259237.jpg\" alt=\"-w400\"></p>\n<h3 id=\"四面换\"><a class=\"markdownIt-Anchor\" href=\"#四面换\"></a> 四面换</h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219560402939.jpg\" alt=\"-w200\"></p>\n<h3 id=\"藏锋起笔\"><a class=\"markdownIt-Anchor\" href=\"#藏锋起笔\"></a> 藏锋起笔</h3>\n<p>通常采 用的方法就是：侧锋下纸是倒方向， 然后转过来覆盖掉这个尖，这样就看不见尖锋的痕迹了。这个方法，严格说不是正确的藏锋，是模拟藏锋的效果。</p>\n<p>在篆书和隶书中，横笔往往是藏锋起笔。欲右先左，欲下先上。<br>\n这是对侧锋线而言。尖锋线用不到这样麻烦。</p>\n<p>蚕头藏锋，就是转两圈。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219562003959.jpg\" alt=\"-w300\"></p>\n<h2 id=\"横的行笔\"><a class=\"markdownIt-Anchor\" href=\"#横的行笔\"></a> 横的行笔</h2>\n<p>两类，一是尖锋行笔， 二是侧锋行笔。</p>\n<h3 id=\"尖锋行笔趯锋\"><a class=\"markdownIt-Anchor\" href=\"#尖锋行笔趯锋\"></a> 尖锋行笔：趯锋</h3>\n<p>尖锋在直管情况下，如果力量够大，推动笔尖就是趯锋。这是阴符经中的“在”字，箭 头所指的一横，就是趯锋写的尖锋线。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219567623425.jpg\" alt=\"-w200\"></p>\n<p>“尖锋的用法”，先介绍了用拖的方法使用尖锋，这时手腕向右，这是不跳跃的写法，笔力小。</p>\n<p>“尖锋线的本质”中，讲了趯锋的写法，趯锋如锥划石，力透纸背， 当然是更好的技巧。这时笔管尽量保持垂直，推动笔尖，所以尖锋也是可推可拖，而趯锋是基本的技法。</p>\n<h3 id=\"侧锋行笔拖\"><a class=\"markdownIt-Anchor\" href=\"#侧锋行笔拖\"></a> 侧锋行笔：拖</h3>\n<p>手腕向右是拖行，手腕向左是推行。<br>\n拖的摩擦力虽然没有推大，但也有 好处：譬如写很粗的线条，三分笔，拖就比较容易。如果用推去写粗 线条，尖锋就容易散掉。写完以后，还要去收拾整理尖锋。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219568435200.jpg\" alt=\"-w200\"></p>\n<h3 id=\"尖锋-侧锋混合行笔\"><a class=\"markdownIt-Anchor\" href=\"#尖锋-侧锋混合行笔\"></a> 尖锋、侧锋混合行笔</h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219569431168.jpg\" alt=\"-w400\"></p>\n<p>右横左竖：线条是手腕运动的记录。 横的起笔：露锋和藏锋。 横的行笔：尖锋和侧锋，推和拖。</p>\n<h2 id=\"横的收笔\"><a class=\"markdownIt-Anchor\" href=\"#横的收笔\"></a> 横的收笔</h2>\n<ul>\n<li>一是为了通过变动中线，来增加姿态；</li>\n<li>二是收直笔心，聚集尖锋， 以便写下一笔。无须再到砚台上掭笔理毫。</li>\n</ul>\n<h3 id=\"两面锋收笔\"><a class=\"markdownIt-Anchor\" href=\"#两面锋收笔\"></a> 两面锋收笔</h3>\n<ul>\n<li>6—6—9</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219572449891.jpg\" alt=\"-w200\">  <img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219572726190.jpg\" alt=\"-w200\"></p>\n<ul>\n<li>9—6—9</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219573827031.jpg\" alt=\"-w300\"></p>\n<ul>\n<li>9—3—9</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219574535508.jpg\" alt=\"-w300\"><br>\n9—6—9上下的距离比较宽，如果我们改用 9 —3—9，就是行笔向右上方向，那么， 上下的距离就比较窄了。9—6—9 和 9—3—9 都是常用的。</p>\n<h4 id=\"尖锋到尾和尖锋不到尾\"><a class=\"markdownIt-Anchor\" href=\"#尖锋到尾和尖锋不到尾\"></a> “尖锋到尾”和“尖锋不到尾”</h4>\n<p>手腕尽量向左，迫使尖锋向前行。如果手腕向左的角度小，尖锋就只会走一点点，这是左面这个图。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219577146738.jpg\" alt=\"-w400\"></p>\n<p>当转入 9 号位收尾的时候， 手腕尽量向左，幅度比较大，这个时候，笔尖就拉到尾巴了。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219578541056.jpg\" alt=\"-w300\"></p>\n<h5 id=\"补尾巴-尖峰向前推\"><a class=\"markdownIt-Anchor\" href=\"#补尾巴-尖峰向前推\"></a> 补尾巴 - 尖峰向前推</h5>\n<p>尖锋线的尾巴是圆的，侧锋线的尾巴是断的。侧锋线用的机会比较多，这样一来，就会出现很多断尾的线条。断笔线条太多，会有粗糙的感觉。就要去补上这个尾巴。<br>\n尖锋线是不用补尾巴的， 因为尖锋线本身就是圆点， 不用做什么动作。最多只要扭直笔心就可以收笔了。</p>\n<p>就是把尖锋向前移动，具体来说，只要手腕 向左，尖锋就会向右，这样尾巴就补上了，不再是断笔了。</p>\n<h5 id=\"补尾巴-回直笔心\"><a class=\"markdownIt-Anchor\" href=\"#补尾巴-回直笔心\"></a> 补尾巴 - 回直笔心</h5>\n<p>也可以写了挫笔之后，先收直笔心。也就是回到 5 号位，然后再次向前行。这就容易多了。</p>\n<p>这种先退回到 5 号位，然后重新向前的方法，在书法中是常见的。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219592821411.jpg\" alt=\"-w400\"></p>\n<p>只不过这次动作做得多了点，这尾巴是最后装上去的。从中线来看，这也是一个三面换。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219595676216.jpg\" alt=\"-w200\"></p>\n<h3 id=\"三面锋收笔\"><a class=\"markdownIt-Anchor\" href=\"#三面锋收笔\"></a> 三面锋收笔</h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219596596078.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219598144869.jpg\" alt=\"-w400\"></p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h2>\n<p>变动中线可以增强姿态。 相反运动可以收直笔心。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219599528468.jpg\" alt=\"-w400\"></p>\n<h1 id=\"竖的写法\"><a class=\"markdownIt-Anchor\" href=\"#竖的写法\"></a> 竖的写法</h1>\n<h2 id=\"竖笔的起笔\"><a class=\"markdownIt-Anchor\" href=\"#竖笔的起笔\"></a> 竖笔的起笔</h2>\n<h3 id=\"一面锋起笔\"><a class=\"markdownIt-Anchor\" href=\"#一面锋起笔\"></a> 一面锋起笔</h3>\n<p>一面锋起笔， 因为简单， 所以写起来 速度快。常见于行草书中。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219855002035.jpg\" alt=\"-w300\"></p>\n<h3 id=\"两面换起笔\"><a class=\"markdownIt-Anchor\" href=\"#两面换起笔\"></a> 两面换起笔</h3>\n<p>两面换姿态好过一面锋，还便于开锋。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219854334546.jpg\" alt=\"-w300\"></p>\n<h3 id=\"三面换起笔\"><a class=\"markdownIt-Anchor\" href=\"#三面换起笔\"></a> 三面换起笔</h3>\n<p>三面换往往用在一个字 的左边第一竖，或者一个笔势的左边第一竖。 不过，这个规则也不是绝对的。三面换太多，会有花巧的感觉。一个字里边一般最多出现一两次。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219854604684.jpg\" alt=\"-w300\"></p>\n<p>还有横向入纸的，就是 6 号位入纸。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219856833717.jpg\" alt=\"-w300\"></p>\n<h3 id=\"藏锋起笔-2\"><a class=\"markdownIt-Anchor\" href=\"#藏锋起笔-2\"></a> 藏锋起笔</h3>\n<p><strong>如果用尖锋垂直下纸，就是一个圆点，这是标准的藏锋，看不见锋尖。</strong> 如果侧锋线想要圆头起笔，通常采用的方法就是：侧锋下纸是倒方向，然后转过来覆盖掉这个尖。 这样就看不见尖锋的痕迹了。转的方向，顺时针、逆时针都可以。</p>\n<p>这个方法，严格说只是模拟藏锋的效果。这种倒转一圈的方法，又称为**“藏头”**。篆书中和隶书中就开始使用了，影响到后来的书体。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219858972916.jpg\" alt=\"-w300\"></p>\n<h3 id=\"四面换-2\"><a class=\"markdownIt-Anchor\" href=\"#四面换-2\"></a> 四面换</h3>\n<p>有转两圈的方法， 来之于隶书“蚕 头”起笔法。横笔是“下上左右”。竖笔是“右左上下”，等于画了一个十字。</p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219859430332.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219859611286.jpg\" alt=\"-w300\"></p>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219861092348.jpg\" alt=\"-w400\"></p>\n<h2 id=\"竖的行笔\"><a class=\"markdownIt-Anchor\" href=\"#竖的行笔\"></a> 竖的行笔</h2>\n<h3 id=\"尖锋一竖\"><a class=\"markdownIt-Anchor\" href=\"#尖锋一竖\"></a> 尖锋一竖</h3>\n<p>尖锋行笔，也是趯锋。<br>\n通常竖笔往往写得比横笔粗，但在褚体中，一竖经常会用尖锋去写。这是褚体的一个特点。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219861467711.jpg\" alt=\"-w300\"></p>\n<h3 id=\"侧锋线\"><a class=\"markdownIt-Anchor\" href=\"#侧锋线\"></a> 侧锋线</h3>\n<p>写一竖也可以用侧锋线去写。要记得侧锋线分一、二三分笔。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219862961928.jpg\" alt=\"-w300\"></p>\n<p>我们用右手写字，竖笔行笔会本能偏“右”，因为起笔是右行笔时手腕要扭向“左”来加以调整。这样子写下来， 就是中锋了。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219864307555.jpg\" alt=\"-w300\"></p>\n<h3 id=\"尖锋-侧锋混合行笔-2\"><a class=\"markdownIt-Anchor\" href=\"#尖锋-侧锋混合行笔-2\"></a> 尖锋、侧锋混合行笔</h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219865686936.jpg\" alt=\"-w300\"></p>\n<ul>\n<li>竖的起笔和行笔各种写法</li>\n<li>手腕“中”不等于竖笔“中”</li>\n<li>变动中线，增加姿态。</li>\n</ul>\n<h2 id=\"竖的收笔\"><a class=\"markdownIt-Anchor\" href=\"#竖的收笔\"></a> 竖的收笔</h2>\n<p>竖笔行笔时手腕向左，所以收笔是手腕向右。</p>\n<h3 id=\"尖锋线圆尾\"><a class=\"markdownIt-Anchor\" href=\"#尖锋线圆尾\"></a> 尖锋线：圆尾</h3>\n<p>简单收笔讲起。一是使用尖锋写下来。也就是趯锋，等于一连串圆点。这个情况没什么特别的收笔动作，因为最后也是一个圆点。 唯一要做的，就是把行笔时弯曲的笔心收直。</p>\n<h3 id=\"侧锋线断尾\"><a class=\"markdownIt-Anchor\" href=\"#侧锋线断尾\"></a> 侧锋线：断尾</h3>\n<p>侧锋写下来，那就是以挫笔收。挫笔收尾，只要手腕做相反运动，就可以收直笔心。 加一个抢，就可以避免墨汁积聚一点。</p>\n<h3 id=\"两面锋收尾变动中线\"><a class=\"markdownIt-Anchor\" href=\"#两面锋收尾变动中线\"></a> 两面锋收尾：变动中线</h3>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219871545981.jpg\" alt=\"-w500\"></p>\n<p>其实这两笔的收锋动作是一样的，都是右左右，它们的不同，是 中线曲折的幅度不同。当右左右的动作减小，中线就逐渐接近于直线。 这时候你手腕向右，等于把尖锋<strong>逼到</strong>左面。 这个“号”字，我用红色标示出来的两个竖笔，A 这一竖，收笔手腕动作大， 尖锋到尾，是拉到右面来的。B 这一竖， 中线接近于直线，结果把尖锋逼到左面了。 在王羲之系统的书法家中，这种尖锋到尾经常可以见到。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219872624996.jpg\" alt=\"-w300\"></p>\n<h3 id=\"三面换收尾一来一回\"><a class=\"markdownIt-Anchor\" href=\"#三面换收尾一来一回\"></a> 三面换收尾：一来一回</h3>\n<p>右左右左，笔心就可以收直了。收笔一来一回，古人称之为“顿笔”。《玉堂禁经》说：“一曰顿笔，摧锋骤衄是也，则努法下脚用之。”</p>\n<p>一推一衄， 一下一上，就达到收笔之目的。有人想，现在流行的术语叫“回 锋”。不止于竖笔，你写一横到尾，一去一回收锋，都是“顿笔”。<br>\n<img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219873842545.jpg\" alt=\"-w300\"></p>\n<p><strong>竖笔的收笔：</strong></p>\n<ul>\n<li>圆尾、断尾、尖尾</li>\n<li>竖的行笔手向左，收笔就要向右</li>\n<li>所谓顿笔，就是一下一上，一推一衄。</li>\n</ul>\n<p><strong>示范：</strong></p>\n<ul>\n<li>第一种，尖锋线，下笔用尖锋顶住纸，趯锋行笔，手在左面，写 完了手向右，就是收笔。</li>\n<li>第二个侧锋，可以两面换起笔，用 9—8，9—8 挫笔下去，手 向右收笔，加一个 3 号位抢。</li>\n<li>第三种是尖锋到尾，9—8—9。向右拉，这尖锋在右面。</li>\n<li>第四种，动作是一样的，中线是直线，9—8，手向右，直线走， 尖锋在左面。</li>\n<li>第五种顿笔，一来一回。9—8—9—1，一号面，回过去就收住了。</li>\n</ul>\n<p><img src=\"http://otkwwi4x8.bkt.clouddn.com/2018-03-25-15219880125042.jpg\" alt=\"-w300\"></p>\n"},{"title":"资治通鉴小结069-078卷魏纪","catalog":true,"date":"2017-12-10T09:11:29.000Z","header-img":"/img/17.jpg","subtitle":"资治通鉴小结069-078卷魏纪","_content":"\n# 资治通鉴小结 069 - 078 卷 魏纪\n\n## 卷69（公元220年）\n1. 曹操在洛阳去世，曹丕继位。曹操唯才是举、知人善任，生活俭朴。\n2. 蜀国上庸主将孟达因为受不了被副将刘封欺凌而投降了曹丕，被重用。曹军攻打上庸，太守申耽投降，上庸陷落。\n3. 曹丕接受汉献帝禅让，即皇帝位，是为魏文帝。\n4. 刘备称帝，任命诸葛亮为丞相，吴懿之女吴氏被立为皇后，刘禅被立为太子。费诗因为劝谏称帝而被降职。\n5. 张飞被部下张达、范强杀死，俩人带着人头投降了孙权。\n6. 汉主刘备亲征孙权，孙权请和，不准。于是，任命陆逊为大都督，以对抗刘备。并向魏国称臣。刘晔劝说魏文帝曹丕乘机攻吴，不准。\n7. 凉州刺史张既平定了凉州叛乱。\n8. 孙权立孙登为太子，以诸葛瑾之子诸葛恪（ke）等四人教导太子，时称“四友”\n9. 鄯善、龟兹、于阗分别派遣使者入魏国进贡，中原与西域又恢复联系，并设置了戊己校尉。\n10. 陆逊火烧连营，刘备败走白帝城。夷陵之战以吴国的大胜而结束。\n11. 孙权不送人质，魏国分三路攻打吴国，吴国分五路迎击。\n12. 孙权派人去蜀国，两国又恢复了联系。\n\n## 卷70（公元223年）\n1. 朱恒镇守濡须口，打败了来犯的曹仁；朱然防守江陵，曹真也久攻不下；董昭劝说魏文帝，夏侯尚等从中洲撤军，三路攻吴失败。\n2. 刘备白帝城(永安)托孤，刘备去世，刘禅继位，国家大小事务，全由诸葛亮决定。\n3. 邓芝出使吴国，吴国与魏国绝交，与蜀国和好。\n4. 鲜卑轲比能经常抢掠并、幽两州。并州刺史梁习讨伐，大获全胜。\n5. 诸葛亮率军南征，杀死了雍闿和高定，部下马忠和李恢也分别讨灭了各县的叛军。随后七擒孟获，西南夷族平定。\n6. 魏文帝多次想攻打吴国，都受阻于长江。\n7. 魏文帝睚眦（zi）必报，杀死了直言的鲍信之子鲍勋，又削夺了曹洪的官爵和封地\n8. 魏文帝去世，甄夫人的儿子曹睿继位，是为魏明帝。曹真、司马懿、陈群按遗诏辅政。\n9. 孙权攻打魏国江夏，文聘防守严密，孙权不能取胜而退；诸葛瑾攻打襄阳，也被司马懿打败。\n10. 吴国东部三郡山民再次反叛，全琮收降万余人，平定了叛乱。\n11. 交州刺史吕岱不讲信义，诱杀了交趾太守士徽兄弟。\n12. 诸葛亮上“前出师表”，打算攻打魏国，驻扎在汉中。\n\n## 卷71（公元228年）\n1. 诸葛亮一出祁山，不听魏延奇袭长安之计。马谡（su）骄傲失街亭，诸葛亮撤回汉中，挥泪斩杀马谡。姜维投降了诸葛亮。\n2. 吴国鄱（po）阳太守周鲂断发诱曹休，陆逊不听朱桓的伏兵计，曹休大败，贾逵救下曹休，不久，曹休羞愧而死。\n3. 诸葛亮上后出师表，二出祁山，受阻于郝（hao）昭防守的陈仓城。粮尽后，诸葛亮撤军，王双追击被杀死。\n4. 辽东公孙渊从公孙恭手中夺回了权力，魏明帝不听刘晔劝说，封公孙渊为辽东太守。\n5. 诸葛亮亲征，郭淮不战而退，于是，诸葛亮攻下武都、阳平二郡。\n6. 孙权即皇帝位，立孙登为太子，迁都建业。以陆逊辅佐太子孙登留守武昌。\n7. 孙权派卫温等渡海寻找夷洲，以俘获当地民众以增加民力，陆逊、全琮劝阻，不听。\n8. 曹真出兵攻打蜀国，诸葛亮迎击。\n9. 诸葛亮长史蒋琬每次都能保证出征的兵粮，受到诸葛亮的称赞。\n10. 武陵蛮人反叛吴国。\n\n## 卷72（公元231年）\n1. 卫温等人出海一年，士兵因病而死者十之八九，最终没有达到目标，卫温论罪被杀。\n2. 诸葛亮三出祁山，以木牛流马运输粮草。司马懿防守长安，统军迎战失败，于是，据险防守不交战，诸葛亮因为粮尽而撤军，大将张颌追击，被杀。李平（李严）因为假传圣旨和耽误粮草而被流放梓潼。\n3. 太子孙登从武昌入朝，于是留在建业，陆逊镇守武昌。\n4. 有人对魏明帝说刘晔迎合，让其以反语验证，果然应验，刘晔被疏远。不久，忧虑而死。\n5. 吴国每年都有攻魏的计划，都被满宠防住。\n6. 群臣反对孙权交结辽东公孙渊，张昭因其建议不被采纳而称病在家。孙权用土封其大门，张昭则从里封死。孙权多次道歉，甚至放火，张昭也不出来。后其子将其扶出，被迫上朝。\n7. 诸葛亮休养生息三年，率军十万，四出祁山，驻军五丈原，屯田以长期作战。并与吴国相约共同进军。\n8. 吴国分三路攻打魏国，魏明帝亲征，吴国撤军。\n9. 司马懿坚守100多天不战，诸葛亮病死五丈原，姜维率军吓退司马懿。魏延与杨仪争权，魏延部众离散，马岱追上魏延，将其斩杀。\n10. 百姓要求建庙祭祀诸葛亮，不准，于是在路边祭祀，才被同意建一座祭庙。\n11. 蒋琬接替诸葛亮，总管国事。\n12. 潘俊讨伐武陵蛮人，费了几年时间，终于平定。潘俊回到武昌。\n\n## 卷73（公元235年）\n1. 杨仪因未得到要职而心怀怨恨，被逼自杀。\n2. 魏明帝大兴土木，沉迷于美女。群臣劝谏即使激烈，能够宽容他们。\n3. 幽州刺史王雄派人刺杀了鲜卑首领轲比能，从此，鲜卑分崩离析，边境平安。\n4. 武都氐人首领苻健降蜀，其弟带领400人降魏。\n5. 魏国讨伐辽东公孙渊不胜。\n6. 诸葛恪在丹阳坚壁清野，收降了山越部落，并在此征兵。\n\n## 卷74（公元238年）\n1. 魏明帝从长安召回司马懿攻打辽东，司马懿避实就虚，包围了襄平。公孙渊粮尽而逃被斩杀。辽东等四郡平定。\n2. 张飞的两个女儿先后被封为刘禅的皇后。王贵人的儿子被立为太子\n3. 吴国中书郎吕壹主管公文，于是以此诽谤官员，群臣恐惧，朱据事件之后，孙权醒悟，吕壹被处死。\n4. 魏明帝去世，8岁的曹芳即位，以司马懿、曹爽辅政。魏明帝富有决断，但又纵情任性；度量宏大，但没有建立恩德，以致后代大权旁落。\n5. 曹爽亲近小人，剥夺了司马懿的实权。\n6. 吴国分兵四路攻打魏国，司马懿救援樊城，吴军逃走。\n7. 吴国太子孙登去世，孙和被立为太子。\n8. 尚书郎汝南人邓艾建议开通漕渠，被采纳。以后东南战事，兵粮充裕，同时，水患也消除。\n9. 蒋琬将主要兵力由汉中移防到涪（fu）县。蒋琬病重，费祎被任命为大将军，接替蒋琬。费祎处事速度惊人，公私都能游刃有余。董允接替费祎担任尚书令后，整天办公，仍旧没有空闲，董允于是感叹人力相差如此之大。不久，蒋琬去世。\n10. 曹爽不顾司马懿反对，出兵攻打汉中。汉中守将王平、刘敏占据险要，虚张声势。大将军费祎统军救援，曹爽撤军途中被袭击，大败而逃。\n11. 孙权对待太子孙和和鲁王孙霸的待遇一样，群臣也分为两派，太子党处于劣势，陆逊也被责问，忧愤而死，其子陆抗接任。\n12. 蜀国董允去世，费祎推荐汝南人陈祗（zhi）接任侍中，陈祗与宦官黄皓（hao）内外勾结，专权害人。\n\n## 卷75（公元246年）\n1. 幽州刺史毋（wu）丘俭讨伐屡次侵犯边境的高句丽国王位宫，位宫远逃没有追上，高句丽首都被屠城。\n2. 曹爽软禁郭太后，独揽大权，司马懿装病不上朝。曹爽等人陪同魏帝扫墓，司马懿发动兵变，曹爽不听桓阶之计，反而亲信司马懿的承诺，曹爽等人被诛灭三族，司马懿掌权。\n3. 才女辛宪英嫁给了太常羊耽，羊祜也是其亲属。\n4. 夏侯渊之子夏侯霸害怕被诛杀，投降了蜀国。\n5. 姜维进犯长安，郭淮要断其后路，被迫撤军。后偷袭又被邓艾看破，只得无功而返。\n6. 孙权厌恶两党争权，太子孙和被废为民，鲁王孙霸被逼自杀，多位大臣获罪。\n7. 孙权立孙亮为太子。\n8. 王昶（chang）建议乘东吴内部分裂出兵攻打吴国，被采纳。魏国分兵三路攻吴，吴军战败。\n9. 王凌、令狐愚密谋废帝的计划泄漏，司马懿进军到寿春，诛灭了与事者三族。告发者杨康也被杀死。\n10. 司马懿去世，其子司马师接替大将军，管理国事。\n11. 邓艾献计分裂南匈奴部落，被采纳。\n12. 孙权病重，全公主等人推荐诸葛恪辅佐，被勉强同意。孙权去世，太子孙亮继位，诸葛恪位高权重。\n13. 魏国再次分兵三路攻吴，诸葛恪、丁奉等打败了魏军。\n14. 姜维攻打西平时，俘获了中郎将郭循。郭循想要刺杀蜀国后主，一直找不到机会。\n\n## 卷76（公元253年）\n1. 郭循刺死了蜀国大将军费祎。\n2. 诸葛恪因为上次的胜利而自大，不顾群臣反对，再次攻打魏国，结果围攻新城不下，被迫撤军。\n3. 孙峻与吴王密谋，摆鸿门宴，杀死了诸葛恪，其党羽诛灭三族。\n4. 司马师废魏帝曹芳为齐王，最终立高贵乡公曹髦（mao）为帝。\n5. 文钦、毋丘俭在寿春起兵讨伐司马师，司马师带病亲征，文钦之子文鸯（yang）骁勇善战，以一当千，但最终文钦兵败，投降了吴国。毋丘俭弃寿春而逃，被村民杀死。司马师也病重而死，司马昭接任大将军，主管国事。\n6. 姜维多次出兵陇西，但被魏国陈泰、邓艾等阻碍，始终没有大功业。\n\n## 卷77（公元256年）\n1. 姜维升任为大将军。\n2. 孙峻去世，孙綝（lin）接任，管理国事。吕据、滕胤（tengyin）不服，起兵失败，俩人身死家灭。\n3. 魏国诸葛诞在寿春反叛，并向吴国称臣求援。吴国朱异二次救援，都被石苞、州泰打败。孙綝让朱异再次出兵，不从，被杀死。孙綝领军回到建业，被吴人怨恨。\n4. 诸葛诞杀死了文钦，其子文鸯、文虎投降了司马昭，被封侯。寿春将士没有战意，于是，城破。诸葛诞逃亡中被杀死，亲卫拒绝投降，全部被杀。钟会为司马昭出谋划策，被人称为司马昭的张良。\n5. 吴主孙亮谋划诛杀孙綝，全公主之父全尚不谨慎泄密，于是，孙綝出兵废掉了孙亮，将其遣送回了封国。迎立孙休为帝，全尚被杀，全公主被迁到豫章。\n6. 吴主孙休在丁奉、张布的帮助下，乘腊祭集会时杀死了孙綝，诛灭了其三族。\n7. 魏主曹髦因不愿坐等被废而起兵，被贾充指使手下成济杀死，成济被定罪，灭族。曹璜(huang)被迎立为帝，改名为曹奂（huan），年仅15岁。\n8. 吴国邓由等人送来人质，诱使魏国出兵迎接，王基劝阻了司马昭，邓由果然是诈降\n9. 蜀国陈祗去世，董厥、诸葛瞻共同主持尚书事，仍旧改变不了宦官黄皓的错误行事，大臣们也只是安身立命。\n\n## 卷78（公元262年）\n1. 竹林七贤嵇康、阮籍等人高节奇行，轻蔑礼法。嵇康因为得罪钟会，被诬陷致死。\n2. 钟会、邓艾、卫瓘（guan）等大举攻蜀，蒋舒投降，傅佥（qian）战死。钟会占领了汉中。姜维等在剑阁设防，钟会无法前进。邓艾从阴平小路奔袭涪县，诸葛瞻不听黄崇占据险要的建议，兵败身死。谯（qiao）周说服了蜀主刘禅向邓艾投降，蜀国灭亡。黄皓行贿邓艾左右，得以免死。刘禅命令姜维等向钟会投降，将士们都非常愤怒。\n3. 钟会诬陷邓艾，邓艾被关进囚车，后来被卫瓘派部下杀死。姜维说服了钟会，尽杀魏国将领，最终遇到反抗没有成功，魏国将领的部下杀死了姜维和钟会。\n4. 蜀国罗宪驻守永安，打退了吴国的进犯，投降了魏国。南中都督霍弋（yi）确定刘禅受到优待后才投降魏国。\n5. 吴主孙休去世，丞相濮阳兴、张布等人违背遗嘱，立年长的孙皓（hao）为帝。孙皓即位后粗暴骄横、嗜酒好色，濮阳兴和张布都被杀死。\n6. 司马昭被何曾、裴秀等人说服，立司马炎为世子。\n\n\n","source":"_posts/資治通鑑/资治通鉴小结069-078卷-魏纪.md","raw":"---\ntitle: '资治通鉴小结069-078卷魏纪'\ncatalog: true\ndate: 2017-12-10 17:11:29\nheader-img: \"/img/17.jpg\"\nsubtitle: '资治通鉴小结069-078卷魏纪' \ntags: \"資治通鑑\"\n---\n\n# 资治通鉴小结 069 - 078 卷 魏纪\n\n## 卷69（公元220年）\n1. 曹操在洛阳去世，曹丕继位。曹操唯才是举、知人善任，生活俭朴。\n2. 蜀国上庸主将孟达因为受不了被副将刘封欺凌而投降了曹丕，被重用。曹军攻打上庸，太守申耽投降，上庸陷落。\n3. 曹丕接受汉献帝禅让，即皇帝位，是为魏文帝。\n4. 刘备称帝，任命诸葛亮为丞相，吴懿之女吴氏被立为皇后，刘禅被立为太子。费诗因为劝谏称帝而被降职。\n5. 张飞被部下张达、范强杀死，俩人带着人头投降了孙权。\n6. 汉主刘备亲征孙权，孙权请和，不准。于是，任命陆逊为大都督，以对抗刘备。并向魏国称臣。刘晔劝说魏文帝曹丕乘机攻吴，不准。\n7. 凉州刺史张既平定了凉州叛乱。\n8. 孙权立孙登为太子，以诸葛瑾之子诸葛恪（ke）等四人教导太子，时称“四友”\n9. 鄯善、龟兹、于阗分别派遣使者入魏国进贡，中原与西域又恢复联系，并设置了戊己校尉。\n10. 陆逊火烧连营，刘备败走白帝城。夷陵之战以吴国的大胜而结束。\n11. 孙权不送人质，魏国分三路攻打吴国，吴国分五路迎击。\n12. 孙权派人去蜀国，两国又恢复了联系。\n\n## 卷70（公元223年）\n1. 朱恒镇守濡须口，打败了来犯的曹仁；朱然防守江陵，曹真也久攻不下；董昭劝说魏文帝，夏侯尚等从中洲撤军，三路攻吴失败。\n2. 刘备白帝城(永安)托孤，刘备去世，刘禅继位，国家大小事务，全由诸葛亮决定。\n3. 邓芝出使吴国，吴国与魏国绝交，与蜀国和好。\n4. 鲜卑轲比能经常抢掠并、幽两州。并州刺史梁习讨伐，大获全胜。\n5. 诸葛亮率军南征，杀死了雍闿和高定，部下马忠和李恢也分别讨灭了各县的叛军。随后七擒孟获，西南夷族平定。\n6. 魏文帝多次想攻打吴国，都受阻于长江。\n7. 魏文帝睚眦（zi）必报，杀死了直言的鲍信之子鲍勋，又削夺了曹洪的官爵和封地\n8. 魏文帝去世，甄夫人的儿子曹睿继位，是为魏明帝。曹真、司马懿、陈群按遗诏辅政。\n9. 孙权攻打魏国江夏，文聘防守严密，孙权不能取胜而退；诸葛瑾攻打襄阳，也被司马懿打败。\n10. 吴国东部三郡山民再次反叛，全琮收降万余人，平定了叛乱。\n11. 交州刺史吕岱不讲信义，诱杀了交趾太守士徽兄弟。\n12. 诸葛亮上“前出师表”，打算攻打魏国，驻扎在汉中。\n\n## 卷71（公元228年）\n1. 诸葛亮一出祁山，不听魏延奇袭长安之计。马谡（su）骄傲失街亭，诸葛亮撤回汉中，挥泪斩杀马谡。姜维投降了诸葛亮。\n2. 吴国鄱（po）阳太守周鲂断发诱曹休，陆逊不听朱桓的伏兵计，曹休大败，贾逵救下曹休，不久，曹休羞愧而死。\n3. 诸葛亮上后出师表，二出祁山，受阻于郝（hao）昭防守的陈仓城。粮尽后，诸葛亮撤军，王双追击被杀死。\n4. 辽东公孙渊从公孙恭手中夺回了权力，魏明帝不听刘晔劝说，封公孙渊为辽东太守。\n5. 诸葛亮亲征，郭淮不战而退，于是，诸葛亮攻下武都、阳平二郡。\n6. 孙权即皇帝位，立孙登为太子，迁都建业。以陆逊辅佐太子孙登留守武昌。\n7. 孙权派卫温等渡海寻找夷洲，以俘获当地民众以增加民力，陆逊、全琮劝阻，不听。\n8. 曹真出兵攻打蜀国，诸葛亮迎击。\n9. 诸葛亮长史蒋琬每次都能保证出征的兵粮，受到诸葛亮的称赞。\n10. 武陵蛮人反叛吴国。\n\n## 卷72（公元231年）\n1. 卫温等人出海一年，士兵因病而死者十之八九，最终没有达到目标，卫温论罪被杀。\n2. 诸葛亮三出祁山，以木牛流马运输粮草。司马懿防守长安，统军迎战失败，于是，据险防守不交战，诸葛亮因为粮尽而撤军，大将张颌追击，被杀。李平（李严）因为假传圣旨和耽误粮草而被流放梓潼。\n3. 太子孙登从武昌入朝，于是留在建业，陆逊镇守武昌。\n4. 有人对魏明帝说刘晔迎合，让其以反语验证，果然应验，刘晔被疏远。不久，忧虑而死。\n5. 吴国每年都有攻魏的计划，都被满宠防住。\n6. 群臣反对孙权交结辽东公孙渊，张昭因其建议不被采纳而称病在家。孙权用土封其大门，张昭则从里封死。孙权多次道歉，甚至放火，张昭也不出来。后其子将其扶出，被迫上朝。\n7. 诸葛亮休养生息三年，率军十万，四出祁山，驻军五丈原，屯田以长期作战。并与吴国相约共同进军。\n8. 吴国分三路攻打魏国，魏明帝亲征，吴国撤军。\n9. 司马懿坚守100多天不战，诸葛亮病死五丈原，姜维率军吓退司马懿。魏延与杨仪争权，魏延部众离散，马岱追上魏延，将其斩杀。\n10. 百姓要求建庙祭祀诸葛亮，不准，于是在路边祭祀，才被同意建一座祭庙。\n11. 蒋琬接替诸葛亮，总管国事。\n12. 潘俊讨伐武陵蛮人，费了几年时间，终于平定。潘俊回到武昌。\n\n## 卷73（公元235年）\n1. 杨仪因未得到要职而心怀怨恨，被逼自杀。\n2. 魏明帝大兴土木，沉迷于美女。群臣劝谏即使激烈，能够宽容他们。\n3. 幽州刺史王雄派人刺杀了鲜卑首领轲比能，从此，鲜卑分崩离析，边境平安。\n4. 武都氐人首领苻健降蜀，其弟带领400人降魏。\n5. 魏国讨伐辽东公孙渊不胜。\n6. 诸葛恪在丹阳坚壁清野，收降了山越部落，并在此征兵。\n\n## 卷74（公元238年）\n1. 魏明帝从长安召回司马懿攻打辽东，司马懿避实就虚，包围了襄平。公孙渊粮尽而逃被斩杀。辽东等四郡平定。\n2. 张飞的两个女儿先后被封为刘禅的皇后。王贵人的儿子被立为太子\n3. 吴国中书郎吕壹主管公文，于是以此诽谤官员，群臣恐惧，朱据事件之后，孙权醒悟，吕壹被处死。\n4. 魏明帝去世，8岁的曹芳即位，以司马懿、曹爽辅政。魏明帝富有决断，但又纵情任性；度量宏大，但没有建立恩德，以致后代大权旁落。\n5. 曹爽亲近小人，剥夺了司马懿的实权。\n6. 吴国分兵四路攻打魏国，司马懿救援樊城，吴军逃走。\n7. 吴国太子孙登去世，孙和被立为太子。\n8. 尚书郎汝南人邓艾建议开通漕渠，被采纳。以后东南战事，兵粮充裕，同时，水患也消除。\n9. 蒋琬将主要兵力由汉中移防到涪（fu）县。蒋琬病重，费祎被任命为大将军，接替蒋琬。费祎处事速度惊人，公私都能游刃有余。董允接替费祎担任尚书令后，整天办公，仍旧没有空闲，董允于是感叹人力相差如此之大。不久，蒋琬去世。\n10. 曹爽不顾司马懿反对，出兵攻打汉中。汉中守将王平、刘敏占据险要，虚张声势。大将军费祎统军救援，曹爽撤军途中被袭击，大败而逃。\n11. 孙权对待太子孙和和鲁王孙霸的待遇一样，群臣也分为两派，太子党处于劣势，陆逊也被责问，忧愤而死，其子陆抗接任。\n12. 蜀国董允去世，费祎推荐汝南人陈祗（zhi）接任侍中，陈祗与宦官黄皓（hao）内外勾结，专权害人。\n\n## 卷75（公元246年）\n1. 幽州刺史毋（wu）丘俭讨伐屡次侵犯边境的高句丽国王位宫，位宫远逃没有追上，高句丽首都被屠城。\n2. 曹爽软禁郭太后，独揽大权，司马懿装病不上朝。曹爽等人陪同魏帝扫墓，司马懿发动兵变，曹爽不听桓阶之计，反而亲信司马懿的承诺，曹爽等人被诛灭三族，司马懿掌权。\n3. 才女辛宪英嫁给了太常羊耽，羊祜也是其亲属。\n4. 夏侯渊之子夏侯霸害怕被诛杀，投降了蜀国。\n5. 姜维进犯长安，郭淮要断其后路，被迫撤军。后偷袭又被邓艾看破，只得无功而返。\n6. 孙权厌恶两党争权，太子孙和被废为民，鲁王孙霸被逼自杀，多位大臣获罪。\n7. 孙权立孙亮为太子。\n8. 王昶（chang）建议乘东吴内部分裂出兵攻打吴国，被采纳。魏国分兵三路攻吴，吴军战败。\n9. 王凌、令狐愚密谋废帝的计划泄漏，司马懿进军到寿春，诛灭了与事者三族。告发者杨康也被杀死。\n10. 司马懿去世，其子司马师接替大将军，管理国事。\n11. 邓艾献计分裂南匈奴部落，被采纳。\n12. 孙权病重，全公主等人推荐诸葛恪辅佐，被勉强同意。孙权去世，太子孙亮继位，诸葛恪位高权重。\n13. 魏国再次分兵三路攻吴，诸葛恪、丁奉等打败了魏军。\n14. 姜维攻打西平时，俘获了中郎将郭循。郭循想要刺杀蜀国后主，一直找不到机会。\n\n## 卷76（公元253年）\n1. 郭循刺死了蜀国大将军费祎。\n2. 诸葛恪因为上次的胜利而自大，不顾群臣反对，再次攻打魏国，结果围攻新城不下，被迫撤军。\n3. 孙峻与吴王密谋，摆鸿门宴，杀死了诸葛恪，其党羽诛灭三族。\n4. 司马师废魏帝曹芳为齐王，最终立高贵乡公曹髦（mao）为帝。\n5. 文钦、毋丘俭在寿春起兵讨伐司马师，司马师带病亲征，文钦之子文鸯（yang）骁勇善战，以一当千，但最终文钦兵败，投降了吴国。毋丘俭弃寿春而逃，被村民杀死。司马师也病重而死，司马昭接任大将军，主管国事。\n6. 姜维多次出兵陇西，但被魏国陈泰、邓艾等阻碍，始终没有大功业。\n\n## 卷77（公元256年）\n1. 姜维升任为大将军。\n2. 孙峻去世，孙綝（lin）接任，管理国事。吕据、滕胤（tengyin）不服，起兵失败，俩人身死家灭。\n3. 魏国诸葛诞在寿春反叛，并向吴国称臣求援。吴国朱异二次救援，都被石苞、州泰打败。孙綝让朱异再次出兵，不从，被杀死。孙綝领军回到建业，被吴人怨恨。\n4. 诸葛诞杀死了文钦，其子文鸯、文虎投降了司马昭，被封侯。寿春将士没有战意，于是，城破。诸葛诞逃亡中被杀死，亲卫拒绝投降，全部被杀。钟会为司马昭出谋划策，被人称为司马昭的张良。\n5. 吴主孙亮谋划诛杀孙綝，全公主之父全尚不谨慎泄密，于是，孙綝出兵废掉了孙亮，将其遣送回了封国。迎立孙休为帝，全尚被杀，全公主被迁到豫章。\n6. 吴主孙休在丁奉、张布的帮助下，乘腊祭集会时杀死了孙綝，诛灭了其三族。\n7. 魏主曹髦因不愿坐等被废而起兵，被贾充指使手下成济杀死，成济被定罪，灭族。曹璜(huang)被迎立为帝，改名为曹奂（huan），年仅15岁。\n8. 吴国邓由等人送来人质，诱使魏国出兵迎接，王基劝阻了司马昭，邓由果然是诈降\n9. 蜀国陈祗去世，董厥、诸葛瞻共同主持尚书事，仍旧改变不了宦官黄皓的错误行事，大臣们也只是安身立命。\n\n## 卷78（公元262年）\n1. 竹林七贤嵇康、阮籍等人高节奇行，轻蔑礼法。嵇康因为得罪钟会，被诬陷致死。\n2. 钟会、邓艾、卫瓘（guan）等大举攻蜀，蒋舒投降，傅佥（qian）战死。钟会占领了汉中。姜维等在剑阁设防，钟会无法前进。邓艾从阴平小路奔袭涪县，诸葛瞻不听黄崇占据险要的建议，兵败身死。谯（qiao）周说服了蜀主刘禅向邓艾投降，蜀国灭亡。黄皓行贿邓艾左右，得以免死。刘禅命令姜维等向钟会投降，将士们都非常愤怒。\n3. 钟会诬陷邓艾，邓艾被关进囚车，后来被卫瓘派部下杀死。姜维说服了钟会，尽杀魏国将领，最终遇到反抗没有成功，魏国将领的部下杀死了姜维和钟会。\n4. 蜀国罗宪驻守永安，打退了吴国的进犯，投降了魏国。南中都督霍弋（yi）确定刘禅受到优待后才投降魏国。\n5. 吴主孙休去世，丞相濮阳兴、张布等人违背遗嘱，立年长的孙皓（hao）为帝。孙皓即位后粗暴骄横、嗜酒好色，濮阳兴和张布都被杀死。\n6. 司马昭被何曾、裴秀等人说服，立司马炎为世子。\n\n\n","slug":"資治通鑑/资治通鉴小结069-078卷-魏纪","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobri5001yj5ly3e6p29gl","content":"<h1><span id=\"资治通鉴小结-069-078-卷-魏纪\"> 资治通鉴小结 069 - 078 卷 魏纪</span></h1>\n<h2><span id=\"卷69公元220年\"> 卷69（公元220年）</span></h2>\n<ol>\n<li>曹操在洛阳去世，曹丕继位。曹操唯才是举、知人善任，生活俭朴。</li>\n<li>蜀国上庸主将孟达因为受不了被副将刘封欺凌而投降了曹丕，被重用。曹军攻打上庸，太守申耽投降，上庸陷落。</li>\n<li>曹丕接受汉献帝禅让，即皇帝位，是为魏文帝。</li>\n<li>刘备称帝，任命诸葛亮为丞相，吴懿之女吴氏被立为皇后，刘禅被立为太子。费诗因为劝谏称帝而被降职。</li>\n<li>张飞被部下张达、范强杀死，俩人带着人头投降了孙权。</li>\n<li>汉主刘备亲征孙权，孙权请和，不准。于是，任命陆逊为大都督，以对抗刘备。并向魏国称臣。刘晔劝说魏文帝曹丕乘机攻吴，不准。</li>\n<li>凉州刺史张既平定了凉州叛乱。</li>\n<li>孙权立孙登为太子，以诸葛瑾之子诸葛恪（ke）等四人教导太子，时称“四友”</li>\n<li>鄯善、龟兹、于阗分别派遣使者入魏国进贡，中原与西域又恢复联系，并设置了戊己校尉。</li>\n<li>陆逊火烧连营，刘备败走白帝城。夷陵之战以吴国的大胜而结束。</li>\n<li>孙权不送人质，魏国分三路攻打吴国，吴国分五路迎击。</li>\n<li>孙权派人去蜀国，两国又恢复了联系。</li>\n</ol>\n<h2><span id=\"卷70公元223年\"> 卷70（公元223年）</span></h2>\n<ol>\n<li>朱恒镇守濡须口，打败了来犯的曹仁；朱然防守江陵，曹真也久攻不下；董昭劝说魏文帝，夏侯尚等从中洲撤军，三路攻吴失败。</li>\n<li>刘备白帝城(永安)托孤，刘备去世，刘禅继位，国家大小事务，全由诸葛亮决定。</li>\n<li>邓芝出使吴国，吴国与魏国绝交，与蜀国和好。</li>\n<li>鲜卑轲比能经常抢掠并、幽两州。并州刺史梁习讨伐，大获全胜。</li>\n<li>诸葛亮率军南征，杀死了雍闿和高定，部下马忠和李恢也分别讨灭了各县的叛军。随后七擒孟获，西南夷族平定。</li>\n<li>魏文帝多次想攻打吴国，都受阻于长江。</li>\n<li>魏文帝睚眦（zi）必报，杀死了直言的鲍信之子鲍勋，又削夺了曹洪的官爵和封地</li>\n<li>魏文帝去世，甄夫人的儿子曹睿继位，是为魏明帝。曹真、司马懿、陈群按遗诏辅政。</li>\n<li>孙权攻打魏国江夏，文聘防守严密，孙权不能取胜而退；诸葛瑾攻打襄阳，也被司马懿打败。</li>\n<li>吴国东部三郡山民再次反叛，全琮收降万余人，平定了叛乱。</li>\n<li>交州刺史吕岱不讲信义，诱杀了交趾太守士徽兄弟。</li>\n<li>诸葛亮上“前出师表”，打算攻打魏国，驻扎在汉中。</li>\n</ol>\n<h2><span id=\"卷71公元228年\"> 卷71（公元228年）</span></h2>\n<ol>\n<li>诸葛亮一出祁山，不听魏延奇袭长安之计。马谡（su）骄傲失街亭，诸葛亮撤回汉中，挥泪斩杀马谡。姜维投降了诸葛亮。</li>\n<li>吴国鄱（po）阳太守周鲂断发诱曹休，陆逊不听朱桓的伏兵计，曹休大败，贾逵救下曹休，不久，曹休羞愧而死。</li>\n<li>诸葛亮上后出师表，二出祁山，受阻于郝（hao）昭防守的陈仓城。粮尽后，诸葛亮撤军，王双追击被杀死。</li>\n<li>辽东公孙渊从公孙恭手中夺回了权力，魏明帝不听刘晔劝说，封公孙渊为辽东太守。</li>\n<li>诸葛亮亲征，郭淮不战而退，于是，诸葛亮攻下武都、阳平二郡。</li>\n<li>孙权即皇帝位，立孙登为太子，迁都建业。以陆逊辅佐太子孙登留守武昌。</li>\n<li>孙权派卫温等渡海寻找夷洲，以俘获当地民众以增加民力，陆逊、全琮劝阻，不听。</li>\n<li>曹真出兵攻打蜀国，诸葛亮迎击。</li>\n<li>诸葛亮长史蒋琬每次都能保证出征的兵粮，受到诸葛亮的称赞。</li>\n<li>武陵蛮人反叛吴国。</li>\n</ol>\n<h2><span id=\"卷72公元231年\"> 卷72（公元231年）</span></h2>\n<ol>\n<li>卫温等人出海一年，士兵因病而死者十之八九，最终没有达到目标，卫温论罪被杀。</li>\n<li>诸葛亮三出祁山，以木牛流马运输粮草。司马懿防守长安，统军迎战失败，于是，据险防守不交战，诸葛亮因为粮尽而撤军，大将张颌追击，被杀。李平（李严）因为假传圣旨和耽误粮草而被流放梓潼。</li>\n<li>太子孙登从武昌入朝，于是留在建业，陆逊镇守武昌。</li>\n<li>有人对魏明帝说刘晔迎合，让其以反语验证，果然应验，刘晔被疏远。不久，忧虑而死。</li>\n<li>吴国每年都有攻魏的计划，都被满宠防住。</li>\n<li>群臣反对孙权交结辽东公孙渊，张昭因其建议不被采纳而称病在家。孙权用土封其大门，张昭则从里封死。孙权多次道歉，甚至放火，张昭也不出来。后其子将其扶出，被迫上朝。</li>\n<li>诸葛亮休养生息三年，率军十万，四出祁山，驻军五丈原，屯田以长期作战。并与吴国相约共同进军。</li>\n<li>吴国分三路攻打魏国，魏明帝亲征，吴国撤军。</li>\n<li>司马懿坚守100多天不战，诸葛亮病死五丈原，姜维率军吓退司马懿。魏延与杨仪争权，魏延部众离散，马岱追上魏延，将其斩杀。</li>\n<li>百姓要求建庙祭祀诸葛亮，不准，于是在路边祭祀，才被同意建一座祭庙。</li>\n<li>蒋琬接替诸葛亮，总管国事。</li>\n<li>潘俊讨伐武陵蛮人，费了几年时间，终于平定。潘俊回到武昌。</li>\n</ol>\n<h2><span id=\"卷73公元235年\"> 卷73（公元235年）</span></h2>\n<ol>\n<li>杨仪因未得到要职而心怀怨恨，被逼自杀。</li>\n<li>魏明帝大兴土木，沉迷于美女。群臣劝谏即使激烈，能够宽容他们。</li>\n<li>幽州刺史王雄派人刺杀了鲜卑首领轲比能，从此，鲜卑分崩离析，边境平安。</li>\n<li>武都氐人首领苻健降蜀，其弟带领400人降魏。</li>\n<li>魏国讨伐辽东公孙渊不胜。</li>\n<li>诸葛恪在丹阳坚壁清野，收降了山越部落，并在此征兵。</li>\n</ol>\n<h2><span id=\"卷74公元238年\"> 卷74（公元238年）</span></h2>\n<ol>\n<li>魏明帝从长安召回司马懿攻打辽东，司马懿避实就虚，包围了襄平。公孙渊粮尽而逃被斩杀。辽东等四郡平定。</li>\n<li>张飞的两个女儿先后被封为刘禅的皇后。王贵人的儿子被立为太子</li>\n<li>吴国中书郎吕壹主管公文，于是以此诽谤官员，群臣恐惧，朱据事件之后，孙权醒悟，吕壹被处死。</li>\n<li>魏明帝去世，8岁的曹芳即位，以司马懿、曹爽辅政。魏明帝富有决断，但又纵情任性；度量宏大，但没有建立恩德，以致后代大权旁落。</li>\n<li>曹爽亲近小人，剥夺了司马懿的实权。</li>\n<li>吴国分兵四路攻打魏国，司马懿救援樊城，吴军逃走。</li>\n<li>吴国太子孙登去世，孙和被立为太子。</li>\n<li>尚书郎汝南人邓艾建议开通漕渠，被采纳。以后东南战事，兵粮充裕，同时，水患也消除。</li>\n<li>蒋琬将主要兵力由汉中移防到涪（fu）县。蒋琬病重，费祎被任命为大将军，接替蒋琬。费祎处事速度惊人，公私都能游刃有余。董允接替费祎担任尚书令后，整天办公，仍旧没有空闲，董允于是感叹人力相差如此之大。不久，蒋琬去世。</li>\n<li>曹爽不顾司马懿反对，出兵攻打汉中。汉中守将王平、刘敏占据险要，虚张声势。大将军费祎统军救援，曹爽撤军途中被袭击，大败而逃。</li>\n<li>孙权对待太子孙和和鲁王孙霸的待遇一样，群臣也分为两派，太子党处于劣势，陆逊也被责问，忧愤而死，其子陆抗接任。</li>\n<li>蜀国董允去世，费祎推荐汝南人陈祗（zhi）接任侍中，陈祗与宦官黄皓（hao）内外勾结，专权害人。</li>\n</ol>\n<h2><span id=\"卷75公元246年\"> 卷75（公元246年）</span></h2>\n<ol>\n<li>幽州刺史毋（wu）丘俭讨伐屡次侵犯边境的高句丽国王位宫，位宫远逃没有追上，高句丽首都被屠城。</li>\n<li>曹爽软禁郭太后，独揽大权，司马懿装病不上朝。曹爽等人陪同魏帝扫墓，司马懿发动兵变，曹爽不听桓阶之计，反而亲信司马懿的承诺，曹爽等人被诛灭三族，司马懿掌权。</li>\n<li>才女辛宪英嫁给了太常羊耽，羊祜也是其亲属。</li>\n<li>夏侯渊之子夏侯霸害怕被诛杀，投降了蜀国。</li>\n<li>姜维进犯长安，郭淮要断其后路，被迫撤军。后偷袭又被邓艾看破，只得无功而返。</li>\n<li>孙权厌恶两党争权，太子孙和被废为民，鲁王孙霸被逼自杀，多位大臣获罪。</li>\n<li>孙权立孙亮为太子。</li>\n<li>王昶（chang）建议乘东吴内部分裂出兵攻打吴国，被采纳。魏国分兵三路攻吴，吴军战败。</li>\n<li>王凌、令狐愚密谋废帝的计划泄漏，司马懿进军到寿春，诛灭了与事者三族。告发者杨康也被杀死。</li>\n<li>司马懿去世，其子司马师接替大将军，管理国事。</li>\n<li>邓艾献计分裂南匈奴部落，被采纳。</li>\n<li>孙权病重，全公主等人推荐诸葛恪辅佐，被勉强同意。孙权去世，太子孙亮继位，诸葛恪位高权重。</li>\n<li>魏国再次分兵三路攻吴，诸葛恪、丁奉等打败了魏军。</li>\n<li>姜维攻打西平时，俘获了中郎将郭循。郭循想要刺杀蜀国后主，一直找不到机会。</li>\n</ol>\n<h2><span id=\"卷76公元253年\"> 卷76（公元253年）</span></h2>\n<ol>\n<li>郭循刺死了蜀国大将军费祎。</li>\n<li>诸葛恪因为上次的胜利而自大，不顾群臣反对，再次攻打魏国，结果围攻新城不下，被迫撤军。</li>\n<li>孙峻与吴王密谋，摆鸿门宴，杀死了诸葛恪，其党羽诛灭三族。</li>\n<li>司马师废魏帝曹芳为齐王，最终立高贵乡公曹髦（mao）为帝。</li>\n<li>文钦、毋丘俭在寿春起兵讨伐司马师，司马师带病亲征，文钦之子文鸯（yang）骁勇善战，以一当千，但最终文钦兵败，投降了吴国。毋丘俭弃寿春而逃，被村民杀死。司马师也病重而死，司马昭接任大将军，主管国事。</li>\n<li>姜维多次出兵陇西，但被魏国陈泰、邓艾等阻碍，始终没有大功业。</li>\n</ol>\n<h2><span id=\"卷77公元256年\"> 卷77（公元256年）</span></h2>\n<ol>\n<li>姜维升任为大将军。</li>\n<li>孙峻去世，孙綝（lin）接任，管理国事。吕据、滕胤（tengyin）不服，起兵失败，俩人身死家灭。</li>\n<li>魏国诸葛诞在寿春反叛，并向吴国称臣求援。吴国朱异二次救援，都被石苞、州泰打败。孙綝让朱异再次出兵，不从，被杀死。孙綝领军回到建业，被吴人怨恨。</li>\n<li>诸葛诞杀死了文钦，其子文鸯、文虎投降了司马昭，被封侯。寿春将士没有战意，于是，城破。诸葛诞逃亡中被杀死，亲卫拒绝投降，全部被杀。钟会为司马昭出谋划策，被人称为司马昭的张良。</li>\n<li>吴主孙亮谋划诛杀孙綝，全公主之父全尚不谨慎泄密，于是，孙綝出兵废掉了孙亮，将其遣送回了封国。迎立孙休为帝，全尚被杀，全公主被迁到豫章。</li>\n<li>吴主孙休在丁奉、张布的帮助下，乘腊祭集会时杀死了孙綝，诛灭了其三族。</li>\n<li>魏主曹髦因不愿坐等被废而起兵，被贾充指使手下成济杀死，成济被定罪，灭族。曹璜(huang)被迎立为帝，改名为曹奂（huan），年仅15岁。</li>\n<li>吴国邓由等人送来人质，诱使魏国出兵迎接，王基劝阻了司马昭，邓由果然是诈降</li>\n<li>蜀国陈祗去世，董厥、诸葛瞻共同主持尚书事，仍旧改变不了宦官黄皓的错误行事，大臣们也只是安身立命。</li>\n</ol>\n<h2><span id=\"卷78公元262年\"> 卷78（公元262年）</span></h2>\n<ol>\n<li>竹林七贤嵇康、阮籍等人高节奇行，轻蔑礼法。嵇康因为得罪钟会，被诬陷致死。</li>\n<li>钟会、邓艾、卫瓘（guan）等大举攻蜀，蒋舒投降，傅佥（qian）战死。钟会占领了汉中。姜维等在剑阁设防，钟会无法前进。邓艾从阴平小路奔袭涪县，诸葛瞻不听黄崇占据险要的建议，兵败身死。谯（qiao）周说服了蜀主刘禅向邓艾投降，蜀国灭亡。黄皓行贿邓艾左右，得以免死。刘禅命令姜维等向钟会投降，将士们都非常愤怒。</li>\n<li>钟会诬陷邓艾，邓艾被关进囚车，后来被卫瓘派部下杀死。姜维说服了钟会，尽杀魏国将领，最终遇到反抗没有成功，魏国将领的部下杀死了姜维和钟会。</li>\n<li>蜀国罗宪驻守永安，打退了吴国的进犯，投降了魏国。南中都督霍弋（yi）确定刘禅受到优待后才投降魏国。</li>\n<li>吴主孙休去世，丞相濮阳兴、张布等人违背遗嘱，立年长的孙皓（hao）为帝。孙皓即位后粗暴骄横、嗜酒好色，濮阳兴和张布都被杀死。</li>\n<li>司马昭被何曾、裴秀等人说服，立司马炎为世子。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"资治通鉴小结-069-078-卷-魏纪\"><a class=\"markdownIt-Anchor\" href=\"#资治通鉴小结-069-078-卷-魏纪\"></a> 资治通鉴小结 069 - 078 卷 魏纪</h1>\n<h2 id=\"卷69公元220年\"><a class=\"markdownIt-Anchor\" href=\"#卷69公元220年\"></a> 卷69（公元220年）</h2>\n<ol>\n<li>曹操在洛阳去世，曹丕继位。曹操唯才是举、知人善任，生活俭朴。</li>\n<li>蜀国上庸主将孟达因为受不了被副将刘封欺凌而投降了曹丕，被重用。曹军攻打上庸，太守申耽投降，上庸陷落。</li>\n<li>曹丕接受汉献帝禅让，即皇帝位，是为魏文帝。</li>\n<li>刘备称帝，任命诸葛亮为丞相，吴懿之女吴氏被立为皇后，刘禅被立为太子。费诗因为劝谏称帝而被降职。</li>\n<li>张飞被部下张达、范强杀死，俩人带着人头投降了孙权。</li>\n<li>汉主刘备亲征孙权，孙权请和，不准。于是，任命陆逊为大都督，以对抗刘备。并向魏国称臣。刘晔劝说魏文帝曹丕乘机攻吴，不准。</li>\n<li>凉州刺史张既平定了凉州叛乱。</li>\n<li>孙权立孙登为太子，以诸葛瑾之子诸葛恪（ke）等四人教导太子，时称“四友”</li>\n<li>鄯善、龟兹、于阗分别派遣使者入魏国进贡，中原与西域又恢复联系，并设置了戊己校尉。</li>\n<li>陆逊火烧连营，刘备败走白帝城。夷陵之战以吴国的大胜而结束。</li>\n<li>孙权不送人质，魏国分三路攻打吴国，吴国分五路迎击。</li>\n<li>孙权派人去蜀国，两国又恢复了联系。</li>\n</ol>\n<h2 id=\"卷70公元223年\"><a class=\"markdownIt-Anchor\" href=\"#卷70公元223年\"></a> 卷70（公元223年）</h2>\n<ol>\n<li>朱恒镇守濡须口，打败了来犯的曹仁；朱然防守江陵，曹真也久攻不下；董昭劝说魏文帝，夏侯尚等从中洲撤军，三路攻吴失败。</li>\n<li>刘备白帝城(永安)托孤，刘备去世，刘禅继位，国家大小事务，全由诸葛亮决定。</li>\n<li>邓芝出使吴国，吴国与魏国绝交，与蜀国和好。</li>\n<li>鲜卑轲比能经常抢掠并、幽两州。并州刺史梁习讨伐，大获全胜。</li>\n<li>诸葛亮率军南征，杀死了雍闿和高定，部下马忠和李恢也分别讨灭了各县的叛军。随后七擒孟获，西南夷族平定。</li>\n<li>魏文帝多次想攻打吴国，都受阻于长江。</li>\n<li>魏文帝睚眦（zi）必报，杀死了直言的鲍信之子鲍勋，又削夺了曹洪的官爵和封地</li>\n<li>魏文帝去世，甄夫人的儿子曹睿继位，是为魏明帝。曹真、司马懿、陈群按遗诏辅政。</li>\n<li>孙权攻打魏国江夏，文聘防守严密，孙权不能取胜而退；诸葛瑾攻打襄阳，也被司马懿打败。</li>\n<li>吴国东部三郡山民再次反叛，全琮收降万余人，平定了叛乱。</li>\n<li>交州刺史吕岱不讲信义，诱杀了交趾太守士徽兄弟。</li>\n<li>诸葛亮上“前出师表”，打算攻打魏国，驻扎在汉中。</li>\n</ol>\n<h2 id=\"卷71公元228年\"><a class=\"markdownIt-Anchor\" href=\"#卷71公元228年\"></a> 卷71（公元228年）</h2>\n<ol>\n<li>诸葛亮一出祁山，不听魏延奇袭长安之计。马谡（su）骄傲失街亭，诸葛亮撤回汉中，挥泪斩杀马谡。姜维投降了诸葛亮。</li>\n<li>吴国鄱（po）阳太守周鲂断发诱曹休，陆逊不听朱桓的伏兵计，曹休大败，贾逵救下曹休，不久，曹休羞愧而死。</li>\n<li>诸葛亮上后出师表，二出祁山，受阻于郝（hao）昭防守的陈仓城。粮尽后，诸葛亮撤军，王双追击被杀死。</li>\n<li>辽东公孙渊从公孙恭手中夺回了权力，魏明帝不听刘晔劝说，封公孙渊为辽东太守。</li>\n<li>诸葛亮亲征，郭淮不战而退，于是，诸葛亮攻下武都、阳平二郡。</li>\n<li>孙权即皇帝位，立孙登为太子，迁都建业。以陆逊辅佐太子孙登留守武昌。</li>\n<li>孙权派卫温等渡海寻找夷洲，以俘获当地民众以增加民力，陆逊、全琮劝阻，不听。</li>\n<li>曹真出兵攻打蜀国，诸葛亮迎击。</li>\n<li>诸葛亮长史蒋琬每次都能保证出征的兵粮，受到诸葛亮的称赞。</li>\n<li>武陵蛮人反叛吴国。</li>\n</ol>\n<h2 id=\"卷72公元231年\"><a class=\"markdownIt-Anchor\" href=\"#卷72公元231年\"></a> 卷72（公元231年）</h2>\n<ol>\n<li>卫温等人出海一年，士兵因病而死者十之八九，最终没有达到目标，卫温论罪被杀。</li>\n<li>诸葛亮三出祁山，以木牛流马运输粮草。司马懿防守长安，统军迎战失败，于是，据险防守不交战，诸葛亮因为粮尽而撤军，大将张颌追击，被杀。李平（李严）因为假传圣旨和耽误粮草而被流放梓潼。</li>\n<li>太子孙登从武昌入朝，于是留在建业，陆逊镇守武昌。</li>\n<li>有人对魏明帝说刘晔迎合，让其以反语验证，果然应验，刘晔被疏远。不久，忧虑而死。</li>\n<li>吴国每年都有攻魏的计划，都被满宠防住。</li>\n<li>群臣反对孙权交结辽东公孙渊，张昭因其建议不被采纳而称病在家。孙权用土封其大门，张昭则从里封死。孙权多次道歉，甚至放火，张昭也不出来。后其子将其扶出，被迫上朝。</li>\n<li>诸葛亮休养生息三年，率军十万，四出祁山，驻军五丈原，屯田以长期作战。并与吴国相约共同进军。</li>\n<li>吴国分三路攻打魏国，魏明帝亲征，吴国撤军。</li>\n<li>司马懿坚守100多天不战，诸葛亮病死五丈原，姜维率军吓退司马懿。魏延与杨仪争权，魏延部众离散，马岱追上魏延，将其斩杀。</li>\n<li>百姓要求建庙祭祀诸葛亮，不准，于是在路边祭祀，才被同意建一座祭庙。</li>\n<li>蒋琬接替诸葛亮，总管国事。</li>\n<li>潘俊讨伐武陵蛮人，费了几年时间，终于平定。潘俊回到武昌。</li>\n</ol>\n<h2 id=\"卷73公元235年\"><a class=\"markdownIt-Anchor\" href=\"#卷73公元235年\"></a> 卷73（公元235年）</h2>\n<ol>\n<li>杨仪因未得到要职而心怀怨恨，被逼自杀。</li>\n<li>魏明帝大兴土木，沉迷于美女。群臣劝谏即使激烈，能够宽容他们。</li>\n<li>幽州刺史王雄派人刺杀了鲜卑首领轲比能，从此，鲜卑分崩离析，边境平安。</li>\n<li>武都氐人首领苻健降蜀，其弟带领400人降魏。</li>\n<li>魏国讨伐辽东公孙渊不胜。</li>\n<li>诸葛恪在丹阳坚壁清野，收降了山越部落，并在此征兵。</li>\n</ol>\n<h2 id=\"卷74公元238年\"><a class=\"markdownIt-Anchor\" href=\"#卷74公元238年\"></a> 卷74（公元238年）</h2>\n<ol>\n<li>魏明帝从长安召回司马懿攻打辽东，司马懿避实就虚，包围了襄平。公孙渊粮尽而逃被斩杀。辽东等四郡平定。</li>\n<li>张飞的两个女儿先后被封为刘禅的皇后。王贵人的儿子被立为太子</li>\n<li>吴国中书郎吕壹主管公文，于是以此诽谤官员，群臣恐惧，朱据事件之后，孙权醒悟，吕壹被处死。</li>\n<li>魏明帝去世，8岁的曹芳即位，以司马懿、曹爽辅政。魏明帝富有决断，但又纵情任性；度量宏大，但没有建立恩德，以致后代大权旁落。</li>\n<li>曹爽亲近小人，剥夺了司马懿的实权。</li>\n<li>吴国分兵四路攻打魏国，司马懿救援樊城，吴军逃走。</li>\n<li>吴国太子孙登去世，孙和被立为太子。</li>\n<li>尚书郎汝南人邓艾建议开通漕渠，被采纳。以后东南战事，兵粮充裕，同时，水患也消除。</li>\n<li>蒋琬将主要兵力由汉中移防到涪（fu）县。蒋琬病重，费祎被任命为大将军，接替蒋琬。费祎处事速度惊人，公私都能游刃有余。董允接替费祎担任尚书令后，整天办公，仍旧没有空闲，董允于是感叹人力相差如此之大。不久，蒋琬去世。</li>\n<li>曹爽不顾司马懿反对，出兵攻打汉中。汉中守将王平、刘敏占据险要，虚张声势。大将军费祎统军救援，曹爽撤军途中被袭击，大败而逃。</li>\n<li>孙权对待太子孙和和鲁王孙霸的待遇一样，群臣也分为两派，太子党处于劣势，陆逊也被责问，忧愤而死，其子陆抗接任。</li>\n<li>蜀国董允去世，费祎推荐汝南人陈祗（zhi）接任侍中，陈祗与宦官黄皓（hao）内外勾结，专权害人。</li>\n</ol>\n<h2 id=\"卷75公元246年\"><a class=\"markdownIt-Anchor\" href=\"#卷75公元246年\"></a> 卷75（公元246年）</h2>\n<ol>\n<li>幽州刺史毋（wu）丘俭讨伐屡次侵犯边境的高句丽国王位宫，位宫远逃没有追上，高句丽首都被屠城。</li>\n<li>曹爽软禁郭太后，独揽大权，司马懿装病不上朝。曹爽等人陪同魏帝扫墓，司马懿发动兵变，曹爽不听桓阶之计，反而亲信司马懿的承诺，曹爽等人被诛灭三族，司马懿掌权。</li>\n<li>才女辛宪英嫁给了太常羊耽，羊祜也是其亲属。</li>\n<li>夏侯渊之子夏侯霸害怕被诛杀，投降了蜀国。</li>\n<li>姜维进犯长安，郭淮要断其后路，被迫撤军。后偷袭又被邓艾看破，只得无功而返。</li>\n<li>孙权厌恶两党争权，太子孙和被废为民，鲁王孙霸被逼自杀，多位大臣获罪。</li>\n<li>孙权立孙亮为太子。</li>\n<li>王昶（chang）建议乘东吴内部分裂出兵攻打吴国，被采纳。魏国分兵三路攻吴，吴军战败。</li>\n<li>王凌、令狐愚密谋废帝的计划泄漏，司马懿进军到寿春，诛灭了与事者三族。告发者杨康也被杀死。</li>\n<li>司马懿去世，其子司马师接替大将军，管理国事。</li>\n<li>邓艾献计分裂南匈奴部落，被采纳。</li>\n<li>孙权病重，全公主等人推荐诸葛恪辅佐，被勉强同意。孙权去世，太子孙亮继位，诸葛恪位高权重。</li>\n<li>魏国再次分兵三路攻吴，诸葛恪、丁奉等打败了魏军。</li>\n<li>姜维攻打西平时，俘获了中郎将郭循。郭循想要刺杀蜀国后主，一直找不到机会。</li>\n</ol>\n<h2 id=\"卷76公元253年\"><a class=\"markdownIt-Anchor\" href=\"#卷76公元253年\"></a> 卷76（公元253年）</h2>\n<ol>\n<li>郭循刺死了蜀国大将军费祎。</li>\n<li>诸葛恪因为上次的胜利而自大，不顾群臣反对，再次攻打魏国，结果围攻新城不下，被迫撤军。</li>\n<li>孙峻与吴王密谋，摆鸿门宴，杀死了诸葛恪，其党羽诛灭三族。</li>\n<li>司马师废魏帝曹芳为齐王，最终立高贵乡公曹髦（mao）为帝。</li>\n<li>文钦、毋丘俭在寿春起兵讨伐司马师，司马师带病亲征，文钦之子文鸯（yang）骁勇善战，以一当千，但最终文钦兵败，投降了吴国。毋丘俭弃寿春而逃，被村民杀死。司马师也病重而死，司马昭接任大将军，主管国事。</li>\n<li>姜维多次出兵陇西，但被魏国陈泰、邓艾等阻碍，始终没有大功业。</li>\n</ol>\n<h2 id=\"卷77公元256年\"><a class=\"markdownIt-Anchor\" href=\"#卷77公元256年\"></a> 卷77（公元256年）</h2>\n<ol>\n<li>姜维升任为大将军。</li>\n<li>孙峻去世，孙綝（lin）接任，管理国事。吕据、滕胤（tengyin）不服，起兵失败，俩人身死家灭。</li>\n<li>魏国诸葛诞在寿春反叛，并向吴国称臣求援。吴国朱异二次救援，都被石苞、州泰打败。孙綝让朱异再次出兵，不从，被杀死。孙綝领军回到建业，被吴人怨恨。</li>\n<li>诸葛诞杀死了文钦，其子文鸯、文虎投降了司马昭，被封侯。寿春将士没有战意，于是，城破。诸葛诞逃亡中被杀死，亲卫拒绝投降，全部被杀。钟会为司马昭出谋划策，被人称为司马昭的张良。</li>\n<li>吴主孙亮谋划诛杀孙綝，全公主之父全尚不谨慎泄密，于是，孙綝出兵废掉了孙亮，将其遣送回了封国。迎立孙休为帝，全尚被杀，全公主被迁到豫章。</li>\n<li>吴主孙休在丁奉、张布的帮助下，乘腊祭集会时杀死了孙綝，诛灭了其三族。</li>\n<li>魏主曹髦因不愿坐等被废而起兵，被贾充指使手下成济杀死，成济被定罪，灭族。曹璜(huang)被迎立为帝，改名为曹奂（huan），年仅15岁。</li>\n<li>吴国邓由等人送来人质，诱使魏国出兵迎接，王基劝阻了司马昭，邓由果然是诈降</li>\n<li>蜀国陈祗去世，董厥、诸葛瞻共同主持尚书事，仍旧改变不了宦官黄皓的错误行事，大臣们也只是安身立命。</li>\n</ol>\n<h2 id=\"卷78公元262年\"><a class=\"markdownIt-Anchor\" href=\"#卷78公元262年\"></a> 卷78（公元262年）</h2>\n<ol>\n<li>竹林七贤嵇康、阮籍等人高节奇行，轻蔑礼法。嵇康因为得罪钟会，被诬陷致死。</li>\n<li>钟会、邓艾、卫瓘（guan）等大举攻蜀，蒋舒投降，傅佥（qian）战死。钟会占领了汉中。姜维等在剑阁设防，钟会无法前进。邓艾从阴平小路奔袭涪县，诸葛瞻不听黄崇占据险要的建议，兵败身死。谯（qiao）周说服了蜀主刘禅向邓艾投降，蜀国灭亡。黄皓行贿邓艾左右，得以免死。刘禅命令姜维等向钟会投降，将士们都非常愤怒。</li>\n<li>钟会诬陷邓艾，邓艾被关进囚车，后来被卫瓘派部下杀死。姜维说服了钟会，尽杀魏国将领，最终遇到反抗没有成功，魏国将领的部下杀死了姜维和钟会。</li>\n<li>蜀国罗宪驻守永安，打退了吴国的进犯，投降了魏国。南中都督霍弋（yi）确定刘禅受到优待后才投降魏国。</li>\n<li>吴主孙休去世，丞相濮阳兴、张布等人违背遗嘱，立年长的孙皓（hao）为帝。孙皓即位后粗暴骄横、嗜酒好色，濮阳兴和张布都被杀死。</li>\n<li>司马昭被何曾、裴秀等人说服，立司马炎为世子。</li>\n</ol>\n"},{"title":"资治通鉴小结079-118卷晋纪","catalog":true,"date":"2018-03-07T10:11:29.000Z","header-img":"/img/17.jpg","subtitle":"资治通鉴小结079-118卷晋纪","_content":"\n# 资治通鉴小结 079 - 118 卷 晋纪\n\n## 卷79（公元265年）\n1.  司马昭去世，太子司马炎接任相国。不久，司马炎接受了魏元帝禅让的皇位，是为晋武帝。立杨文宗的女儿为皇后，司马衷为太子。\n2.  吴国大都督陶璜（huang）率军十万，终于攻下交趾，交州平定。\n3.  吴国西陵督步阐（chan）因为突然被征召而反叛。西陵之战，陆抗打败了晋国杨肇（zhao）、羊祜（hu）的援军，攻陷了西陵，杀死了步阐等人。\n4.  吴主孙皓继续淫乐，亲近小人，残害忠良，还多次出兵招惹晋国。\n\n## 卷80（公元273年）\n1.  邓艾案被平反，封邓艾的孙子邓朗为郎中。\n2.  晋武帝司马炎下令挑选公卿女子入宫，挑选没有选完，则禁止天下嫁娶，后又挑选5000民间女子入宫。\n3.  陆抗病死，吴主孙皓让陆抗的5个儿子接管陆抗的军队。\n4.  周舫之子周处除掉了包括自己在内的“三害”。一改往日作风，而去修养德行。\n5.  魏国皇帝曹芳被司马师废后，太宰范粲36年不说话，直到去世。\n6.  晋朝杨皇后去世，堂妹杨氏依照皇后的遗嘱被立为皇后，其父杨骏被封侯。\n7.  晋朝文鸯打败了胡人，20万人投降。\n8.  晋朝卫瓘离间鲜卑部落，功绩很大。\n9.  晋朝羊祜去世，杜预接替驻守襄阳。\n10.  晋朝马隆毛遂自荐，征募了3500名善拉重弓的大力士讨伐凉州鲜卑，杀死了秃发树机能，凉州平定。\n\n## 卷81（公元280年）\n1.  王浚、唐彬率领巴蜀士兵破掉水上障碍，攻克了西陵，杀死吴都督留宪等。接着攻下荆门、夷道两城，杀死夷道监陆宴。又打败吴水军都督陆景，将他杀死。随后与胡奋、王戎一起平定了夏口，最后进入建业，吴主孙皓投降，吴国灭亡。\n2.  杜预部将周旨偷袭，从乐乡城中活捉了吴都督孙歆（ xin）。杜预攻克江陵，杀死了江陵督伍延，后负责安抚荆南地区。\n3.  吴国丞相张悌（ti）领兵渡江围攻王浑的部将，兵溃散而败。\n4.  王浚与王浑因为灭吴的功劳而争斗，王浑因为有众多党羽而处于优势。\n5.  晋武帝因为天下一统而开始淫乐，后族“三杨”当权，忠义之臣被疏远。\n6.  辽西的慕容鲜卑攻打昌黎城，被严询打败，斩获万计，但后来的入侵仍旧不断。\n7.  齐王司马攸贤明，冯挑拨其与晋武帝的关系，齐王愤恨而死。\n8.  匈奴部落接连投降晋朝。\n\n## 卷82（公元289年）\n1.  慕容鲜卑首领慕容廆（gui）向西晋投降，以谦让发展实力。\n2.  匈奴北部都尉刘渊乐善好施，匈奴五部豪杰大多归心于他。不久，刘渊被任命为匈奴五部大都督。\n3.  晋武帝沉迷于酒色，不久，生病去世。太子司马衷即位，是为晋惠帝。皇后之父杨骏乘机把持朝政。\n4.  贾皇后联合宦官李肇（zhao）、司马皇族等联合，出兵诛杀了杨骏及其党羽，杨太后也被废为民。司马亮主政，专权独断。八王之乱由此拉开了序幕。\n5.  楚王司马玮（wei）、贾皇后、宦官李肇等联合，出兵杀死了司马亮。随后，司马玮也被贾皇后杀死。从此，贾后独揽大权，大任亲族，张华等人辅政。\n6.  秦、雍之地的氐人、羌人反叛，打败了官军，立氐帅齐万年为帝。关中战乱不断，大量流民涌现，李特兄弟经常救济他们。\n\n## 卷83（公元299年）\n1.  孟观率军击破了氐人，抓获了齐万年。\n2.  贾皇后淫乱非常，在她的设计下，太子被废黜为平民。\n3.  贾皇后派人杀死了太子，统领禁军的赵王司马伦联合齐王司马冏（jiong）等人，假造诏书，以谋害太子的罪名废贾后为平民，后将其毒杀，其党羽和张华等人也被杀死，司马伦自领相国位。但其才能平庸，实权控制在谋臣孙秀手中。\n4.  淮南王司马允被逼起兵声讨司马伦，一路所向无敌。后被与司马伦儿子要好的伏胤刺杀而死，受司马允牵连的人众多。\n5.  益州刺史赵廞（qian）不接受替代，起兵造反，打败了朝廷的军队。李特之弟李庠（xiang）等人投靠了赵廞。\n\n## 卷84（公元301年）\n1.  凉州刺史张轨扫平河西盗贼，以此为据点，暗中发展势力。\n2.  司马伦篡（cuan）位称帝，大封亲信，全国郡守县令都被封侯，以致府库不足以封赏。\n3.  益州赵廞忌恨李庠骁勇得人心，于是将其杀死。李特兄弟怨恨，攻占了成都，赵廞逃亡中被随从杀死。\n4.  驻守许昌的齐王司马冏起兵讨伐司马伦，镇守邺城的成都王司马颖与镇守关中的河间王司马颙（yong）举兵响应。洛阳城中的禁军将领王舆迎惠帝复位，司马伦、孟观等被杀。司马囧、司马颖被加九赐，司马颙加三赐。司马冏入京辅政，司马颖在谋士卢志的劝说下回到邺城收买人心。\n5.  朝廷下令遣返梁益地区的流民，逼迫很急，李特兄弟多次请求宽限时日，同时招纳流民严阵以待。后打败了官军，李特自称大将军，都督梁、益两州诸军事。\n6. 河间王司马颙又从关中起兵讨伐齐王司马冏，洛阳城中的长沙王司马乂（yi）举兵入宫杀齐王司马冏，政权落入司马乂手，但凡事到邺城请示大将军成都王司马颖。\n\n## 卷85（公元303年）\n1. 李特打败罗尚后，下令手下流民去各土堡吃饭。后罗尚联合各土堡，斩杀了李特。李流、李雄收拾残部，打败了罗尚来攻的军队。李雄后来打败了西晋的援军，李流便不考虑投降之事，并将军队交予李雄。\n2. 蛮人张昌占据了江夏，立改名成刘尼的人为皇帝。西晋军队多次被打败，新野王司马歆被杀后，荆、江、徐、扬、豫等五州大多被张昌占据。刘弘手下襄阳镇守陶侃终于打败了张昌。\n3. 河间王司马颙、成都王司马颖起兵讨伐长沙王司马乂。分别派遣张方和陆机领军。张方进入京城洛阳，烧杀抢掠。陆机因为被北方旧将忌恨而大败，陆机被孟玖（jiu）谗害而死。\n4. 李流病死，李雄接任，攻陷成都。但军队饥饿，被迫向西晋请和求粮。\n5. 幽州王浚将女儿嫁给了段式鲜卑段务勿尘和宇文鲜卑素怒延，以借助夷狄力量。\n6. 长沙王司马乂多次打败司马颖，张方也认为洛阳无法攻克，想撤军回长安。在洛阳的司马越联合禁军逮捕了司马乂，并交给张方，被张方烧死。司马颖在邺城遥控朝政，排除异己，睚眦必报。卢志为其辅佐，河间王司马颙被封为太宰。\n7. 司马越因为丞相司马颖亲近小人，于是挟持了惠帝讨伐邺城的司马颖。司马颖部下石超攻其不备，将惠帝夺回进邺城内，司马越逃回东海。\n8. 司马颖密令幽州刺史和演刺杀王浚，因为天象变化而失败，和演被杀。王浚联合鲜卑段务勿尘、乌桓人羯朱以及司马越的弟弟并州刺史司马腾，一起讨伐司马颖。河间王司马颙派张方支援司马颖。张方攻陷了洛阳。\n9. 匈奴人刘渊乘机请命，以联合匈奴支援司马颖，因此得以从邺城离开。刘渊被匈奴五部拥立为大单于，派兵帮助司马颖。\n10. 王浚主薄祁宏担任先锋，打败了司马颖。司马颖带着惠帝逃到洛阳。王浚进入邺城后，烧杀抢掠。\n11. 鲜卑拓跋猗（yi）卢打败了刘渊。\n12. 刘渊将都城迁往左国城，登基建国，史称匈奴汉国。出兵攻打并州司马腾，占据了不少城池。\n13. 张方士兵因为洛阳被抢掠一空而挟持惠帝、司马颖回到了长安。于是。太宰河间王司马颙掌权。\n\n## 卷86（公元305年）\n1. 司马越率领联军讨伐张方强行迁移天子之罪。范阳王司马虓（xiao）部下刘琨在王浚精锐鲜卑骑兵的帮助下，杀死了石超，打跑了刘乔。\n2. 陈敏战胜张昌残部石冰，并在江东割据。后为政没有章法，又纵容子弟为害，被江东大族顾荣和周玘（qi）等人杀死。\n3. 太宰司马颙（yong）杀死张方以向司马越求和，不被同意。\n4. 王浚部下祁宏带兵攻进了长安，所属鲜卑部队大肆抢掠，并迎接惠帝回到了洛阳。\n5. 李雄在成都称帝，史称成汉。\n6. 镇守邺城的范阳王司马虓去世，长史刘舆假传圣旨，赐死了司马颖。卢志安葬了司马颖。东燕王司马腾镇守邺城。\n7. 刘舆推荐其弟刘琨为并州刺史，被同意。当时的并州由于饥荒和外族抢掠，只剩下几万户。\n8. 晋惠帝吃饼中毒而死，太弟司马炽（chi）即位，是为晋怀帝。\n9. 南阳王司马模派人杀死了应征入朝做司徒的河间王司马颙。\n10. 镇南将军刘宏去世，由高密王司马略镇守襄阳。南阳王司马模镇守长安，琅邪王司马睿镇守建业。\n11. 司马睿在王导的辅佐下，逐渐深得江东人的信任，顾荣、郭循也来做官。\n12. 声称给司马颖报仇的公师藩兵败而死后，汲（ji）桑自称大将军，再次声称为司马颖报仇，以石勒（lei)为先锋，攻陷了邺城，杀死了司马腾。后汲桑等被兖州刺史苟晞和丁绍打败，石勒后来投靠了匈奴汉国的刘渊。\n\n## 卷87（公元309年）\n1. 高密王司马略去世，山涛第五子山简接任，镇守襄阳。\n2. 成汉将领多人献城投降巴郡罗尚。不久，罗尚去世，皮素接任。后罗尚的儿子罗宇杀死皮素，接着暴重又杀死罗宇，最后，手下武将和官员联合杀死了暴重。\n3. 匈奴汉国刘渊派王弥、刘粲、刘曜、石勒等攻打西晋。幽州王浚则派祁弘攻打汉国，并多次取胜。\n4. 汉国国主刘渊去世，太子刘和继位。呼延攸、刘乘、刘锐等人说服了国主刘和攻打刘聪等人，刘聪反击，杀死了他们。刘聪继位为国主。\n5. 并州刘琨联合鲜卑拓跋猗（yi）卢与幽州王浚、鲜卑段务勿尘相互攻打，刘琨处于劣势。\n6. 晋怀帝手诏命苟晞讨伐司马越。司马越忧愤而死。苟晞总领六州军事。后被石勒打败，因为企图反叛被杀死。\n7. 石勒攻克江夏，许昌等地。又与王弥、刘耀等人一起攻克洛阳。晋怀帝被俘，被汉主刘聪封为平阿公。但很多官员在战乱中被杀。\n8. 王弥密谋联合曹嶷谋取石勒，被发现。石勒设宴杀死王弥。汉主刘聪虽然愤怒，但还是给石勒封了官。\n9. 慕容廆（gui）派其子慕容翰攻克了辽东\n\n## 卷88（公元312年）\n1. 石勒准备攻打司马睿的寿春，但是大军遭遇饥饿，并因为疾病而损军大半。于是撤军，辗转占据了襄国作为根本。\n2. 晋朝安定太守贾疋（ya）、麹（ju）允、阎鼎等率军围攻长安，刘曜因为多次战败而胁迫8万成年男女出逃。秦王司马业在长安被拥立皇太子。后贾疋在讨伐卢水胡首领彭天护时，夜堕于涧，为彭天护所杀。后晋怀帝被汉主刘聪毒死后，鞠允、索琳、梁芬等人扶立司马业为帝，是为晋愍（min）帝。\n3. 刘琨听说谗言，杀死了护军令狐盛，其子令狐泥引来汉军。晋阳守将投降了汉国，刘琨逃亡。后在代公拓跋猗卢的帮助下，又夺回晋阳。\n4. 王浚联合辽西公段疾陆眷攻打石勒的襄国。孔苌擒获了段末，于是石勒与段氏结盟，王浚于是衰落。\n5. 石勒打败了刘琨之子刘演，占据了邺城。\n6. 王浚企图称帝，石勒听从谋臣张宾的劝告，假意归附王浚，王浚非常得意而不提防。\n\n## 卷89（公元314年）\n1. 成汉刘雄管辖下的百姓富裕，但是制度缺乏，而军队纪律也不严明。\n2. 襄国石勒偷袭幽州王浚成功，王浚在襄国被杀。\n3. 江陵王敦部下陶侃镇压了杜弢(tao)起义，司马睿代皇帝提升王敦为六州都督。\n4. 王敦听信谗言，陶侃被任命为广州刺史。陶侃平定广州。因为无聊，每天玩将屋中砖头搬进搬去。\n5. 代王拓跋猗卢因为偏爱小儿子拓跋比延而欲立为继承人，而引起长子拓跋六的不满，拓跋猗卢攻打拓跋六，反被杀。拓跋六又被拓跋普根杀死，拓跋普根及其继承人也先后去世。代国一部投奔了刘琨，刘琨重新振作。\n6. 汉国刘聪亲信小人，忠臣很多被杀。\n7. 汉国刘曜围攻长安，晋愍帝投降，被封侯。\n8. 石勒打败刘琨，刘琨投奔蓟城段匹，两人结为兄弟。\n\n## 卷90（公元317年）\n1. 司马睿称帝，是为东晋晋元帝。\n2. 祖逖（ti）北伐。\n3. 周访消灭了杜曾的叛乱，驻守襄阳。\n4. 晋愍帝在平阳被汉国主刘聪杀死。\n5. 辽西公段疾陆眷去世，段末夺得了单于位。\n6. 段末想联合刘琨图谋段匹，段匹最终听从部下劝说，杀死了刘琨。\n7. 刘聪去世，太子刘粲继位。勒准杀死了刘粲，刘曜和石勒出兵攻打勒准。刘曜继位为汉国国主，勒准被部下杀死。\n\n## 卷91 (公元319年)\n1. 汉国主刘曜改国号为赵，是为前赵。\n2. 石勒称帝，史称后赵。\n3. 慕容翰用计打败宇文氏悉得官进犯的几十万倾国之军。\n4. 慕容廆（gui）归附东晋，被封为安北将军。\n5. 凉州内乱，前凉国主张寔（shi）被手下杀死。州人推举其同母弟张茂为前凉首领\n6. 前赵游子远平定了因解虎、尹车之事引发的巴族酋长句渠知为首的几十万人的叛乱\n7. 祖逖北伐成果显著，黄河以南士民大多背叛后赵而归附东晋。后赵国土日益缩小。后赵石勒主动讨好祖逖，两国边境得以休养生息。\n8. 后赵石虎攻陷了幽州。段匹、段文鸯被活捉。两人不屈服，久之，被杀。\n9. 祖逖因为东晋派人坐享其成，再加上国家即将内乱，北伐大业难成，而忧愤而死。\n10. 拓跋猗卢的妻子惟氏杀死了代王拓拔郁律，而立其子拓拔贺为世子，惟氏把持国政。拓拔郁律的儿子拓拔什翼犍幸存了下来。\n\n## 卷92（公元322年）\n1. 王敦在武昌起兵叛乱，襄阳甘卓听从劝说发檄文讨伐王敦。\n2. 前赵国主刘曜在攻打武都杨难敌时染病，秦州刺史陈安叛乱，不久被镇压。\n3. 王敦攻克东晋首都健康。晋元帝任命王敦为丞相，王导因为不救重臣周伯仁、戴渊，两人被杀，后留下名句：“吾虽不杀伯仁，伯仁由我而死”，后王敦回到武昌。\n4. 甘卓不听劝谏，回军襄阳，不久，甘卓即被王敦密令襄阳太守周虑杀死。甘卓因为多疑而自败。\n5. 王敦部下魏乂最终攻陷长沙，司马承被王敦密令杀死。\n6. 东晋元帝司马睿忧愤而死，太子司马绍即位，是为晋明帝，王导辅佐。\n7. 石虎攻打青州曹嶷，曹嶷投降被杀。\n8. 前赵刘曜亲征凉州，张茂归附前赵。\n\n## 卷93(公元324年)\n1. 成汉国主不顾大臣反对，册立其兄李荡的儿子李班为太子。\n2. 前凉张茂生病去世，世子张骏继位。\n3. 东晋王敦再次叛乱，部下王官、沈充最终战败，王敦及其党羽覆灭。王导、温峤因功被封赏。\n4. 石虎救援洛阳石生，前赵国主刘曜被惊退，撤到长安。东晋也被迫撤退，淮水以南都归于后赵。\n5. 东晋明帝去世，5岁皇太子继位，是为东晋成帝。庾（yu）太后临朝听政，国家大事由庾亮裁决。\n6. 段末去世，其弟段牙继位。后段疾陆眷的孙子段辽杀死段牙自立为王。\n7. 代王拓跋贺去世，其弟拓跋纥（ge）那继位。\n8. 庾亮不顾众人反对，强行征召苏峻入朝，苏峻反叛。祖约也不顾部下反对，起兵响应。\n\n## 卷94(公元331年)\n1. 苏峻攻陷健康，庾亮投奔寻阳温峤，庾太后忧愁而死。温峤、广陵郗鉴、最终醒悟的陶侃共同出兵讨伐苏峻、祖约。\n2. 前赵国主刘曜救援蒲阪，石虎退走，刘曜追击，石虎大败。\n3. 陶侃因攻打苏峻无法取胜而心生退意。毛宝用行动将其说服。苏峻因冒进而被陶侃部下杀死。不久，祖约逃奔后赵，被后赵杀死。苏峻余部的叛乱也失败，叛乱平定。论功行赏，温峤谦让，推举王导主政。不久，温峤去世。\n4. 前赵国主刘曜围攻洛阳，后赵国主石勒、石虎救援，刘曜因为酒醉被抓，不久，被杀。后石虎攻陷上郢（ying），前赵灭亡。氐（di）族王蒲洪、羌族首领姚戈仲也归降了石虎。\n5. 贺兰部等共同推举拓跋翳（yi）槐为代王，代王拓跋纥那逃奔宇文部，拓跋什翼犍到后赵当人质。\n6. 河南王吐延被羌族首领姜聪刺死，儿子叶延继位，该国名为吐谷（yu）浑。\n7. 后赵石勒称帝，立石弘为太子。\n\n## 卷95(公元332年)\n1. 陶侃派桓（huan）宣等打败了后赵郭敬，夺取了襄阳。\n2. 东晋宁州刺史尹奉归降了成汉，成汉李寿全部占有南中地区。\n3. 辽东慕容廆（gui）去世，慕容皝（huang）继位。\n4. 后赵石勒因病去世，石弘继位。石虎专权，杀死了徐光、程遐（xia），不久，刘太后、彭城王石堪（kan）反石虎也被杀。长安石生、洛阳石朗起兵，也被石虎杀死。后石虎杀死石弘，自立为帝。\n5. 慕容皝执政严厉，慕容翰投奔段氏，慕容仁起兵也被打败。\n6. 陶侃辞职回乡，不久，去世。\n7. 成汉国主李雄因病去世，太子李班继位，李寿辅政。李班仁爱被李越杀死，李斯继位。\n8. 代王拓跋翳槐因为杀死对其不恭敬的贺兰蔼（ai）头而引起各部落叛乱。拓跋纥那再次被推举为代王，拓跋翳槐投奔后赵，不久，夺回代国。\n9. 范文侵占了林邑国，自立为王，派使者到健康朝贡。\n10. 后赵石虎杀死狂妄反叛的太子石邃（sui），立石宣为太子。\n\n## 卷96(公元338年)\n1. 后赵石虎、燕王慕容皝相约攻打段辽，段辽战败，归附了后赵。慕容翰投奔宇文氏。\n2. 成汉李寿偷袭成都，国主李斯被软禁，后自杀。李越等被杀，李寿即位。\n3. 后赵石虎因为慕容皝不应约攻打段辽而出兵攻打燕国棘城。慕舆根力战，前赵因为无法取胜而撤军。慕容皝派其子慕容恪追击，后赵军大败，只有石闵（冉闵）一支部队未损。\n4. 代王拓跋翳槐去世，拓跋什翼犍继位，国力开始强盛。\n5. 王导去世，共辅政了元帝、明帝、成帝三代君主，位高权重。不久，郗鉴、庾亮也去世。\n6. 慕容翰逃回燕国，慕容皝大喜。\n\n## 卷97(公元342年) \n1. 晋成帝去世，同母弟司马岳继位，是为东晋康帝。政权委托给庾冰和何充。\n2. 慕容皝听从了慕容翰的建议，攻入高丽首都丸都，高丽王高钊逃亡，燕国俘获其父母而还。\n3. 成汉李寿去世，太子李势继位。\n4. 慕容皝亲征宇文逸豆归，慕容翰和慕容霸（慕容垂）斩杀其猛将涉夜干，宇文逸豆归逃亡沙漠身死，宇文部由此离散，但在此战中，燕国高诩、刘佩身中流箭而死。不久，慕容翰被逼服毒自杀。\n5. 东晋康帝去世，何充推举2岁的司马聃（dan）为帝，是为东晋穆帝。褚（zhu）太后临朝听政。\n6. 庾翼去世。朝廷听从何充的建议，桓温继任荆州刺史。\n7. 前凉国主张骏去世，世子张重华继位。\n8. 成汉国主李势骄奢淫逸，江陵桓温先锋袁乔等讨伐成汉，攻克了成都，李势归降，送往健康被封为归义侯。成汉部将邓定等人在桓温撤回江陵后又占据了成都。\n9. 后赵凉州刺史麻秋攻打前凉，前凉谢艾挂帅，麻秋大败，只身逃亡，后赵攻打前凉以失败告终。\n\n## 卷98(公元348年)\n1. 林邑国的军队经常攻打九真郡，士民绝大部分被杀。\n2. 后赵太子石宣杀死与之争权的石韬，国主石虎残忍的杀死了太子石宣。石生被立为太子。\n3. 前燕慕容皝去世，太子慕容儁（jun）继位。\n4. 原太子石宣的侍卫军在首领梁犊的煽动下反叛，后赵军节节败退，后姚戈仲和石斌斩杀了梁犊。\n5. 后赵皇帝石虎去世，太子石生继位，刘太后行使皇帝权力。之前，张豺杀死了石斌。\n6. 姚戈仲、蒲洪等说服了石遵起兵，石闵为先锋。石遵进入邺城，登上帝位。刘太后、石生、张豺等被杀。石斌的儿子石衍被立为太子。\n7. 蓟城石冲起兵讨伐石遵，被石闵、李农镇压，石冲被赐死。\n8. 石闵说服石遵解除了蒲洪关中镇守的职务，蒲洪归降了东晋。\n9. 后赵皇帝石遵等人谋划诛杀石闵，石鉴暗通消息，石闵出兵杀死石遵，拥立石鉴为帝。\n10. 邺城内内乱不断，最终石闵控制了局势，并颁布“杀胡令”，汉人大量拥入邺城，邺城被四面围困。后石闵、李农杀死了石鉴及其石氏宗族，石闵成帝，史称冉魏。石闵恢复冉姓。\n11. 羌王姚戈仲派其子姚襄攻打蒲洪，反被打败。蒲洪自称秦王，改姓为苻。\n12. 前燕慕容儁三路攻打后赵，攻占了蓟城。\n13. 麻秋毒杀了苻洪，其子苻健杀死了麻秋，去除三秦 称号，归附东晋，后攻占了长安。\n14. 后赵石袛（di）在襄国称帝，以姚戈仲为右丞相，其子姚襄统帅其军队。\n15. 魏国冉闵杀死李农。\n\n## 卷99(公元351年)\n1. 苻健建立大秦，苻雄统帅军队，苻菁（jing）统领禁军。\n2. 魏国冉闵围攻后赵国都襄国，百日不下，姚襄、石琨、前燕援军和后赵王石袛四面夹攻，冉闵大败，逃回邺城。\n3. 刘显杀死后赵王石袛，归附魏国。后攻打邺城失败后，在襄国称帝。冉闵攻克襄国，将其杀死。后赵灭亡。\n4. 姚戈仲去世，其子姚襄率众归附东晋。\n5. 冉闵与前燕慕容恪交战，最终被擒，在龙城被杀。后邺城被攻破，魏国灭亡。\n6. 东晋交州刺史阮敷讨伐林邑国，攻破50多座营垒。\n7. 东晋殷浩到寿春，计划北伐。姚襄反叛，殷浩战败。\n8. 前凉张重华去世，其庶兄张祚（zuo）夺取前凉。后又杀死了谢艾。\n9. 殷浩因为连年北伐，却经常战败，桓温乘机发难，殷浩被贬为庶民。朝政大权集中于桓温手中。\n10. 桓温北伐，攻打前秦，多次获胜。\n11. 前燕国主慕容儁嫉恨慕容霸的才能，将其改名为慕容垂，并调其留守龙城。\n12. 桓温因为缺粮而撤军，苻雄追击，东晋战败。不久苻雄去世，其子苻坚接任其军队。期间，前秦太子苻苌被桓温军队的流箭射中，不久，去世。\n\n## 卷100(公元355年)\n1. 前秦苻健病危，苻菁叛乱被杀。苻健去世，太子苻生继位。\n2. 前凉王张祚荒淫残暴，因为憎恨河州刺史张瓘（guan）的强大而出兵攻打，内乱爆发，张祚被杀死，张玄靓被拥立为国主，张瓘掌管军队。\n3. 前燕慕容儁终于同意送回高句丽王高钊的母亲。\n4. 桓温再次北伐，打败姚襄，攻克了洛阳。\n5. 姚襄被前秦苻黄眉、邓羌打败，被杀死。弟弟姚苌率众投降。不久，苻黄眉被前秦国主苻生杀害。\n6. 前秦国主苻生残暴好杀，以致人人自危。苻坚、王猛等人起兵杀死了苻生。苻坚即位，王猛辅政，政治清明。\n7. 前凉张瓘密谋杀死宋混，废前凉王自立，但反被宋混杀死，宋混开始掌管军政。\n\n\n\n## 卷101 (公元360年)\n1.  燕主慕容儁薨，太子慕容暐继位，年十一。太宰慕容恪总揽朝政，慕舆根左右挑拨，阴谋反叛，族。\n2.  前凉宋混去世，以其弟宋澄辅政。宋澄质柔少断，为张邕族灭。张玄靓任张邕和张天赐辅政。后张邕因为专权，被张天赐杀死。前凉国主张玄靓密谋杀死张天赐，事泄，反被杀死，张天赐自任前凉国主。至此，前凉大权由张天赐独揽，\n3.  东晋穆帝去世，司马丕继位，是为东晋哀帝。东晋哀帝因为吃长生不老丹药而去世，东晋废帝司马奕继位。\n4.  前燕慕容恪去世，慕容评不听遗言，不以慕容垂接任，而以慕容冲接任为大司马。\n5.  前秦苻生的兄弟苻柳等人反叛，前燕不救援，于是被王猛、邓羌、吕光等镇压。\n\n## 卷102 (公元369年)\n1.  桓温北伐前燕。温瞻前顾后，终粮尽船焚而撤军，慕容垂临危请命尾随追击温军，晋军枋头大败，死者数万。\n2.  前燕慕容评忌慕容垂之才而图之，慕容垂携子慕容令逃至前秦，王猛设计陷害慕容垂父子，以致慕容令逃回前燕，令度终不得免，复叛于燕，死。\n3.  前秦王猛出壶口关攻邺（前燕），邓羌在王猛答应委任为司隶校尉后浴血奋战，前燕慕容评卖水鬻粥，终兵败被擒，寻前燕亡。\n\n## 卷103 (公元371年)\n1.  桓温废司马奕而立会稽王司马昱为帝，是为简文帝。\n2.  简文帝去世，年幼的太子司马昌明继位，是为孝武帝。\n3.  桓温去世，其弟桓冲统领其兵众。桓冲对朝廷尽忠，忍让谦逊。\n4.  前秦部将朱彤、杨安、毛当攻蜀，拔之。\n5.  前秦王猛病逝。\n\n## 卷104 (公元376年)\n1. 东晋孝武帝亲征，谢安辅政。\n2. 前秦苟苌、姚苌攻陷了前凉首都姑藏，张天赐投降，前凉灭亡。\n3. 刘卫辰被代国攻打，向前秦求援，拓跋寔君、拓跋斤杀死代王拓跋什翼犍。代国大乱，前秦乘机将匈奴分为刘库仁和刘卫辰两部。刘库仁厚待拓跋珪。\n4. 前秦苻丕克襄阳。\n5. 前秦和龙苻洛反叛，兵败被抓，苻坚赦免了他。王猛之子叛，赦。\n6. 前秦派吕光统十万军，讨西域。\n7. 前秦苻坚欲讨东晋，皆谏，唯慕容垂以为然。\n\n## 卷105 (公元383年)\n1. 淝水之战，前秦溃散，东晋防守胜利。\n2. 慕容垂反叛前秦，知恩不杀苻坚。而后建立后燕。\n3. 姚苌畏戮，反，是为后秦。\n4. 东晋桓冲、褚太后先后去世。\n5. 前秦吕光平西域。\n6. 慕容垂围苻丕于邺城，久攻不下。苻丕在断粮后仍旧有守有攻，后燕为之疲惫。\n7. 刘库仁欲救邺，被前燕降将杀死，刘头眷接管了其部众。\n8. 丁零人翟斌叛秦归燕，后叛燕，死。其弟翟真摄其众，为后燕之顽疾。\n9. 苻丕求援于谢玄，谢玄粮济苻丕。\n10. 前秦苻坚数攻姚苌，败。同时，慕容冲攻长安，苻坚多次战败。\n\n## 卷106 (公元385年)\n1. 慕容冲称帝，建立西燕。\n2. 前秦苻坚和西燕慕容冲相互攻打，各有胜负。\n3. 前秦苻丕、东晋刘牢之与后燕慕容垂相互攻打，慕容垂北撤，刘牢之也损失惨重，苻丕和慕容垂的军队都缺粮，慕容垂的军队以桑椹充饥。\n4. 姚苌诈杀新平人，皆埋。\n5. 丁零内乱杀翟真，其堂弟翟成继，兵众多归后燕。\n6. 苻坚信谶，自长安走五将山，后秦擒坚，姚苌屡求玺而不得，寻勒杀坚。\n7. 翟成被部下杀死，余部被慕容垂活埋。\n8. 谢安去世，司马道子主持军政。\n9. 刘显杀死刘头眷自立，拓跋珪投奔贺兰部的贺讷（ne）。\n10. 吕光夺取了凉州，自任凉州刺史，史称后凉。\n11. 拓跋珪被推举为代王，实行休养生息的政策，国民高兴。不久，该国号为魏，史称北魏。\n12. 西燕慕容冲被部下杀死，后多位国主被杀，最后，慕容永即位。\n13. 西燕慕容永请求借道东返，前秦苻丕拒绝，双方大战，苻丕失败，逃亡中被东晋冯该杀死，南安王苻登即位为前秦国主。\n\n## 卷107 (公元387年)\n1. 北魏拓跋珪联合北燕，打败刘显，刘显走途无路，投奔西燕。 2.后凉吕光忙于平定内乱。\n3. 西秦乞伏国仁去世，其弟乞伏乾归继位。 4.后燕仍旧在花费大量军力忙于四处平乱。\n5. 后秦姚苌因为前秦苻登多次获胜，以为是苻坚显灵，因此也树立苻坚神像，结果不但没有得到利益，反而多次受到惊吓，便砍下神像头送给了前秦。\n6. 东晋孝武帝沉迷酒色，将权力交予司马道子，而司马道子也好酒，因此朝政混乱。 7.前秦苻登嫉恨部下雷恶地的智勇超群，后者因为恐惧投降了后秦。\n8. 北魏拓跋珪大败匈奴刘卫辰部，刘卫辰也被部下杀死，北魏的实力因此强盛起来。刘卫辰的儿子刘勃勃逃亡到没弈（yi）干部\n\n## 卷108 (公元392年)\n1. 后燕慕容垂打败丁零翟钊，后者投降西燕慕容永，后因反叛被杀。\n2. 前秦苻登和后秦姚苌相互攻打，姚苌善于谋算，苻登内心害怕与之作战。 \n3. 后凉吕光经常攻打西秦乞伏乾归，但经常以失败告终。 \n4. 后秦国主姚苌去世，太子姚兴继位。 \n5. 前秦苻登讨伐后秦姚兴，大败而回。\n6. 后燕慕容垂攻打西燕慕容永，西燕大败。不久，慕容永被杀，西燕灭亡。 \n7. 后秦姚兴生擒了前秦苻登，并将其杀死。太子苻崇继任前秦国主。\n8. 后燕太子慕容宝讨伐北魏拓跋珪，后者使用流言迫使北燕撤军。拓跋珪追击，参合陂之战，后燕大败。 \n9. 后燕慕容垂去世，太子慕容宝继位。\n10. 北魏拓跋珪发兵40多万，讨伐后燕，打败慕容农，攻占了并州，后燕仅剩下中山、邺城、信都三城没有被攻下。\n11. 东晋张贵人杀死孝武帝，太子司马德宗继位，是为晋安帝。司马道子主政，其宠臣王国宝专权。\n\n## 卷109 (公元397年)\n1. 北魏攻打邺城的军队因为中了离间计而撤军，后燕慕容德追击，大胜。 \n2. 北魏拓跋珪亲征后燕信都，攻克，慕容凤逃亡中山。\n3. 后燕慕容麟叛逃，国主慕容宝从中山逃到龙城。中山拥立慕容祥做统帅，仍旧坚守。 \n4. 慕容会叛乱，杀死慕容隆，后被国主慕容宝打败，逃亡中山被慕容祥杀死。\n5. 东晋王恭、殷仲堪谋划起兵讨伐王国宝，司马道子逮捕王国宝以自保。王国宝被杀死，司马道子的长子司马元显接管了其父司马道子的军政。\n6. 后凉吕光听信谗言，斩杀了沮（ju）渠罗仇等，其侄儿沮渠蒙逊起兵为其报仇，但被吕光打败。 \n7. 慕容麟潜入中山，杀死了慕容祥，自立为帝。不久，被北魏拓跋珪打败，逃亡邺城。\n\n## 卷110 (公元398年)\n1. 后燕慕容德从邺城移防到滑台，北魏占据了邺城。\n2. 后燕段速骨等反叛，攻打龙城，慕容农为保全自己而投降，不久，被杀死。国主慕容宝不听忠言，最终被部下兰汗诱骗到龙城杀死。\n3. 北凉段业攻打后凉吕光，段业不听建议，被打得大败。\n4. 后燕慕容盛投奔兰汗，得以不死。后慕容盛发动叛乱，杀死了兰汗。不久，慕容盛即位为后燕国主。 \n5. 东晋王恭、殷仲堪、桓玄等联合发兵进京铲除司马道子、司马尚之等，司马元显收买了的刘牢之杀死了王恭，桓玄等和朝廷和解，但仍旧相互提防。\n6. 东晋孙泰因为叛乱被杀，其侄儿孙恩入海避祸，并聚集人员以复仇。\n\n\n\n\n","source":"_posts/資治通鑑/资治通鉴小结079-118卷-晋纪.md","raw":"---\ntitle: '资治通鉴小结079-118卷晋纪'\ncatalog: true\ndate: 2018-03-07 18:11:29\nheader-img: \"/img/17.jpg\"\nsubtitle: '资治通鉴小结079-118卷晋纪' \ntags: \"資治通鑑\"\n---\n\n# 资治通鉴小结 079 - 118 卷 晋纪\n\n## 卷79（公元265年）\n1.  司马昭去世，太子司马炎接任相国。不久，司马炎接受了魏元帝禅让的皇位，是为晋武帝。立杨文宗的女儿为皇后，司马衷为太子。\n2.  吴国大都督陶璜（huang）率军十万，终于攻下交趾，交州平定。\n3.  吴国西陵督步阐（chan）因为突然被征召而反叛。西陵之战，陆抗打败了晋国杨肇（zhao）、羊祜（hu）的援军，攻陷了西陵，杀死了步阐等人。\n4.  吴主孙皓继续淫乐，亲近小人，残害忠良，还多次出兵招惹晋国。\n\n## 卷80（公元273年）\n1.  邓艾案被平反，封邓艾的孙子邓朗为郎中。\n2.  晋武帝司马炎下令挑选公卿女子入宫，挑选没有选完，则禁止天下嫁娶，后又挑选5000民间女子入宫。\n3.  陆抗病死，吴主孙皓让陆抗的5个儿子接管陆抗的军队。\n4.  周舫之子周处除掉了包括自己在内的“三害”。一改往日作风，而去修养德行。\n5.  魏国皇帝曹芳被司马师废后，太宰范粲36年不说话，直到去世。\n6.  晋朝杨皇后去世，堂妹杨氏依照皇后的遗嘱被立为皇后，其父杨骏被封侯。\n7.  晋朝文鸯打败了胡人，20万人投降。\n8.  晋朝卫瓘离间鲜卑部落，功绩很大。\n9.  晋朝羊祜去世，杜预接替驻守襄阳。\n10.  晋朝马隆毛遂自荐，征募了3500名善拉重弓的大力士讨伐凉州鲜卑，杀死了秃发树机能，凉州平定。\n\n## 卷81（公元280年）\n1.  王浚、唐彬率领巴蜀士兵破掉水上障碍，攻克了西陵，杀死吴都督留宪等。接着攻下荆门、夷道两城，杀死夷道监陆宴。又打败吴水军都督陆景，将他杀死。随后与胡奋、王戎一起平定了夏口，最后进入建业，吴主孙皓投降，吴国灭亡。\n2.  杜预部将周旨偷袭，从乐乡城中活捉了吴都督孙歆（ xin）。杜预攻克江陵，杀死了江陵督伍延，后负责安抚荆南地区。\n3.  吴国丞相张悌（ti）领兵渡江围攻王浑的部将，兵溃散而败。\n4.  王浚与王浑因为灭吴的功劳而争斗，王浑因为有众多党羽而处于优势。\n5.  晋武帝因为天下一统而开始淫乐，后族“三杨”当权，忠义之臣被疏远。\n6.  辽西的慕容鲜卑攻打昌黎城，被严询打败，斩获万计，但后来的入侵仍旧不断。\n7.  齐王司马攸贤明，冯挑拨其与晋武帝的关系，齐王愤恨而死。\n8.  匈奴部落接连投降晋朝。\n\n## 卷82（公元289年）\n1.  慕容鲜卑首领慕容廆（gui）向西晋投降，以谦让发展实力。\n2.  匈奴北部都尉刘渊乐善好施，匈奴五部豪杰大多归心于他。不久，刘渊被任命为匈奴五部大都督。\n3.  晋武帝沉迷于酒色，不久，生病去世。太子司马衷即位，是为晋惠帝。皇后之父杨骏乘机把持朝政。\n4.  贾皇后联合宦官李肇（zhao）、司马皇族等联合，出兵诛杀了杨骏及其党羽，杨太后也被废为民。司马亮主政，专权独断。八王之乱由此拉开了序幕。\n5.  楚王司马玮（wei）、贾皇后、宦官李肇等联合，出兵杀死了司马亮。随后，司马玮也被贾皇后杀死。从此，贾后独揽大权，大任亲族，张华等人辅政。\n6.  秦、雍之地的氐人、羌人反叛，打败了官军，立氐帅齐万年为帝。关中战乱不断，大量流民涌现，李特兄弟经常救济他们。\n\n## 卷83（公元299年）\n1.  孟观率军击破了氐人，抓获了齐万年。\n2.  贾皇后淫乱非常，在她的设计下，太子被废黜为平民。\n3.  贾皇后派人杀死了太子，统领禁军的赵王司马伦联合齐王司马冏（jiong）等人，假造诏书，以谋害太子的罪名废贾后为平民，后将其毒杀，其党羽和张华等人也被杀死，司马伦自领相国位。但其才能平庸，实权控制在谋臣孙秀手中。\n4.  淮南王司马允被逼起兵声讨司马伦，一路所向无敌。后被与司马伦儿子要好的伏胤刺杀而死，受司马允牵连的人众多。\n5.  益州刺史赵廞（qian）不接受替代，起兵造反，打败了朝廷的军队。李特之弟李庠（xiang）等人投靠了赵廞。\n\n## 卷84（公元301年）\n1.  凉州刺史张轨扫平河西盗贼，以此为据点，暗中发展势力。\n2.  司马伦篡（cuan）位称帝，大封亲信，全国郡守县令都被封侯，以致府库不足以封赏。\n3.  益州赵廞忌恨李庠骁勇得人心，于是将其杀死。李特兄弟怨恨，攻占了成都，赵廞逃亡中被随从杀死。\n4.  驻守许昌的齐王司马冏起兵讨伐司马伦，镇守邺城的成都王司马颖与镇守关中的河间王司马颙（yong）举兵响应。洛阳城中的禁军将领王舆迎惠帝复位，司马伦、孟观等被杀。司马囧、司马颖被加九赐，司马颙加三赐。司马冏入京辅政，司马颖在谋士卢志的劝说下回到邺城收买人心。\n5.  朝廷下令遣返梁益地区的流民，逼迫很急，李特兄弟多次请求宽限时日，同时招纳流民严阵以待。后打败了官军，李特自称大将军，都督梁、益两州诸军事。\n6. 河间王司马颙又从关中起兵讨伐齐王司马冏，洛阳城中的长沙王司马乂（yi）举兵入宫杀齐王司马冏，政权落入司马乂手，但凡事到邺城请示大将军成都王司马颖。\n\n## 卷85（公元303年）\n1. 李特打败罗尚后，下令手下流民去各土堡吃饭。后罗尚联合各土堡，斩杀了李特。李流、李雄收拾残部，打败了罗尚来攻的军队。李雄后来打败了西晋的援军，李流便不考虑投降之事，并将军队交予李雄。\n2. 蛮人张昌占据了江夏，立改名成刘尼的人为皇帝。西晋军队多次被打败，新野王司马歆被杀后，荆、江、徐、扬、豫等五州大多被张昌占据。刘弘手下襄阳镇守陶侃终于打败了张昌。\n3. 河间王司马颙、成都王司马颖起兵讨伐长沙王司马乂。分别派遣张方和陆机领军。张方进入京城洛阳，烧杀抢掠。陆机因为被北方旧将忌恨而大败，陆机被孟玖（jiu）谗害而死。\n4. 李流病死，李雄接任，攻陷成都。但军队饥饿，被迫向西晋请和求粮。\n5. 幽州王浚将女儿嫁给了段式鲜卑段务勿尘和宇文鲜卑素怒延，以借助夷狄力量。\n6. 长沙王司马乂多次打败司马颖，张方也认为洛阳无法攻克，想撤军回长安。在洛阳的司马越联合禁军逮捕了司马乂，并交给张方，被张方烧死。司马颖在邺城遥控朝政，排除异己，睚眦必报。卢志为其辅佐，河间王司马颙被封为太宰。\n7. 司马越因为丞相司马颖亲近小人，于是挟持了惠帝讨伐邺城的司马颖。司马颖部下石超攻其不备，将惠帝夺回进邺城内，司马越逃回东海。\n8. 司马颖密令幽州刺史和演刺杀王浚，因为天象变化而失败，和演被杀。王浚联合鲜卑段务勿尘、乌桓人羯朱以及司马越的弟弟并州刺史司马腾，一起讨伐司马颖。河间王司马颙派张方支援司马颖。张方攻陷了洛阳。\n9. 匈奴人刘渊乘机请命，以联合匈奴支援司马颖，因此得以从邺城离开。刘渊被匈奴五部拥立为大单于，派兵帮助司马颖。\n10. 王浚主薄祁宏担任先锋，打败了司马颖。司马颖带着惠帝逃到洛阳。王浚进入邺城后，烧杀抢掠。\n11. 鲜卑拓跋猗（yi）卢打败了刘渊。\n12. 刘渊将都城迁往左国城，登基建国，史称匈奴汉国。出兵攻打并州司马腾，占据了不少城池。\n13. 张方士兵因为洛阳被抢掠一空而挟持惠帝、司马颖回到了长安。于是。太宰河间王司马颙掌权。\n\n## 卷86（公元305年）\n1. 司马越率领联军讨伐张方强行迁移天子之罪。范阳王司马虓（xiao）部下刘琨在王浚精锐鲜卑骑兵的帮助下，杀死了石超，打跑了刘乔。\n2. 陈敏战胜张昌残部石冰，并在江东割据。后为政没有章法，又纵容子弟为害，被江东大族顾荣和周玘（qi）等人杀死。\n3. 太宰司马颙（yong）杀死张方以向司马越求和，不被同意。\n4. 王浚部下祁宏带兵攻进了长安，所属鲜卑部队大肆抢掠，并迎接惠帝回到了洛阳。\n5. 李雄在成都称帝，史称成汉。\n6. 镇守邺城的范阳王司马虓去世，长史刘舆假传圣旨，赐死了司马颖。卢志安葬了司马颖。东燕王司马腾镇守邺城。\n7. 刘舆推荐其弟刘琨为并州刺史，被同意。当时的并州由于饥荒和外族抢掠，只剩下几万户。\n8. 晋惠帝吃饼中毒而死，太弟司马炽（chi）即位，是为晋怀帝。\n9. 南阳王司马模派人杀死了应征入朝做司徒的河间王司马颙。\n10. 镇南将军刘宏去世，由高密王司马略镇守襄阳。南阳王司马模镇守长安，琅邪王司马睿镇守建业。\n11. 司马睿在王导的辅佐下，逐渐深得江东人的信任，顾荣、郭循也来做官。\n12. 声称给司马颖报仇的公师藩兵败而死后，汲（ji）桑自称大将军，再次声称为司马颖报仇，以石勒（lei)为先锋，攻陷了邺城，杀死了司马腾。后汲桑等被兖州刺史苟晞和丁绍打败，石勒后来投靠了匈奴汉国的刘渊。\n\n## 卷87（公元309年）\n1. 高密王司马略去世，山涛第五子山简接任，镇守襄阳。\n2. 成汉将领多人献城投降巴郡罗尚。不久，罗尚去世，皮素接任。后罗尚的儿子罗宇杀死皮素，接着暴重又杀死罗宇，最后，手下武将和官员联合杀死了暴重。\n3. 匈奴汉国刘渊派王弥、刘粲、刘曜、石勒等攻打西晋。幽州王浚则派祁弘攻打汉国，并多次取胜。\n4. 汉国国主刘渊去世，太子刘和继位。呼延攸、刘乘、刘锐等人说服了国主刘和攻打刘聪等人，刘聪反击，杀死了他们。刘聪继位为国主。\n5. 并州刘琨联合鲜卑拓跋猗（yi）卢与幽州王浚、鲜卑段务勿尘相互攻打，刘琨处于劣势。\n6. 晋怀帝手诏命苟晞讨伐司马越。司马越忧愤而死。苟晞总领六州军事。后被石勒打败，因为企图反叛被杀死。\n7. 石勒攻克江夏，许昌等地。又与王弥、刘耀等人一起攻克洛阳。晋怀帝被俘，被汉主刘聪封为平阿公。但很多官员在战乱中被杀。\n8. 王弥密谋联合曹嶷谋取石勒，被发现。石勒设宴杀死王弥。汉主刘聪虽然愤怒，但还是给石勒封了官。\n9. 慕容廆（gui）派其子慕容翰攻克了辽东\n\n## 卷88（公元312年）\n1. 石勒准备攻打司马睿的寿春，但是大军遭遇饥饿，并因为疾病而损军大半。于是撤军，辗转占据了襄国作为根本。\n2. 晋朝安定太守贾疋（ya）、麹（ju）允、阎鼎等率军围攻长安，刘曜因为多次战败而胁迫8万成年男女出逃。秦王司马业在长安被拥立皇太子。后贾疋在讨伐卢水胡首领彭天护时，夜堕于涧，为彭天护所杀。后晋怀帝被汉主刘聪毒死后，鞠允、索琳、梁芬等人扶立司马业为帝，是为晋愍（min）帝。\n3. 刘琨听说谗言，杀死了护军令狐盛，其子令狐泥引来汉军。晋阳守将投降了汉国，刘琨逃亡。后在代公拓跋猗卢的帮助下，又夺回晋阳。\n4. 王浚联合辽西公段疾陆眷攻打石勒的襄国。孔苌擒获了段末，于是石勒与段氏结盟，王浚于是衰落。\n5. 石勒打败了刘琨之子刘演，占据了邺城。\n6. 王浚企图称帝，石勒听从谋臣张宾的劝告，假意归附王浚，王浚非常得意而不提防。\n\n## 卷89（公元314年）\n1. 成汉刘雄管辖下的百姓富裕，但是制度缺乏，而军队纪律也不严明。\n2. 襄国石勒偷袭幽州王浚成功，王浚在襄国被杀。\n3. 江陵王敦部下陶侃镇压了杜弢(tao)起义，司马睿代皇帝提升王敦为六州都督。\n4. 王敦听信谗言，陶侃被任命为广州刺史。陶侃平定广州。因为无聊，每天玩将屋中砖头搬进搬去。\n5. 代王拓跋猗卢因为偏爱小儿子拓跋比延而欲立为继承人，而引起长子拓跋六的不满，拓跋猗卢攻打拓跋六，反被杀。拓跋六又被拓跋普根杀死，拓跋普根及其继承人也先后去世。代国一部投奔了刘琨，刘琨重新振作。\n6. 汉国刘聪亲信小人，忠臣很多被杀。\n7. 汉国刘曜围攻长安，晋愍帝投降，被封侯。\n8. 石勒打败刘琨，刘琨投奔蓟城段匹，两人结为兄弟。\n\n## 卷90（公元317年）\n1. 司马睿称帝，是为东晋晋元帝。\n2. 祖逖（ti）北伐。\n3. 周访消灭了杜曾的叛乱，驻守襄阳。\n4. 晋愍帝在平阳被汉国主刘聪杀死。\n5. 辽西公段疾陆眷去世，段末夺得了单于位。\n6. 段末想联合刘琨图谋段匹，段匹最终听从部下劝说，杀死了刘琨。\n7. 刘聪去世，太子刘粲继位。勒准杀死了刘粲，刘曜和石勒出兵攻打勒准。刘曜继位为汉国国主，勒准被部下杀死。\n\n## 卷91 (公元319年)\n1. 汉国主刘曜改国号为赵，是为前赵。\n2. 石勒称帝，史称后赵。\n3. 慕容翰用计打败宇文氏悉得官进犯的几十万倾国之军。\n4. 慕容廆（gui）归附东晋，被封为安北将军。\n5. 凉州内乱，前凉国主张寔（shi）被手下杀死。州人推举其同母弟张茂为前凉首领\n6. 前赵游子远平定了因解虎、尹车之事引发的巴族酋长句渠知为首的几十万人的叛乱\n7. 祖逖北伐成果显著，黄河以南士民大多背叛后赵而归附东晋。后赵国土日益缩小。后赵石勒主动讨好祖逖，两国边境得以休养生息。\n8. 后赵石虎攻陷了幽州。段匹、段文鸯被活捉。两人不屈服，久之，被杀。\n9. 祖逖因为东晋派人坐享其成，再加上国家即将内乱，北伐大业难成，而忧愤而死。\n10. 拓跋猗卢的妻子惟氏杀死了代王拓拔郁律，而立其子拓拔贺为世子，惟氏把持国政。拓拔郁律的儿子拓拔什翼犍幸存了下来。\n\n## 卷92（公元322年）\n1. 王敦在武昌起兵叛乱，襄阳甘卓听从劝说发檄文讨伐王敦。\n2. 前赵国主刘曜在攻打武都杨难敌时染病，秦州刺史陈安叛乱，不久被镇压。\n3. 王敦攻克东晋首都健康。晋元帝任命王敦为丞相，王导因为不救重臣周伯仁、戴渊，两人被杀，后留下名句：“吾虽不杀伯仁，伯仁由我而死”，后王敦回到武昌。\n4. 甘卓不听劝谏，回军襄阳，不久，甘卓即被王敦密令襄阳太守周虑杀死。甘卓因为多疑而自败。\n5. 王敦部下魏乂最终攻陷长沙，司马承被王敦密令杀死。\n6. 东晋元帝司马睿忧愤而死，太子司马绍即位，是为晋明帝，王导辅佐。\n7. 石虎攻打青州曹嶷，曹嶷投降被杀。\n8. 前赵刘曜亲征凉州，张茂归附前赵。\n\n## 卷93(公元324年)\n1. 成汉国主不顾大臣反对，册立其兄李荡的儿子李班为太子。\n2. 前凉张茂生病去世，世子张骏继位。\n3. 东晋王敦再次叛乱，部下王官、沈充最终战败，王敦及其党羽覆灭。王导、温峤因功被封赏。\n4. 石虎救援洛阳石生，前赵国主刘曜被惊退，撤到长安。东晋也被迫撤退，淮水以南都归于后赵。\n5. 东晋明帝去世，5岁皇太子继位，是为东晋成帝。庾（yu）太后临朝听政，国家大事由庾亮裁决。\n6. 段末去世，其弟段牙继位。后段疾陆眷的孙子段辽杀死段牙自立为王。\n7. 代王拓跋贺去世，其弟拓跋纥（ge）那继位。\n8. 庾亮不顾众人反对，强行征召苏峻入朝，苏峻反叛。祖约也不顾部下反对，起兵响应。\n\n## 卷94(公元331年)\n1. 苏峻攻陷健康，庾亮投奔寻阳温峤，庾太后忧愁而死。温峤、广陵郗鉴、最终醒悟的陶侃共同出兵讨伐苏峻、祖约。\n2. 前赵国主刘曜救援蒲阪，石虎退走，刘曜追击，石虎大败。\n3. 陶侃因攻打苏峻无法取胜而心生退意。毛宝用行动将其说服。苏峻因冒进而被陶侃部下杀死。不久，祖约逃奔后赵，被后赵杀死。苏峻余部的叛乱也失败，叛乱平定。论功行赏，温峤谦让，推举王导主政。不久，温峤去世。\n4. 前赵国主刘曜围攻洛阳，后赵国主石勒、石虎救援，刘曜因为酒醉被抓，不久，被杀。后石虎攻陷上郢（ying），前赵灭亡。氐（di）族王蒲洪、羌族首领姚戈仲也归降了石虎。\n5. 贺兰部等共同推举拓跋翳（yi）槐为代王，代王拓跋纥那逃奔宇文部，拓跋什翼犍到后赵当人质。\n6. 河南王吐延被羌族首领姜聪刺死，儿子叶延继位，该国名为吐谷（yu）浑。\n7. 后赵石勒称帝，立石弘为太子。\n\n## 卷95(公元332年)\n1. 陶侃派桓（huan）宣等打败了后赵郭敬，夺取了襄阳。\n2. 东晋宁州刺史尹奉归降了成汉，成汉李寿全部占有南中地区。\n3. 辽东慕容廆（gui）去世，慕容皝（huang）继位。\n4. 后赵石勒因病去世，石弘继位。石虎专权，杀死了徐光、程遐（xia），不久，刘太后、彭城王石堪（kan）反石虎也被杀。长安石生、洛阳石朗起兵，也被石虎杀死。后石虎杀死石弘，自立为帝。\n5. 慕容皝执政严厉，慕容翰投奔段氏，慕容仁起兵也被打败。\n6. 陶侃辞职回乡，不久，去世。\n7. 成汉国主李雄因病去世，太子李班继位，李寿辅政。李班仁爱被李越杀死，李斯继位。\n8. 代王拓跋翳槐因为杀死对其不恭敬的贺兰蔼（ai）头而引起各部落叛乱。拓跋纥那再次被推举为代王，拓跋翳槐投奔后赵，不久，夺回代国。\n9. 范文侵占了林邑国，自立为王，派使者到健康朝贡。\n10. 后赵石虎杀死狂妄反叛的太子石邃（sui），立石宣为太子。\n\n## 卷96(公元338年)\n1. 后赵石虎、燕王慕容皝相约攻打段辽，段辽战败，归附了后赵。慕容翰投奔宇文氏。\n2. 成汉李寿偷袭成都，国主李斯被软禁，后自杀。李越等被杀，李寿即位。\n3. 后赵石虎因为慕容皝不应约攻打段辽而出兵攻打燕国棘城。慕舆根力战，前赵因为无法取胜而撤军。慕容皝派其子慕容恪追击，后赵军大败，只有石闵（冉闵）一支部队未损。\n4. 代王拓跋翳槐去世，拓跋什翼犍继位，国力开始强盛。\n5. 王导去世，共辅政了元帝、明帝、成帝三代君主，位高权重。不久，郗鉴、庾亮也去世。\n6. 慕容翰逃回燕国，慕容皝大喜。\n\n## 卷97(公元342年) \n1. 晋成帝去世，同母弟司马岳继位，是为东晋康帝。政权委托给庾冰和何充。\n2. 慕容皝听从了慕容翰的建议，攻入高丽首都丸都，高丽王高钊逃亡，燕国俘获其父母而还。\n3. 成汉李寿去世，太子李势继位。\n4. 慕容皝亲征宇文逸豆归，慕容翰和慕容霸（慕容垂）斩杀其猛将涉夜干，宇文逸豆归逃亡沙漠身死，宇文部由此离散，但在此战中，燕国高诩、刘佩身中流箭而死。不久，慕容翰被逼服毒自杀。\n5. 东晋康帝去世，何充推举2岁的司马聃（dan）为帝，是为东晋穆帝。褚（zhu）太后临朝听政。\n6. 庾翼去世。朝廷听从何充的建议，桓温继任荆州刺史。\n7. 前凉国主张骏去世，世子张重华继位。\n8. 成汉国主李势骄奢淫逸，江陵桓温先锋袁乔等讨伐成汉，攻克了成都，李势归降，送往健康被封为归义侯。成汉部将邓定等人在桓温撤回江陵后又占据了成都。\n9. 后赵凉州刺史麻秋攻打前凉，前凉谢艾挂帅，麻秋大败，只身逃亡，后赵攻打前凉以失败告终。\n\n## 卷98(公元348年)\n1. 林邑国的军队经常攻打九真郡，士民绝大部分被杀。\n2. 后赵太子石宣杀死与之争权的石韬，国主石虎残忍的杀死了太子石宣。石生被立为太子。\n3. 前燕慕容皝去世，太子慕容儁（jun）继位。\n4. 原太子石宣的侍卫军在首领梁犊的煽动下反叛，后赵军节节败退，后姚戈仲和石斌斩杀了梁犊。\n5. 后赵皇帝石虎去世，太子石生继位，刘太后行使皇帝权力。之前，张豺杀死了石斌。\n6. 姚戈仲、蒲洪等说服了石遵起兵，石闵为先锋。石遵进入邺城，登上帝位。刘太后、石生、张豺等被杀。石斌的儿子石衍被立为太子。\n7. 蓟城石冲起兵讨伐石遵，被石闵、李农镇压，石冲被赐死。\n8. 石闵说服石遵解除了蒲洪关中镇守的职务，蒲洪归降了东晋。\n9. 后赵皇帝石遵等人谋划诛杀石闵，石鉴暗通消息，石闵出兵杀死石遵，拥立石鉴为帝。\n10. 邺城内内乱不断，最终石闵控制了局势，并颁布“杀胡令”，汉人大量拥入邺城，邺城被四面围困。后石闵、李农杀死了石鉴及其石氏宗族，石闵成帝，史称冉魏。石闵恢复冉姓。\n11. 羌王姚戈仲派其子姚襄攻打蒲洪，反被打败。蒲洪自称秦王，改姓为苻。\n12. 前燕慕容儁三路攻打后赵，攻占了蓟城。\n13. 麻秋毒杀了苻洪，其子苻健杀死了麻秋，去除三秦 称号，归附东晋，后攻占了长安。\n14. 后赵石袛（di）在襄国称帝，以姚戈仲为右丞相，其子姚襄统帅其军队。\n15. 魏国冉闵杀死李农。\n\n## 卷99(公元351年)\n1. 苻健建立大秦，苻雄统帅军队，苻菁（jing）统领禁军。\n2. 魏国冉闵围攻后赵国都襄国，百日不下，姚襄、石琨、前燕援军和后赵王石袛四面夹攻，冉闵大败，逃回邺城。\n3. 刘显杀死后赵王石袛，归附魏国。后攻打邺城失败后，在襄国称帝。冉闵攻克襄国，将其杀死。后赵灭亡。\n4. 姚戈仲去世，其子姚襄率众归附东晋。\n5. 冉闵与前燕慕容恪交战，最终被擒，在龙城被杀。后邺城被攻破，魏国灭亡。\n6. 东晋交州刺史阮敷讨伐林邑国，攻破50多座营垒。\n7. 东晋殷浩到寿春，计划北伐。姚襄反叛，殷浩战败。\n8. 前凉张重华去世，其庶兄张祚（zuo）夺取前凉。后又杀死了谢艾。\n9. 殷浩因为连年北伐，却经常战败，桓温乘机发难，殷浩被贬为庶民。朝政大权集中于桓温手中。\n10. 桓温北伐，攻打前秦，多次获胜。\n11. 前燕国主慕容儁嫉恨慕容霸的才能，将其改名为慕容垂，并调其留守龙城。\n12. 桓温因为缺粮而撤军，苻雄追击，东晋战败。不久苻雄去世，其子苻坚接任其军队。期间，前秦太子苻苌被桓温军队的流箭射中，不久，去世。\n\n## 卷100(公元355年)\n1. 前秦苻健病危，苻菁叛乱被杀。苻健去世，太子苻生继位。\n2. 前凉王张祚荒淫残暴，因为憎恨河州刺史张瓘（guan）的强大而出兵攻打，内乱爆发，张祚被杀死，张玄靓被拥立为国主，张瓘掌管军队。\n3. 前燕慕容儁终于同意送回高句丽王高钊的母亲。\n4. 桓温再次北伐，打败姚襄，攻克了洛阳。\n5. 姚襄被前秦苻黄眉、邓羌打败，被杀死。弟弟姚苌率众投降。不久，苻黄眉被前秦国主苻生杀害。\n6. 前秦国主苻生残暴好杀，以致人人自危。苻坚、王猛等人起兵杀死了苻生。苻坚即位，王猛辅政，政治清明。\n7. 前凉张瓘密谋杀死宋混，废前凉王自立，但反被宋混杀死，宋混开始掌管军政。\n\n\n\n## 卷101 (公元360年)\n1.  燕主慕容儁薨，太子慕容暐继位，年十一。太宰慕容恪总揽朝政，慕舆根左右挑拨，阴谋反叛，族。\n2.  前凉宋混去世，以其弟宋澄辅政。宋澄质柔少断，为张邕族灭。张玄靓任张邕和张天赐辅政。后张邕因为专权，被张天赐杀死。前凉国主张玄靓密谋杀死张天赐，事泄，反被杀死，张天赐自任前凉国主。至此，前凉大权由张天赐独揽，\n3.  东晋穆帝去世，司马丕继位，是为东晋哀帝。东晋哀帝因为吃长生不老丹药而去世，东晋废帝司马奕继位。\n4.  前燕慕容恪去世，慕容评不听遗言，不以慕容垂接任，而以慕容冲接任为大司马。\n5.  前秦苻生的兄弟苻柳等人反叛，前燕不救援，于是被王猛、邓羌、吕光等镇压。\n\n## 卷102 (公元369年)\n1.  桓温北伐前燕。温瞻前顾后，终粮尽船焚而撤军，慕容垂临危请命尾随追击温军，晋军枋头大败，死者数万。\n2.  前燕慕容评忌慕容垂之才而图之，慕容垂携子慕容令逃至前秦，王猛设计陷害慕容垂父子，以致慕容令逃回前燕，令度终不得免，复叛于燕，死。\n3.  前秦王猛出壶口关攻邺（前燕），邓羌在王猛答应委任为司隶校尉后浴血奋战，前燕慕容评卖水鬻粥，终兵败被擒，寻前燕亡。\n\n## 卷103 (公元371年)\n1.  桓温废司马奕而立会稽王司马昱为帝，是为简文帝。\n2.  简文帝去世，年幼的太子司马昌明继位，是为孝武帝。\n3.  桓温去世，其弟桓冲统领其兵众。桓冲对朝廷尽忠，忍让谦逊。\n4.  前秦部将朱彤、杨安、毛当攻蜀，拔之。\n5.  前秦王猛病逝。\n\n## 卷104 (公元376年)\n1. 东晋孝武帝亲征，谢安辅政。\n2. 前秦苟苌、姚苌攻陷了前凉首都姑藏，张天赐投降，前凉灭亡。\n3. 刘卫辰被代国攻打，向前秦求援，拓跋寔君、拓跋斤杀死代王拓跋什翼犍。代国大乱，前秦乘机将匈奴分为刘库仁和刘卫辰两部。刘库仁厚待拓跋珪。\n4. 前秦苻丕克襄阳。\n5. 前秦和龙苻洛反叛，兵败被抓，苻坚赦免了他。王猛之子叛，赦。\n6. 前秦派吕光统十万军，讨西域。\n7. 前秦苻坚欲讨东晋，皆谏，唯慕容垂以为然。\n\n## 卷105 (公元383年)\n1. 淝水之战，前秦溃散，东晋防守胜利。\n2. 慕容垂反叛前秦，知恩不杀苻坚。而后建立后燕。\n3. 姚苌畏戮，反，是为后秦。\n4. 东晋桓冲、褚太后先后去世。\n5. 前秦吕光平西域。\n6. 慕容垂围苻丕于邺城，久攻不下。苻丕在断粮后仍旧有守有攻，后燕为之疲惫。\n7. 刘库仁欲救邺，被前燕降将杀死，刘头眷接管了其部众。\n8. 丁零人翟斌叛秦归燕，后叛燕，死。其弟翟真摄其众，为后燕之顽疾。\n9. 苻丕求援于谢玄，谢玄粮济苻丕。\n10. 前秦苻坚数攻姚苌，败。同时，慕容冲攻长安，苻坚多次战败。\n\n## 卷106 (公元385年)\n1. 慕容冲称帝，建立西燕。\n2. 前秦苻坚和西燕慕容冲相互攻打，各有胜负。\n3. 前秦苻丕、东晋刘牢之与后燕慕容垂相互攻打，慕容垂北撤，刘牢之也损失惨重，苻丕和慕容垂的军队都缺粮，慕容垂的军队以桑椹充饥。\n4. 姚苌诈杀新平人，皆埋。\n5. 丁零内乱杀翟真，其堂弟翟成继，兵众多归后燕。\n6. 苻坚信谶，自长安走五将山，后秦擒坚，姚苌屡求玺而不得，寻勒杀坚。\n7. 翟成被部下杀死，余部被慕容垂活埋。\n8. 谢安去世，司马道子主持军政。\n9. 刘显杀死刘头眷自立，拓跋珪投奔贺兰部的贺讷（ne）。\n10. 吕光夺取了凉州，自任凉州刺史，史称后凉。\n11. 拓跋珪被推举为代王，实行休养生息的政策，国民高兴。不久，该国号为魏，史称北魏。\n12. 西燕慕容冲被部下杀死，后多位国主被杀，最后，慕容永即位。\n13. 西燕慕容永请求借道东返，前秦苻丕拒绝，双方大战，苻丕失败，逃亡中被东晋冯该杀死，南安王苻登即位为前秦国主。\n\n## 卷107 (公元387年)\n1. 北魏拓跋珪联合北燕，打败刘显，刘显走途无路，投奔西燕。 2.后凉吕光忙于平定内乱。\n3. 西秦乞伏国仁去世，其弟乞伏乾归继位。 4.后燕仍旧在花费大量军力忙于四处平乱。\n5. 后秦姚苌因为前秦苻登多次获胜，以为是苻坚显灵，因此也树立苻坚神像，结果不但没有得到利益，反而多次受到惊吓，便砍下神像头送给了前秦。\n6. 东晋孝武帝沉迷酒色，将权力交予司马道子，而司马道子也好酒，因此朝政混乱。 7.前秦苻登嫉恨部下雷恶地的智勇超群，后者因为恐惧投降了后秦。\n8. 北魏拓跋珪大败匈奴刘卫辰部，刘卫辰也被部下杀死，北魏的实力因此强盛起来。刘卫辰的儿子刘勃勃逃亡到没弈（yi）干部\n\n## 卷108 (公元392年)\n1. 后燕慕容垂打败丁零翟钊，后者投降西燕慕容永，后因反叛被杀。\n2. 前秦苻登和后秦姚苌相互攻打，姚苌善于谋算，苻登内心害怕与之作战。 \n3. 后凉吕光经常攻打西秦乞伏乾归，但经常以失败告终。 \n4. 后秦国主姚苌去世，太子姚兴继位。 \n5. 前秦苻登讨伐后秦姚兴，大败而回。\n6. 后燕慕容垂攻打西燕慕容永，西燕大败。不久，慕容永被杀，西燕灭亡。 \n7. 后秦姚兴生擒了前秦苻登，并将其杀死。太子苻崇继任前秦国主。\n8. 后燕太子慕容宝讨伐北魏拓跋珪，后者使用流言迫使北燕撤军。拓跋珪追击，参合陂之战，后燕大败。 \n9. 后燕慕容垂去世，太子慕容宝继位。\n10. 北魏拓跋珪发兵40多万，讨伐后燕，打败慕容农，攻占了并州，后燕仅剩下中山、邺城、信都三城没有被攻下。\n11. 东晋张贵人杀死孝武帝，太子司马德宗继位，是为晋安帝。司马道子主政，其宠臣王国宝专权。\n\n## 卷109 (公元397年)\n1. 北魏攻打邺城的军队因为中了离间计而撤军，后燕慕容德追击，大胜。 \n2. 北魏拓跋珪亲征后燕信都，攻克，慕容凤逃亡中山。\n3. 后燕慕容麟叛逃，国主慕容宝从中山逃到龙城。中山拥立慕容祥做统帅，仍旧坚守。 \n4. 慕容会叛乱，杀死慕容隆，后被国主慕容宝打败，逃亡中山被慕容祥杀死。\n5. 东晋王恭、殷仲堪谋划起兵讨伐王国宝，司马道子逮捕王国宝以自保。王国宝被杀死，司马道子的长子司马元显接管了其父司马道子的军政。\n6. 后凉吕光听信谗言，斩杀了沮（ju）渠罗仇等，其侄儿沮渠蒙逊起兵为其报仇，但被吕光打败。 \n7. 慕容麟潜入中山，杀死了慕容祥，自立为帝。不久，被北魏拓跋珪打败，逃亡邺城。\n\n## 卷110 (公元398年)\n1. 后燕慕容德从邺城移防到滑台，北魏占据了邺城。\n2. 后燕段速骨等反叛，攻打龙城，慕容农为保全自己而投降，不久，被杀死。国主慕容宝不听忠言，最终被部下兰汗诱骗到龙城杀死。\n3. 北凉段业攻打后凉吕光，段业不听建议，被打得大败。\n4. 后燕慕容盛投奔兰汗，得以不死。后慕容盛发动叛乱，杀死了兰汗。不久，慕容盛即位为后燕国主。 \n5. 东晋王恭、殷仲堪、桓玄等联合发兵进京铲除司马道子、司马尚之等，司马元显收买了的刘牢之杀死了王恭，桓玄等和朝廷和解，但仍旧相互提防。\n6. 东晋孙泰因为叛乱被杀，其侄儿孙恩入海避祸，并聚集人员以复仇。\n\n\n\n\n","slug":"資治通鑑/资治通鉴小结079-118卷-晋纪","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobric0021j5lyj72mes75","content":"<h1><span id=\"资治通鉴小结-079-118-卷-晋纪\"> 资治通鉴小结 079 - 118 卷 晋纪</span></h1>\n<h2><span id=\"卷79公元265年\"> 卷79（公元265年）</span></h2>\n<ol>\n<li>司马昭去世，太子司马炎接任相国。不久，司马炎接受了魏元帝禅让的皇位，是为晋武帝。立杨文宗的女儿为皇后，司马衷为太子。</li>\n<li>吴国大都督陶璜（huang）率军十万，终于攻下交趾，交州平定。</li>\n<li>吴国西陵督步阐（chan）因为突然被征召而反叛。西陵之战，陆抗打败了晋国杨肇（zhao）、羊祜（hu）的援军，攻陷了西陵，杀死了步阐等人。</li>\n<li>吴主孙皓继续淫乐，亲近小人，残害忠良，还多次出兵招惹晋国。</li>\n</ol>\n<h2><span id=\"卷80公元273年\"> 卷80（公元273年）</span></h2>\n<ol>\n<li>邓艾案被平反，封邓艾的孙子邓朗为郎中。</li>\n<li>晋武帝司马炎下令挑选公卿女子入宫，挑选没有选完，则禁止天下嫁娶，后又挑选5000民间女子入宫。</li>\n<li>陆抗病死，吴主孙皓让陆抗的5个儿子接管陆抗的军队。</li>\n<li>周舫之子周处除掉了包括自己在内的“三害”。一改往日作风，而去修养德行。</li>\n<li>魏国皇帝曹芳被司马师废后，太宰范粲36年不说话，直到去世。</li>\n<li>晋朝杨皇后去世，堂妹杨氏依照皇后的遗嘱被立为皇后，其父杨骏被封侯。</li>\n<li>晋朝文鸯打败了胡人，20万人投降。</li>\n<li>晋朝卫瓘离间鲜卑部落，功绩很大。</li>\n<li>晋朝羊祜去世，杜预接替驻守襄阳。</li>\n<li>晋朝马隆毛遂自荐，征募了3500名善拉重弓的大力士讨伐凉州鲜卑，杀死了秃发树机能，凉州平定。</li>\n</ol>\n<h2><span id=\"卷81公元280年\"> 卷81（公元280年）</span></h2>\n<ol>\n<li>王浚、唐彬率领巴蜀士兵破掉水上障碍，攻克了西陵，杀死吴都督留宪等。接着攻下荆门、夷道两城，杀死夷道监陆宴。又打败吴水军都督陆景，将他杀死。随后与胡奋、王戎一起平定了夏口，最后进入建业，吴主孙皓投降，吴国灭亡。</li>\n<li>杜预部将周旨偷袭，从乐乡城中活捉了吴都督孙歆（ xin）。杜预攻克江陵，杀死了江陵督伍延，后负责安抚荆南地区。</li>\n<li>吴国丞相张悌（ti）领兵渡江围攻王浑的部将，兵溃散而败。</li>\n<li>王浚与王浑因为灭吴的功劳而争斗，王浑因为有众多党羽而处于优势。</li>\n<li>晋武帝因为天下一统而开始淫乐，后族“三杨”当权，忠义之臣被疏远。</li>\n<li>辽西的慕容鲜卑攻打昌黎城，被严询打败，斩获万计，但后来的入侵仍旧不断。</li>\n<li>齐王司马攸贤明，冯挑拨其与晋武帝的关系，齐王愤恨而死。</li>\n<li>匈奴部落接连投降晋朝。</li>\n</ol>\n<h2><span id=\"卷82公元289年\"> 卷82（公元289年）</span></h2>\n<ol>\n<li>慕容鲜卑首领慕容廆（gui）向西晋投降，以谦让发展实力。</li>\n<li>匈奴北部都尉刘渊乐善好施，匈奴五部豪杰大多归心于他。不久，刘渊被任命为匈奴五部大都督。</li>\n<li>晋武帝沉迷于酒色，不久，生病去世。太子司马衷即位，是为晋惠帝。皇后之父杨骏乘机把持朝政。</li>\n<li>贾皇后联合宦官李肇（zhao）、司马皇族等联合，出兵诛杀了杨骏及其党羽，杨太后也被废为民。司马亮主政，专权独断。八王之乱由此拉开了序幕。</li>\n<li>楚王司马玮（wei）、贾皇后、宦官李肇等联合，出兵杀死了司马亮。随后，司马玮也被贾皇后杀死。从此，贾后独揽大权，大任亲族，张华等人辅政。</li>\n<li>秦、雍之地的氐人、羌人反叛，打败了官军，立氐帅齐万年为帝。关中战乱不断，大量流民涌现，李特兄弟经常救济他们。</li>\n</ol>\n<h2><span id=\"卷83公元299年\"> 卷83（公元299年）</span></h2>\n<ol>\n<li>孟观率军击破了氐人，抓获了齐万年。</li>\n<li>贾皇后淫乱非常，在她的设计下，太子被废黜为平民。</li>\n<li>贾皇后派人杀死了太子，统领禁军的赵王司马伦联合齐王司马冏（jiong）等人，假造诏书，以谋害太子的罪名废贾后为平民，后将其毒杀，其党羽和张华等人也被杀死，司马伦自领相国位。但其才能平庸，实权控制在谋臣孙秀手中。</li>\n<li>淮南王司马允被逼起兵声讨司马伦，一路所向无敌。后被与司马伦儿子要好的伏胤刺杀而死，受司马允牵连的人众多。</li>\n<li>益州刺史赵廞（qian）不接受替代，起兵造反，打败了朝廷的军队。李特之弟李庠（xiang）等人投靠了赵廞。</li>\n</ol>\n<h2><span id=\"卷84公元301年\"> 卷84（公元301年）</span></h2>\n<ol>\n<li>凉州刺史张轨扫平河西盗贼，以此为据点，暗中发展势力。</li>\n<li>司马伦篡（cuan）位称帝，大封亲信，全国郡守县令都被封侯，以致府库不足以封赏。</li>\n<li>益州赵廞忌恨李庠骁勇得人心，于是将其杀死。李特兄弟怨恨，攻占了成都，赵廞逃亡中被随从杀死。</li>\n<li>驻守许昌的齐王司马冏起兵讨伐司马伦，镇守邺城的成都王司马颖与镇守关中的河间王司马颙（yong）举兵响应。洛阳城中的禁军将领王舆迎惠帝复位，司马伦、孟观等被杀。司马囧、司马颖被加九赐，司马颙加三赐。司马冏入京辅政，司马颖在谋士卢志的劝说下回到邺城收买人心。</li>\n<li>朝廷下令遣返梁益地区的流民，逼迫很急，李特兄弟多次请求宽限时日，同时招纳流民严阵以待。后打败了官军，李特自称大将军，都督梁、益两州诸军事。</li>\n<li>河间王司马颙又从关中起兵讨伐齐王司马冏，洛阳城中的长沙王司马乂（yi）举兵入宫杀齐王司马冏，政权落入司马乂手，但凡事到邺城请示大将军成都王司马颖。</li>\n</ol>\n<h2><span id=\"卷85公元303年\"> 卷85（公元303年）</span></h2>\n<ol>\n<li>李特打败罗尚后，下令手下流民去各土堡吃饭。后罗尚联合各土堡，斩杀了李特。李流、李雄收拾残部，打败了罗尚来攻的军队。李雄后来打败了西晋的援军，李流便不考虑投降之事，并将军队交予李雄。</li>\n<li>蛮人张昌占据了江夏，立改名成刘尼的人为皇帝。西晋军队多次被打败，新野王司马歆被杀后，荆、江、徐、扬、豫等五州大多被张昌占据。刘弘手下襄阳镇守陶侃终于打败了张昌。</li>\n<li>河间王司马颙、成都王司马颖起兵讨伐长沙王司马乂。分别派遣张方和陆机领军。张方进入京城洛阳，烧杀抢掠。陆机因为被北方旧将忌恨而大败，陆机被孟玖（jiu）谗害而死。</li>\n<li>李流病死，李雄接任，攻陷成都。但军队饥饿，被迫向西晋请和求粮。</li>\n<li>幽州王浚将女儿嫁给了段式鲜卑段务勿尘和宇文鲜卑素怒延，以借助夷狄力量。</li>\n<li>长沙王司马乂多次打败司马颖，张方也认为洛阳无法攻克，想撤军回长安。在洛阳的司马越联合禁军逮捕了司马乂，并交给张方，被张方烧死。司马颖在邺城遥控朝政，排除异己，睚眦必报。卢志为其辅佐，河间王司马颙被封为太宰。</li>\n<li>司马越因为丞相司马颖亲近小人，于是挟持了惠帝讨伐邺城的司马颖。司马颖部下石超攻其不备，将惠帝夺回进邺城内，司马越逃回东海。</li>\n<li>司马颖密令幽州刺史和演刺杀王浚，因为天象变化而失败，和演被杀。王浚联合鲜卑段务勿尘、乌桓人羯朱以及司马越的弟弟并州刺史司马腾，一起讨伐司马颖。河间王司马颙派张方支援司马颖。张方攻陷了洛阳。</li>\n<li>匈奴人刘渊乘机请命，以联合匈奴支援司马颖，因此得以从邺城离开。刘渊被匈奴五部拥立为大单于，派兵帮助司马颖。</li>\n<li>王浚主薄祁宏担任先锋，打败了司马颖。司马颖带着惠帝逃到洛阳。王浚进入邺城后，烧杀抢掠。</li>\n<li>鲜卑拓跋猗（yi）卢打败了刘渊。</li>\n<li>刘渊将都城迁往左国城，登基建国，史称匈奴汉国。出兵攻打并州司马腾，占据了不少城池。</li>\n<li>张方士兵因为洛阳被抢掠一空而挟持惠帝、司马颖回到了长安。于是。太宰河间王司马颙掌权。</li>\n</ol>\n<h2><span id=\"卷86公元305年\"> 卷86（公元305年）</span></h2>\n<ol>\n<li>司马越率领联军讨伐张方强行迁移天子之罪。范阳王司马虓（xiao）部下刘琨在王浚精锐鲜卑骑兵的帮助下，杀死了石超，打跑了刘乔。</li>\n<li>陈敏战胜张昌残部石冰，并在江东割据。后为政没有章法，又纵容子弟为害，被江东大族顾荣和周玘（qi）等人杀死。</li>\n<li>太宰司马颙（yong）杀死张方以向司马越求和，不被同意。</li>\n<li>王浚部下祁宏带兵攻进了长安，所属鲜卑部队大肆抢掠，并迎接惠帝回到了洛阳。</li>\n<li>李雄在成都称帝，史称成汉。</li>\n<li>镇守邺城的范阳王司马虓去世，长史刘舆假传圣旨，赐死了司马颖。卢志安葬了司马颖。东燕王司马腾镇守邺城。</li>\n<li>刘舆推荐其弟刘琨为并州刺史，被同意。当时的并州由于饥荒和外族抢掠，只剩下几万户。</li>\n<li>晋惠帝吃饼中毒而死，太弟司马炽（chi）即位，是为晋怀帝。</li>\n<li>南阳王司马模派人杀死了应征入朝做司徒的河间王司马颙。</li>\n<li>镇南将军刘宏去世，由高密王司马略镇守襄阳。南阳王司马模镇守长安，琅邪王司马睿镇守建业。</li>\n<li>司马睿在王导的辅佐下，逐渐深得江东人的信任，顾荣、郭循也来做官。</li>\n<li>声称给司马颖报仇的公师藩兵败而死后，汲（ji）桑自称大将军，再次声称为司马颖报仇，以石勒（lei)为先锋，攻陷了邺城，杀死了司马腾。后汲桑等被兖州刺史苟晞和丁绍打败，石勒后来投靠了匈奴汉国的刘渊。</li>\n</ol>\n<h2><span id=\"卷87公元309年\"> 卷87（公元309年）</span></h2>\n<ol>\n<li>高密王司马略去世，山涛第五子山简接任，镇守襄阳。</li>\n<li>成汉将领多人献城投降巴郡罗尚。不久，罗尚去世，皮素接任。后罗尚的儿子罗宇杀死皮素，接着暴重又杀死罗宇，最后，手下武将和官员联合杀死了暴重。</li>\n<li>匈奴汉国刘渊派王弥、刘粲、刘曜、石勒等攻打西晋。幽州王浚则派祁弘攻打汉国，并多次取胜。</li>\n<li>汉国国主刘渊去世，太子刘和继位。呼延攸、刘乘、刘锐等人说服了国主刘和攻打刘聪等人，刘聪反击，杀死了他们。刘聪继位为国主。</li>\n<li>并州刘琨联合鲜卑拓跋猗（yi）卢与幽州王浚、鲜卑段务勿尘相互攻打，刘琨处于劣势。</li>\n<li>晋怀帝手诏命苟晞讨伐司马越。司马越忧愤而死。苟晞总领六州军事。后被石勒打败，因为企图反叛被杀死。</li>\n<li>石勒攻克江夏，许昌等地。又与王弥、刘耀等人一起攻克洛阳。晋怀帝被俘，被汉主刘聪封为平阿公。但很多官员在战乱中被杀。</li>\n<li>王弥密谋联合曹嶷谋取石勒，被发现。石勒设宴杀死王弥。汉主刘聪虽然愤怒，但还是给石勒封了官。</li>\n<li>慕容廆（gui）派其子慕容翰攻克了辽东</li>\n</ol>\n<h2><span id=\"卷88公元312年\"> 卷88（公元312年）</span></h2>\n<ol>\n<li>石勒准备攻打司马睿的寿春，但是大军遭遇饥饿，并因为疾病而损军大半。于是撤军，辗转占据了襄国作为根本。</li>\n<li>晋朝安定太守贾疋（ya）、麹（ju）允、阎鼎等率军围攻长安，刘曜因为多次战败而胁迫8万成年男女出逃。秦王司马业在长安被拥立皇太子。后贾疋在讨伐卢水胡首领彭天护时，夜堕于涧，为彭天护所杀。后晋怀帝被汉主刘聪毒死后，鞠允、索琳、梁芬等人扶立司马业为帝，是为晋愍（min）帝。</li>\n<li>刘琨听说谗言，杀死了护军令狐盛，其子令狐泥引来汉军。晋阳守将投降了汉国，刘琨逃亡。后在代公拓跋猗卢的帮助下，又夺回晋阳。</li>\n<li>王浚联合辽西公段疾陆眷攻打石勒的襄国。孔苌擒获了段末，于是石勒与段氏结盟，王浚于是衰落。</li>\n<li>石勒打败了刘琨之子刘演，占据了邺城。</li>\n<li>王浚企图称帝，石勒听从谋臣张宾的劝告，假意归附王浚，王浚非常得意而不提防。</li>\n</ol>\n<h2><span id=\"卷89公元314年\"> 卷89（公元314年）</span></h2>\n<ol>\n<li>成汉刘雄管辖下的百姓富裕，但是制度缺乏，而军队纪律也不严明。</li>\n<li>襄国石勒偷袭幽州王浚成功，王浚在襄国被杀。</li>\n<li>江陵王敦部下陶侃镇压了杜弢(tao)起义，司马睿代皇帝提升王敦为六州都督。</li>\n<li>王敦听信谗言，陶侃被任命为广州刺史。陶侃平定广州。因为无聊，每天玩将屋中砖头搬进搬去。</li>\n<li>代王拓跋猗卢因为偏爱小儿子拓跋比延而欲立为继承人，而引起长子拓跋六的不满，拓跋猗卢攻打拓跋六，反被杀。拓跋六又被拓跋普根杀死，拓跋普根及其继承人也先后去世。代国一部投奔了刘琨，刘琨重新振作。</li>\n<li>汉国刘聪亲信小人，忠臣很多被杀。</li>\n<li>汉国刘曜围攻长安，晋愍帝投降，被封侯。</li>\n<li>石勒打败刘琨，刘琨投奔蓟城段匹，两人结为兄弟。</li>\n</ol>\n<h2><span id=\"卷90公元317年\"> 卷90（公元317年）</span></h2>\n<ol>\n<li>司马睿称帝，是为东晋晋元帝。</li>\n<li>祖逖（ti）北伐。</li>\n<li>周访消灭了杜曾的叛乱，驻守襄阳。</li>\n<li>晋愍帝在平阳被汉国主刘聪杀死。</li>\n<li>辽西公段疾陆眷去世，段末夺得了单于位。</li>\n<li>段末想联合刘琨图谋段匹，段匹最终听从部下劝说，杀死了刘琨。</li>\n<li>刘聪去世，太子刘粲继位。勒准杀死了刘粲，刘曜和石勒出兵攻打勒准。刘曜继位为汉国国主，勒准被部下杀死。</li>\n</ol>\n<h2><span id=\"卷91-公元319年\"> 卷91 (公元319年)</span></h2>\n<ol>\n<li>汉国主刘曜改国号为赵，是为前赵。</li>\n<li>石勒称帝，史称后赵。</li>\n<li>慕容翰用计打败宇文氏悉得官进犯的几十万倾国之军。</li>\n<li>慕容廆（gui）归附东晋，被封为安北将军。</li>\n<li>凉州内乱，前凉国主张寔（shi）被手下杀死。州人推举其同母弟张茂为前凉首领</li>\n<li>前赵游子远平定了因解虎、尹车之事引发的巴族酋长句渠知为首的几十万人的叛乱</li>\n<li>祖逖北伐成果显著，黄河以南士民大多背叛后赵而归附东晋。后赵国土日益缩小。后赵石勒主动讨好祖逖，两国边境得以休养生息。</li>\n<li>后赵石虎攻陷了幽州。段匹、段文鸯被活捉。两人不屈服，久之，被杀。</li>\n<li>祖逖因为东晋派人坐享其成，再加上国家即将内乱，北伐大业难成，而忧愤而死。</li>\n<li>拓跋猗卢的妻子惟氏杀死了代王拓拔郁律，而立其子拓拔贺为世子，惟氏把持国政。拓拔郁律的儿子拓拔什翼犍幸存了下来。</li>\n</ol>\n<h2><span id=\"卷92公元322年\"> 卷92（公元322年）</span></h2>\n<ol>\n<li>王敦在武昌起兵叛乱，襄阳甘卓听从劝说发檄文讨伐王敦。</li>\n<li>前赵国主刘曜在攻打武都杨难敌时染病，秦州刺史陈安叛乱，不久被镇压。</li>\n<li>王敦攻克东晋首都健康。晋元帝任命王敦为丞相，王导因为不救重臣周伯仁、戴渊，两人被杀，后留下名句：“吾虽不杀伯仁，伯仁由我而死”，后王敦回到武昌。</li>\n<li>甘卓不听劝谏，回军襄阳，不久，甘卓即被王敦密令襄阳太守周虑杀死。甘卓因为多疑而自败。</li>\n<li>王敦部下魏乂最终攻陷长沙，司马承被王敦密令杀死。</li>\n<li>东晋元帝司马睿忧愤而死，太子司马绍即位，是为晋明帝，王导辅佐。</li>\n<li>石虎攻打青州曹嶷，曹嶷投降被杀。</li>\n<li>前赵刘曜亲征凉州，张茂归附前赵。</li>\n</ol>\n<h2><span id=\"卷93公元324年\"> 卷93(公元324年)</span></h2>\n<ol>\n<li>成汉国主不顾大臣反对，册立其兄李荡的儿子李班为太子。</li>\n<li>前凉张茂生病去世，世子张骏继位。</li>\n<li>东晋王敦再次叛乱，部下王官、沈充最终战败，王敦及其党羽覆灭。王导、温峤因功被封赏。</li>\n<li>石虎救援洛阳石生，前赵国主刘曜被惊退，撤到长安。东晋也被迫撤退，淮水以南都归于后赵。</li>\n<li>东晋明帝去世，5岁皇太子继位，是为东晋成帝。庾（yu）太后临朝听政，国家大事由庾亮裁决。</li>\n<li>段末去世，其弟段牙继位。后段疾陆眷的孙子段辽杀死段牙自立为王。</li>\n<li>代王拓跋贺去世，其弟拓跋纥（ge）那继位。</li>\n<li>庾亮不顾众人反对，强行征召苏峻入朝，苏峻反叛。祖约也不顾部下反对，起兵响应。</li>\n</ol>\n<h2><span id=\"卷94公元331年\"> 卷94(公元331年)</span></h2>\n<ol>\n<li>苏峻攻陷健康，庾亮投奔寻阳温峤，庾太后忧愁而死。温峤、广陵郗鉴、最终醒悟的陶侃共同出兵讨伐苏峻、祖约。</li>\n<li>前赵国主刘曜救援蒲阪，石虎退走，刘曜追击，石虎大败。</li>\n<li>陶侃因攻打苏峻无法取胜而心生退意。毛宝用行动将其说服。苏峻因冒进而被陶侃部下杀死。不久，祖约逃奔后赵，被后赵杀死。苏峻余部的叛乱也失败，叛乱平定。论功行赏，温峤谦让，推举王导主政。不久，温峤去世。</li>\n<li>前赵国主刘曜围攻洛阳，后赵国主石勒、石虎救援，刘曜因为酒醉被抓，不久，被杀。后石虎攻陷上郢（ying），前赵灭亡。氐（di）族王蒲洪、羌族首领姚戈仲也归降了石虎。</li>\n<li>贺兰部等共同推举拓跋翳（yi）槐为代王，代王拓跋纥那逃奔宇文部，拓跋什翼犍到后赵当人质。</li>\n<li>河南王吐延被羌族首领姜聪刺死，儿子叶延继位，该国名为吐谷（yu）浑。</li>\n<li>后赵石勒称帝，立石弘为太子。</li>\n</ol>\n<h2><span id=\"卷95公元332年\"> 卷95(公元332年)</span></h2>\n<ol>\n<li>陶侃派桓（huan）宣等打败了后赵郭敬，夺取了襄阳。</li>\n<li>东晋宁州刺史尹奉归降了成汉，成汉李寿全部占有南中地区。</li>\n<li>辽东慕容廆（gui）去世，慕容皝（huang）继位。</li>\n<li>后赵石勒因病去世，石弘继位。石虎专权，杀死了徐光、程遐（xia），不久，刘太后、彭城王石堪（kan）反石虎也被杀。长安石生、洛阳石朗起兵，也被石虎杀死。后石虎杀死石弘，自立为帝。</li>\n<li>慕容皝执政严厉，慕容翰投奔段氏，慕容仁起兵也被打败。</li>\n<li>陶侃辞职回乡，不久，去世。</li>\n<li>成汉国主李雄因病去世，太子李班继位，李寿辅政。李班仁爱被李越杀死，李斯继位。</li>\n<li>代王拓跋翳槐因为杀死对其不恭敬的贺兰蔼（ai）头而引起各部落叛乱。拓跋纥那再次被推举为代王，拓跋翳槐投奔后赵，不久，夺回代国。</li>\n<li>范文侵占了林邑国，自立为王，派使者到健康朝贡。</li>\n<li>后赵石虎杀死狂妄反叛的太子石邃（sui），立石宣为太子。</li>\n</ol>\n<h2><span id=\"卷96公元338年\"> 卷96(公元338年)</span></h2>\n<ol>\n<li>后赵石虎、燕王慕容皝相约攻打段辽，段辽战败，归附了后赵。慕容翰投奔宇文氏。</li>\n<li>成汉李寿偷袭成都，国主李斯被软禁，后自杀。李越等被杀，李寿即位。</li>\n<li>后赵石虎因为慕容皝不应约攻打段辽而出兵攻打燕国棘城。慕舆根力战，前赵因为无法取胜而撤军。慕容皝派其子慕容恪追击，后赵军大败，只有石闵（冉闵）一支部队未损。</li>\n<li>代王拓跋翳槐去世，拓跋什翼犍继位，国力开始强盛。</li>\n<li>王导去世，共辅政了元帝、明帝、成帝三代君主，位高权重。不久，郗鉴、庾亮也去世。</li>\n<li>慕容翰逃回燕国，慕容皝大喜。</li>\n</ol>\n<h2><span id=\"卷97公元342年\"> 卷97(公元342年)</span></h2>\n<ol>\n<li>晋成帝去世，同母弟司马岳继位，是为东晋康帝。政权委托给庾冰和何充。</li>\n<li>慕容皝听从了慕容翰的建议，攻入高丽首都丸都，高丽王高钊逃亡，燕国俘获其父母而还。</li>\n<li>成汉李寿去世，太子李势继位。</li>\n<li>慕容皝亲征宇文逸豆归，慕容翰和慕容霸（慕容垂）斩杀其猛将涉夜干，宇文逸豆归逃亡沙漠身死，宇文部由此离散，但在此战中，燕国高诩、刘佩身中流箭而死。不久，慕容翰被逼服毒自杀。</li>\n<li>东晋康帝去世，何充推举2岁的司马聃（dan）为帝，是为东晋穆帝。褚（zhu）太后临朝听政。</li>\n<li>庾翼去世。朝廷听从何充的建议，桓温继任荆州刺史。</li>\n<li>前凉国主张骏去世，世子张重华继位。</li>\n<li>成汉国主李势骄奢淫逸，江陵桓温先锋袁乔等讨伐成汉，攻克了成都，李势归降，送往健康被封为归义侯。成汉部将邓定等人在桓温撤回江陵后又占据了成都。</li>\n<li>后赵凉州刺史麻秋攻打前凉，前凉谢艾挂帅，麻秋大败，只身逃亡，后赵攻打前凉以失败告终。</li>\n</ol>\n<h2><span id=\"卷98公元348年\"> 卷98(公元348年)</span></h2>\n<ol>\n<li>林邑国的军队经常攻打九真郡，士民绝大部分被杀。</li>\n<li>后赵太子石宣杀死与之争权的石韬，国主石虎残忍的杀死了太子石宣。石生被立为太子。</li>\n<li>前燕慕容皝去世，太子慕容儁（jun）继位。</li>\n<li>原太子石宣的侍卫军在首领梁犊的煽动下反叛，后赵军节节败退，后姚戈仲和石斌斩杀了梁犊。</li>\n<li>后赵皇帝石虎去世，太子石生继位，刘太后行使皇帝权力。之前，张豺杀死了石斌。</li>\n<li>姚戈仲、蒲洪等说服了石遵起兵，石闵为先锋。石遵进入邺城，登上帝位。刘太后、石生、张豺等被杀。石斌的儿子石衍被立为太子。</li>\n<li>蓟城石冲起兵讨伐石遵，被石闵、李农镇压，石冲被赐死。</li>\n<li>石闵说服石遵解除了蒲洪关中镇守的职务，蒲洪归降了东晋。</li>\n<li>后赵皇帝石遵等人谋划诛杀石闵，石鉴暗通消息，石闵出兵杀死石遵，拥立石鉴为帝。</li>\n<li>邺城内内乱不断，最终石闵控制了局势，并颁布“杀胡令”，汉人大量拥入邺城，邺城被四面围困。后石闵、李农杀死了石鉴及其石氏宗族，石闵成帝，史称冉魏。石闵恢复冉姓。</li>\n<li>羌王姚戈仲派其子姚襄攻打蒲洪，反被打败。蒲洪自称秦王，改姓为苻。</li>\n<li>前燕慕容儁三路攻打后赵，攻占了蓟城。</li>\n<li>麻秋毒杀了苻洪，其子苻健杀死了麻秋，去除三秦 称号，归附东晋，后攻占了长安。</li>\n<li>后赵石袛（di）在襄国称帝，以姚戈仲为右丞相，其子姚襄统帅其军队。</li>\n<li>魏国冉闵杀死李农。</li>\n</ol>\n<h2><span id=\"卷99公元351年\"> 卷99(公元351年)</span></h2>\n<ol>\n<li>苻健建立大秦，苻雄统帅军队，苻菁（jing）统领禁军。</li>\n<li>魏国冉闵围攻后赵国都襄国，百日不下，姚襄、石琨、前燕援军和后赵王石袛四面夹攻，冉闵大败，逃回邺城。</li>\n<li>刘显杀死后赵王石袛，归附魏国。后攻打邺城失败后，在襄国称帝。冉闵攻克襄国，将其杀死。后赵灭亡。</li>\n<li>姚戈仲去世，其子姚襄率众归附东晋。</li>\n<li>冉闵与前燕慕容恪交战，最终被擒，在龙城被杀。后邺城被攻破，魏国灭亡。</li>\n<li>东晋交州刺史阮敷讨伐林邑国，攻破50多座营垒。</li>\n<li>东晋殷浩到寿春，计划北伐。姚襄反叛，殷浩战败。</li>\n<li>前凉张重华去世，其庶兄张祚（zuo）夺取前凉。后又杀死了谢艾。</li>\n<li>殷浩因为连年北伐，却经常战败，桓温乘机发难，殷浩被贬为庶民。朝政大权集中于桓温手中。</li>\n<li>桓温北伐，攻打前秦，多次获胜。</li>\n<li>前燕国主慕容儁嫉恨慕容霸的才能，将其改名为慕容垂，并调其留守龙城。</li>\n<li>桓温因为缺粮而撤军，苻雄追击，东晋战败。不久苻雄去世，其子苻坚接任其军队。期间，前秦太子苻苌被桓温军队的流箭射中，不久，去世。</li>\n</ol>\n<h2><span id=\"卷100公元355年\"> 卷100(公元355年)</span></h2>\n<ol>\n<li>前秦苻健病危，苻菁叛乱被杀。苻健去世，太子苻生继位。</li>\n<li>前凉王张祚荒淫残暴，因为憎恨河州刺史张瓘（guan）的强大而出兵攻打，内乱爆发，张祚被杀死，张玄靓被拥立为国主，张瓘掌管军队。</li>\n<li>前燕慕容儁终于同意送回高句丽王高钊的母亲。</li>\n<li>桓温再次北伐，打败姚襄，攻克了洛阳。</li>\n<li>姚襄被前秦苻黄眉、邓羌打败，被杀死。弟弟姚苌率众投降。不久，苻黄眉被前秦国主苻生杀害。</li>\n<li>前秦国主苻生残暴好杀，以致人人自危。苻坚、王猛等人起兵杀死了苻生。苻坚即位，王猛辅政，政治清明。</li>\n<li>前凉张瓘密谋杀死宋混，废前凉王自立，但反被宋混杀死，宋混开始掌管军政。</li>\n</ol>\n<h2><span id=\"卷101-公元360年\"> 卷101 (公元360年)</span></h2>\n<ol>\n<li>燕主慕容儁薨，太子慕容暐继位，年十一。太宰慕容恪总揽朝政，慕舆根左右挑拨，阴谋反叛，族。</li>\n<li>前凉宋混去世，以其弟宋澄辅政。宋澄质柔少断，为张邕族灭。张玄靓任张邕和张天赐辅政。后张邕因为专权，被张天赐杀死。前凉国主张玄靓密谋杀死张天赐，事泄，反被杀死，张天赐自任前凉国主。至此，前凉大权由张天赐独揽，</li>\n<li>东晋穆帝去世，司马丕继位，是为东晋哀帝。东晋哀帝因为吃长生不老丹药而去世，东晋废帝司马奕继位。</li>\n<li>前燕慕容恪去世，慕容评不听遗言，不以慕容垂接任，而以慕容冲接任为大司马。</li>\n<li>前秦苻生的兄弟苻柳等人反叛，前燕不救援，于是被王猛、邓羌、吕光等镇压。</li>\n</ol>\n<h2><span id=\"卷102-公元369年\"> 卷102 (公元369年)</span></h2>\n<ol>\n<li>桓温北伐前燕。温瞻前顾后，终粮尽船焚而撤军，慕容垂临危请命尾随追击温军，晋军枋头大败，死者数万。</li>\n<li>前燕慕容评忌慕容垂之才而图之，慕容垂携子慕容令逃至前秦，王猛设计陷害慕容垂父子，以致慕容令逃回前燕，令度终不得免，复叛于燕，死。</li>\n<li>前秦王猛出壶口关攻邺（前燕），邓羌在王猛答应委任为司隶校尉后浴血奋战，前燕慕容评卖水鬻粥，终兵败被擒，寻前燕亡。</li>\n</ol>\n<h2><span id=\"卷103-公元371年\"> 卷103 (公元371年)</span></h2>\n<ol>\n<li>桓温废司马奕而立会稽王司马昱为帝，是为简文帝。</li>\n<li>简文帝去世，年幼的太子司马昌明继位，是为孝武帝。</li>\n<li>桓温去世，其弟桓冲统领其兵众。桓冲对朝廷尽忠，忍让谦逊。</li>\n<li>前秦部将朱彤、杨安、毛当攻蜀，拔之。</li>\n<li>前秦王猛病逝。</li>\n</ol>\n<h2><span id=\"卷104-公元376年\"> 卷104 (公元376年)</span></h2>\n<ol>\n<li>东晋孝武帝亲征，谢安辅政。</li>\n<li>前秦苟苌、姚苌攻陷了前凉首都姑藏，张天赐投降，前凉灭亡。</li>\n<li>刘卫辰被代国攻打，向前秦求援，拓跋寔君、拓跋斤杀死代王拓跋什翼犍。代国大乱，前秦乘机将匈奴分为刘库仁和刘卫辰两部。刘库仁厚待拓跋珪。</li>\n<li>前秦苻丕克襄阳。</li>\n<li>前秦和龙苻洛反叛，兵败被抓，苻坚赦免了他。王猛之子叛，赦。</li>\n<li>前秦派吕光统十万军，讨西域。</li>\n<li>前秦苻坚欲讨东晋，皆谏，唯慕容垂以为然。</li>\n</ol>\n<h2><span id=\"卷105-公元383年\"> 卷105 (公元383年)</span></h2>\n<ol>\n<li>淝水之战，前秦溃散，东晋防守胜利。</li>\n<li>慕容垂反叛前秦，知恩不杀苻坚。而后建立后燕。</li>\n<li>姚苌畏戮，反，是为后秦。</li>\n<li>东晋桓冲、褚太后先后去世。</li>\n<li>前秦吕光平西域。</li>\n<li>慕容垂围苻丕于邺城，久攻不下。苻丕在断粮后仍旧有守有攻，后燕为之疲惫。</li>\n<li>刘库仁欲救邺，被前燕降将杀死，刘头眷接管了其部众。</li>\n<li>丁零人翟斌叛秦归燕，后叛燕，死。其弟翟真摄其众，为后燕之顽疾。</li>\n<li>苻丕求援于谢玄，谢玄粮济苻丕。</li>\n<li>前秦苻坚数攻姚苌，败。同时，慕容冲攻长安，苻坚多次战败。</li>\n</ol>\n<h2><span id=\"卷106-公元385年\"> 卷106 (公元385年)</span></h2>\n<ol>\n<li>慕容冲称帝，建立西燕。</li>\n<li>前秦苻坚和西燕慕容冲相互攻打，各有胜负。</li>\n<li>前秦苻丕、东晋刘牢之与后燕慕容垂相互攻打，慕容垂北撤，刘牢之也损失惨重，苻丕和慕容垂的军队都缺粮，慕容垂的军队以桑椹充饥。</li>\n<li>姚苌诈杀新平人，皆埋。</li>\n<li>丁零内乱杀翟真，其堂弟翟成继，兵众多归后燕。</li>\n<li>苻坚信谶，自长安走五将山，后秦擒坚，姚苌屡求玺而不得，寻勒杀坚。</li>\n<li>翟成被部下杀死，余部被慕容垂活埋。</li>\n<li>谢安去世，司马道子主持军政。</li>\n<li>刘显杀死刘头眷自立，拓跋珪投奔贺兰部的贺讷（ne）。</li>\n<li>吕光夺取了凉州，自任凉州刺史，史称后凉。</li>\n<li>拓跋珪被推举为代王，实行休养生息的政策，国民高兴。不久，该国号为魏，史称北魏。</li>\n<li>西燕慕容冲被部下杀死，后多位国主被杀，最后，慕容永即位。</li>\n<li>西燕慕容永请求借道东返，前秦苻丕拒绝，双方大战，苻丕失败，逃亡中被东晋冯该杀死，南安王苻登即位为前秦国主。</li>\n</ol>\n<h2><span id=\"卷107-公元387年\"> 卷107 (公元387年)</span></h2>\n<ol>\n<li>北魏拓跋珪联合北燕，打败刘显，刘显走途无路，投奔西燕。 2.后凉吕光忙于平定内乱。</li>\n<li>西秦乞伏国仁去世，其弟乞伏乾归继位。 4.后燕仍旧在花费大量军力忙于四处平乱。</li>\n<li>后秦姚苌因为前秦苻登多次获胜，以为是苻坚显灵，因此也树立苻坚神像，结果不但没有得到利益，反而多次受到惊吓，便砍下神像头送给了前秦。</li>\n<li>东晋孝武帝沉迷酒色，将权力交予司马道子，而司马道子也好酒，因此朝政混乱。 7.前秦苻登嫉恨部下雷恶地的智勇超群，后者因为恐惧投降了后秦。</li>\n<li>北魏拓跋珪大败匈奴刘卫辰部，刘卫辰也被部下杀死，北魏的实力因此强盛起来。刘卫辰的儿子刘勃勃逃亡到没弈（yi）干部</li>\n</ol>\n<h2><span id=\"卷108-公元392年\"> 卷108 (公元392年)</span></h2>\n<ol>\n<li>后燕慕容垂打败丁零翟钊，后者投降西燕慕容永，后因反叛被杀。</li>\n<li>前秦苻登和后秦姚苌相互攻打，姚苌善于谋算，苻登内心害怕与之作战。</li>\n<li>后凉吕光经常攻打西秦乞伏乾归，但经常以失败告终。</li>\n<li>后秦国主姚苌去世，太子姚兴继位。</li>\n<li>前秦苻登讨伐后秦姚兴，大败而回。</li>\n<li>后燕慕容垂攻打西燕慕容永，西燕大败。不久，慕容永被杀，西燕灭亡。</li>\n<li>后秦姚兴生擒了前秦苻登，并将其杀死。太子苻崇继任前秦国主。</li>\n<li>后燕太子慕容宝讨伐北魏拓跋珪，后者使用流言迫使北燕撤军。拓跋珪追击，参合陂之战，后燕大败。</li>\n<li>后燕慕容垂去世，太子慕容宝继位。</li>\n<li>北魏拓跋珪发兵40多万，讨伐后燕，打败慕容农，攻占了并州，后燕仅剩下中山、邺城、信都三城没有被攻下。</li>\n<li>东晋张贵人杀死孝武帝，太子司马德宗继位，是为晋安帝。司马道子主政，其宠臣王国宝专权。</li>\n</ol>\n<h2><span id=\"卷109-公元397年\"> 卷109 (公元397年)</span></h2>\n<ol>\n<li>北魏攻打邺城的军队因为中了离间计而撤军，后燕慕容德追击，大胜。</li>\n<li>北魏拓跋珪亲征后燕信都，攻克，慕容凤逃亡中山。</li>\n<li>后燕慕容麟叛逃，国主慕容宝从中山逃到龙城。中山拥立慕容祥做统帅，仍旧坚守。</li>\n<li>慕容会叛乱，杀死慕容隆，后被国主慕容宝打败，逃亡中山被慕容祥杀死。</li>\n<li>东晋王恭、殷仲堪谋划起兵讨伐王国宝，司马道子逮捕王国宝以自保。王国宝被杀死，司马道子的长子司马元显接管了其父司马道子的军政。</li>\n<li>后凉吕光听信谗言，斩杀了沮（ju）渠罗仇等，其侄儿沮渠蒙逊起兵为其报仇，但被吕光打败。</li>\n<li>慕容麟潜入中山，杀死了慕容祥，自立为帝。不久，被北魏拓跋珪打败，逃亡邺城。</li>\n</ol>\n<h2><span id=\"卷110-公元398年\"> 卷110 (公元398年)</span></h2>\n<ol>\n<li>后燕慕容德从邺城移防到滑台，北魏占据了邺城。</li>\n<li>后燕段速骨等反叛，攻打龙城，慕容农为保全自己而投降，不久，被杀死。国主慕容宝不听忠言，最终被部下兰汗诱骗到龙城杀死。</li>\n<li>北凉段业攻打后凉吕光，段业不听建议，被打得大败。</li>\n<li>后燕慕容盛投奔兰汗，得以不死。后慕容盛发动叛乱，杀死了兰汗。不久，慕容盛即位为后燕国主。</li>\n<li>东晋王恭、殷仲堪、桓玄等联合发兵进京铲除司马道子、司马尚之等，司马元显收买了的刘牢之杀死了王恭，桓玄等和朝廷和解，但仍旧相互提防。</li>\n<li>东晋孙泰因为叛乱被杀，其侄儿孙恩入海避祸，并聚集人员以复仇。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"资治通鉴小结-079-118-卷-晋纪\"><a class=\"markdownIt-Anchor\" href=\"#资治通鉴小结-079-118-卷-晋纪\"></a> 资治通鉴小结 079 - 118 卷 晋纪</h1>\n<h2 id=\"卷79公元265年\"><a class=\"markdownIt-Anchor\" href=\"#卷79公元265年\"></a> 卷79（公元265年）</h2>\n<ol>\n<li>司马昭去世，太子司马炎接任相国。不久，司马炎接受了魏元帝禅让的皇位，是为晋武帝。立杨文宗的女儿为皇后，司马衷为太子。</li>\n<li>吴国大都督陶璜（huang）率军十万，终于攻下交趾，交州平定。</li>\n<li>吴国西陵督步阐（chan）因为突然被征召而反叛。西陵之战，陆抗打败了晋国杨肇（zhao）、羊祜（hu）的援军，攻陷了西陵，杀死了步阐等人。</li>\n<li>吴主孙皓继续淫乐，亲近小人，残害忠良，还多次出兵招惹晋国。</li>\n</ol>\n<h2 id=\"卷80公元273年\"><a class=\"markdownIt-Anchor\" href=\"#卷80公元273年\"></a> 卷80（公元273年）</h2>\n<ol>\n<li>邓艾案被平反，封邓艾的孙子邓朗为郎中。</li>\n<li>晋武帝司马炎下令挑选公卿女子入宫，挑选没有选完，则禁止天下嫁娶，后又挑选5000民间女子入宫。</li>\n<li>陆抗病死，吴主孙皓让陆抗的5个儿子接管陆抗的军队。</li>\n<li>周舫之子周处除掉了包括自己在内的“三害”。一改往日作风，而去修养德行。</li>\n<li>魏国皇帝曹芳被司马师废后，太宰范粲36年不说话，直到去世。</li>\n<li>晋朝杨皇后去世，堂妹杨氏依照皇后的遗嘱被立为皇后，其父杨骏被封侯。</li>\n<li>晋朝文鸯打败了胡人，20万人投降。</li>\n<li>晋朝卫瓘离间鲜卑部落，功绩很大。</li>\n<li>晋朝羊祜去世，杜预接替驻守襄阳。</li>\n<li>晋朝马隆毛遂自荐，征募了3500名善拉重弓的大力士讨伐凉州鲜卑，杀死了秃发树机能，凉州平定。</li>\n</ol>\n<h2 id=\"卷81公元280年\"><a class=\"markdownIt-Anchor\" href=\"#卷81公元280年\"></a> 卷81（公元280年）</h2>\n<ol>\n<li>王浚、唐彬率领巴蜀士兵破掉水上障碍，攻克了西陵，杀死吴都督留宪等。接着攻下荆门、夷道两城，杀死夷道监陆宴。又打败吴水军都督陆景，将他杀死。随后与胡奋、王戎一起平定了夏口，最后进入建业，吴主孙皓投降，吴国灭亡。</li>\n<li>杜预部将周旨偷袭，从乐乡城中活捉了吴都督孙歆（ xin）。杜预攻克江陵，杀死了江陵督伍延，后负责安抚荆南地区。</li>\n<li>吴国丞相张悌（ti）领兵渡江围攻王浑的部将，兵溃散而败。</li>\n<li>王浚与王浑因为灭吴的功劳而争斗，王浑因为有众多党羽而处于优势。</li>\n<li>晋武帝因为天下一统而开始淫乐，后族“三杨”当权，忠义之臣被疏远。</li>\n<li>辽西的慕容鲜卑攻打昌黎城，被严询打败，斩获万计，但后来的入侵仍旧不断。</li>\n<li>齐王司马攸贤明，冯挑拨其与晋武帝的关系，齐王愤恨而死。</li>\n<li>匈奴部落接连投降晋朝。</li>\n</ol>\n<h2 id=\"卷82公元289年\"><a class=\"markdownIt-Anchor\" href=\"#卷82公元289年\"></a> 卷82（公元289年）</h2>\n<ol>\n<li>慕容鲜卑首领慕容廆（gui）向西晋投降，以谦让发展实力。</li>\n<li>匈奴北部都尉刘渊乐善好施，匈奴五部豪杰大多归心于他。不久，刘渊被任命为匈奴五部大都督。</li>\n<li>晋武帝沉迷于酒色，不久，生病去世。太子司马衷即位，是为晋惠帝。皇后之父杨骏乘机把持朝政。</li>\n<li>贾皇后联合宦官李肇（zhao）、司马皇族等联合，出兵诛杀了杨骏及其党羽，杨太后也被废为民。司马亮主政，专权独断。八王之乱由此拉开了序幕。</li>\n<li>楚王司马玮（wei）、贾皇后、宦官李肇等联合，出兵杀死了司马亮。随后，司马玮也被贾皇后杀死。从此，贾后独揽大权，大任亲族，张华等人辅政。</li>\n<li>秦、雍之地的氐人、羌人反叛，打败了官军，立氐帅齐万年为帝。关中战乱不断，大量流民涌现，李特兄弟经常救济他们。</li>\n</ol>\n<h2 id=\"卷83公元299年\"><a class=\"markdownIt-Anchor\" href=\"#卷83公元299年\"></a> 卷83（公元299年）</h2>\n<ol>\n<li>孟观率军击破了氐人，抓获了齐万年。</li>\n<li>贾皇后淫乱非常，在她的设计下，太子被废黜为平民。</li>\n<li>贾皇后派人杀死了太子，统领禁军的赵王司马伦联合齐王司马冏（jiong）等人，假造诏书，以谋害太子的罪名废贾后为平民，后将其毒杀，其党羽和张华等人也被杀死，司马伦自领相国位。但其才能平庸，实权控制在谋臣孙秀手中。</li>\n<li>淮南王司马允被逼起兵声讨司马伦，一路所向无敌。后被与司马伦儿子要好的伏胤刺杀而死，受司马允牵连的人众多。</li>\n<li>益州刺史赵廞（qian）不接受替代，起兵造反，打败了朝廷的军队。李特之弟李庠（xiang）等人投靠了赵廞。</li>\n</ol>\n<h2 id=\"卷84公元301年\"><a class=\"markdownIt-Anchor\" href=\"#卷84公元301年\"></a> 卷84（公元301年）</h2>\n<ol>\n<li>凉州刺史张轨扫平河西盗贼，以此为据点，暗中发展势力。</li>\n<li>司马伦篡（cuan）位称帝，大封亲信，全国郡守县令都被封侯，以致府库不足以封赏。</li>\n<li>益州赵廞忌恨李庠骁勇得人心，于是将其杀死。李特兄弟怨恨，攻占了成都，赵廞逃亡中被随从杀死。</li>\n<li>驻守许昌的齐王司马冏起兵讨伐司马伦，镇守邺城的成都王司马颖与镇守关中的河间王司马颙（yong）举兵响应。洛阳城中的禁军将领王舆迎惠帝复位，司马伦、孟观等被杀。司马囧、司马颖被加九赐，司马颙加三赐。司马冏入京辅政，司马颖在谋士卢志的劝说下回到邺城收买人心。</li>\n<li>朝廷下令遣返梁益地区的流民，逼迫很急，李特兄弟多次请求宽限时日，同时招纳流民严阵以待。后打败了官军，李特自称大将军，都督梁、益两州诸军事。</li>\n<li>河间王司马颙又从关中起兵讨伐齐王司马冏，洛阳城中的长沙王司马乂（yi）举兵入宫杀齐王司马冏，政权落入司马乂手，但凡事到邺城请示大将军成都王司马颖。</li>\n</ol>\n<h2 id=\"卷85公元303年\"><a class=\"markdownIt-Anchor\" href=\"#卷85公元303年\"></a> 卷85（公元303年）</h2>\n<ol>\n<li>李特打败罗尚后，下令手下流民去各土堡吃饭。后罗尚联合各土堡，斩杀了李特。李流、李雄收拾残部，打败了罗尚来攻的军队。李雄后来打败了西晋的援军，李流便不考虑投降之事，并将军队交予李雄。</li>\n<li>蛮人张昌占据了江夏，立改名成刘尼的人为皇帝。西晋军队多次被打败，新野王司马歆被杀后，荆、江、徐、扬、豫等五州大多被张昌占据。刘弘手下襄阳镇守陶侃终于打败了张昌。</li>\n<li>河间王司马颙、成都王司马颖起兵讨伐长沙王司马乂。分别派遣张方和陆机领军。张方进入京城洛阳，烧杀抢掠。陆机因为被北方旧将忌恨而大败，陆机被孟玖（jiu）谗害而死。</li>\n<li>李流病死，李雄接任，攻陷成都。但军队饥饿，被迫向西晋请和求粮。</li>\n<li>幽州王浚将女儿嫁给了段式鲜卑段务勿尘和宇文鲜卑素怒延，以借助夷狄力量。</li>\n<li>长沙王司马乂多次打败司马颖，张方也认为洛阳无法攻克，想撤军回长安。在洛阳的司马越联合禁军逮捕了司马乂，并交给张方，被张方烧死。司马颖在邺城遥控朝政，排除异己，睚眦必报。卢志为其辅佐，河间王司马颙被封为太宰。</li>\n<li>司马越因为丞相司马颖亲近小人，于是挟持了惠帝讨伐邺城的司马颖。司马颖部下石超攻其不备，将惠帝夺回进邺城内，司马越逃回东海。</li>\n<li>司马颖密令幽州刺史和演刺杀王浚，因为天象变化而失败，和演被杀。王浚联合鲜卑段务勿尘、乌桓人羯朱以及司马越的弟弟并州刺史司马腾，一起讨伐司马颖。河间王司马颙派张方支援司马颖。张方攻陷了洛阳。</li>\n<li>匈奴人刘渊乘机请命，以联合匈奴支援司马颖，因此得以从邺城离开。刘渊被匈奴五部拥立为大单于，派兵帮助司马颖。</li>\n<li>王浚主薄祁宏担任先锋，打败了司马颖。司马颖带着惠帝逃到洛阳。王浚进入邺城后，烧杀抢掠。</li>\n<li>鲜卑拓跋猗（yi）卢打败了刘渊。</li>\n<li>刘渊将都城迁往左国城，登基建国，史称匈奴汉国。出兵攻打并州司马腾，占据了不少城池。</li>\n<li>张方士兵因为洛阳被抢掠一空而挟持惠帝、司马颖回到了长安。于是。太宰河间王司马颙掌权。</li>\n</ol>\n<h2 id=\"卷86公元305年\"><a class=\"markdownIt-Anchor\" href=\"#卷86公元305年\"></a> 卷86（公元305年）</h2>\n<ol>\n<li>司马越率领联军讨伐张方强行迁移天子之罪。范阳王司马虓（xiao）部下刘琨在王浚精锐鲜卑骑兵的帮助下，杀死了石超，打跑了刘乔。</li>\n<li>陈敏战胜张昌残部石冰，并在江东割据。后为政没有章法，又纵容子弟为害，被江东大族顾荣和周玘（qi）等人杀死。</li>\n<li>太宰司马颙（yong）杀死张方以向司马越求和，不被同意。</li>\n<li>王浚部下祁宏带兵攻进了长安，所属鲜卑部队大肆抢掠，并迎接惠帝回到了洛阳。</li>\n<li>李雄在成都称帝，史称成汉。</li>\n<li>镇守邺城的范阳王司马虓去世，长史刘舆假传圣旨，赐死了司马颖。卢志安葬了司马颖。东燕王司马腾镇守邺城。</li>\n<li>刘舆推荐其弟刘琨为并州刺史，被同意。当时的并州由于饥荒和外族抢掠，只剩下几万户。</li>\n<li>晋惠帝吃饼中毒而死，太弟司马炽（chi）即位，是为晋怀帝。</li>\n<li>南阳王司马模派人杀死了应征入朝做司徒的河间王司马颙。</li>\n<li>镇南将军刘宏去世，由高密王司马略镇守襄阳。南阳王司马模镇守长安，琅邪王司马睿镇守建业。</li>\n<li>司马睿在王导的辅佐下，逐渐深得江东人的信任，顾荣、郭循也来做官。</li>\n<li>声称给司马颖报仇的公师藩兵败而死后，汲（ji）桑自称大将军，再次声称为司马颖报仇，以石勒（lei)为先锋，攻陷了邺城，杀死了司马腾。后汲桑等被兖州刺史苟晞和丁绍打败，石勒后来投靠了匈奴汉国的刘渊。</li>\n</ol>\n<h2 id=\"卷87公元309年\"><a class=\"markdownIt-Anchor\" href=\"#卷87公元309年\"></a> 卷87（公元309年）</h2>\n<ol>\n<li>高密王司马略去世，山涛第五子山简接任，镇守襄阳。</li>\n<li>成汉将领多人献城投降巴郡罗尚。不久，罗尚去世，皮素接任。后罗尚的儿子罗宇杀死皮素，接着暴重又杀死罗宇，最后，手下武将和官员联合杀死了暴重。</li>\n<li>匈奴汉国刘渊派王弥、刘粲、刘曜、石勒等攻打西晋。幽州王浚则派祁弘攻打汉国，并多次取胜。</li>\n<li>汉国国主刘渊去世，太子刘和继位。呼延攸、刘乘、刘锐等人说服了国主刘和攻打刘聪等人，刘聪反击，杀死了他们。刘聪继位为国主。</li>\n<li>并州刘琨联合鲜卑拓跋猗（yi）卢与幽州王浚、鲜卑段务勿尘相互攻打，刘琨处于劣势。</li>\n<li>晋怀帝手诏命苟晞讨伐司马越。司马越忧愤而死。苟晞总领六州军事。后被石勒打败，因为企图反叛被杀死。</li>\n<li>石勒攻克江夏，许昌等地。又与王弥、刘耀等人一起攻克洛阳。晋怀帝被俘，被汉主刘聪封为平阿公。但很多官员在战乱中被杀。</li>\n<li>王弥密谋联合曹嶷谋取石勒，被发现。石勒设宴杀死王弥。汉主刘聪虽然愤怒，但还是给石勒封了官。</li>\n<li>慕容廆（gui）派其子慕容翰攻克了辽东</li>\n</ol>\n<h2 id=\"卷88公元312年\"><a class=\"markdownIt-Anchor\" href=\"#卷88公元312年\"></a> 卷88（公元312年）</h2>\n<ol>\n<li>石勒准备攻打司马睿的寿春，但是大军遭遇饥饿，并因为疾病而损军大半。于是撤军，辗转占据了襄国作为根本。</li>\n<li>晋朝安定太守贾疋（ya）、麹（ju）允、阎鼎等率军围攻长安，刘曜因为多次战败而胁迫8万成年男女出逃。秦王司马业在长安被拥立皇太子。后贾疋在讨伐卢水胡首领彭天护时，夜堕于涧，为彭天护所杀。后晋怀帝被汉主刘聪毒死后，鞠允、索琳、梁芬等人扶立司马业为帝，是为晋愍（min）帝。</li>\n<li>刘琨听说谗言，杀死了护军令狐盛，其子令狐泥引来汉军。晋阳守将投降了汉国，刘琨逃亡。后在代公拓跋猗卢的帮助下，又夺回晋阳。</li>\n<li>王浚联合辽西公段疾陆眷攻打石勒的襄国。孔苌擒获了段末，于是石勒与段氏结盟，王浚于是衰落。</li>\n<li>石勒打败了刘琨之子刘演，占据了邺城。</li>\n<li>王浚企图称帝，石勒听从谋臣张宾的劝告，假意归附王浚，王浚非常得意而不提防。</li>\n</ol>\n<h2 id=\"卷89公元314年\"><a class=\"markdownIt-Anchor\" href=\"#卷89公元314年\"></a> 卷89（公元314年）</h2>\n<ol>\n<li>成汉刘雄管辖下的百姓富裕，但是制度缺乏，而军队纪律也不严明。</li>\n<li>襄国石勒偷袭幽州王浚成功，王浚在襄国被杀。</li>\n<li>江陵王敦部下陶侃镇压了杜弢(tao)起义，司马睿代皇帝提升王敦为六州都督。</li>\n<li>王敦听信谗言，陶侃被任命为广州刺史。陶侃平定广州。因为无聊，每天玩将屋中砖头搬进搬去。</li>\n<li>代王拓跋猗卢因为偏爱小儿子拓跋比延而欲立为继承人，而引起长子拓跋六的不满，拓跋猗卢攻打拓跋六，反被杀。拓跋六又被拓跋普根杀死，拓跋普根及其继承人也先后去世。代国一部投奔了刘琨，刘琨重新振作。</li>\n<li>汉国刘聪亲信小人，忠臣很多被杀。</li>\n<li>汉国刘曜围攻长安，晋愍帝投降，被封侯。</li>\n<li>石勒打败刘琨，刘琨投奔蓟城段匹，两人结为兄弟。</li>\n</ol>\n<h2 id=\"卷90公元317年\"><a class=\"markdownIt-Anchor\" href=\"#卷90公元317年\"></a> 卷90（公元317年）</h2>\n<ol>\n<li>司马睿称帝，是为东晋晋元帝。</li>\n<li>祖逖（ti）北伐。</li>\n<li>周访消灭了杜曾的叛乱，驻守襄阳。</li>\n<li>晋愍帝在平阳被汉国主刘聪杀死。</li>\n<li>辽西公段疾陆眷去世，段末夺得了单于位。</li>\n<li>段末想联合刘琨图谋段匹，段匹最终听从部下劝说，杀死了刘琨。</li>\n<li>刘聪去世，太子刘粲继位。勒准杀死了刘粲，刘曜和石勒出兵攻打勒准。刘曜继位为汉国国主，勒准被部下杀死。</li>\n</ol>\n<h2 id=\"卷91-公元319年\"><a class=\"markdownIt-Anchor\" href=\"#卷91-公元319年\"></a> 卷91 (公元319年)</h2>\n<ol>\n<li>汉国主刘曜改国号为赵，是为前赵。</li>\n<li>石勒称帝，史称后赵。</li>\n<li>慕容翰用计打败宇文氏悉得官进犯的几十万倾国之军。</li>\n<li>慕容廆（gui）归附东晋，被封为安北将军。</li>\n<li>凉州内乱，前凉国主张寔（shi）被手下杀死。州人推举其同母弟张茂为前凉首领</li>\n<li>前赵游子远平定了因解虎、尹车之事引发的巴族酋长句渠知为首的几十万人的叛乱</li>\n<li>祖逖北伐成果显著，黄河以南士民大多背叛后赵而归附东晋。后赵国土日益缩小。后赵石勒主动讨好祖逖，两国边境得以休养生息。</li>\n<li>后赵石虎攻陷了幽州。段匹、段文鸯被活捉。两人不屈服，久之，被杀。</li>\n<li>祖逖因为东晋派人坐享其成，再加上国家即将内乱，北伐大业难成，而忧愤而死。</li>\n<li>拓跋猗卢的妻子惟氏杀死了代王拓拔郁律，而立其子拓拔贺为世子，惟氏把持国政。拓拔郁律的儿子拓拔什翼犍幸存了下来。</li>\n</ol>\n<h2 id=\"卷92公元322年\"><a class=\"markdownIt-Anchor\" href=\"#卷92公元322年\"></a> 卷92（公元322年）</h2>\n<ol>\n<li>王敦在武昌起兵叛乱，襄阳甘卓听从劝说发檄文讨伐王敦。</li>\n<li>前赵国主刘曜在攻打武都杨难敌时染病，秦州刺史陈安叛乱，不久被镇压。</li>\n<li>王敦攻克东晋首都健康。晋元帝任命王敦为丞相，王导因为不救重臣周伯仁、戴渊，两人被杀，后留下名句：“吾虽不杀伯仁，伯仁由我而死”，后王敦回到武昌。</li>\n<li>甘卓不听劝谏，回军襄阳，不久，甘卓即被王敦密令襄阳太守周虑杀死。甘卓因为多疑而自败。</li>\n<li>王敦部下魏乂最终攻陷长沙，司马承被王敦密令杀死。</li>\n<li>东晋元帝司马睿忧愤而死，太子司马绍即位，是为晋明帝，王导辅佐。</li>\n<li>石虎攻打青州曹嶷，曹嶷投降被杀。</li>\n<li>前赵刘曜亲征凉州，张茂归附前赵。</li>\n</ol>\n<h2 id=\"卷93公元324年\"><a class=\"markdownIt-Anchor\" href=\"#卷93公元324年\"></a> 卷93(公元324年)</h2>\n<ol>\n<li>成汉国主不顾大臣反对，册立其兄李荡的儿子李班为太子。</li>\n<li>前凉张茂生病去世，世子张骏继位。</li>\n<li>东晋王敦再次叛乱，部下王官、沈充最终战败，王敦及其党羽覆灭。王导、温峤因功被封赏。</li>\n<li>石虎救援洛阳石生，前赵国主刘曜被惊退，撤到长安。东晋也被迫撤退，淮水以南都归于后赵。</li>\n<li>东晋明帝去世，5岁皇太子继位，是为东晋成帝。庾（yu）太后临朝听政，国家大事由庾亮裁决。</li>\n<li>段末去世，其弟段牙继位。后段疾陆眷的孙子段辽杀死段牙自立为王。</li>\n<li>代王拓跋贺去世，其弟拓跋纥（ge）那继位。</li>\n<li>庾亮不顾众人反对，强行征召苏峻入朝，苏峻反叛。祖约也不顾部下反对，起兵响应。</li>\n</ol>\n<h2 id=\"卷94公元331年\"><a class=\"markdownIt-Anchor\" href=\"#卷94公元331年\"></a> 卷94(公元331年)</h2>\n<ol>\n<li>苏峻攻陷健康，庾亮投奔寻阳温峤，庾太后忧愁而死。温峤、广陵郗鉴、最终醒悟的陶侃共同出兵讨伐苏峻、祖约。</li>\n<li>前赵国主刘曜救援蒲阪，石虎退走，刘曜追击，石虎大败。</li>\n<li>陶侃因攻打苏峻无法取胜而心生退意。毛宝用行动将其说服。苏峻因冒进而被陶侃部下杀死。不久，祖约逃奔后赵，被后赵杀死。苏峻余部的叛乱也失败，叛乱平定。论功行赏，温峤谦让，推举王导主政。不久，温峤去世。</li>\n<li>前赵国主刘曜围攻洛阳，后赵国主石勒、石虎救援，刘曜因为酒醉被抓，不久，被杀。后石虎攻陷上郢（ying），前赵灭亡。氐（di）族王蒲洪、羌族首领姚戈仲也归降了石虎。</li>\n<li>贺兰部等共同推举拓跋翳（yi）槐为代王，代王拓跋纥那逃奔宇文部，拓跋什翼犍到后赵当人质。</li>\n<li>河南王吐延被羌族首领姜聪刺死，儿子叶延继位，该国名为吐谷（yu）浑。</li>\n<li>后赵石勒称帝，立石弘为太子。</li>\n</ol>\n<h2 id=\"卷95公元332年\"><a class=\"markdownIt-Anchor\" href=\"#卷95公元332年\"></a> 卷95(公元332年)</h2>\n<ol>\n<li>陶侃派桓（huan）宣等打败了后赵郭敬，夺取了襄阳。</li>\n<li>东晋宁州刺史尹奉归降了成汉，成汉李寿全部占有南中地区。</li>\n<li>辽东慕容廆（gui）去世，慕容皝（huang）继位。</li>\n<li>后赵石勒因病去世，石弘继位。石虎专权，杀死了徐光、程遐（xia），不久，刘太后、彭城王石堪（kan）反石虎也被杀。长安石生、洛阳石朗起兵，也被石虎杀死。后石虎杀死石弘，自立为帝。</li>\n<li>慕容皝执政严厉，慕容翰投奔段氏，慕容仁起兵也被打败。</li>\n<li>陶侃辞职回乡，不久，去世。</li>\n<li>成汉国主李雄因病去世，太子李班继位，李寿辅政。李班仁爱被李越杀死，李斯继位。</li>\n<li>代王拓跋翳槐因为杀死对其不恭敬的贺兰蔼（ai）头而引起各部落叛乱。拓跋纥那再次被推举为代王，拓跋翳槐投奔后赵，不久，夺回代国。</li>\n<li>范文侵占了林邑国，自立为王，派使者到健康朝贡。</li>\n<li>后赵石虎杀死狂妄反叛的太子石邃（sui），立石宣为太子。</li>\n</ol>\n<h2 id=\"卷96公元338年\"><a class=\"markdownIt-Anchor\" href=\"#卷96公元338年\"></a> 卷96(公元338年)</h2>\n<ol>\n<li>后赵石虎、燕王慕容皝相约攻打段辽，段辽战败，归附了后赵。慕容翰投奔宇文氏。</li>\n<li>成汉李寿偷袭成都，国主李斯被软禁，后自杀。李越等被杀，李寿即位。</li>\n<li>后赵石虎因为慕容皝不应约攻打段辽而出兵攻打燕国棘城。慕舆根力战，前赵因为无法取胜而撤军。慕容皝派其子慕容恪追击，后赵军大败，只有石闵（冉闵）一支部队未损。</li>\n<li>代王拓跋翳槐去世，拓跋什翼犍继位，国力开始强盛。</li>\n<li>王导去世，共辅政了元帝、明帝、成帝三代君主，位高权重。不久，郗鉴、庾亮也去世。</li>\n<li>慕容翰逃回燕国，慕容皝大喜。</li>\n</ol>\n<h2 id=\"卷97公元342年\"><a class=\"markdownIt-Anchor\" href=\"#卷97公元342年\"></a> 卷97(公元342年)</h2>\n<ol>\n<li>晋成帝去世，同母弟司马岳继位，是为东晋康帝。政权委托给庾冰和何充。</li>\n<li>慕容皝听从了慕容翰的建议，攻入高丽首都丸都，高丽王高钊逃亡，燕国俘获其父母而还。</li>\n<li>成汉李寿去世，太子李势继位。</li>\n<li>慕容皝亲征宇文逸豆归，慕容翰和慕容霸（慕容垂）斩杀其猛将涉夜干，宇文逸豆归逃亡沙漠身死，宇文部由此离散，但在此战中，燕国高诩、刘佩身中流箭而死。不久，慕容翰被逼服毒自杀。</li>\n<li>东晋康帝去世，何充推举2岁的司马聃（dan）为帝，是为东晋穆帝。褚（zhu）太后临朝听政。</li>\n<li>庾翼去世。朝廷听从何充的建议，桓温继任荆州刺史。</li>\n<li>前凉国主张骏去世，世子张重华继位。</li>\n<li>成汉国主李势骄奢淫逸，江陵桓温先锋袁乔等讨伐成汉，攻克了成都，李势归降，送往健康被封为归义侯。成汉部将邓定等人在桓温撤回江陵后又占据了成都。</li>\n<li>后赵凉州刺史麻秋攻打前凉，前凉谢艾挂帅，麻秋大败，只身逃亡，后赵攻打前凉以失败告终。</li>\n</ol>\n<h2 id=\"卷98公元348年\"><a class=\"markdownIt-Anchor\" href=\"#卷98公元348年\"></a> 卷98(公元348年)</h2>\n<ol>\n<li>林邑国的军队经常攻打九真郡，士民绝大部分被杀。</li>\n<li>后赵太子石宣杀死与之争权的石韬，国主石虎残忍的杀死了太子石宣。石生被立为太子。</li>\n<li>前燕慕容皝去世，太子慕容儁（jun）继位。</li>\n<li>原太子石宣的侍卫军在首领梁犊的煽动下反叛，后赵军节节败退，后姚戈仲和石斌斩杀了梁犊。</li>\n<li>后赵皇帝石虎去世，太子石生继位，刘太后行使皇帝权力。之前，张豺杀死了石斌。</li>\n<li>姚戈仲、蒲洪等说服了石遵起兵，石闵为先锋。石遵进入邺城，登上帝位。刘太后、石生、张豺等被杀。石斌的儿子石衍被立为太子。</li>\n<li>蓟城石冲起兵讨伐石遵，被石闵、李农镇压，石冲被赐死。</li>\n<li>石闵说服石遵解除了蒲洪关中镇守的职务，蒲洪归降了东晋。</li>\n<li>后赵皇帝石遵等人谋划诛杀石闵，石鉴暗通消息，石闵出兵杀死石遵，拥立石鉴为帝。</li>\n<li>邺城内内乱不断，最终石闵控制了局势，并颁布“杀胡令”，汉人大量拥入邺城，邺城被四面围困。后石闵、李农杀死了石鉴及其石氏宗族，石闵成帝，史称冉魏。石闵恢复冉姓。</li>\n<li>羌王姚戈仲派其子姚襄攻打蒲洪，反被打败。蒲洪自称秦王，改姓为苻。</li>\n<li>前燕慕容儁三路攻打后赵，攻占了蓟城。</li>\n<li>麻秋毒杀了苻洪，其子苻健杀死了麻秋，去除三秦 称号，归附东晋，后攻占了长安。</li>\n<li>后赵石袛（di）在襄国称帝，以姚戈仲为右丞相，其子姚襄统帅其军队。</li>\n<li>魏国冉闵杀死李农。</li>\n</ol>\n<h2 id=\"卷99公元351年\"><a class=\"markdownIt-Anchor\" href=\"#卷99公元351年\"></a> 卷99(公元351年)</h2>\n<ol>\n<li>苻健建立大秦，苻雄统帅军队，苻菁（jing）统领禁军。</li>\n<li>魏国冉闵围攻后赵国都襄国，百日不下，姚襄、石琨、前燕援军和后赵王石袛四面夹攻，冉闵大败，逃回邺城。</li>\n<li>刘显杀死后赵王石袛，归附魏国。后攻打邺城失败后，在襄国称帝。冉闵攻克襄国，将其杀死。后赵灭亡。</li>\n<li>姚戈仲去世，其子姚襄率众归附东晋。</li>\n<li>冉闵与前燕慕容恪交战，最终被擒，在龙城被杀。后邺城被攻破，魏国灭亡。</li>\n<li>东晋交州刺史阮敷讨伐林邑国，攻破50多座营垒。</li>\n<li>东晋殷浩到寿春，计划北伐。姚襄反叛，殷浩战败。</li>\n<li>前凉张重华去世，其庶兄张祚（zuo）夺取前凉。后又杀死了谢艾。</li>\n<li>殷浩因为连年北伐，却经常战败，桓温乘机发难，殷浩被贬为庶民。朝政大权集中于桓温手中。</li>\n<li>桓温北伐，攻打前秦，多次获胜。</li>\n<li>前燕国主慕容儁嫉恨慕容霸的才能，将其改名为慕容垂，并调其留守龙城。</li>\n<li>桓温因为缺粮而撤军，苻雄追击，东晋战败。不久苻雄去世，其子苻坚接任其军队。期间，前秦太子苻苌被桓温军队的流箭射中，不久，去世。</li>\n</ol>\n<h2 id=\"卷100公元355年\"><a class=\"markdownIt-Anchor\" href=\"#卷100公元355年\"></a> 卷100(公元355年)</h2>\n<ol>\n<li>前秦苻健病危，苻菁叛乱被杀。苻健去世，太子苻生继位。</li>\n<li>前凉王张祚荒淫残暴，因为憎恨河州刺史张瓘（guan）的强大而出兵攻打，内乱爆发，张祚被杀死，张玄靓被拥立为国主，张瓘掌管军队。</li>\n<li>前燕慕容儁终于同意送回高句丽王高钊的母亲。</li>\n<li>桓温再次北伐，打败姚襄，攻克了洛阳。</li>\n<li>姚襄被前秦苻黄眉、邓羌打败，被杀死。弟弟姚苌率众投降。不久，苻黄眉被前秦国主苻生杀害。</li>\n<li>前秦国主苻生残暴好杀，以致人人自危。苻坚、王猛等人起兵杀死了苻生。苻坚即位，王猛辅政，政治清明。</li>\n<li>前凉张瓘密谋杀死宋混，废前凉王自立，但反被宋混杀死，宋混开始掌管军政。</li>\n</ol>\n<h2 id=\"卷101-公元360年\"><a class=\"markdownIt-Anchor\" href=\"#卷101-公元360年\"></a> 卷101 (公元360年)</h2>\n<ol>\n<li>燕主慕容儁薨，太子慕容暐继位，年十一。太宰慕容恪总揽朝政，慕舆根左右挑拨，阴谋反叛，族。</li>\n<li>前凉宋混去世，以其弟宋澄辅政。宋澄质柔少断，为张邕族灭。张玄靓任张邕和张天赐辅政。后张邕因为专权，被张天赐杀死。前凉国主张玄靓密谋杀死张天赐，事泄，反被杀死，张天赐自任前凉国主。至此，前凉大权由张天赐独揽，</li>\n<li>东晋穆帝去世，司马丕继位，是为东晋哀帝。东晋哀帝因为吃长生不老丹药而去世，东晋废帝司马奕继位。</li>\n<li>前燕慕容恪去世，慕容评不听遗言，不以慕容垂接任，而以慕容冲接任为大司马。</li>\n<li>前秦苻生的兄弟苻柳等人反叛，前燕不救援，于是被王猛、邓羌、吕光等镇压。</li>\n</ol>\n<h2 id=\"卷102-公元369年\"><a class=\"markdownIt-Anchor\" href=\"#卷102-公元369年\"></a> 卷102 (公元369年)</h2>\n<ol>\n<li>桓温北伐前燕。温瞻前顾后，终粮尽船焚而撤军，慕容垂临危请命尾随追击温军，晋军枋头大败，死者数万。</li>\n<li>前燕慕容评忌慕容垂之才而图之，慕容垂携子慕容令逃至前秦，王猛设计陷害慕容垂父子，以致慕容令逃回前燕，令度终不得免，复叛于燕，死。</li>\n<li>前秦王猛出壶口关攻邺（前燕），邓羌在王猛答应委任为司隶校尉后浴血奋战，前燕慕容评卖水鬻粥，终兵败被擒，寻前燕亡。</li>\n</ol>\n<h2 id=\"卷103-公元371年\"><a class=\"markdownIt-Anchor\" href=\"#卷103-公元371年\"></a> 卷103 (公元371年)</h2>\n<ol>\n<li>桓温废司马奕而立会稽王司马昱为帝，是为简文帝。</li>\n<li>简文帝去世，年幼的太子司马昌明继位，是为孝武帝。</li>\n<li>桓温去世，其弟桓冲统领其兵众。桓冲对朝廷尽忠，忍让谦逊。</li>\n<li>前秦部将朱彤、杨安、毛当攻蜀，拔之。</li>\n<li>前秦王猛病逝。</li>\n</ol>\n<h2 id=\"卷104-公元376年\"><a class=\"markdownIt-Anchor\" href=\"#卷104-公元376年\"></a> 卷104 (公元376年)</h2>\n<ol>\n<li>东晋孝武帝亲征，谢安辅政。</li>\n<li>前秦苟苌、姚苌攻陷了前凉首都姑藏，张天赐投降，前凉灭亡。</li>\n<li>刘卫辰被代国攻打，向前秦求援，拓跋寔君、拓跋斤杀死代王拓跋什翼犍。代国大乱，前秦乘机将匈奴分为刘库仁和刘卫辰两部。刘库仁厚待拓跋珪。</li>\n<li>前秦苻丕克襄阳。</li>\n<li>前秦和龙苻洛反叛，兵败被抓，苻坚赦免了他。王猛之子叛，赦。</li>\n<li>前秦派吕光统十万军，讨西域。</li>\n<li>前秦苻坚欲讨东晋，皆谏，唯慕容垂以为然。</li>\n</ol>\n<h2 id=\"卷105-公元383年\"><a class=\"markdownIt-Anchor\" href=\"#卷105-公元383年\"></a> 卷105 (公元383年)</h2>\n<ol>\n<li>淝水之战，前秦溃散，东晋防守胜利。</li>\n<li>慕容垂反叛前秦，知恩不杀苻坚。而后建立后燕。</li>\n<li>姚苌畏戮，反，是为后秦。</li>\n<li>东晋桓冲、褚太后先后去世。</li>\n<li>前秦吕光平西域。</li>\n<li>慕容垂围苻丕于邺城，久攻不下。苻丕在断粮后仍旧有守有攻，后燕为之疲惫。</li>\n<li>刘库仁欲救邺，被前燕降将杀死，刘头眷接管了其部众。</li>\n<li>丁零人翟斌叛秦归燕，后叛燕，死。其弟翟真摄其众，为后燕之顽疾。</li>\n<li>苻丕求援于谢玄，谢玄粮济苻丕。</li>\n<li>前秦苻坚数攻姚苌，败。同时，慕容冲攻长安，苻坚多次战败。</li>\n</ol>\n<h2 id=\"卷106-公元385年\"><a class=\"markdownIt-Anchor\" href=\"#卷106-公元385年\"></a> 卷106 (公元385年)</h2>\n<ol>\n<li>慕容冲称帝，建立西燕。</li>\n<li>前秦苻坚和西燕慕容冲相互攻打，各有胜负。</li>\n<li>前秦苻丕、东晋刘牢之与后燕慕容垂相互攻打，慕容垂北撤，刘牢之也损失惨重，苻丕和慕容垂的军队都缺粮，慕容垂的军队以桑椹充饥。</li>\n<li>姚苌诈杀新平人，皆埋。</li>\n<li>丁零内乱杀翟真，其堂弟翟成继，兵众多归后燕。</li>\n<li>苻坚信谶，自长安走五将山，后秦擒坚，姚苌屡求玺而不得，寻勒杀坚。</li>\n<li>翟成被部下杀死，余部被慕容垂活埋。</li>\n<li>谢安去世，司马道子主持军政。</li>\n<li>刘显杀死刘头眷自立，拓跋珪投奔贺兰部的贺讷（ne）。</li>\n<li>吕光夺取了凉州，自任凉州刺史，史称后凉。</li>\n<li>拓跋珪被推举为代王，实行休养生息的政策，国民高兴。不久，该国号为魏，史称北魏。</li>\n<li>西燕慕容冲被部下杀死，后多位国主被杀，最后，慕容永即位。</li>\n<li>西燕慕容永请求借道东返，前秦苻丕拒绝，双方大战，苻丕失败，逃亡中被东晋冯该杀死，南安王苻登即位为前秦国主。</li>\n</ol>\n<h2 id=\"卷107-公元387年\"><a class=\"markdownIt-Anchor\" href=\"#卷107-公元387年\"></a> 卷107 (公元387年)</h2>\n<ol>\n<li>北魏拓跋珪联合北燕，打败刘显，刘显走途无路，投奔西燕。 2.后凉吕光忙于平定内乱。</li>\n<li>西秦乞伏国仁去世，其弟乞伏乾归继位。 4.后燕仍旧在花费大量军力忙于四处平乱。</li>\n<li>后秦姚苌因为前秦苻登多次获胜，以为是苻坚显灵，因此也树立苻坚神像，结果不但没有得到利益，反而多次受到惊吓，便砍下神像头送给了前秦。</li>\n<li>东晋孝武帝沉迷酒色，将权力交予司马道子，而司马道子也好酒，因此朝政混乱。 7.前秦苻登嫉恨部下雷恶地的智勇超群，后者因为恐惧投降了后秦。</li>\n<li>北魏拓跋珪大败匈奴刘卫辰部，刘卫辰也被部下杀死，北魏的实力因此强盛起来。刘卫辰的儿子刘勃勃逃亡到没弈（yi）干部</li>\n</ol>\n<h2 id=\"卷108-公元392年\"><a class=\"markdownIt-Anchor\" href=\"#卷108-公元392年\"></a> 卷108 (公元392年)</h2>\n<ol>\n<li>后燕慕容垂打败丁零翟钊，后者投降西燕慕容永，后因反叛被杀。</li>\n<li>前秦苻登和后秦姚苌相互攻打，姚苌善于谋算，苻登内心害怕与之作战。</li>\n<li>后凉吕光经常攻打西秦乞伏乾归，但经常以失败告终。</li>\n<li>后秦国主姚苌去世，太子姚兴继位。</li>\n<li>前秦苻登讨伐后秦姚兴，大败而回。</li>\n<li>后燕慕容垂攻打西燕慕容永，西燕大败。不久，慕容永被杀，西燕灭亡。</li>\n<li>后秦姚兴生擒了前秦苻登，并将其杀死。太子苻崇继任前秦国主。</li>\n<li>后燕太子慕容宝讨伐北魏拓跋珪，后者使用流言迫使北燕撤军。拓跋珪追击，参合陂之战，后燕大败。</li>\n<li>后燕慕容垂去世，太子慕容宝继位。</li>\n<li>北魏拓跋珪发兵40多万，讨伐后燕，打败慕容农，攻占了并州，后燕仅剩下中山、邺城、信都三城没有被攻下。</li>\n<li>东晋张贵人杀死孝武帝，太子司马德宗继位，是为晋安帝。司马道子主政，其宠臣王国宝专权。</li>\n</ol>\n<h2 id=\"卷109-公元397年\"><a class=\"markdownIt-Anchor\" href=\"#卷109-公元397年\"></a> 卷109 (公元397年)</h2>\n<ol>\n<li>北魏攻打邺城的军队因为中了离间计而撤军，后燕慕容德追击，大胜。</li>\n<li>北魏拓跋珪亲征后燕信都，攻克，慕容凤逃亡中山。</li>\n<li>后燕慕容麟叛逃，国主慕容宝从中山逃到龙城。中山拥立慕容祥做统帅，仍旧坚守。</li>\n<li>慕容会叛乱，杀死慕容隆，后被国主慕容宝打败，逃亡中山被慕容祥杀死。</li>\n<li>东晋王恭、殷仲堪谋划起兵讨伐王国宝，司马道子逮捕王国宝以自保。王国宝被杀死，司马道子的长子司马元显接管了其父司马道子的军政。</li>\n<li>后凉吕光听信谗言，斩杀了沮（ju）渠罗仇等，其侄儿沮渠蒙逊起兵为其报仇，但被吕光打败。</li>\n<li>慕容麟潜入中山，杀死了慕容祥，自立为帝。不久，被北魏拓跋珪打败，逃亡邺城。</li>\n</ol>\n<h2 id=\"卷110-公元398年\"><a class=\"markdownIt-Anchor\" href=\"#卷110-公元398年\"></a> 卷110 (公元398年)</h2>\n<ol>\n<li>后燕慕容德从邺城移防到滑台，北魏占据了邺城。</li>\n<li>后燕段速骨等反叛，攻打龙城，慕容农为保全自己而投降，不久，被杀死。国主慕容宝不听忠言，最终被部下兰汗诱骗到龙城杀死。</li>\n<li>北凉段业攻打后凉吕光，段业不听建议，被打得大败。</li>\n<li>后燕慕容盛投奔兰汗，得以不死。后慕容盛发动叛乱，杀死了兰汗。不久，慕容盛即位为后燕国主。</li>\n<li>东晋王恭、殷仲堪、桓玄等联合发兵进京铲除司马道子、司马尚之等，司马元显收买了的刘牢之杀死了王恭，桓玄等和朝廷和解，但仍旧相互提防。</li>\n<li>东晋孙泰因为叛乱被杀，其侄儿孙恩入海避祸，并聚集人员以复仇。</li>\n</ol>\n"},{"title":"资治通鉴小结009-068卷汉纪","catalog":true,"date":"2017-12-09T09:11:29.000Z","header-img":"/img/17.jpg","subtitle":"资治通鉴小结009-068卷汉纪","_content":"\n# 资治通鉴小结 009 - 068 卷 汉纪\n\n## 卷9\n\n1. 秦三世子婴投降刘邦，秦朝灭亡。刘邦与秦地百姓约法三章。\n2. 楚国项羽在新安城活埋了投降的20万秦军。\n3. 曹无伤出卖刘邦，项羽摆鸿门宴。刘邦在张良项伯等人的帮助下逃回军营。\n4. 项羽杀死子婴，火烧秦宫室，大火3个月不绝。\n5. 项羽分封诸侯，自封为“西楚霸王”\n6. 田荣收编彭越，兼并了三齐。\n7. 夏侯婴举荐韩信，不被重用；萧何月下追韩信，刘邦拜韩信为大将军\n8. 张良用计调动项羽攻打田荣，刘邦乘机扩张。项羽打败田荣，立田假为齐王。田荣被百姓杀死。因为项羽抢掠齐国，齐国百姓反叛。后田横打败田假，平定三齐。\n9. 陈平叛楚投汉，刘邦宠爱陈平，让他监督诸将。\n10. 刘邦率领几十万联军突袭了项羽的彭城，项羽轻骑回救，彭城之战，项羽以少胜多，杀得刘邦联军尸横遍野。\n11. 韩信俘获魏王魏豹，平定魏国；随后俘获代相夏说，平定代国；刘邦随后调走韩信的精兵去荥（xing）阳防守楚军。在荥阳战场，汉将灌婴带领的骑兵打败了楚军骑兵。\n\n## 卷10\n \n1. 韩信和张耳攻打赵国，背水一战，虚张声势，杀死陈馀，俘获赵王，赵国平定。随后，韩信采用李左车的计策，燕国投降。\n2. 刘邦使者随何说服九江王黥（qing）布叛楚归汉。楚国派龙且（ju）打败黥布，派项伯收编了九江的军队。 \n3. 陈平离间楚国君臣关系，项羽猜忌手下，范增被气死。\n4. 项羽攻破荥阳，刘邦逃走。辕生献耗敌计，不与项羽交战。项羽攻打彭越，刘邦又占领成皋。项羽打跑彭越后，又攻下荥阳成皋，刘邦逃到韩信的赵国驻地，收缴了其军队，刘邦又重整士气。\n5. 汉臣郦食其说降齐国。韩信听从蒯彻劝说，乘机攻下了齐都临淄。郦食其被煮杀。楚国龙且来援，被韩信在澭水用水攻打败，龙且被杀，齐王被俘获。不久，三齐平定。韩信请求代理齐王，刘邦听从张良等人意见，封韩信为齐王。\n6. 项羽又去攻打梁地的彭越，曹咎失守成皋，项羽被迫返回，与刘邦在广武对持。项羽深感缺乏外援，说降韩信失败，便要求与刘邦单挑，被拒绝。但项羽的气势吓退了汉军神射手楼烦。\n7. 楚汉议和成功，楚军解阵回归，张良又劝说刘邦乘机偷袭楚军。\n\n## 卷11 \n\n1. 汉军追击楚军被打败。刘邦听从张良劝说，分封韩信彭越，俩人便率兵前来。联军包围项羽，楚军粮尽，垓（gai）下之战项羽冲出包围，但心灰意冷，自刎乌江。汉军5人因为分尸而封侯。\n2. 刘邦回军到定陶县，便接管了韩信的军队，封韩信为楚王，彭越为梁王。\n3. 刘邦即皇帝位，是为汉高祖。\n4. 齐王田横被招安，田横及其五百宾客自杀。\n5. 齐人楼敬说服汉高祖迁都长安，封为逢春君，赐姓刘，是为刘敬。\n6. 张良辟谷求仙。\n7. 燕王藏荼（tu）反叛，被讨灭，汉高祖封宠臣卢绾（wan）为燕王。\n8. 韩信杀好友楚将钟离昧表清白，仍旧被汉高祖软禁，后被释放，封为淮阴侯。\n9. 汉高祖分封诸侯，大赏功臣。\n10. 匈奴冒顿杀父，自立为单于。不久，灭掉东胡，赶跑月氏（zhi）。乘楚汉之争时，扩张势力，有精兵30万。\n11. 叔孙通受命制定礼仪。\n12. 汉高祖不听刘敬劝说攻打匈奴，被冒顿40万精兵围困在白登山，后采用陈平的计策，得以逃出。\n13. 萧何大修宫室，汉高祖大怒，萧何却说是为了显示威严。\n\n## 卷12\n1. 刘敬劝说汉高祖用公主和亲匈奴，吕后反对，用平民女子封为公主和亲。\n2. 戚夫人劝说汉高祖立儿子赵如意为太子，汉高祖本身也有意，但是大臣大多反对，周昌口吃说服汉高祖。\n3. 陈希反叛，联合匈奴，汉高祖亲征，采用收买分化策略，予以平定。韩信想响应，被诱杀。汉高祖要煮杀蒯彻，被蒯彻说服。\n4. 彭越被控告谋反，被废为平民。向吕后求情，被杀死。汉高祖又要煮杀栾（luan）布，栾布辩解得以自由。\n5. 汉朝派陆贾说服赵佗，封赵佗为南越王。陆贾还写了《新语》。\n6. 淮南王黥布造反，汉高祖带病亲征，黥布败退，被农民杀死。\n7. 汉高祖在讨伐黥布过程中又中流箭，不久病情加重，去世。太子刘盈即位，是为汉惠帝。吕后掌权。\n8. 吕后乘汉惠帝不在，毒死赵王刘如意，并将其母戚夫人弄成“人猪”。汉惠帝得知后，很伤心，每天饮酒淫乐，不理政事。\n9. 相国萧何去世，曹参继任相国，“萧规曹随”，百姓安心。几年后，曹参去世，以王陵为右丞相，陈平为左丞相。和汉高祖临终遗言一样。\n10. 留侯张良去世。\n11. 汉惠帝去世，吕太后令张皇后收养子即位为帝，吕太后掌权。 \n\n## 卷13\n1. 吕太后分封吕氏为王。陈平等人隐忍负重。\n2. 汉少帝得知身世真相后想报仇，被吕太后杀死。立刘弘为帝。\n3. 诸吕把持朝政，刘章行酒杀吕氏，朝臣倚重刘章，刘氏势力有所回复。\n4. 在陆贾的帮助下，陈平和周勃文武联合，吕氏窃位的野心渐减。\n5. 吕太后去世，刘章暗中让其兄齐王刘襄起兵西征。朝廷派灌婴讨伐，两者暗中联合。陈平命郦寄夺取吕后侄子赵王吕禄的兵权，吕氏一族灭亡。\n6. 大臣商量皇位人选，最后确立代王刘恒，是为汉文帝。汉朝历史上最有才华的一位皇帝诞生，开启了“文景之治”\n7. 贾谊，袁盎才华显露。\n\n## 卷14\n1. 淮南王刘长的母亲愤恨而死，刘长也是愤恨而死。前者是无权无势，而后者则靠着文帝的宠爱，杀恩人审其食，后更加骄横，竟然造反。被抓后仍旧不服，愤恨而死。袁盎则因为刘长的死而建议杀丞相、御史大夫赎罪，最后杀了些县令\n2. 张释之按法办案，为此多次惹汉文帝愤怒。但周勃还是含冤被关进大牢，幸得作为儿媳的公主相救得出。\n3. 贾谊未雨绸缪，提出将大诸侯分成多个小诸侯的推恩令，可惜汉文帝并未重视。但是他提出的以礼治国却得到了文帝的重视。\n4. 匈奴冒顿（modu）去世，儿子老上单于即位。文帝强迫中行说辅佐下嫁的翁主。中行说投降单于，教匈奴识字和对汉朝傲慢。\n\n## 卷15\n1. 汉文帝听从贾谊节制诸侯的意见，改淮阳王刘武为梁王，梁国辽阔，有大县40多个。一年后，贾谊去世，年仅33岁。\n2. 颍川人晁错上书得到赏识，很多意见被采纳。\n3. 缇萦代父受刑，感动文帝，文帝废去肉刑。\n4. 冯唐易老，李广难封。\n5. 新恒平的欺诈被拆穿，汉文帝不再热心祭祀鬼神。\n6. 匈奴连年入侵，汉文帝恢复了和匈奴的和亲关系。这年，老上单于去世，其子车臣单于即位。\n7. 匈奴又入侵，周亚夫因为军纪严明而被汉文帝重用。\n8. 汉文帝去世，汉文帝在位23年，自身节俭谦逊，国家安定，百姓富裕，后世很少能够做到。\n9. 太子刘启即位，是为汉景帝。丞相申屠佳因景帝多采用晁错的意见而被气死。晁错越发尊贵。\n10. 梁王因为是窦太后的小儿子，受到太后和景帝的宠爱。而自身也不收敛，大修宫室。\n\n## 卷16 \n1. 晁错上书削藩，吴王、胶西王、胶东王、川王、济南王、楚王、赵王反叛，史称“七王之乱”。\n2. 袁盎建议杀晁错平息叛乱，汉景帝同意了。晁错身死而叛乱不息，汉景帝又后悔了。\n3. 周亚夫不受君命，不顾梁王的求援，按照原计划切断了围攻梁国睢阳（今河南商丘南）的，吴楚联军的粮草运输线，吴楚联军因为缺粮大败。同时栾布也打败胶西、胶东、川王等叛军，解救了齐国国都临淄之围；随后水淹了叛军赵国的国都邯郸。七国之乱平定。\n4. 燕王臧荼的孙女藏儿的大女儿王夫人生下后来的汉武帝刘彻。\n5. 梁王派人刺死袁盎，汉景帝迫于窦太后不吃饭而宽恕了梁王，表面上维持和好关系，不久，梁王去世。\n6. 匈奴经常入侵，李广勇猛超人。\n7. 长公主刘嫖要嫁女给太子刘荣，被栗姬拒绝。便嫁给了王夫人的儿子刘彻。长公主用计，太子刘荣被废，刘彻被立为太子。\n8. 周亚夫因为购买殉葬用的盔甲被捕入狱，绝食而死。\n9. 汉景帝去世，太子刘彻即位，是为汉武帝。 \n\n## 卷17\n1. 汉武帝出题选拨人才，董仲舒脱颖而出，被重用。董提出“罢黜百家，独尊儒术”。\n2. 汉武帝喜爱儒家学说，而窦太后则喜爱黄老学说。\n3. 外戚窦婴人情冷落，外戚田汾则门庭若市。\n4. 馆陶公主刘嫖因为拥立汉武帝有功，多次干预国政，引起汉武帝不满。而其女儿陈皇后独占宠爱却没有生育，越加被汉武帝冷落。\n5. 汉武帝在其姐平阳公主处遇到歌女卫子夫，接入宫中，对其宠爱有加，并重用其同母弟卫青。\n6. 汉武帝多次微服出游，司马相如、东方朔劝谏，不听。\n7. 闽越王郢发兵攻打南越国，南越国求援，汉武帝派王恢和韩安国分兵二路攻打闽越国。郢的弟弟余善和贵族杀死郢，向王恢投降。汉武帝封立丑为越繇王。后余善自立，汉武帝被迫封余善为东越王。\n8. 汲黯（an）治理东海郡，抓大放小，无为而治。百姓交口称赞。汉武帝将其升为朝官，汲黯直言劝谏，多次惹怒汉武帝。但汉武帝称汲黯为社稷之臣。\n\n## 卷18 \n1. 李少君以长生之术而被汉武帝尊敬，他死后，燕齐之地神仙之术蜂起。\n2. 王恢献计，引诱匈奴入马邑包围圈而歼灭之。韩安国反对在和亲期间挑衅匈奴。结果，在最后时刻，匈奴发觉，汉朝劳民伤财，王恢被逼自杀。从此，匈奴频繁入侵。\n3. 黄河决口，汲黯奉命征发十万劳工堵塞决口，始终没有成功。丞相田汾为了提高自己封地的收入而上书不必治理，汉武帝同意了。\n4. 窦婴失去权势后，只有灌夫没有离开。灌夫多次醉酒冒犯丞相田汾，田汾便告发灌夫违法事，窦婴援救，在王太后的坚持下，窦婴、灌夫被处死。几个月后，田汾去世。\n5. 唐蒙出访南越返回，建议从夜郎出兵，出其不意的攻打南越。汉武帝为此用军士修通往西南夷的道路。结果，军士死伤、巴蜀不安，最终没有成功。\n6. 陈皇后因为女巫师楚服诅咒案而被废，但因为窦太主刘嫖的关系，仍旧受到优待。后来，卫夫人生下皇子刘据，被立为皇后。\n7. 张汤与赵禹共同制定严厉的法令，从此用法更加严苛。\n8. 卫青、李广等攻打匈奴，卫青因功被封侯，李广兵败被俘后逃脱，出钱赎罪后成为平民。不久，因为战事又被启用，匈奴人很害怕李广，称之为“飞将军”\n9. 公孙弘、主父偃等人因为上书而得到汉武帝的宠爱。主父偃提出推恩令，被采纳，从此诸侯被分割。提出建筑朔方城也被采纳。因为他的告发，燕齐两国覆灭，赵王害怕成为下一个，便告发主父偃，在公孙弘的坚持下，主父偃被灭族。汲黯多次告发公孙弘的奸诈，但汉武帝却更加信任他。\n10. 匈奴军臣单于去世，其弟自立为单于，军臣单于的儿子投奔汉朝被封侯，不久去世。\n11. 张骞奉命出使月氏（zhi），想联合攻打匈奴，没有达成目标。\n\n## 卷19\n1. 卫青多次带兵讨伐匈奴，被拜为大将军。期间部下赵信战败被匈奴诱降。\n2. 淮南王刘安和衡山王刘赐消除以往的矛盾，约定一起反叛朝廷. 事情败露，被赐死，受牵连者多达万人。其中，因为张汤的坚持，伍被和庄助也被杀死。\n3. 霍仲儒与卫青的姐姐卫少私通，生下霍去病。霍去病跟随卫青征战，经常带领精兵脱离大部队去寻找战绩，结果军功居首，汉武帝封其为冠军侯。\n4. 汉朝多次与匈奴作战，杀敌1千，自损八百，以致财政枯竭。汉武帝下令可以用钱买官和免罪。\n5. 张骞从月氏归来，得知有商路可以到达西域。汉武帝下令打通道路，可惜没有成功。\n6. 霍去病带兵攻打匈奴，斩杀很多，部下立功很快，但却不爱惜部下。卫青谦和，但部下很难立功，因此卫青的部下大多投向霍去病。而汉武帝也看重他。\n7. 李广跟随卫青霍去病攻打匈奴，汉武帝说他运气差，因此没有得到卫青的重用，再加上没有向导，导致迷路。卫青传唤，李广自杀。李广带兵40年，始终没有升官。他死时，军民都痛哭。\n8. 匈奴浑邪王和休屠王向汉朝投降，霍去病奉命接应，休屠王反悔，被浑邪王杀死，浑邪王部下反叛，被霍去病杀死。汉武帝为迎接浑邪王，向百姓强借马匹，以粉饰繁华。不久休屠王的儿子因为养马被汉武帝宠爱，赐名:金日。\n9. 汉朝多次出动大军攻打匈奴，匈奴终于无法承受而北逃，而汉朝也无力再次征战。针对财政的紧张的现状，汉武帝一方面任用桑弘羊等商才管理财政，一方面任用赵禹、张汤等酷吏巧立名目，搜刮钱财。而义纵、王温舒更是杀人如麻，但汉武帝却重用他们。汲黯则很早被罢免。\n\n## 卷20 \n1. 义纵因为阻扰告密之事被处死；张汤同党鲁谒居的弟弟因为误会其心意，而告发张汤，张汤在政敌设计下自杀而死，死时家财不过五百金，其政敌被汉武帝杀死；赵禹晚年一改严苛，用法宽和；王温舒仍旧严苛执法。\n2. 霍仲儒回乡娶妻生下霍光，霍去病将其带入京城，保荐其做官\n3. 李敢因为其父抱恨而死而将卫青打伤，卫青将此事隐瞒了起来。霍去病乘打猎之际射死李敢，汉武帝替霍去病隐瞒。不久，霍去病也去世。\n4. 张骞再次建议拉拢西域的乌孙国，汉武帝同意，张骞出塞仍旧没有达到目标。但西域很多国家开始随同使者来到大汉。汉武帝派出很多使者带着厚礼出使西域，效果反而下降。为保护使臣，汉朝先后设立酒泉、武威、敦煌、张掖四郡。从汉朝到西域有 2条线路，以后成为丝绸之路。\n5. 匈奴单于伊稚斜（一只鞋）去世，其子乌维接任单于。\n6. 汉武帝又迷信方士栾（luan）大，被封侯拜将，贵族也大力与之交结，这样，燕齐之地神仙之术更盛。后来发觉其欺诈，将其处死，但方士公孙卿仍旧未暴露\n7. 南越王赵胡去世，在汉朝充任侍卫的赵婴齐即位；赵婴齐去世，其子赵兴即位。汉朝派人说服了南越王和王太后入朝，丞相吕嘉反叛，朝廷派路博德、杨朴等讨伐，吕嘉被活捉。西南夷也大多投降汉朝，朝廷在南越和西南夷处设置郡县管理。东越王余善反叛，杨朴等人奉命讨伐，余善被部下杀死。朝廷将东越居民迁往江淮，于是，闽越成为荒芜之地。\n8. 自己跳起来捐献财产给朝廷，后来被汉武帝扶持的带头榜样:卜式，已经无法影响平民。后来卜式上书反对盐铁专卖，汉武帝开始不满。\n9. 桑弘羊管理财政，做起官商，没有增加百姓赋税，而天下财物却变得富饶，汉武帝封其为左庶长。\n\n## 卷21 \n1. 朝鲜王卫右渠不但不朝见汉朝，还阻止他国朝见，并杀死了汉使。汉武帝派杨朴、 荀彘（zhi）分兵两路攻打。开始不利，两位将领不和，后卫右渠被手下杀死。汉朝在朝鲜设立四郡。班师回朝，杨朴赎罪为民，荀彘被处死。\n2. 赵破奴生擒楼兰王，攻破车师国，因为这两个国家多次抢掠汉使。\n3. 乌孙国与汉朝和亲，乌孙王昆莫去世，其孙军须靡即位，是为昆弥王。\n4. 卫青去世。\n5. 王温舒被指控，他自杀而死。王温舒五族同灭。\n6. 匈奴乌维单于去世，其子即位，称为儿单于；匈奴开始向西北迁徙。不久，儿单于去世，其叔父湖即位，不久，湖单于去世，其弟且候即位。汉朝与匈奴又开战。\n7. 汉武帝经常巡视各地，仍旧迷信神仙。\n8. 大宛国不献宝马，还杀死汉使。汉武帝派宠幸的李夫人的弟弟李广利为帅征讨。第一次带兵几千，西域各国不供应粮草，兵败而回。第二次大兵压境，西域各国都捐献粮草。大宛王被手下杀死。汉朝立与汉亲近的昧察即位。不久，贵族杀死昧察，蝉封被立为王，得到汉朝的承认。这次后，西域各国更加尊敬汉朝。\n9. 李广的孙子李陵率领几千人攻打匈奴，被单于率大军包围。李陵边打边退，杀伤上万匈奴军，最后弹尽粮绝，李陵投降。司马迁为之辩解，被汉武帝施以宫刑。后来汉武帝原谅了李陵的孤立无援。\n\n## 卷22 \n1. 匈奴且候单于去世，孤鹿姑单于即位。弟弟的儿子被封为日逐王。\n2. 公孙贺抓住大侠客朱安世，巫蛊(gu)案爆发，公孙贺被灭族。\n3. 太子执法宽和，为此得罪了执法严苛辈。卫青去世，卫皇后也失宠。汉武帝怀疑周围人用巫蛊害他，江充等人便陷害太子。太子杀死江充，起兵与丞相刘屈牦率领的军队作战，民间传说太子造反，因此人们不依附太子。太子兵败，追捕中自杀，卫皇后先前也自杀。\n4. 匈奴多次入侵，汉朝经常派李广利统兵对抗，互有胜负。诅咒案爆发，丞相刘屈牦被处死，李广利与匈奴作战失利后投降。不久，卫律忌恨李广利的尊宠超过自己，便设计害死了李广利。\n5. 官民以巫蛊害人罪相互告发，被查多不属实，汉武帝终于醒悟，造思子宫，天下为之悲伤。\n6. 汉武帝将神仙方士之士全部驱散，还下令浪费天下财力的事一律废止。\n7. 马何罗造反，金日救驾。\n8. 汉武帝赐死钩戈夫人，立其子刘弗陵为太子。汉武帝去世，汉昭帝即位，大将军霍光等人辅政。\n\n## 卷23 \n1. 益州24个夷人村塞全部反叛，汉朝将其镇压。\n2. 燕王刘旦、齐王刘泽密谋反叛，泄密，隽不疑逮捕了刘泽，刘泽被处死，刘旦因为是至亲免予追究。\n3. 金日去世。\n4. 匈奴孤鹿姑单于去世，卫律和阏氏（yanzi）伪造遗嘱，壶衍单于即位，左贤王、右谷蠡王离去，匈奴从此衰落。于是开始讨好汉使，以求和亲。\n5. 桑弘羊与贤良等辩论盐铁酒专卖制度和均输措施，《盐铁论》产生。后，汉昭帝废除了酒类专卖。\n6. 常惠设计，苏武回归汉朝。\n7. 盖长公主、上官桀父子、桑弘羊与刘旦密谋除掉霍光，14岁汉昭帝明察，保住了霍光。燕苍、杜延年上告密谋，上官桀父子、桑弘羊等被灭族，盖长公主、刘旦自杀。多人因功封侯。\n8. 辽东乌桓（huan）部落逐渐强大，于是起兵反叛匈奴和汉朝，被两者打击。\n9. 霍光命傅介子诱杀了匈奴所立的楼兰王，立尉图耆（qi）为王，改国名为鄯善，并派了40多人在伊循屯田，以镇抚。\n\n## 卷24 \n1. 汉昭帝突然去世，霍光舍不法的广陵王刘胥，而立昌邑王刘贺为帝。刘贺荒淫无道，霍光与张安世密谋，田延年当众拔剑威胁，刘贺被废黜。卫太子刘据的孙子刘病己得到丙吉和杜延年的推荐，被迎立为帝，是谓汉宣帝。许广汉的女儿许氏被立为皇后。\n2. 田延年因为贪污，霍光等人打算为之开脱，田延年却畏罪自杀。\n3. 大儒夏侯胜、为政宽和的黄霸因为非议汉武帝而被下狱。“朝闻道，夕死可矣”发生。\n4. 乌孙请求讨伐匈奴，汉朝派赵充国等5位将军分兵出征，匈奴不战而逃，田顺和田广明因为逗留不前而畏罪自杀。常惠引导的乌孙军则大获全胜，常惠被封侯。\n5. 京兆尹赵广汉明察，政治清明胜以往；于定国担任廷尉，执法公正。\n6. 霍光夫人背着霍光，命女医生淳于衍毒死许皇后。霍光得知后，犹豫非常，最终批示淳于衍无罪。其女霍成君被立为皇后。霍后用度奢华。\n7. 霍光去世，汉宣帝开始亲政。汉朝良史，以此世最多，号称“中兴”\n8. 匈奴壶衍单于去世，其弟虚闾权渠单于即位。废黜前阏氏得罪左大且渠，因此和亲大计被破坏。同时发生饥荒，匈奴人和畜牧死去大半。所属的西族部落武力回归汉朝。\n\n## 卷25 \n1. 霍氏家族因为权势被逐渐削弱，阴谋造反，事泄，霍皇后被废，霍氏被灭族。\n2. 龚遂治理饥荒的渤海，不费一兵一卒，平息了盗贼，百姓家中也有了积蓄。\n3. 京兆尹赵广汉因为私怨杀人，并威胁丞相魏相，即使有官民为之请求，仍旧被汉宣帝处死。\n4. 莎车王的弟弟联合邻国势力，杀死莎车王自立，汉使冯奉世征调西域军队，攻破莎车，并平息西域南路的反叛，威震西域。\n5. 汉宣帝知道原昌邑王刘贺不足为虑后，封其为海昏侯。\n6. 汉宣帝终于得之丙吉等人对己的恩德，便用封侯等来回报。当时丙吉病重，夏侯胜断定有阴德的人不会未享功德而死，果然，不久，丙吉痊愈。\n7. 张安世不居功，爱荐才。但和其子张延寿都为侯，内心不自安。汉宣帝很敬重他。不久，张安世去世。\n8. 颍川太守黄霸治理政绩，天下第一。\n9. 羌人解除了内部仇怨，联合起来。首领狼何向匈奴借兵。赵充国洞察，为汉宣帝设谋献策\n\n## 卷26 \n1. 义渠安国激怒羌人，羌人反叛。再次破坏安羌大计。70多岁的赵充国自荐征羌，他采用分化策略，汉宣帝群臣辩难，赵充国耐心的予以说服。羌人最终不战而降，先零首领杨玉等也被羌人杀死，羌乱平定。汉宣帝最终不听赵充国的意见，后任命的辛汤虐待羌人，羌人再度反叛，辛武贤也因为私怨害死赵充国儿子。\n2. 盖宽饶上书劝谏宦官当政，被汉宣帝逼死。\n3. 匈奴虚闾权渠单于去世，被废的前阏氏和其弟左大将拥立右贤王为握衍朐鞮（qudi ）单于，单于凶残，日逐王率众投降汉朝。\n\n## 卷27 \n1. 匈奴东部贵族拥立呼韩邪单于，征兵打败了握衍朐鞮单于，后者自杀。呼韩邪单于于是解散军队，后被屠耆单于打败。匈奴混乱，出现五单于并世。后来，郅支单于打败呼韩邪单于，呼韩邪单于归附汉朝。\n2. 韩延寿与萧望之相互告发，韩延寿被处死。百姓争相献酒肉，韩延寿自言死而无恨。\n3. 丞相丙吉去世，黄霸被任命为丞相，做了几件荒唐事后便不敢再建议。\n4. 乌孙刘解忧的侍女冯夫人擅长外交。汉朝派她划乌孙为大小昆弥。分别以元贵靡和乌就屠为王。元贵靡因病去世，儿子星靡（mi）即位。冯夫人自荐镇抚乌孙，被批准。\n5. 汉宣帝去世，以史高、萧望之、周堪为辅政大臣。太子即位，是为汉元帝。\n6. 王政君被选入太子宫，生下汉成帝。\n\n## 卷28 \n1. 王政君被立为皇后。\n2. 萧望之、刘更生、周堪、金敞四人辅佐汉元帝，史高被冷落。于是与宦官石显等联合，萧望之被逼死。汉元帝易欺又不明忠奸，石显等人专权，以后刘更生、周堪也被罢官。\n3. 匈奴呼韩邪单于开始强盛，于是北迁。\n4. 陇西羌人反叛，汉成帝不听冯奉世出兵4万的建议，只出1万2的兵马，结果兵败后又出兵6万，羌人被打败。 \n\n## 卷29 \n1. 因为朝廷财政不足，又恢复了盐铁专卖制度。同时，废除了祭庙。汉元帝对汉宣帝的法令制度也多有改变。\n2. 冯奉世的女儿冯婕妤舍身喂虎，汉元帝感叹，受宠的傅婕妤不满。\n3. 京房因为天象之术被汉元帝宠爱，京房劝说汉元帝远离石显，道理说得很透切，汉元帝也认为很对但是不想改变。最终，京房被石显害死。\n4. 陈汤胁迫甘延寿，假传圣旨，征发了西域15国的军队，分南北两路，斩杀了在康居国的郅支单于。首级送入京城，满朝庆贺。但因为甘延寿得罪石显，两人被弹劾，最后虽然得到刘向（原名刘更生）等人的维护，但官职反而只是校尉。\n5. 匈奴呼韩邪单于来朝见，请求和亲，昭君出塞。另外上书请求撤销边防，被侯应以十大理由制止。\n6. 汉元帝去世，太子即位，是为汉成帝，以舅父王凤为大将军，管理朝政。 \n\n## 卷30 \n1. 石显失去靠山，被免官，绝食而死。其党羽也被罢黜。\n2. 汉成帝大封王氏家族。王氏五侯奢侈，专权。许嘉的女儿徐氏被立为皇后。\n3. 呼韩邪单于去世，两位阏氏谦让继承权，复株累若单于即位。再娶王昭君为妻。\n4. 匡衡失势，便告发陈汤盗用康居王的财物。陈汤被免官。进入王凤幕府，被重用。\n5. 杜钦辅佐大将军王凤，多有善政。杜钦推荐王延世治理黄河。成功，王延世被封侯。后王延世再次堵塞决口成功被赏赐。\n6. 西夷夜郎国王兴反叛，被新上任的柯郡太守陈立斩杀。后其岳父翁指反叛，被陈立讨伐，翁指被部下杀死。西夷平定。\n7. 刘向写《洪范五行传论》，劝谏王凤兄弟专权。汉成帝不改。\n8. 王商因为得罪王凤，在王凤坚持下，被免官，吐血而死。\n9. 王章劝说汉成帝用冯野王代替王凤，被王音探知，告诉王凤。汉成帝最终没有废黜王凤，王章被处死，冯野王被罢官。杜钦多次劝说王凤收敛，不被采纳。王凤更加专权，汉成帝被架空。\n## 卷31\n1. 王凤在职11年去世，建议王音接替自己。汉成帝同意。\n2. 匈奴复株累单于去世，弟弟搜谐单于继位。\n3. 王氏五侯竞相奢华，汉成帝故意大怒，以恐吓他们。\n4. 汉成帝微服出行，在阳河公主处得到歌舞女赵飞燕，后又征召其妹入宫，对其非常宠爱，许皇后被废，班请求到太后处以自保。\n5. 王莽为博取名声不择手段。\n6. 汉成帝终于封赵飞燕为皇后，其妹为赵昭仪。赵飞燕公开淫乱，然而汉成帝不相信，赵飞燕也始终无子。\n\n## 卷32\n1. 匈奴搜谐单于在朝见途中去世，其弟车牙单于继位。\n2. 定陶王刘欣被立为太子，只有孔光认为应该立中山王刘兴，孔光被贬官。\n3. 宠臣淳于长戏弄前废后许氏，王莽首先告发，淳于长被免官，党羽被清洗。\n4. 王音在职7年，王商接替大司马辅政。三年后去世，由王根接替大司马辅政，在职4年，王莽接替大司马辅政。\n\n## 卷33\n1. 汉成帝逼死丞相崔方进以承天变。\n2. 汉成帝突然去世，赵昭仪被逼自杀，太子即位，是为汉哀帝。 定陶傅太后专横，傅氏与王氏争权，太皇太后王政君隐忍，王莽辞去大司马。\n3. 张由为求自己脱罪，陷害中山冯太后（为汉元帝挡熊），史立和傅太后都是帮凶，冯太后自杀。在傅太后的怒气下，汉哀帝顺从，孙宝、唐林、傅喜等人无法为冯氏案平反\n\n## 卷34 \n1. 汉哀帝外戚丁、傅两族骄奢，看不惯傅喜节俭，于是攻击诽谤，傅喜被免官。孔光也因为不被傅太后所喜，也被免官。此外，王莽、师丹等人也或贬官或被送回封国。\n2. 汉哀帝母亲丁氏去世。\n3. 函谷关以东地区民众无故惊走，传递王母书，从春季到秋季，影响26个郡国。\n4. 汉哀帝为宠臣董贤修宅院，造墓室，并大封其亲属，宠爱董贤胜于爱自己，连丁、傅两族都嫉恨。\n5. 郑崇被赵昌进谗害死，孙宝劝谏被贬为民。\n6. 乱世惑众之臣息夫躬、傅喜献计，故意招惹匈奴。\n\n## 卷35 \n1. 发生日食，孔光再次被启用，王莽等也返回京城。董贤则借日食，阻止了息夫躬等人挑衅匈奴的计策。\n2. 傅太后去世，息夫躬等人遭弹劾，被免官。\n3. 大儒鲍宣上书，何武、彭宣被再次启用。\n4. 孔光弹劾丞相王嘉，王嘉入狱，吐血而死。死前后悔没有启用孔光等人。\n5. 孔光被任命为丞相。傅喜被贬为平民。何武、彭宣再次启用。鲍宣却因为折辱丞相获罪服役。董贤位列三公，主管尚书事务，孔光迎合董贤。\n6. 汉哀帝去世。汉朝的大业从汉哀帝时，开始衰落。\n7. 太皇太后王政君收走玉玺，启用王莽。董贤被罢免后自杀。王莽被推举为大司马，主管尚书事务。孔光又迎合王莽。丁氏、傅氏、董氏覆灭。\n8. 中山冯太后案平反，郑崇案平反。\n9. 中山王刘箕（ji）子即位，是为汉平帝，年9岁，王莽把持国政，排除异己，欺世盗名。\n\n## 卷36\n1. 王莽的女儿被推举为汉平帝的皇后。\n2. 吕宽事件爆发，汉平帝的母族被屠杀的只剩下卫太后一人。王莽长子王宇被逼服毒而死。王莽乘机牵连，不归附者全被处决。其中包括何武、鲍宣、王立、王仁等。\n3. 孔光越来越恐惧，不久，去世。葬礼盛大。\n4. 汉平帝因为母亲卫太后的事而怨恨王莽，被毒死。王莽代行皇帝职务。\n5. 刘崇造反被杀，东郡太守崔义拥立刘信为帝，起兵造反。有十多万人。京城各县盗贼爆发，赵明势力最强。也有十多万人。不久，崔义被杀、刘信逃亡，赵明也被杀。各地恢复秩序。王莽策划做真皇帝。\n\n## 卷37\n1. 王莽称帝，建立新朝，乱改名称，国家没有制度，管理混乱。\n2. 匈奴因换印等事而与中国决裂，派兵攻打边境。戊己校尉属员杀死校尉投降匈奴。西域焉耆首先反叛，杀死西域都护，西域与新朝决裂。益州蛮夷也反叛。\n3. 王莽集结兵粮，12路将军讨伐匈奴，各地盗贼蜂起。\n4. 王莽改革币制，全国经济崩溃。\n\n## 卷38\n1. 匈奴栾提咸因为王莽的财物而勉强与新朝和好，但掳掠如故。不久，栾提咸去世，其弟栾提舆继位。王莽继续招惹匈奴，双方关系更加恶化。\n2. 王莽提防臣下，事事过问，以致政事大量堆积。军人因为得不到吃穿而做盗贼。政事琐碎，官吏因领不到俸禄而贪赃枉法。富人不能保财，穷人不能活命，于是盗贼蜂起。王匡、王凤领导绿林军，樊崇领导赤眉军。声势浩大。\n3. 新朝几十万大军攻打益州蛮夷，军队中毒气损失惨重，民众也疲惫。\n4. 廉丹等率精兵十万讨伐赤眉军，被赤眉董宪部打败。\n5. 绿林军遭遇瘟疫，死亡近半。于是，王常等人的下江兵进入南郡；王凤等人的新市兵进入南阳。\n6. 南阳刘演刘秀兄弟在舂（chong）陵起兵，派刘嘉说服了新市兵、平林兵，3方联合。\n7. 刘演进攻宛城甄阜失败，刘秀亲属很多被杀。后刘秀兄弟说服下江兵王常，4方联合，夺取了甄阜的物资。\n\n## 卷39\n1. 刘演联军斩杀甄阜，又打败严尤军，于是包围宛城。青、徐两州义军也声讨王莽，于是，王莽害怕。\n2. 。新市兵、平林兵抢先立刘玄为更始帝，大封亲近之人，豪杰失望。\n3. 宛城守将岑（cen）彭粮食吃完，率全城投降了刘玄军，因为刘演说情，岑彭得以保全。\n4. 王寻几十万大军包围昆阳，刘秀征兵归来，率领3000敢死军冲击王寻主账，王寻轻敌，不准其他部队帮忙，因此，王寻被杀。王莽大军溃散。昆阳之战，天下震动，拥护刘玄。\n5. 冯异在巾车乡被擒，投降了刘秀，并说服父城投降。\n6. 李轶、朱鲔（wei）劝说刘玄，刘演被杀。刘秀主动前往宛城请罪，忍辱负重，得以幸存。\n7. 天水隗嚣起兵，以方望为军师。攻占了平襄、陇西、敦煌等地。\n8. 成都公孙述假冒刘玄诏书，打败了宗成，兼并了其军队。\n9. 刘玄军攻入长安，王莽被分尸，新朝灭亡。\n10. 刘秀奉命修复洛阳，其属下官员仪表威武，有见识的人都归心刘秀。\n11. 刘玄迁都洛阳，并派使者巡行各郡国。刘赐说服更始帝，刘秀代理大司马，巡行河北。\n12. 上谷寇询，从刘玄使者手中夺回印信，保全了太守耿况；彭宠、吴汉靠同乡关系，分别被任命为代理渔阳太守和安乐县令；赤眉军樊崇晋见刘玄，大失所望，于是逃回；刘永被封为梁王，首府睢（sui）阳。\n13. 南阳邓禹千里投奔刘秀，邺城对策，深得刘秀欢心。。主薄冯异献策，让属员巡行郡县，被采纳。\n14. 耿纯感于刘秀法令与众不同，与刘秀结交\n15. 刘林等在邯郸拥护王朗称帝，燕赵响应。\n16. 刘玄命丞相刘赐修复长安，又迁都长安。娶赵萌女儿，赵萌专权，滥封亲信，于是，关中离心，全国怨恨。\n17. 耿况的儿子耿弇（yan）进见刘秀，蓟城献计：只要征发上谷、渔阳弓骑1万，便可对抗王朗。恰好此时蓟城变乱，响应王朗，刘秀逃亡到信都。和戎太守邳彤（pitong）说服刘秀不回长安，而留在河北。于是信都太守任光、邳彤等人征募了精兵4000，虚张声势，攻打王朗。耿弇在蓟城与刘秀离散后，便回到上谷。上谷渔阳联合，耿弇、吴汉等各率领3000步骑联合攻打王朗，所向披靡，在广阿与刘秀会合。\n18. 刘秀与拥兵10万的真定王刘扬联姻，团结起来，一起攻打王朗。\n19. 刘秀在巨鹿受阻，耿纯献计，绕开巨鹿，主力直捣邯郸，李立开城，邯郸陷落，王朗被王霸杀死。\n20. 汉中王刘嘉打败延岑，延岑投降，刘嘉于是拥兵10万。贾复、陈俊被他推荐到刘秀处。\n21. 刘玄下令让刘秀解散军队回朝，刘秀被耿弇说服，并不听从，于是，两方离心。\n22. 耿弇、吴汉又到幽州征调突骑，刘秀军力强盛。于是打败铜马等义军。于是，部众达到几十万。\n23. 刘秀假意与刘玄派来的援军谢躬亲善，后乘机派岑彭占领了邺城，吴汉斩杀了谢躬。于是，刘秀兼并了谢躬的部众。\n24. 公孙述打败了刘玄来犯的李宝、李忠军，自称蜀王。建都成都。当地百姓和夷族归附。\n25. 赤眉军厌战，于是，樊崇、徐宣分二路攻打长安。\n26. 刘秀派邓禹攻打长安，冯异对抗洛阳，寇询保证军需，而刘秀自己则夺取燕赵。\n27. 隗嚣检举亲人隗崔、隗义的反叛密谋，两人被杀，隗嚣被提升为御史大夫。\n28. 梁王刘永大量招募豪杰，并以周建等为统帅，攻占了28城。同时封董宪、张步等义军为大将军，于是，称霸青、徐两州\n29. 秦丰在黎丘起兵，自称楚黎王，有几万人。\n30. 汝南人田戎攻陷夷陵，自称扫地大将军，也有几万人。\n\n## 卷40 \n1. 刘秀攻打尤来、大枪等贼军，因为轻敌冒进被打败。陈俊献计：坚壁清野。贼军因抢掠不到粮草而溃散。\n2. 冯异劝降驻守洛阳的李轶，奏效。但刘秀却公开李轶的书信，李轶被朱鲔派人刺杀。\n3. 将领们多次劝说刘秀称帝，不从。耿纯将其说服，刘秀称帝。邓禹为大司徒。根据《赤伏符》任命王梁为大司空，再想以此任命大司马，被部下反对，吴汉被任命为大司马。\n4. 邓禹平定河东。\n5. 刘玄军内乱，刘玄诛杀了多位亲信。\n6. 赤眉军拥立刘盆子为帝。实际上，刘盆子只是挂名而已。赤眉军攻入长安。刘玄被刘恭、严本、谢禄等保护。但刘玄最终被谢禄勒死。其亲属被宛王刘赐收留。\n7. 刘秀军围攻洛阳几个月而未攻下，于是派岑彭说服守将朱鲔，朱鲔投降，被封侯（后来，封爵世代相传）。刘秀便定都洛阳\n8. 梁王刘永在睢阳称帝。刘秀派盖延、马武等打败了刘永，将其围困在睢阳城，苏茂反叛，投降刘永。盖延再次打败来援的苏茂、周建等人。刘永等逃亡。\n9. 隗嚣从刘玄处逃回天水，便招募部众，马援也来投奔，于是威震西方。\n10. 窦融被推举为河西五郡代理大将军。其为政宽和，属地安定富足，兵强马壮。\n11. 卢芳在安定称雄，以匈奴为依靠。\n12. 张步抗拒刘玄任命的琅邪太守王闳（hong），后两人和好。由王闳掌握郡务。后张步接受了刘秀使臣伏隆册封的东莱太守职。\n13. 真定王刘扬制造谶（chen）文，谋取称帝。刘秀派其亲戚耿纯，让其暗中将其逮捕。耿纯设计杀死了刘扬。\n14. 渔阳彭宠因为心怀怨恨，再加上蓟城朱浮逼迫而起兵反叛。\n15. 延岑再次反叛，汉中王刘嘉战败逃亡。公孙述乘机占领汉中。进而占领了益州全境。\n16. 盖延、马武等打败刘永，将其围困在睢阳城，苏茂反叛，投降刘永。盖延再次打败来援的苏茂、周建等人。刘永等逃亡。\n17. 吴汉攻打宛城刘赐，刘赐带着刘玄的亲属投降刘秀，被封侯。\n18. 阴丽华谦让，郭贵人被立为皇后，其子刘强为太子。\n19. 邓奉因为吴汉抢掠其新野家乡而反叛。击溃了吴汉军，并与各路贼军联合。\n20. 赤眉军因为长安军粮吃完而西向。被隗嚣的部将杨广打败；赤眉军逢安攻打延岑，被延岑打得打败；赤眉军18万攻打汉中王刘嘉，也被刘嘉打得大败。后刘嘉依靠姐夫来歙的关系，在邓禹处向刘秀投降\n21. 赤眉军和延岑军在长安地区作乱，而邓禹无能为力，于是，冯异受命接替邓禹。\n22. 长安地区发生饥荒，出现人吃人，于是，20万赤眉军东归。与冯异在华阴相遇，双方对抗60多天。有5000赤眉军将士投降。\n## 卷41卷\n\n1. 邓禹因为身受重任却无功劳，多次率领饥饿的士兵攻打赤眉军，次次失败。冯异劝说无效，也被牵累兵败。\n\n2. 冯异设计，大败赤眉军，收降8万人，残部在宜阳遇到刘秀大军，于是投降。后来，樊崇、逢安因为谋反被诛杀。徐宣在故乡去世，刘盆子以收地租为生。刘恭杀死谢禄，为刘玄报了仇，被刘秀赦免。 3. 齐地张步因贪图刘永的王爵而杀死了刘秀的使臣伏隆，张步占领12郡，称霸齐地。 4. 涿（zhuo）郡张丰反叛，与渔阳彭宠联合。\n\n5. 朱浮因为粮食吃尽而被耿况救走，蓟城于是向彭宠投降。彭宠自称燕王，夺取上谷等地，并联合贼军，依靠匈奴。后彭宠被奴仆子密等3人杀死，首级送往长安。祭遵将彭宠的家族全部杀死。 6. 刘秀亲征，大败邓奉。因为朱祜（hu）调和，邓奉投降。岑彭、耿弇劝说，邓奉被杀。 7. 冯异打败延岑，并在赵臣粮草援助下，打败了境内贼军，基本平定关中（长安）。\n\n8. 吴汉攻打苏茂、周建，先败后胜。睢阳叛乱，迎接刘永进城，吴汉协助盖延包围了睢阳。盖延包围睢阳100天，刘永等突围，刘永被部下庆吾杀死。苏茂、周建拥立刘永的儿子刘纡为梁王。王霸、马武打败了苏茂、周建。周建侄子周诵（song）献出垂惠城投降，周建死于逃亡中，刘纡、苏茂逃到下邳与董宪会合。 9. 延岑攻打南阳，被耿弇打得大败。延岑便与黎丘联合，又被朱祜打败。朱祜与岑彭汇合。\n\n10. 岑彭攻打秦丰，将其包围在黎丘。同时岑彭派傅俊平定了扬州。岑彭围攻秦丰三年，斩杀了9万人，秦丰剩余军队仅1000人，而且粮草将尽。刘秀命朱祜围攻秦丰，岑彭、傅俊则被派去攻打田戎。朱祜猛攻秦丰，秦丰投降，被刘秀处死。 11. 李宪在庐江称帝，部众10万。\n\n12. 来歙出使天水隗嚣处，隗嚣来长安进见刘秀。但后来，隗嚣并不想归顺刘秀，又谋划称帝。 13. 延岑攻打顺阳，又被邓禹打败，于是逃往汉中被公孙述封为大司马。\n\n14. 夷陵田戎打算投降岑彭，但姐夫辛臣抄小路先投降，田戎起疑，于是又反叛。与秦丰联合，被打败后又返回夷陵。后岑彭攻打夷陵，田戎逃到公孙述处。 15. 祭遵猛攻涿郡张丰，生擒张丰。\n\n16.  东海郡董宪部将贲休献出兰陵县向刘秀投降，盖延等不听刘秀谋划，兵败，董宪攻陷兰陵县，诛杀了贲休。刘秀亲征董宪联军，苏茂投奔齐地张步，董宪、庞萌逃亡，被追杀。 17. 成都公孙述多次攻打长安地区，冯异和隗嚣联合，打败了公孙述。\n\n18. 吴汉、耿弇、王常在平原郡打败富平、获索军，追击到渤海，有4万人投降。 19. 庞萌怀疑盖延在刘秀处说了坏话，于是反叛，打败了盖延，与董宪联合，自称东平王。 20. 河西窦融归顺刘秀，被任命为凉州牧。\n\n21. 耿弇斩杀张步大将费邑，平定济南郡。后又多次打败张步，平定齐地。耿弇为将，一共平定46个郡，攻占了300座城，未尝一败。\n\n22. 五原人李兴等从匈奴迎回卢芳，定都九原。夺取了北方几座城。 23. 冯异治理长安，功效显著。 24. 岑彭劝降，湖广投降。\n\n25. 窦融封莎车王康为西域大都尉，西域55国全隶属于莎车。\n\n## 卷42卷\n\n1. 吴汉斩杀董宪、庞萌，崤山以东平定。\n2. 隗嚣不听从劝说，对抗刘秀军，大将王元打败东汉军队。马武断后，军队得以返回。\n3. 冯异抢先占领要地，打败隗嚣大将行巡，后又击败卢芳部将和匈奴的军队。占领了北地郡、安定等地。\n4. 窦融率军攻打隗嚣同党先零羌首领封何等，大破羌族。 5. 刘秀让马援招降隗嚣将领，没有成效。 6. 隗嚣向公孙述称臣。\n7. 卢芳诛杀了五原太守李兴，朔方、云中献城投降。\n8. 来歙（xi）突袭，攻下隗嚣心腹之地略阳。隗嚣来攻，几个月不下。\n9. 刘秀亲征，命王遵招降了隗嚣部下，隗嚣逃亡。隗嚣逃亡西域，投奔部下杨广。不久，杨广去世，隗嚣穷途末路。\n10. 张步逃亡，被陈俊斩首。\n11. 吴汉因为贪图军队多而导致粮草日减，王元、行巡、周宗带领公孙述援军攻来，刘秀军撤退。岑彭断后，全军保全。隗嚣又夺取了陇西，北地、安定等地。 12. 高句（gou）丽王派使者来朝贡。\n13. 隗嚣患病，愤恨而死。王元等拥立其子隗纯为王。据守翼县。 14. 来歙统帅冯异等5位将军讨伐隗纯。\n15. 吴汉攻打卢芳部将贾览，匈奴来援。吴汉处于劣势。 16. 祭遵去世，冯异接管军队。不久，冯异在攻打隗纯时去世。\n17. 耿弇围攻隗嚣部将高俊据守的高平城。一年未下，光武帝派寇询劝降，寇询杀死高俊军师兼使者皇甫文，高俊投降。\n18. 来歙攻陷落门。周宗、行巡献出隗纯投降，王元投奔公孙述。\n19. 岑彭打败田戎，田戎据守江州。\n20. 马援被来歙举荐为陇西太守，进击羌族，大获全胜。 21. 公孙述派人刺杀了来歙，马武接管了其军队。 \n22. 岑彭攻打公孙述，攻势如暴风骤雨，势不可挡。\n23. 藏宫打败公孙述部将延岑，收降了十万军队，王元也来投降。 24. 公孙述派人刺杀了岑彭，监军郑兴暂领军队，等吴汉赶到后接替。 25. 马成平定武都，马成马援讨伐羌人。将投降的羌人迁徙到陇西。\n\n## 卷43\n\n1. 吴汉进攻成都公孙述，占领其要害之地广都。又一次不听刘秀劝告，兵败，后八战八胜。进入成都外城。 2. 冯骏攻陷江州，俘获田戎。\n\n3. 藏宫攻陷涪（fu）城，斩杀公孙恢，与吴汉在成都会师。\n\n4. 延岑招募敢死队，打败了吴汉，又打败了藏宫。公孙述在交战中受重伤，当夜去世。将军队交给延岑，延岑投降。吴汉将公孙述和延岑灭族。 5. 参狼羌等侵犯武都，被陇西太守马援击败。\n\n6. 卢芳联合匈奴、乌桓攻打北方边境，守将杜茂多次与之战斗，无法取胜。九原留守随昱（yu）投降，卢芳逃走。\n\n7. 耿弇等将领交出兵权，以侯爵身份离开朝廷。只有邓禹、贾复、李通留在朝廷。 8. 窦融被任命为大司空，几次辞官，不准。\n\n9. 大司徒韩歆（xin）因为激烈直率，刘秀无法忍受，将其免官。后又逼死了他。\n\n10. 匈奴因为贪图赏赐而让卢芳投降。卢芳自请降不提匈奴，匈奴因为得不到赏赐，大恨，侵犯更胜。卢芳投降后又叛归匈奴，十多年后，在匈奴去世\n\n11. 郭皇后因受宠而怨恨，被废，阴贵人被立为皇后。\n\n12. 交趾女子征侧、征贰反叛，蛮人响应，共攻占了65座城。马援、伏隆奉命征讨，斩杀了征侧姐妹。岭南平定。\n\n## 卷44\n\n1. 南郡蛮人反叛，刘尚将其击败。武陵蛮人相单程等反叛，刘尚讨伐，因轻敌而全军覆没。马援自请讨伐，在壶头受阻，军队遭遇瘟疫，不久马援去世，梁松等人便诬陷马援，光武帝大怒，唯有被马援轻视的朱勃上书鸣冤。马援监军假传诏旨，蛮人杀死其首领，投降。蛮人之乱平定。\n\n2. 匈奴单于舆杀死应当继位的兄弟知牙师，而立其子蒲奴即位。前单于乌珠留的儿子比统领南方八部落，非常愤怒，被拥立为呼韩邪单于，投降汉朝，是为南单于。汉朝设立匈奴中郎将。 3. 东汉设立乌桓校尉。\n\n4. 北匈奴请求和亲，不被允许。北匈奴多次讨好汉朝。\n\n5. 光武帝因为谶（chen）文去泰山封禅。桓（huang）谭因为反对谶（chen）文被贬官，病死途中。 6. 南匈奴比去世，弟弟莫继位，汉朝授玺成为常例。不久，莫去世，弟弟汉继位。不久，汉去世，前单于比的儿子适继位。\n\n7. 光武帝去世，皇太子刘庄即位，是为汉明帝。\n\n8. 汉明帝同母弟山阳王刘荆写匿名信劝东海王刘强造反，被汉明帝掩盖起来。不久，东海王因病去世，汉明帝悲痛。刘荆又招引占星家谋划变乱，汉明帝又宽恕了他。\n\n9. 西羌烧当部强盛，首领滇（dian）吾入侵陇西，汉朝军队多次战败，窦固、马武奉命讨伐。马武击败烧当羌，余皆降散。\n\n10. 辽东郡太守祭彤派鲜卑首领偏何讨伐赤山乌桓，杀其首领，塞外各部落纷纷归附鲜卑，东汉屯边部队全部撤走。\n\n11. 窦融家族富贵无人能比。其子护羌校尉窦林因为贪赃枉法被处死，批准窦融回家养病。 12. 马援之女马氏被立为皇后，皇子刘立被立为太子，马皇后贤明，可惜无子。\n\n13. 莎车王贤用武力强占了于阗（tian）等三国，于阗人杀死了守将，拥立休莫霸为王，并打败了贤的军队，并包围莎车，休莫霸中流箭而死。于阗于是拥立广德为王，莎车和于阗恢复了和亲关系。\n\n## 卷45\n\n1. 梁松因为怨恨朝廷被处死。\n\n2. 于阗王广德率领西域各国将莎车王杀死，匈奴攻击，广德投降。后广德又杀死了匈奴所立的莎车王不居徵，改立齐黎为莎车王。\n\n3. 南匈奴打退侵犯云中郡的北匈奴军队。南匈奴适去世，苏继位，不久，苏去世，单于适的弟弟长继位。 4. 阴太后去世。\n\n5. 北匈奴实力仍旧强盛，汉明帝同意双边贸易。郑众出使北匈奴，坚决不行叩拜之礼。北匈奴仍旧侵犯边境，南匈奴也因为汉朝与北匈奴通好而怨恨，与北匈奴沟通，汉朝为防备，设立度辽营。 6. 汉明帝从天竺国引入了佛教。\n\n7. 广陵王刘荆相面谋叛被告发，不久自杀。\n\n8. 王景治理汴渠，用水闸调节水流，耗费百亿钱财。 9. 此时，天下太平，百姓富足。\n\n10. 最信佛教的楚王刘英谋划叛乱，被废掉王位。刘英自杀。受牵连者众多，马皇后等乘久旱下雨劝谏，汉明帝醒悟。\n\n11. 耿秉上书进攻北匈奴，汉朝四路大军讨伐北匈奴，只有窦固有功，祭彤无功获罪，愧恨而死，辽东百姓四季祭祀他。\n\n12. 窦固部下班超在鄯善率36人杀死北匈奴使者团，鄯善归顺汉朝；随后出使于阗，杀死巫师，于阗归顺；西域各国与汉朝中断了65年后，又开始交往。\n\n13. 北匈奴攻打云中郡，太守廉范虚张声势，以少胜多，北匈奴从此不敢进犯云中。 14. 益州刺史朱辅宝扬汉朝德政，西南夷归顺的很多。\n\n15. 班超派部下田虑劫持了匈奴所立的疏勒王，立忠为疏勒王。疏勒国归顺。 16. 窦固、耿秉出兵西域，打败北匈奴。耿秉平定车师，设立西域都护和戊、己校尉。\n\n17. 北匈奴杀死车师后王安得，又攻打戊校尉耿恭，被耿恭用毒箭吓退。不久，耿恭在疏勒城用泉水惊退北匈奴。\n\n18. 汉明帝去世，太子即位，是为汉章帝。\n\n19. 焉耆（qi）和龟兹进攻西域都护陈睦，陈睦全军覆没。北匈奴在柳中城围攻己校尉关宠。车师也反叛，与北匈奴一起攻打戊校尉耿恭。耿恭兵少粮尽，仍旧坚守。汉朝征发7000人前往救援。\n\n## 卷46\n\n1. 司徒鲍昱进谏，汉章帝同意楚王案中流放人员返回家乡。\n\n2. 酒泉太守段彭率军攻打车师，北匈奴惊慌而逃，车师投降。范羌率军2000，营救耿恭，最终仅13人返回。汉章帝撤销了西域都护和戊、己校尉。班超也被征召回国，但由于疏勒于阗等国的哭劝而留了下来。 3. 汉章帝打算封舅父为侯，被马太后阻止。\n\n4. 安夷县官吏强抢羌族妇女，被其夫杀死。官吏追查，该部落因为害怕而反叛。烧当羌首领迷吾联合其他部落一同反叛，马防、耿恭讨伐，羌人投降。耿恭因得罪马防被免官。 5. 窦勋的儿女被封为皇后。 6. 宋大贵人的儿子刘庆被封为太子。\n\n7. 马防、马光、马廖被封侯，马太后生气，三人辞官被批准。马太后去世。\n\n8. 班超请求平定西域，汉章帝派徐干率领1000人支援。但西域反复无常，班超四处攻打，汉朝也不时派点军队支援。\n\n9. 窦皇后无子，收养梁小贵人的儿子刘肇（zhao）为子。于是陷害宋贵人姐妹，太子刘庆被废，刘肇被立为太子。宋贵人姐妹自杀。\n\n10. 窦皇后为使窦家成为太子刘庆的唯一舅家而陷害梁家，梁贵人姐妹自杀。\n\n11. 马家因为骄纵而获罪，窦家更加兴盛，也更加放纵。窦皇后的哥哥窦宪掌管禁军，他依仗皇后强占了公主的庄园，被查后未被治罪。\n\n## 卷47\n\n1. 北匈奴四方受敌，一部分人投降汉朝，大部被迫向远方迁徙。\n\n2. 南匈奴长去世，前单于汗的儿子宣继位。不久，宣去世，前单于长的弟弟屯屠何继位。\n\n3. 烧当羌迷吾等再次反叛，攻打陇西郡。其弟号吾被生擒。太守张纡（yu）同意释放号吾，烧当羌撤军。 4. 疏勒王忠诈降，被班超斩首。西域南道畅通。\n\n5. 护羌校尉傅育招惹羌人，离间羌人与胡人的关系被识破。羌人反叛，归附迷吾。傅育追击被杀死。张纡被任命为护羌校尉。迷吾战败依附张纡，迷吾极其800首领被毒死。迷吾儿子迷唐与其他部落解除仇怨，在大、小榆谷反叛，实力强盛，张纡无法制服。 6. 班超声东击西，莎车投降、龟兹等莎车援军撤走。\n\n7. 汉章帝去世，仅31岁，太子即位，是为汉和帝，窦太后摄政。窦宪掌握机要，窦氏兄弟掌握要职。 8. 根据汉章帝遗诏，取消盐铁专卖制度。\n\n9. 窦宪因为怕刘畅分其权势而将其暗杀，不久，事情败露，窦宪因为害怕被杀而自动请求攻打北匈奴。 10. 张掖太守邓训接替张纡被任命为护羌校尉，他优待胡人，招降羌人，并派任尚打败了迷唐。迷唐部众离散。\n\n11. 窦宪、耿秉等和南匈奴一起攻打北匈奴，斩杀1万多人。窦宪又诱使北匈奴投降，看到其势弱，再加上南匈奴想一统匈奴，于是便又偷袭北匈奴。北匈奴单于逃亡不知所踪。窦宪因功被封为大将军。南匈奴则日益强盛，拥兵5万。\n\n12. 窦宪派人偷袭了西域伊吾的北匈奴守军，车师前后国投降。\n\n13. 月氏因求娶公主不得而发兵7万攻打班超。班超坚壁清野，月氏军被打败，月氏投降，年年进贡。 14. 窦氏专权，只有窦喜修身自好，上下都依赖袁安。\n\n15. 龟兹等国向汉朝投降，汉朝重新设立西域都护、戊、己校尉和骑都尉。班超被任命为西域都护，驻守龟兹。徐干被任命为长史，驻守疏勒。西域仅焉耆等三国没有归附汉朝。\n\n16. 汉和帝最终不顾袁安的激烈反对，同意了窦宪另封北匈奴于除为单于的建议。\n\n## 卷48\n\n1. 汉和帝派人授予北匈奴于除印信，一如南匈奴先例。 2. 袁安去世。\n\n3. 窦氏党羽谋划杀害和帝，和帝与中常侍郑众、清河王刘庆等谋划，窦宪等被逼自杀，党羽全部罢官。和帝论功行赏，刘庆一向行为谨慎，郑众也谦让，和帝认为郑众是贤臣，于是常与他商量政事。宦官掌权，从此开始。\n\n4. 班固因为奴仆辱骂洛阳令，而被陷害致死。《汉书》由其妹班昭续写完成。 5. 护羌校尉邓训去世，官民夷族深切怀念。\n\n6. 北匈奴于除叛逃回北方，被汉军斩杀，其部众也被消灭。鲜卑占据了原北匈奴故地，接受了残余的北匈奴人，鲜卑日益强盛。\n\n7. 护羌校尉贯友离间羌人关系，并派兵打败了迷唐，迷唐向远方迁徙。\n\n8. 匈奴单于屯屠何去世，前单于宣的弟弟安国继位，投降的北匈奴人归附，但族人归心前单于适的儿子师子。汉朝边将也阻碍安国与朝廷的通信。不久，安国被其舅父杀死，师子被拥立为单于。 9. 西域都护班超征发龟兹等八国军队，杀死了焉耆王广等。\n\n10. 20万投降的北匈奴人反叛，拥立封侯为单于，被汉军打败，于是逃亡塞外。 11. 阴识的曾孙女阴贵人被立为皇后。\n\n12. 车师后王攻打车师前王，俘获了其妻儿。西域长史王林出兵斩杀了后王。\n\n13. 窦太后去世，汉和帝知道了其母梁小贵人冤死的经过，宽恕了窦太后。和帝厚待梁氏家族，梁氏从此兴盛。\n\n14. 刘庆请求为其母宋大贵人扫墓，被批准。\n\n15. 班超派属官甘英出使大秦和条支王国，甘英走遍了西海。\n\n16. 汉朝招降了不少羌人，迷唐因为恐惧而投降，并进京朝贡。后又再次反叛，被候霸打败，于是投靠发羌部落，多年后去世，其子前来投降，部众只剩下几十户。 17. 南匈奴单于师子去世，前单于长的儿子檀（tan）继位。 18. 鲜卑攻打右北平，又攻打渔阳，被汉军打败。 19. 阴皇后嫉妒心强，因为失宠而怨恨，被废。\n\n20. 班超年老思乡，多次申请回朝，被批准。不久，去世。戊己校尉任尚接替西域都护，不听班超忠告，终于断送了西域的和平。\n\n21. 邓禹的女儿邓贵人被立为皇后。邓皇后贤明。 22. 汉和帝打破常例，封宦官郑众为侯。\n\n23. 高句（gou）丽入侵辽东，被太守耿夔（kui）打败。\n\n24. 汉和帝去世，婴儿刘隆继位，邓太后摄政。 25. 北匈奴逢侯多次请求归附，不准。 \n\n## 卷49\n\n1. 汉殇帝去世，刘庆的儿子刘祜被邓氏家族迎立为帝，是为汉安帝，邓太后仍旧摄政 2. 清河王刘庆去世。\n\n3. 西域反叛，汉朝撤销西域都护，并将屯田官兵接回了汉朝本土。 4. 因为征兵和官吏的欺压，羌人再次反叛。\n\n5. 鲜卑首领燕荔阳来汉朝朝见，汉朝开通边塞贸易，鲜卑送来人质。但鲜卑的入侵仍旧不止。\n\n6. 任尚与羌人大战，大败，8000人战死。邓骘（zhi）领兵经常战败，但邓太后仍旧任命邓骘为大将军。但邓骘在位上也能推举贤能。\n\n7. 羌人首领滇零在北地称帝。招纳羌人并攻打益州。被梁慬（jin）打败。 8. 京城洛阳发生饥荒，出现人吃人现象。\n\n9. 乌桓、鲜卑、南匈奴联合，出兵7000攻打五原郡，汉军大败。南匈奴单于也攻打耿仲，被梁慬、耿夔打败，南匈奴投降，梁慬被任命为度辽将军。\n\n10. 虞诩因为阻止了邓骘放弃凉州的计划而被派到叛乱的朝歌县做县长。虞诩以内应+埋伏平定了朝歌县。 11. 海匪张伯路多次攻打青州，法雄将其打败，最终被辽东人斩杀，青州平定。\n\n12. 羌人势力转强，前线修堡垒防守。羌人首领滇零去世，儿子零昌继位。护羌校尉候霸、骑都尉马贤多次打败羌军。\n\n13. 虞诩建议任尚集资买马追击羌人，被同意，任尚打败敌人\n\n14. 邓太后听说虞诩的才华，任命他为武都郡太守，虞诩多用诈术，以少胜多打败了羌人。 \n\n## 卷50卷\n\n1. 任尚多次打败羌人首领零昌，俘获了其妻儿。并派人刺杀了杜季贡。又收买号封刺杀了零昌，号封被封为羌王。攻打先零羌人首领狼莫，狼莫战败而逃。羌族虞人部落向邓遵投降，陇右平定。\n\n2. 邓遵收买羌人雕何刺杀了狼莫，羌人于是瓦解，为平定三辅和益州的羌人叛乱，朝廷共耗费军费240多亿，国库为之枯竭，百姓死伤无数。\n\n3. 任尚与邓遵争功，再加上贪赃枉法，被处死。\n\n4. 班勇与官员辩论西域的取舍意义，其意见被采纳，汉朝在敦煌驻军500以控制西域 5. 汉安帝已经成年，官员凡是劝邓太后还政的，都被判罪。\n\n6. 邓太后去世，汉安帝将邓氏家族全部免官，邓遵等人自杀。汉安帝奶妈王圣，中常侍江京、攀丰等人乘机掌权，阎皇后家族也被封官，他们都骄横不法，司徒杨震多次上书告发，无效。 7. 高句丽多次入侵边境，后遂成继位为国王，前来归顺，东部边境平静。\n\n8. 班勇被任命为西域长史，率军800驻守柳中城。班勇征调龟兹等国军队，赶跑了匈奴，车师前国归附。 9. 攀丰等人借天相陷害太尉杨震，杨震被免官，服毒而死。\n\n10. 南匈奴单于檀去世，弟弟拔继位。因为度辽将军耿夔征调频繁，新归降的部落首领阿族等人反叛，被马翼率胡人骑兵将其全部斩获。\n\n11. 王圣、攀丰等人又陷害太子等人，太子刘保被废，大臣反抗无效。\n\n## 卷51\n\n1. 汉安帝在巡行途中突然去世，年仅32岁。阎氏家族和宦官江京等人不立原太子济阴王刘保，而立年幼的北乡侯刘懿继位。\n\n2. 阎显指使人弹劾，攀丰等人被处死，大将军耿宝自杀，王圣母子被流放，阎氏家族掌权，作威作福。 3. 班勇率军生擒车师后王军就和匈奴使者，在索班阵亡处斩首。\n\n4. 北乡侯刘懿去世，宦官孙程等人斩杀江京，拥立11岁的济阴王刘保为帝，是为汉顺帝。阎氏家族覆灭，孙程等人被封侯，宦官势力更盛。\n\n5. 陇西钟羌反叛，被马贤斩杀1000人，钟羌投降，凉州安定。\n\n6. 司隶校尉虞诩多次弹劾贪赃枉法的官员和宦官，险些获罪。后弹劾宦官张防弄权，入狱，险些被害死，宦官孙程和宦官高梵联合救援，张防被流放，同犯尚书贾朗等被处死，虞诩升为尚书仆射（ye） 7. 虞诩举荐左雄，左雄被任命为尚书。\n\n8. 西域所有国家归顺汉朝，只有焉耆王元孟没有投降，于是班勇和敦煌太守张朗分南北两路攻打。张朗为赎罪抢先攻打，元孟投降，班勇因为“迟到”被免官。 9. 南匈奴拔去世，其弟休利继位。\n\n10. 班超孙子班始，因妻子阴城公主骄横荒淫，久积怨怒爆发，杀死了公主，班始极其兄弟姐妹被处死。 11. 梁商的女儿梁贵人被立为皇后。\n\n12. 汉顺帝给奶妈宋娥封爵，左雄、李固等激烈反对，于是，宋娥被迫搬出皇宫，宦官也被迫请罪。于是，宋娥和宦官陷害李固，幸亏有人救助，得救。李固辞官回乡。 13. 太史令张衡才华盖世，发明了浑天仪。\n\n14. 鲜卑首领其至犍去世，鲜卑对汉朝的抢掠减少。\n\n## 卷52\n\n1. 汉顺帝允许宦官以养子继承爵位。\n\n2. 梁商被任命为大将军，梁商能洁身自好，李固、周举辅佐他。但其子梁翼则暴虐不法。 3. 汉顺帝不听虞诩的劝告，同意增加武陵蛮人的赋税，武陵蛮人反叛，被武陵太守李进平定。 4. 山阳君宋娥因诬陷罪被遣送回乡，与之勾结的宦官九侯也被遣回封国。\n\n5. 李固的建议被采纳，祝良被任命为九真郡太守，张乔被任命为交趾州刺史，两人招抚了叛军和反叛的蛮人，于是，岭外安定。\n\n6. 宦官张逵等人因为妒忌宦官曹腾等人与梁商联合，而向汉顺帝诬陷他们，张逵等被处死，因为梁商劝说，才没有被大范围牵连。\n\n7. 南匈奴吾斯和车纽反叛，单于休利被匈奴中郎将陈龟逼杀。吾斯拥立车纽为单于，车纽投降。后汉朝立在京城洛阳的兜楼储为单于，吾斯被匈奴中郎将派人刺杀。\n\n8. 马贤不忧虑军事，射姑山大战，马贤阵亡，东、西羌大规模汇合，烧杀抢掠不断。 9. 梁商去世，其子梁翼被任命为大将军，梁不疑为河南尹。 10. 皇子刘炳被立为太子。\n\n11. 汉顺帝去世，2岁太子刘炳继位，是为汉冲帝，梁太后主政。\n\n12. 汉冲帝去世，梁氏家族不听李固的劝告，立8岁的刘缵（zuan）为帝，是为汉质帝。梁太后主政，李固等人的建议多被采纳，但梁翼等人陷害李固等人，因梁太后反对而没有成功。 13. 藤抚平定了东南地区的盗贼。\n\n## 卷53\n\n1. 汉质帝聪明外露，被梁翼毒死。\n\n2. 梁翼胁迫大臣，蠡吾候刘志被迎立为帝，是为汉桓帝。李固因为劝阻，被免官。 3. 藤抚因得罪宦官，不但没有因功封侯，反而被罢官，后死于家中。 4. 汉桓帝迎立梁翼的妹妹为皇后。\n\n5. 杜乔因多次直言，被梁翼忌恨，不久，因为天灾被免官。\n\n6. 梁翼深感李固、杜乔的声名太盛，恐于己不利，于是，两人都被害死于狱中。 7. 南匈奴单于兜楼储去世，车儿继位。 8. 梁太后还政于汉桓帝，不久，梁太后去世。\n\n## 卷54\n\n1. 南匈奴各部落同时反叛，并与乌桓、鲜卑联合进犯沿边九郡。陈龟被任命为度辽将军，上书建议任贤弃恶，被采纳，朝廷每年节省数亿经费。\n\n2. 张奂被任命为北中郎将，招降了乌桓，并让其斩杀了匈奴部落首领，匈奴人全部投降。请求废掉无法服众的车儿单于而立左谷蠡王为单于，不准。\n\n3. 陈龟一向与梁翼不和，又多次请求诛杀梁翼，终被陷害，回乡后绝食而死。 4. 梁皇后仗势欺人，嫉妒成性，失宠，忧愤而死。\n\n5. 梁翼专权20年，汉桓帝终于无法忍受，于是，与单超等五宦官谋划，出兵包围了梁翼住处，梁氏、孙氏覆灭。抄卖梁翼财产，收入30多亿。五宦官因功被封侯。 6. 邓贵人被立为皇后。\n\n7. 八部羌人入侵陇西金城塞，被护羌校尉段击败。段多次打败羌人，后被凉州刺史郭闳陷害，罚做苦役。皇甫规主动请求招降羌人，被任命为中郎将，几十万羌人归降。\n\n8. 冯绲（gun）率军10万讨伐武陵蛮人。打败了蛮人，10万人归降。荆州平定，冯绲将功劳让与他人。回乡后上书弹劾贪官，被宦官怨恨，结果被罚做苦役，遇赦后回家。\n\n9. 皇甫规被任命为度辽将军，他上书请求让张奂接替自己而做其副手，被批准。 10. 尚书朱穆刚直，痛恨宦官专横，多次上书罢黜宦官，不被采纳，后生毒疮而死。\n\n## 卷55\n\n1. 荆州刺史度尚暗中派人烧毁了将士的珠宝以激励将士的讨贼之心，于是，平定盗贼，度尚因功被封侯。 2. 寇恂的曾孙侍中寇荣清高，为权贵所憎恨，被上下官员陷害而死。寇家从此衰落。 3. 邓皇后因为嫉妒被废，忧愤而死，亲族被诛杀。 4. 太尉杨秉弹劾宦官成功，宦官势力被打击。\n\n5. 司隶校尉李膺等因为诛杀和弹劾奸臣而被罚做苦役。后被太尉陈蕃等人救下，重新被任命为司隶校尉，继续打击权贵，声望日高。\n\n6. 度尚为自保而陷害交趾刺史张磐（pan），查明后，因功未受惩处。 7. 段对西羌穷追猛打，从春到冬不停歇，羌人于是溃散，段因功被封侯。\n\n8. 汉桓帝想立采女田圣为皇后，太尉陈蕃（fan）等人反对，不得已，立窦融玄孙窦武的女儿窦贵人为皇后。 9. 鲜卑听说张奂被调回京都洛阳，便联合乌桓、南匈奴、东羌反叛，侵犯沿边九郡。于是，张奂被再次任命为护匈奴中郎将，20万人投降，只有鲜卑首领檀石槐不投降。\n\n10. 郭泰、贾彪是三万太学生的首领，他们与陈蕃、李膺等人互相标榜，评议朝政得失，官员害怕被非议，因此都与之交往。\n\n11. 汉桓帝信奉佛教，佛教越发盛行。\n\n12. 李膺不顾赦令，斩杀了精通占卜的张成父子，引发了党人之狱，被牵连者多为天下贤士。皇甫规也想入狱，不可得。\n\n## 卷56\n\n1. 护羌校尉段平定西羌。\n\n2. 贾彪、窦武等人营救，再加上宦官也害怕事态扩大牵连其子弟，于是，党人全部被赦免，遣回故乡，终身不许做官。\n\n3. 张奂派司马董卓等大败先零羌人，幽州、并州、凉州平定。因为张奂不肯奉承宦官，没有被封侯。 4. 汉桓帝去世，窦太后主政，处死了采女田圣。12岁的刘宏被迎立为帝，是为汉灵帝。窦武被任命为大将军、陈蕃为太傅。\n\n5. 段率军1万讨伐先零等东羌部落，穷追猛打，誓要斩草除根。张奂上书请求招降，段上书坚持己见，终于平定东羌。为此耗费44亿，阵亡400人。\n\n6. 窦武和陈蕃主持朝政，灵帝奶妈赵娆（rao）和宦官干扰朝政，于是，窦武、陈蕃出兵，用武力诛杀宦官，可惜兵败身死，窦太后被软禁。张奂因为被宦官利用而被封侯，张奂因悔恨而不接受。 7. 汉灵帝迎接其母到京都洛阳，是为董太后。\n\n8. 李膺、范滂（pang）等党人互起称号，评议朝政，被宦官诬陷，党人相继而死，读书人大批被杀害。 9. 高句丽国王伯固侵犯辽东郡，玄菟郡太守耿临出兵讨伐，伯固投降。\n\n10. 孟佗因为宦官而被封为凉州刺史。他派任涉率领西域联军3万人攻打疏勒王国，四个月不克，被迫撤退，朝廷无法再控制疏勒。 11. 宋贵人被封为皇后。\n\n## 卷57\n\n1. 太傅胡广去世，享年82岁。他侍奉过安、顺、冲、质、桓、灵等六个皇帝。因为没有忠直之风，而被天下看轻。\n\n2. 窦太后因为母亲去世，思念成疾，也去世。\n\n3. 司隶校尉段打算驱逐张奂后将其杀害，后因张奂苦苦哀求而幸免于难。 4. 吴郡司马孙坚招募勇士，帮助州郡讨伐起兵的许生，后许生被斩杀。 5. 蔡邕（yong）多次上书，声望很高，刺客也不忍刺杀他。\n\n6. 护乌桓校尉夏育请求讨伐鲜卑檀石槐，被批准。三路大军惨败，夏育等出钱赎罪，被贬为民。 7. 宋皇后被宦官陷害，在狱中忧郁而死。亲族被诛杀。 8. 汉灵帝设立机构，公开买官。以聚敛私财。\n\n9. 宦官王甫（fu）、曹节专权，养子遍布天下，掌握着重要官职。太尉段也迎合顺从他们。司隶校尉阳球痛恨他们专横，于是，乘机将王甫、段等逮捕，王甫等被活活打死，段自杀。阳球还想打击豪强，被迁官。后因为诛杀曹节等的计划外泄而被处死。 10. 中常侍吕强清廉忠直。\n\n11. 何贵人生下皇子刘辩，被立为皇后。其兄何进被任命为侍中。\n\n## 卷58\n\n1. 朱俊平定交趾叛乱。\n\n2. 鲜卑首领檀石槐去世，儿子和连继位，在进攻北地时被射死。其兄的儿子魁头继位。和连的儿子骞曼成人后与魁头争权，鲜卑部众离散。魁头去世后，其弟步度根继位 3. 汉灵帝在后宫修建商铺，令宫女贩卖货物。\n\n4. 何皇后嫉妒心强，毒死了生下皇子刘协的王美人。汉灵帝要废后，被宦官劝阻。 5. 大长秋宦官曹节去世，由宦官赵忠代理大长秋。\n\n6. 巴郡（重庆）板族人英武善战，为汉朝多次平定叛乱立下汗马功劳。但地方官府对他们征收重税，板人于是造反。朝廷招降，于是全部投降。\n\n7. 张角建立“太平道”弟子几十万，遍布四方。不久，张角发动了黄巾军起义。 8. 何进被任命为大将军。卢植征讨张角，皇甫嵩、朱俊也奉命征讨颍川黄巾军。 9. 宦官吕强因为匡扶汉室而被宦官赵忠等人陷害，自杀而死。\n\n10. 皇甫嵩、朱俊和援军曹操一起平定了颍川、汝南、陈国等三郡的黄巾军。皇甫嵩谦让功劳，朱俊被封侯 11. 卢植多次打败黄巾军，在广宗，因为没有贿赂小黄门左丰而被陷害，仅被免死。董卓接替了卢植。 12. 皇甫嵩在广宗斩杀张梁，又在下曲阳斩杀张宝，张角先前已经去世，于是，黄巾主力覆灭。皇甫嵩被封侯。后因为没有答应宦官索贿而被陷害，险些身死。\n\n13. 朱俊、孙坚等在宛城先后斩杀黄巾军统帅赵弘、韩忠、孙夏。宛城多次被黄巾军占领，又被官军夺回。 14. 张燕率领百万黑山军投降朝廷。\n\n15. 张温率领董卓、孙坚讨伐以韩遂、边章为首的西羌军，双方各有胜负。后韩遂杀死边章，吞并了其军队。张温因未能平定叛乱而被免职。\n\n16. 凉州司马马腾率军造反，与韩遂联盟，共同推举王国为首领。 17. 长沙太守孙坚因为镇压长沙贼帅区星有功而被封侯。\n\n## 卷59\n\n1. 太常刘焉上书请设置州牧加强地方权力，于是，任命刘焉为益州牧，刘虞为幽州牧\n\n到任后，刘焉为政宽和，以收买人心。刘虞也招降了乌桓首领丘力居，并请求解散军队，只留下公孙瓒的一支军队驻扎在右北平。公孙瓒因为请求消灭丘力居不得而与刘虞结仇。刘虞将幽州治理得很好。 2. 皇甫嵩率领董卓等讨伐王国，王国战败。韩遂等废掉王国首领地位，后为了争权夺利而相互攻杀，势力开始衰落。\n\n3. 汉灵帝去世，宦官蹇（jian）硕诛杀何进不成。皇子刘辩即位，是为汉少帝，其母何太后主政。大将军何进和太傅袁隗（kui）主持尚书事务。\n\n4. 袁绍建议何进杀尽宦官，并征召地方军队入朝做外援，何进不顾反对声，予以采纳\n\n5. 宦官张让等杀死何进，司隶校尉袁绍带兵入宫尽杀宦官。张让挟持汉少帝出逃，途中被迫投河而死。董卓挟持汉少帝收降了吕布，何进的部下也来投靠，于是，董卓实力强盛。 6. 董卓废汉少帝，立刘协为帝，是为汉献帝。后毒杀了何太后和汉少帝。 7. 董卓为党人平反，并任用贤才，董卓的亲信全都没有担任高官，只在军中任职。\n\n8. 董卓开始烧杀抢掠，地方割据势力共同推举袁绍为盟主，起兵讨伐董卓。曹操、袁术也是联军一员。 9. 董卓火烧洛阳，迁都长安。司徒王允曲意逢迎董卓。 10. 孙坚兵进南阳，与袁术合兵，袁术占领南阳。\n\n11. 刘表被任命为荆州刺史，他单人匹马，在名士蒯越、蒯良的帮助下，平定了荆州。\n\n12. 袁绍等联军畏惧董卓，坐吃粮草，曹操独自出兵，被董卓部将徐荣打败。联军因为粮草吃完而离散。不久，便相互攻杀。\n\n13. 公孙度得到徐荣的推荐，担任辽东太守，他东征高句丽，西征乌桓，自立为辽东侯。\n\n## 卷60\n\n1. 孙坚被徐荣打败。后孙坚打败来犯的胡轸（zhen）、吕布，斩杀华雄。董卓亲自攻打，也被打败。孙坚进入洛阳，吕布败走。孙坚找到传国玉玺后回到南阳所属的鲁阳。后袁术派孙坚攻打刘表，孙坚围困了襄阳城，在追击黄祖途中遇伏，中箭而死，余部投靠了袁术。 2. 袁绍采纳逢纪的计谋，收降了冀州（州治所邺城）\n\n3. 曹操采纳鲍信建议，攻打兖州贼军。袁绍举荐曹操为东郡太守，曹操继续追击黄巾军，30万兵士投降，曹操选择其中精锐，组建“青州兵”。\n\n4. 公孙瓒因为弟弟公孙越之死而讨伐袁绍，冀州所属大多数城池投降，袁绍恐惧。刘备率领关羽、张飞、赵云也帮助公孙瓒，驻守平原郡。后麴（qu）义率领800精兵，界桥之战，大败公孙瓒，公孙瓒逃回幽州。 5. 董卓残暴，以致人人自危。王允等人与吕布一起谋划，董卓被吕布杀死。汉献帝命令王允和吕布主持朝政。蔡邕因为同情董卓，入狱而死。王允骄傲，部属离心。\n\n6. 董卓余部恐惧，贾诩建议李催（cui）、郭汜（si）等联合进军长安。吕布属下的蜀郡士兵打开长安城，长安失陷。王允等人被处死，李催、郭汜、樊稠、张济等被封侯。吕布先后投降袁术--张扬--袁绍--张扬。 7. 袁术受到刘表的逼迫，又被兖州曹操打败，最终占据了寿春。\n\n8. 徐州牧陶谦亲近小人，残害贤才。其部下为钱财杀死了曹操之父曹嵩。于是，曹操出兵攻打陶谦 9. 公孙瓒逼杀了幽州牧刘虞，刘虞仁爱，百姓悲痛。田畴发誓为之报仇。\n\n## 卷61\n\n1. 平原相刘备奉青州刺史田楷之命，救援徐州牧陶谦。曹操粮尽撤走。\n\n2. 陈留太守张邈(miao)、东郡留守陈宫反叛曹操，迎接吕布入兖州。仅甄城、范县、东阿县没有归顺。曹操急忙从第二次攻徐州之战中撤回。与吕布交战，因为粮尽而各自撤退。\n\n3. 益州牧刘焉因背生毒疮而死，属下因为其子刘璋温和而立为益州牧。部下甘宁等反叛失败，逃往荆州。 4. 徐州牧陶谦病死，死前推举刘备为徐州牧，刘备谦让后同意。\n\n5. 孙坚之子孙策帮助袁术攻城略地，但袁术不信任他。后孙策在朱治的劝说下，带兵征讨曲阿的扬州刺史刘繇，势如破竹。\n\n6. 李催等人内乱，先杀死了樊稠，后李催又与郭汜相互攻打。一人挟持天子，一人质公卿。李催势力衰落后，在张济的调和下，两人和好。后在汉献帝迁都弘农时，又有一番大混战。 7. 曹操打败吕布，吕布投靠徐州牧刘备。\n\n8. 曹操攻陷了张超镇守的雍丘，东郡太守藏洪因为袁绍阻止其救援旧主而反叛。袁绍攻打藏洪一年多，无法攻下。东郡城内粮尽，饿死8000人，而军民始终没有背叛藏洪。城陷后，臧洪被杀。\n\n9. 公孙瓒占据幽州全境后，睚眦必报，嫉贤妒能。刘虞部下鲜于辅、阎柔为给刘虞报仇，联合乌桓、鲜卑和袁绍部下麴义，10万联军攻打公孙瓒。公孙瓒屡战屡败，退守易县，作茧自闭，部下离散。\n\n## 卷62\n\n1. 刘备迎战袁术，各有胜负。吕布乘机占领了张飞驻守的下邳( pi)。刘备军中缺粮，以致人吃人，于是，刘备投靠了吕布，驻守小沛。吕布自称徐州牧。\n\n2. 杨奉等人护送汉献帝进入洛阳。后董承招引曹操大军进入洛阳。于是，再次迁都许县，改名许都。杨奉等阻扰迁都，被曹操打败。杨奉等投靠袁术。 3. 孙策打败会稽(kuaiji)太守王朗，王朗投降。\n\n4. 袁绍之子，青州刺史袁谭攻下了孔融驻守的北海郡，孔融投奔曹操。袁谭前期励精图治，后来亲近小人，便没有大成就。\n\n5. 曹操部下枣袛（di）、任峻建立了屯田制度，曹军于是粮草充足。\n\n6. 袁术大将纪灵攻打刘备，吕布营门射戟，救下刘备。后刘备兵日益增多，吕布便攻打刘备，刘备投靠了曹操。\n\n7. 张济攻打刘表的襄城，中箭而死。余部由族侄张绣接管，驻守宛城，贾诩来投。\n\n8. 曹操攻打张绣，张绣投降。曹操纳张济妻子为妾，又收买其大将胡车儿。张绣反叛，曹操长子曹昂、典韦等战死，于禁整顿军队，打退了张绣。 9. 曹操打败袁术，袁术从此衰落。 10. 刘备设鸿门宴，杀死来结盟的杨奉等。\n\n11. 吕布大将高顺率领精锐的“陷军营”攻陷了刘备驻守的小沛。刘备只身逃走。\n\n12. 曹操攻打吕布，侯成等背叛，抓住陈宫、高顺送给曹操。吕布也在白门楼被俘。刘备说服曹操，吕布、陈宫、高顺被绞杀，张辽投降。\n\n13. 周瑜、鲁肃离开袁术，投靠孙策。孙策率军先后打败祖郎和太史慈，两人归顺。\n\n## 卷63\n\n1. 袁绍出兵斩杀公孙瓒，田楷也战死。 2. 袁术窘迫，愤恨而死。 3. 贾诩劝说张绣投降了曹操。\n\n4. 孙策用计夺取了庐江郡，又派虞翻说服豫章郡太守华歆（xin）献上了豫章郡。\n\n5. 刘备再次占领了徐州的下邳和小沛，背叛了曹操。曹操亲征，刘备战败投奔袁绍，关羽被俘。 6. 袁绍不顾田丰等人的反对，攻打曹操。\n\n7. 关羽斩杀了袁绍大将颜良，解除了袁军对东郡的白马之围。关羽离开曹操，投奔刘备。 8. 鲜于辅、阎柔向曹操投降。\n\n9. 孙策被已故吴郡太守许贡的门客杀死，年仅26岁，其弟孙权接任。当时，孙策已经占据了会稽、吴郡、丹阳、豫章、庐江、庐陵共6郡，不过，偏远处并没有完全归顺。\n\n10. 许攸背叛袁绍投降了曹操。曹操率轻骑奔袭乌巢，斩杀淳于琼，烧毁了袁绍的粮草。袁绍大将张颌、高览率领重兵攻打曹操军营也始终不下，再加上郭图乘机陷害，两人投降了曹操。于是，袁绍全军溃散。余部投降曹操被活埋。官渡之战以曹操大胜袁绍大败而告终。 11. 刘表平定了长沙、零陵、桂阳，拥兵十万，不再向朝廷进贡。\n\n12. 刘璋懦弱无能，张鲁占据汉中反叛。赵韪（wei)也因为益州人民对外来东州兵的仇恨而反叛。\n\n## 卷64\n\n1. 曹操攻打刘备占据的汝南，刘备战败投奔刘表，驻守在新野。\n\n2. 赵韪围攻成都刘璋，东州兵害怕被杀，拼死作战，追击到江州（巴郡），杀死赵韪。 3. 张鲁以天师道管理汉中。天师道首领称祭酒。\n\n4. 袁绍因为官渡之战战败，愤恨而死。袁谭与袁尚各带党羽相互攻杀。袁谭处于劣势，于是向曹操投降。曹操出兵攻打审配镇守的邺城，攻破城池，斩杀了审配。袁尚部下李孚在传信邺城中智勇惊人。 5. 袁谭打败袁尚，袁尚投奔幽州袁熙。袁谭背叛曹操。\n\n6. 孙权忙于平定内乱。丹阳太守孙翊被杀，其妻徐氏设计为夫报了仇。 \n7. 曹操攻陷南皮，袁谭出逃，被杀死。\n8. 幽州袁熙的部下反叛投降曹操，袁熙与袁尚投奔乌桓。 9. 黑山军首领张燕率兵十万归降了曹操。\n10. 并州高干先降后反叛曹操，河东郡地方豪强卫固等响应，曹操任命的新太守杜畿（ji）设计瓦解了豪强，平定了河东。杜畿治理河东政绩常常天下第一。\n\n## 卷65\n\n1. 曹操亲征并州刺史高干，高干在逃亡中被杀。梁习被任命为并州刺史，百姓认为没有并州刺史的功绩超过梁习。\n2. 曹操在来降的田畴帮助下，奇袭了乌桓，斩杀了单于蹋（ta）顿，20万人投降。袁尚、袁熙投降辽东，被公孙康杀死，人头献给了曹操。\n3. 刘备在襄阳隆中，三顾茅庐，请出了诸葛亮。 4. 黄祖部下甘宁在苏飞的帮助下，投奔了孙权。\n5. 孙权西征江夏郡黄祖，攻陷了夏口城，斩杀了黄祖。甘宁救下了苏飞。 \n6. 朝廷撤除三公职位，以曹操为丞相。\n7. 曹操征聘司马懿为僚属，司马懿称病，受胁迫后才接受。 8. 马腾解除了军权，到朝廷担任卫尉。其子马超接管了其军队。 \n9. 孔融全家被曹操杀死。\n10. 刘琦接任黄祖担任江夏郡太守。\n11. 刘表去世，蔡瑁、张允拥立刘琮为荆州牧。\n\n\n## 卷66\n\n1. 孙权攻打合肥，久攻不下而撤军而还。张辽、李典、乐进等屯驻合肥。 2. 周瑜率军围攻江陵，曹仁防守一年多后弃城撤走。 3. 孙权将其妹孙尚香嫁予刘备。 4. 曹操派蒋干来劝降，周瑜不为所动。\n\n5. 周瑜去世，鲁肃继任。劝说孙权，孙权同意借荆州。 6. 刘备以诸葛亮和庞统为军师。\n\n7. 孙权任命歩骘（zhi）为交州刺史，岭南开始归属孙权。\n\n8. 曹操派司隶校尉钟繇（yao）和夏侯渊讨伐张鲁，马超、韩遂等十部疑心图己而反叛，曹操亲征，马超、韩遂逃亡凉州。安定被曹操围攻，杨秋献城投降。\n\n9. 张松劝说刘璋接刘备入蜀以攻张鲁，黄权、王累劝说无效，刘备入川，在葭（jia）萌关收买人心，不攻张鲁。\n\n10. 孙尚香回吴，赵云、张飞夺回刘禅。 11. 曹操诛杀了卫尉马腾，灭其三族。\n\n12. 荀彧因为反对给曹操加九赐，曹操非常不满，荀彧服毒而死。\n\n13. 张松被其兄出卖而死，刘备攻打刘璋，节节胜利。刘璋部下李严等人投降，大将张任战死。 14. 曹操率大军攻打孙权的濡(ru)须口，两军相持不下，孙权劝说，曹操撤军。\n\n15. 马超全部兼并了陇西的军队，联合张鲁军队攻打凉州，凉州刺史韦康无法抵挡，献城投降，被马超杀死，并打败了夏侯渊的援军。杨阜（fu）等人起兵为韦康报仇，打败了马超，杀死了马超的妻儿，马超投奔了张鲁。杨阜因功被封侯。\n\n## 卷67\n\n1. 夏侯渊打退了马超的进攻，又出兵打败了韩遂，最终平定了陇右地区。 2. 吕蒙出谋，甘宁出力，孙权攻取了皖城，以吕蒙为庐江太守，回军驻守在寻阳。\n\n3. 诸葛亮率领张飞、赵云攻取了巴东（建安、白帝城），后在巴郡（江州、重庆）生擒了严颜，与刘备在成都会师。期间，庞统雒（luo）县中箭而死。 4. 刘备派李恢説降了马超。\n\n5. 刘璋投降，刘备占领了益州，大封功臣，收降人才，益州安定。\n\n6. 伏皇后被曹操害死，亲属被杀者一百多人。曹操的女儿曹贵人被立为皇后。\n\n7. 曹操攻打张鲁，受阻于阳平关，因为部下迷路而找到出路，得以攻陷阳平关，张鲁逃亡，曹操占领汉中。主簿司马懿和刘晔劝说曹操乘机攻占益州，不准，后又后悔。后来，张鲁率领庞德等投降了曹操。 \n8. 孙权索要荆州，刘备不还。于是，吕蒙出兵，长沙、桂阳投降，零陵也用计夺取。刘备求和，双方划分了荆州。\n9. 孙权率军十万攻打合肥，张辽威震逍遥津，孙权狼狈而逃。\n\n## 卷68\n\n1. 曹操攻打濡须口，孙权防守。曹操撤退，孙权投降，双方议和。周泰率领朱然、徐盛驻守濡须口。 \n2. 曹丕被立为太子后暗自高兴，辛毗（pi）之女辛宪英叹息魏将不昌。\n3. 刘备率军攻打汉中，驻扎在阳平关。\n\n4. 鲁肃去世，吕蒙接任。\n \n5. 陆逊扫灭了东部三郡的盗贼。\n\n6. 曹操派其子曹彰讨伐代郡的乌桓叛军。曹彰作战勇猛，所向披靡。鲜卑首领轲（ke）比能也请求投降，于是，北方全部平定。\n\n7. 黄忠在法正的指挥下，在定军山斩杀夏侯渊。曹操亲自对抗刘备，赵云用空营计，打败曹军。曹操率领全军撤退，刘备占据汉中。\n\n8. 关羽率军攻打襄阳郡的樊城，于禁被俘、庞德被杀，曹仁死守樊城。徐晃前来救援，打败了关羽。吕蒙设计，糜芳投降，江陵失陷，关羽士兵离散，败走麦城，被马忠杀死。不久，吕蒙突然去世。\n\n","source":"_posts/資治通鑑/资治通鉴小结009-068卷-汉纪.md","raw":"---\ntitle: '资治通鉴小结009-068卷汉纪'\ncatalog: true\ndate: 2017-12-09 17:11:29\nheader-img: \"/img/17.jpg\"\nsubtitle: '资治通鉴小结009-068卷汉纪' \ntags: \"資治通鑑\"\n---\n\n# 资治通鉴小结 009 - 068 卷 汉纪\n\n## 卷9\n\n1. 秦三世子婴投降刘邦，秦朝灭亡。刘邦与秦地百姓约法三章。\n2. 楚国项羽在新安城活埋了投降的20万秦军。\n3. 曹无伤出卖刘邦，项羽摆鸿门宴。刘邦在张良项伯等人的帮助下逃回军营。\n4. 项羽杀死子婴，火烧秦宫室，大火3个月不绝。\n5. 项羽分封诸侯，自封为“西楚霸王”\n6. 田荣收编彭越，兼并了三齐。\n7. 夏侯婴举荐韩信，不被重用；萧何月下追韩信，刘邦拜韩信为大将军\n8. 张良用计调动项羽攻打田荣，刘邦乘机扩张。项羽打败田荣，立田假为齐王。田荣被百姓杀死。因为项羽抢掠齐国，齐国百姓反叛。后田横打败田假，平定三齐。\n9. 陈平叛楚投汉，刘邦宠爱陈平，让他监督诸将。\n10. 刘邦率领几十万联军突袭了项羽的彭城，项羽轻骑回救，彭城之战，项羽以少胜多，杀得刘邦联军尸横遍野。\n11. 韩信俘获魏王魏豹，平定魏国；随后俘获代相夏说，平定代国；刘邦随后调走韩信的精兵去荥（xing）阳防守楚军。在荥阳战场，汉将灌婴带领的骑兵打败了楚军骑兵。\n\n## 卷10\n \n1. 韩信和张耳攻打赵国，背水一战，虚张声势，杀死陈馀，俘获赵王，赵国平定。随后，韩信采用李左车的计策，燕国投降。\n2. 刘邦使者随何说服九江王黥（qing）布叛楚归汉。楚国派龙且（ju）打败黥布，派项伯收编了九江的军队。 \n3. 陈平离间楚国君臣关系，项羽猜忌手下，范增被气死。\n4. 项羽攻破荥阳，刘邦逃走。辕生献耗敌计，不与项羽交战。项羽攻打彭越，刘邦又占领成皋。项羽打跑彭越后，又攻下荥阳成皋，刘邦逃到韩信的赵国驻地，收缴了其军队，刘邦又重整士气。\n5. 汉臣郦食其说降齐国。韩信听从蒯彻劝说，乘机攻下了齐都临淄。郦食其被煮杀。楚国龙且来援，被韩信在澭水用水攻打败，龙且被杀，齐王被俘获。不久，三齐平定。韩信请求代理齐王，刘邦听从张良等人意见，封韩信为齐王。\n6. 项羽又去攻打梁地的彭越，曹咎失守成皋，项羽被迫返回，与刘邦在广武对持。项羽深感缺乏外援，说降韩信失败，便要求与刘邦单挑，被拒绝。但项羽的气势吓退了汉军神射手楼烦。\n7. 楚汉议和成功，楚军解阵回归，张良又劝说刘邦乘机偷袭楚军。\n\n## 卷11 \n\n1. 汉军追击楚军被打败。刘邦听从张良劝说，分封韩信彭越，俩人便率兵前来。联军包围项羽，楚军粮尽，垓（gai）下之战项羽冲出包围，但心灰意冷，自刎乌江。汉军5人因为分尸而封侯。\n2. 刘邦回军到定陶县，便接管了韩信的军队，封韩信为楚王，彭越为梁王。\n3. 刘邦即皇帝位，是为汉高祖。\n4. 齐王田横被招安，田横及其五百宾客自杀。\n5. 齐人楼敬说服汉高祖迁都长安，封为逢春君，赐姓刘，是为刘敬。\n6. 张良辟谷求仙。\n7. 燕王藏荼（tu）反叛，被讨灭，汉高祖封宠臣卢绾（wan）为燕王。\n8. 韩信杀好友楚将钟离昧表清白，仍旧被汉高祖软禁，后被释放，封为淮阴侯。\n9. 汉高祖分封诸侯，大赏功臣。\n10. 匈奴冒顿杀父，自立为单于。不久，灭掉东胡，赶跑月氏（zhi）。乘楚汉之争时，扩张势力，有精兵30万。\n11. 叔孙通受命制定礼仪。\n12. 汉高祖不听刘敬劝说攻打匈奴，被冒顿40万精兵围困在白登山，后采用陈平的计策，得以逃出。\n13. 萧何大修宫室，汉高祖大怒，萧何却说是为了显示威严。\n\n## 卷12\n1. 刘敬劝说汉高祖用公主和亲匈奴，吕后反对，用平民女子封为公主和亲。\n2. 戚夫人劝说汉高祖立儿子赵如意为太子，汉高祖本身也有意，但是大臣大多反对，周昌口吃说服汉高祖。\n3. 陈希反叛，联合匈奴，汉高祖亲征，采用收买分化策略，予以平定。韩信想响应，被诱杀。汉高祖要煮杀蒯彻，被蒯彻说服。\n4. 彭越被控告谋反，被废为平民。向吕后求情，被杀死。汉高祖又要煮杀栾（luan）布，栾布辩解得以自由。\n5. 汉朝派陆贾说服赵佗，封赵佗为南越王。陆贾还写了《新语》。\n6. 淮南王黥布造反，汉高祖带病亲征，黥布败退，被农民杀死。\n7. 汉高祖在讨伐黥布过程中又中流箭，不久病情加重，去世。太子刘盈即位，是为汉惠帝。吕后掌权。\n8. 吕后乘汉惠帝不在，毒死赵王刘如意，并将其母戚夫人弄成“人猪”。汉惠帝得知后，很伤心，每天饮酒淫乐，不理政事。\n9. 相国萧何去世，曹参继任相国，“萧规曹随”，百姓安心。几年后，曹参去世，以王陵为右丞相，陈平为左丞相。和汉高祖临终遗言一样。\n10. 留侯张良去世。\n11. 汉惠帝去世，吕太后令张皇后收养子即位为帝，吕太后掌权。 \n\n## 卷13\n1. 吕太后分封吕氏为王。陈平等人隐忍负重。\n2. 汉少帝得知身世真相后想报仇，被吕太后杀死。立刘弘为帝。\n3. 诸吕把持朝政，刘章行酒杀吕氏，朝臣倚重刘章，刘氏势力有所回复。\n4. 在陆贾的帮助下，陈平和周勃文武联合，吕氏窃位的野心渐减。\n5. 吕太后去世，刘章暗中让其兄齐王刘襄起兵西征。朝廷派灌婴讨伐，两者暗中联合。陈平命郦寄夺取吕后侄子赵王吕禄的兵权，吕氏一族灭亡。\n6. 大臣商量皇位人选，最后确立代王刘恒，是为汉文帝。汉朝历史上最有才华的一位皇帝诞生，开启了“文景之治”\n7. 贾谊，袁盎才华显露。\n\n## 卷14\n1. 淮南王刘长的母亲愤恨而死，刘长也是愤恨而死。前者是无权无势，而后者则靠着文帝的宠爱，杀恩人审其食，后更加骄横，竟然造反。被抓后仍旧不服，愤恨而死。袁盎则因为刘长的死而建议杀丞相、御史大夫赎罪，最后杀了些县令\n2. 张释之按法办案，为此多次惹汉文帝愤怒。但周勃还是含冤被关进大牢，幸得作为儿媳的公主相救得出。\n3. 贾谊未雨绸缪，提出将大诸侯分成多个小诸侯的推恩令，可惜汉文帝并未重视。但是他提出的以礼治国却得到了文帝的重视。\n4. 匈奴冒顿（modu）去世，儿子老上单于即位。文帝强迫中行说辅佐下嫁的翁主。中行说投降单于，教匈奴识字和对汉朝傲慢。\n\n## 卷15\n1. 汉文帝听从贾谊节制诸侯的意见，改淮阳王刘武为梁王，梁国辽阔，有大县40多个。一年后，贾谊去世，年仅33岁。\n2. 颍川人晁错上书得到赏识，很多意见被采纳。\n3. 缇萦代父受刑，感动文帝，文帝废去肉刑。\n4. 冯唐易老，李广难封。\n5. 新恒平的欺诈被拆穿，汉文帝不再热心祭祀鬼神。\n6. 匈奴连年入侵，汉文帝恢复了和匈奴的和亲关系。这年，老上单于去世，其子车臣单于即位。\n7. 匈奴又入侵，周亚夫因为军纪严明而被汉文帝重用。\n8. 汉文帝去世，汉文帝在位23年，自身节俭谦逊，国家安定，百姓富裕，后世很少能够做到。\n9. 太子刘启即位，是为汉景帝。丞相申屠佳因景帝多采用晁错的意见而被气死。晁错越发尊贵。\n10. 梁王因为是窦太后的小儿子，受到太后和景帝的宠爱。而自身也不收敛，大修宫室。\n\n## 卷16 \n1. 晁错上书削藩，吴王、胶西王、胶东王、川王、济南王、楚王、赵王反叛，史称“七王之乱”。\n2. 袁盎建议杀晁错平息叛乱，汉景帝同意了。晁错身死而叛乱不息，汉景帝又后悔了。\n3. 周亚夫不受君命，不顾梁王的求援，按照原计划切断了围攻梁国睢阳（今河南商丘南）的，吴楚联军的粮草运输线，吴楚联军因为缺粮大败。同时栾布也打败胶西、胶东、川王等叛军，解救了齐国国都临淄之围；随后水淹了叛军赵国的国都邯郸。七国之乱平定。\n4. 燕王臧荼的孙女藏儿的大女儿王夫人生下后来的汉武帝刘彻。\n5. 梁王派人刺死袁盎，汉景帝迫于窦太后不吃饭而宽恕了梁王，表面上维持和好关系，不久，梁王去世。\n6. 匈奴经常入侵，李广勇猛超人。\n7. 长公主刘嫖要嫁女给太子刘荣，被栗姬拒绝。便嫁给了王夫人的儿子刘彻。长公主用计，太子刘荣被废，刘彻被立为太子。\n8. 周亚夫因为购买殉葬用的盔甲被捕入狱，绝食而死。\n9. 汉景帝去世，太子刘彻即位，是为汉武帝。 \n\n## 卷17\n1. 汉武帝出题选拨人才，董仲舒脱颖而出，被重用。董提出“罢黜百家，独尊儒术”。\n2. 汉武帝喜爱儒家学说，而窦太后则喜爱黄老学说。\n3. 外戚窦婴人情冷落，外戚田汾则门庭若市。\n4. 馆陶公主刘嫖因为拥立汉武帝有功，多次干预国政，引起汉武帝不满。而其女儿陈皇后独占宠爱却没有生育，越加被汉武帝冷落。\n5. 汉武帝在其姐平阳公主处遇到歌女卫子夫，接入宫中，对其宠爱有加，并重用其同母弟卫青。\n6. 汉武帝多次微服出游，司马相如、东方朔劝谏，不听。\n7. 闽越王郢发兵攻打南越国，南越国求援，汉武帝派王恢和韩安国分兵二路攻打闽越国。郢的弟弟余善和贵族杀死郢，向王恢投降。汉武帝封立丑为越繇王。后余善自立，汉武帝被迫封余善为东越王。\n8. 汲黯（an）治理东海郡，抓大放小，无为而治。百姓交口称赞。汉武帝将其升为朝官，汲黯直言劝谏，多次惹怒汉武帝。但汉武帝称汲黯为社稷之臣。\n\n## 卷18 \n1. 李少君以长生之术而被汉武帝尊敬，他死后，燕齐之地神仙之术蜂起。\n2. 王恢献计，引诱匈奴入马邑包围圈而歼灭之。韩安国反对在和亲期间挑衅匈奴。结果，在最后时刻，匈奴发觉，汉朝劳民伤财，王恢被逼自杀。从此，匈奴频繁入侵。\n3. 黄河决口，汲黯奉命征发十万劳工堵塞决口，始终没有成功。丞相田汾为了提高自己封地的收入而上书不必治理，汉武帝同意了。\n4. 窦婴失去权势后，只有灌夫没有离开。灌夫多次醉酒冒犯丞相田汾，田汾便告发灌夫违法事，窦婴援救，在王太后的坚持下，窦婴、灌夫被处死。几个月后，田汾去世。\n5. 唐蒙出访南越返回，建议从夜郎出兵，出其不意的攻打南越。汉武帝为此用军士修通往西南夷的道路。结果，军士死伤、巴蜀不安，最终没有成功。\n6. 陈皇后因为女巫师楚服诅咒案而被废，但因为窦太主刘嫖的关系，仍旧受到优待。后来，卫夫人生下皇子刘据，被立为皇后。\n7. 张汤与赵禹共同制定严厉的法令，从此用法更加严苛。\n8. 卫青、李广等攻打匈奴，卫青因功被封侯，李广兵败被俘后逃脱，出钱赎罪后成为平民。不久，因为战事又被启用，匈奴人很害怕李广，称之为“飞将军”\n9. 公孙弘、主父偃等人因为上书而得到汉武帝的宠爱。主父偃提出推恩令，被采纳，从此诸侯被分割。提出建筑朔方城也被采纳。因为他的告发，燕齐两国覆灭，赵王害怕成为下一个，便告发主父偃，在公孙弘的坚持下，主父偃被灭族。汲黯多次告发公孙弘的奸诈，但汉武帝却更加信任他。\n10. 匈奴军臣单于去世，其弟自立为单于，军臣单于的儿子投奔汉朝被封侯，不久去世。\n11. 张骞奉命出使月氏（zhi），想联合攻打匈奴，没有达成目标。\n\n## 卷19\n1. 卫青多次带兵讨伐匈奴，被拜为大将军。期间部下赵信战败被匈奴诱降。\n2. 淮南王刘安和衡山王刘赐消除以往的矛盾，约定一起反叛朝廷. 事情败露，被赐死，受牵连者多达万人。其中，因为张汤的坚持，伍被和庄助也被杀死。\n3. 霍仲儒与卫青的姐姐卫少私通，生下霍去病。霍去病跟随卫青征战，经常带领精兵脱离大部队去寻找战绩，结果军功居首，汉武帝封其为冠军侯。\n4. 汉朝多次与匈奴作战，杀敌1千，自损八百，以致财政枯竭。汉武帝下令可以用钱买官和免罪。\n5. 张骞从月氏归来，得知有商路可以到达西域。汉武帝下令打通道路，可惜没有成功。\n6. 霍去病带兵攻打匈奴，斩杀很多，部下立功很快，但却不爱惜部下。卫青谦和，但部下很难立功，因此卫青的部下大多投向霍去病。而汉武帝也看重他。\n7. 李广跟随卫青霍去病攻打匈奴，汉武帝说他运气差，因此没有得到卫青的重用，再加上没有向导，导致迷路。卫青传唤，李广自杀。李广带兵40年，始终没有升官。他死时，军民都痛哭。\n8. 匈奴浑邪王和休屠王向汉朝投降，霍去病奉命接应，休屠王反悔，被浑邪王杀死，浑邪王部下反叛，被霍去病杀死。汉武帝为迎接浑邪王，向百姓强借马匹，以粉饰繁华。不久休屠王的儿子因为养马被汉武帝宠爱，赐名:金日。\n9. 汉朝多次出动大军攻打匈奴，匈奴终于无法承受而北逃，而汉朝也无力再次征战。针对财政的紧张的现状，汉武帝一方面任用桑弘羊等商才管理财政，一方面任用赵禹、张汤等酷吏巧立名目，搜刮钱财。而义纵、王温舒更是杀人如麻，但汉武帝却重用他们。汲黯则很早被罢免。\n\n## 卷20 \n1. 义纵因为阻扰告密之事被处死；张汤同党鲁谒居的弟弟因为误会其心意，而告发张汤，张汤在政敌设计下自杀而死，死时家财不过五百金，其政敌被汉武帝杀死；赵禹晚年一改严苛，用法宽和；王温舒仍旧严苛执法。\n2. 霍仲儒回乡娶妻生下霍光，霍去病将其带入京城，保荐其做官\n3. 李敢因为其父抱恨而死而将卫青打伤，卫青将此事隐瞒了起来。霍去病乘打猎之际射死李敢，汉武帝替霍去病隐瞒。不久，霍去病也去世。\n4. 张骞再次建议拉拢西域的乌孙国，汉武帝同意，张骞出塞仍旧没有达到目标。但西域很多国家开始随同使者来到大汉。汉武帝派出很多使者带着厚礼出使西域，效果反而下降。为保护使臣，汉朝先后设立酒泉、武威、敦煌、张掖四郡。从汉朝到西域有 2条线路，以后成为丝绸之路。\n5. 匈奴单于伊稚斜（一只鞋）去世，其子乌维接任单于。\n6. 汉武帝又迷信方士栾（luan）大，被封侯拜将，贵族也大力与之交结，这样，燕齐之地神仙之术更盛。后来发觉其欺诈，将其处死，但方士公孙卿仍旧未暴露\n7. 南越王赵胡去世，在汉朝充任侍卫的赵婴齐即位；赵婴齐去世，其子赵兴即位。汉朝派人说服了南越王和王太后入朝，丞相吕嘉反叛，朝廷派路博德、杨朴等讨伐，吕嘉被活捉。西南夷也大多投降汉朝，朝廷在南越和西南夷处设置郡县管理。东越王余善反叛，杨朴等人奉命讨伐，余善被部下杀死。朝廷将东越居民迁往江淮，于是，闽越成为荒芜之地。\n8. 自己跳起来捐献财产给朝廷，后来被汉武帝扶持的带头榜样:卜式，已经无法影响平民。后来卜式上书反对盐铁专卖，汉武帝开始不满。\n9. 桑弘羊管理财政，做起官商，没有增加百姓赋税，而天下财物却变得富饶，汉武帝封其为左庶长。\n\n## 卷21 \n1. 朝鲜王卫右渠不但不朝见汉朝，还阻止他国朝见，并杀死了汉使。汉武帝派杨朴、 荀彘（zhi）分兵两路攻打。开始不利，两位将领不和，后卫右渠被手下杀死。汉朝在朝鲜设立四郡。班师回朝，杨朴赎罪为民，荀彘被处死。\n2. 赵破奴生擒楼兰王，攻破车师国，因为这两个国家多次抢掠汉使。\n3. 乌孙国与汉朝和亲，乌孙王昆莫去世，其孙军须靡即位，是为昆弥王。\n4. 卫青去世。\n5. 王温舒被指控，他自杀而死。王温舒五族同灭。\n6. 匈奴乌维单于去世，其子即位，称为儿单于；匈奴开始向西北迁徙。不久，儿单于去世，其叔父湖即位，不久，湖单于去世，其弟且候即位。汉朝与匈奴又开战。\n7. 汉武帝经常巡视各地，仍旧迷信神仙。\n8. 大宛国不献宝马，还杀死汉使。汉武帝派宠幸的李夫人的弟弟李广利为帅征讨。第一次带兵几千，西域各国不供应粮草，兵败而回。第二次大兵压境，西域各国都捐献粮草。大宛王被手下杀死。汉朝立与汉亲近的昧察即位。不久，贵族杀死昧察，蝉封被立为王，得到汉朝的承认。这次后，西域各国更加尊敬汉朝。\n9. 李广的孙子李陵率领几千人攻打匈奴，被单于率大军包围。李陵边打边退，杀伤上万匈奴军，最后弹尽粮绝，李陵投降。司马迁为之辩解，被汉武帝施以宫刑。后来汉武帝原谅了李陵的孤立无援。\n\n## 卷22 \n1. 匈奴且候单于去世，孤鹿姑单于即位。弟弟的儿子被封为日逐王。\n2. 公孙贺抓住大侠客朱安世，巫蛊(gu)案爆发，公孙贺被灭族。\n3. 太子执法宽和，为此得罪了执法严苛辈。卫青去世，卫皇后也失宠。汉武帝怀疑周围人用巫蛊害他，江充等人便陷害太子。太子杀死江充，起兵与丞相刘屈牦率领的军队作战，民间传说太子造反，因此人们不依附太子。太子兵败，追捕中自杀，卫皇后先前也自杀。\n4. 匈奴多次入侵，汉朝经常派李广利统兵对抗，互有胜负。诅咒案爆发，丞相刘屈牦被处死，李广利与匈奴作战失利后投降。不久，卫律忌恨李广利的尊宠超过自己，便设计害死了李广利。\n5. 官民以巫蛊害人罪相互告发，被查多不属实，汉武帝终于醒悟，造思子宫，天下为之悲伤。\n6. 汉武帝将神仙方士之士全部驱散，还下令浪费天下财力的事一律废止。\n7. 马何罗造反，金日救驾。\n8. 汉武帝赐死钩戈夫人，立其子刘弗陵为太子。汉武帝去世，汉昭帝即位，大将军霍光等人辅政。\n\n## 卷23 \n1. 益州24个夷人村塞全部反叛，汉朝将其镇压。\n2. 燕王刘旦、齐王刘泽密谋反叛，泄密，隽不疑逮捕了刘泽，刘泽被处死，刘旦因为是至亲免予追究。\n3. 金日去世。\n4. 匈奴孤鹿姑单于去世，卫律和阏氏（yanzi）伪造遗嘱，壶衍单于即位，左贤王、右谷蠡王离去，匈奴从此衰落。于是开始讨好汉使，以求和亲。\n5. 桑弘羊与贤良等辩论盐铁酒专卖制度和均输措施，《盐铁论》产生。后，汉昭帝废除了酒类专卖。\n6. 常惠设计，苏武回归汉朝。\n7. 盖长公主、上官桀父子、桑弘羊与刘旦密谋除掉霍光，14岁汉昭帝明察，保住了霍光。燕苍、杜延年上告密谋，上官桀父子、桑弘羊等被灭族，盖长公主、刘旦自杀。多人因功封侯。\n8. 辽东乌桓（huan）部落逐渐强大，于是起兵反叛匈奴和汉朝，被两者打击。\n9. 霍光命傅介子诱杀了匈奴所立的楼兰王，立尉图耆（qi）为王，改国名为鄯善，并派了40多人在伊循屯田，以镇抚。\n\n## 卷24 \n1. 汉昭帝突然去世，霍光舍不法的广陵王刘胥，而立昌邑王刘贺为帝。刘贺荒淫无道，霍光与张安世密谋，田延年当众拔剑威胁，刘贺被废黜。卫太子刘据的孙子刘病己得到丙吉和杜延年的推荐，被迎立为帝，是谓汉宣帝。许广汉的女儿许氏被立为皇后。\n2. 田延年因为贪污，霍光等人打算为之开脱，田延年却畏罪自杀。\n3. 大儒夏侯胜、为政宽和的黄霸因为非议汉武帝而被下狱。“朝闻道，夕死可矣”发生。\n4. 乌孙请求讨伐匈奴，汉朝派赵充国等5位将军分兵出征，匈奴不战而逃，田顺和田广明因为逗留不前而畏罪自杀。常惠引导的乌孙军则大获全胜，常惠被封侯。\n5. 京兆尹赵广汉明察，政治清明胜以往；于定国担任廷尉，执法公正。\n6. 霍光夫人背着霍光，命女医生淳于衍毒死许皇后。霍光得知后，犹豫非常，最终批示淳于衍无罪。其女霍成君被立为皇后。霍后用度奢华。\n7. 霍光去世，汉宣帝开始亲政。汉朝良史，以此世最多，号称“中兴”\n8. 匈奴壶衍单于去世，其弟虚闾权渠单于即位。废黜前阏氏得罪左大且渠，因此和亲大计被破坏。同时发生饥荒，匈奴人和畜牧死去大半。所属的西族部落武力回归汉朝。\n\n## 卷25 \n1. 霍氏家族因为权势被逐渐削弱，阴谋造反，事泄，霍皇后被废，霍氏被灭族。\n2. 龚遂治理饥荒的渤海，不费一兵一卒，平息了盗贼，百姓家中也有了积蓄。\n3. 京兆尹赵广汉因为私怨杀人，并威胁丞相魏相，即使有官民为之请求，仍旧被汉宣帝处死。\n4. 莎车王的弟弟联合邻国势力，杀死莎车王自立，汉使冯奉世征调西域军队，攻破莎车，并平息西域南路的反叛，威震西域。\n5. 汉宣帝知道原昌邑王刘贺不足为虑后，封其为海昏侯。\n6. 汉宣帝终于得之丙吉等人对己的恩德，便用封侯等来回报。当时丙吉病重，夏侯胜断定有阴德的人不会未享功德而死，果然，不久，丙吉痊愈。\n7. 张安世不居功，爱荐才。但和其子张延寿都为侯，内心不自安。汉宣帝很敬重他。不久，张安世去世。\n8. 颍川太守黄霸治理政绩，天下第一。\n9. 羌人解除了内部仇怨，联合起来。首领狼何向匈奴借兵。赵充国洞察，为汉宣帝设谋献策\n\n## 卷26 \n1. 义渠安国激怒羌人，羌人反叛。再次破坏安羌大计。70多岁的赵充国自荐征羌，他采用分化策略，汉宣帝群臣辩难，赵充国耐心的予以说服。羌人最终不战而降，先零首领杨玉等也被羌人杀死，羌乱平定。汉宣帝最终不听赵充国的意见，后任命的辛汤虐待羌人，羌人再度反叛，辛武贤也因为私怨害死赵充国儿子。\n2. 盖宽饶上书劝谏宦官当政，被汉宣帝逼死。\n3. 匈奴虚闾权渠单于去世，被废的前阏氏和其弟左大将拥立右贤王为握衍朐鞮（qudi ）单于，单于凶残，日逐王率众投降汉朝。\n\n## 卷27 \n1. 匈奴东部贵族拥立呼韩邪单于，征兵打败了握衍朐鞮单于，后者自杀。呼韩邪单于于是解散军队，后被屠耆单于打败。匈奴混乱，出现五单于并世。后来，郅支单于打败呼韩邪单于，呼韩邪单于归附汉朝。\n2. 韩延寿与萧望之相互告发，韩延寿被处死。百姓争相献酒肉，韩延寿自言死而无恨。\n3. 丞相丙吉去世，黄霸被任命为丞相，做了几件荒唐事后便不敢再建议。\n4. 乌孙刘解忧的侍女冯夫人擅长外交。汉朝派她划乌孙为大小昆弥。分别以元贵靡和乌就屠为王。元贵靡因病去世，儿子星靡（mi）即位。冯夫人自荐镇抚乌孙，被批准。\n5. 汉宣帝去世，以史高、萧望之、周堪为辅政大臣。太子即位，是为汉元帝。\n6. 王政君被选入太子宫，生下汉成帝。\n\n## 卷28 \n1. 王政君被立为皇后。\n2. 萧望之、刘更生、周堪、金敞四人辅佐汉元帝，史高被冷落。于是与宦官石显等联合，萧望之被逼死。汉元帝易欺又不明忠奸，石显等人专权，以后刘更生、周堪也被罢官。\n3. 匈奴呼韩邪单于开始强盛，于是北迁。\n4. 陇西羌人反叛，汉成帝不听冯奉世出兵4万的建议，只出1万2的兵马，结果兵败后又出兵6万，羌人被打败。 \n\n## 卷29 \n1. 因为朝廷财政不足，又恢复了盐铁专卖制度。同时，废除了祭庙。汉元帝对汉宣帝的法令制度也多有改变。\n2. 冯奉世的女儿冯婕妤舍身喂虎，汉元帝感叹，受宠的傅婕妤不满。\n3. 京房因为天象之术被汉元帝宠爱，京房劝说汉元帝远离石显，道理说得很透切，汉元帝也认为很对但是不想改变。最终，京房被石显害死。\n4. 陈汤胁迫甘延寿，假传圣旨，征发了西域15国的军队，分南北两路，斩杀了在康居国的郅支单于。首级送入京城，满朝庆贺。但因为甘延寿得罪石显，两人被弹劾，最后虽然得到刘向（原名刘更生）等人的维护，但官职反而只是校尉。\n5. 匈奴呼韩邪单于来朝见，请求和亲，昭君出塞。另外上书请求撤销边防，被侯应以十大理由制止。\n6. 汉元帝去世，太子即位，是为汉成帝，以舅父王凤为大将军，管理朝政。 \n\n## 卷30 \n1. 石显失去靠山，被免官，绝食而死。其党羽也被罢黜。\n2. 汉成帝大封王氏家族。王氏五侯奢侈，专权。许嘉的女儿徐氏被立为皇后。\n3. 呼韩邪单于去世，两位阏氏谦让继承权，复株累若单于即位。再娶王昭君为妻。\n4. 匡衡失势，便告发陈汤盗用康居王的财物。陈汤被免官。进入王凤幕府，被重用。\n5. 杜钦辅佐大将军王凤，多有善政。杜钦推荐王延世治理黄河。成功，王延世被封侯。后王延世再次堵塞决口成功被赏赐。\n6. 西夷夜郎国王兴反叛，被新上任的柯郡太守陈立斩杀。后其岳父翁指反叛，被陈立讨伐，翁指被部下杀死。西夷平定。\n7. 刘向写《洪范五行传论》，劝谏王凤兄弟专权。汉成帝不改。\n8. 王商因为得罪王凤，在王凤坚持下，被免官，吐血而死。\n9. 王章劝说汉成帝用冯野王代替王凤，被王音探知，告诉王凤。汉成帝最终没有废黜王凤，王章被处死，冯野王被罢官。杜钦多次劝说王凤收敛，不被采纳。王凤更加专权，汉成帝被架空。\n## 卷31\n1. 王凤在职11年去世，建议王音接替自己。汉成帝同意。\n2. 匈奴复株累单于去世，弟弟搜谐单于继位。\n3. 王氏五侯竞相奢华，汉成帝故意大怒，以恐吓他们。\n4. 汉成帝微服出行，在阳河公主处得到歌舞女赵飞燕，后又征召其妹入宫，对其非常宠爱，许皇后被废，班请求到太后处以自保。\n5. 王莽为博取名声不择手段。\n6. 汉成帝终于封赵飞燕为皇后，其妹为赵昭仪。赵飞燕公开淫乱，然而汉成帝不相信，赵飞燕也始终无子。\n\n## 卷32\n1. 匈奴搜谐单于在朝见途中去世，其弟车牙单于继位。\n2. 定陶王刘欣被立为太子，只有孔光认为应该立中山王刘兴，孔光被贬官。\n3. 宠臣淳于长戏弄前废后许氏，王莽首先告发，淳于长被免官，党羽被清洗。\n4. 王音在职7年，王商接替大司马辅政。三年后去世，由王根接替大司马辅政，在职4年，王莽接替大司马辅政。\n\n## 卷33\n1. 汉成帝逼死丞相崔方进以承天变。\n2. 汉成帝突然去世，赵昭仪被逼自杀，太子即位，是为汉哀帝。 定陶傅太后专横，傅氏与王氏争权，太皇太后王政君隐忍，王莽辞去大司马。\n3. 张由为求自己脱罪，陷害中山冯太后（为汉元帝挡熊），史立和傅太后都是帮凶，冯太后自杀。在傅太后的怒气下，汉哀帝顺从，孙宝、唐林、傅喜等人无法为冯氏案平反\n\n## 卷34 \n1. 汉哀帝外戚丁、傅两族骄奢，看不惯傅喜节俭，于是攻击诽谤，傅喜被免官。孔光也因为不被傅太后所喜，也被免官。此外，王莽、师丹等人也或贬官或被送回封国。\n2. 汉哀帝母亲丁氏去世。\n3. 函谷关以东地区民众无故惊走，传递王母书，从春季到秋季，影响26个郡国。\n4. 汉哀帝为宠臣董贤修宅院，造墓室，并大封其亲属，宠爱董贤胜于爱自己，连丁、傅两族都嫉恨。\n5. 郑崇被赵昌进谗害死，孙宝劝谏被贬为民。\n6. 乱世惑众之臣息夫躬、傅喜献计，故意招惹匈奴。\n\n## 卷35 \n1. 发生日食，孔光再次被启用，王莽等也返回京城。董贤则借日食，阻止了息夫躬等人挑衅匈奴的计策。\n2. 傅太后去世，息夫躬等人遭弹劾，被免官。\n3. 大儒鲍宣上书，何武、彭宣被再次启用。\n4. 孔光弹劾丞相王嘉，王嘉入狱，吐血而死。死前后悔没有启用孔光等人。\n5. 孔光被任命为丞相。傅喜被贬为平民。何武、彭宣再次启用。鲍宣却因为折辱丞相获罪服役。董贤位列三公，主管尚书事务，孔光迎合董贤。\n6. 汉哀帝去世。汉朝的大业从汉哀帝时，开始衰落。\n7. 太皇太后王政君收走玉玺，启用王莽。董贤被罢免后自杀。王莽被推举为大司马，主管尚书事务。孔光又迎合王莽。丁氏、傅氏、董氏覆灭。\n8. 中山冯太后案平反，郑崇案平反。\n9. 中山王刘箕（ji）子即位，是为汉平帝，年9岁，王莽把持国政，排除异己，欺世盗名。\n\n## 卷36\n1. 王莽的女儿被推举为汉平帝的皇后。\n2. 吕宽事件爆发，汉平帝的母族被屠杀的只剩下卫太后一人。王莽长子王宇被逼服毒而死。王莽乘机牵连，不归附者全被处决。其中包括何武、鲍宣、王立、王仁等。\n3. 孔光越来越恐惧，不久，去世。葬礼盛大。\n4. 汉平帝因为母亲卫太后的事而怨恨王莽，被毒死。王莽代行皇帝职务。\n5. 刘崇造反被杀，东郡太守崔义拥立刘信为帝，起兵造反。有十多万人。京城各县盗贼爆发，赵明势力最强。也有十多万人。不久，崔义被杀、刘信逃亡，赵明也被杀。各地恢复秩序。王莽策划做真皇帝。\n\n## 卷37\n1. 王莽称帝，建立新朝，乱改名称，国家没有制度，管理混乱。\n2. 匈奴因换印等事而与中国决裂，派兵攻打边境。戊己校尉属员杀死校尉投降匈奴。西域焉耆首先反叛，杀死西域都护，西域与新朝决裂。益州蛮夷也反叛。\n3. 王莽集结兵粮，12路将军讨伐匈奴，各地盗贼蜂起。\n4. 王莽改革币制，全国经济崩溃。\n\n## 卷38\n1. 匈奴栾提咸因为王莽的财物而勉强与新朝和好，但掳掠如故。不久，栾提咸去世，其弟栾提舆继位。王莽继续招惹匈奴，双方关系更加恶化。\n2. 王莽提防臣下，事事过问，以致政事大量堆积。军人因为得不到吃穿而做盗贼。政事琐碎，官吏因领不到俸禄而贪赃枉法。富人不能保财，穷人不能活命，于是盗贼蜂起。王匡、王凤领导绿林军，樊崇领导赤眉军。声势浩大。\n3. 新朝几十万大军攻打益州蛮夷，军队中毒气损失惨重，民众也疲惫。\n4. 廉丹等率精兵十万讨伐赤眉军，被赤眉董宪部打败。\n5. 绿林军遭遇瘟疫，死亡近半。于是，王常等人的下江兵进入南郡；王凤等人的新市兵进入南阳。\n6. 南阳刘演刘秀兄弟在舂（chong）陵起兵，派刘嘉说服了新市兵、平林兵，3方联合。\n7. 刘演进攻宛城甄阜失败，刘秀亲属很多被杀。后刘秀兄弟说服下江兵王常，4方联合，夺取了甄阜的物资。\n\n## 卷39\n1. 刘演联军斩杀甄阜，又打败严尤军，于是包围宛城。青、徐两州义军也声讨王莽，于是，王莽害怕。\n2. 。新市兵、平林兵抢先立刘玄为更始帝，大封亲近之人，豪杰失望。\n3. 宛城守将岑（cen）彭粮食吃完，率全城投降了刘玄军，因为刘演说情，岑彭得以保全。\n4. 王寻几十万大军包围昆阳，刘秀征兵归来，率领3000敢死军冲击王寻主账，王寻轻敌，不准其他部队帮忙，因此，王寻被杀。王莽大军溃散。昆阳之战，天下震动，拥护刘玄。\n5. 冯异在巾车乡被擒，投降了刘秀，并说服父城投降。\n6. 李轶、朱鲔（wei）劝说刘玄，刘演被杀。刘秀主动前往宛城请罪，忍辱负重，得以幸存。\n7. 天水隗嚣起兵，以方望为军师。攻占了平襄、陇西、敦煌等地。\n8. 成都公孙述假冒刘玄诏书，打败了宗成，兼并了其军队。\n9. 刘玄军攻入长安，王莽被分尸，新朝灭亡。\n10. 刘秀奉命修复洛阳，其属下官员仪表威武，有见识的人都归心刘秀。\n11. 刘玄迁都洛阳，并派使者巡行各郡国。刘赐说服更始帝，刘秀代理大司马，巡行河北。\n12. 上谷寇询，从刘玄使者手中夺回印信，保全了太守耿况；彭宠、吴汉靠同乡关系，分别被任命为代理渔阳太守和安乐县令；赤眉军樊崇晋见刘玄，大失所望，于是逃回；刘永被封为梁王，首府睢（sui）阳。\n13. 南阳邓禹千里投奔刘秀，邺城对策，深得刘秀欢心。。主薄冯异献策，让属员巡行郡县，被采纳。\n14. 耿纯感于刘秀法令与众不同，与刘秀结交\n15. 刘林等在邯郸拥护王朗称帝，燕赵响应。\n16. 刘玄命丞相刘赐修复长安，又迁都长安。娶赵萌女儿，赵萌专权，滥封亲信，于是，关中离心，全国怨恨。\n17. 耿况的儿子耿弇（yan）进见刘秀，蓟城献计：只要征发上谷、渔阳弓骑1万，便可对抗王朗。恰好此时蓟城变乱，响应王朗，刘秀逃亡到信都。和戎太守邳彤（pitong）说服刘秀不回长安，而留在河北。于是信都太守任光、邳彤等人征募了精兵4000，虚张声势，攻打王朗。耿弇在蓟城与刘秀离散后，便回到上谷。上谷渔阳联合，耿弇、吴汉等各率领3000步骑联合攻打王朗，所向披靡，在广阿与刘秀会合。\n18. 刘秀与拥兵10万的真定王刘扬联姻，团结起来，一起攻打王朗。\n19. 刘秀在巨鹿受阻，耿纯献计，绕开巨鹿，主力直捣邯郸，李立开城，邯郸陷落，王朗被王霸杀死。\n20. 汉中王刘嘉打败延岑，延岑投降，刘嘉于是拥兵10万。贾复、陈俊被他推荐到刘秀处。\n21. 刘玄下令让刘秀解散军队回朝，刘秀被耿弇说服，并不听从，于是，两方离心。\n22. 耿弇、吴汉又到幽州征调突骑，刘秀军力强盛。于是打败铜马等义军。于是，部众达到几十万。\n23. 刘秀假意与刘玄派来的援军谢躬亲善，后乘机派岑彭占领了邺城，吴汉斩杀了谢躬。于是，刘秀兼并了谢躬的部众。\n24. 公孙述打败了刘玄来犯的李宝、李忠军，自称蜀王。建都成都。当地百姓和夷族归附。\n25. 赤眉军厌战，于是，樊崇、徐宣分二路攻打长安。\n26. 刘秀派邓禹攻打长安，冯异对抗洛阳，寇询保证军需，而刘秀自己则夺取燕赵。\n27. 隗嚣检举亲人隗崔、隗义的反叛密谋，两人被杀，隗嚣被提升为御史大夫。\n28. 梁王刘永大量招募豪杰，并以周建等为统帅，攻占了28城。同时封董宪、张步等义军为大将军，于是，称霸青、徐两州\n29. 秦丰在黎丘起兵，自称楚黎王，有几万人。\n30. 汝南人田戎攻陷夷陵，自称扫地大将军，也有几万人。\n\n## 卷40 \n1. 刘秀攻打尤来、大枪等贼军，因为轻敌冒进被打败。陈俊献计：坚壁清野。贼军因抢掠不到粮草而溃散。\n2. 冯异劝降驻守洛阳的李轶，奏效。但刘秀却公开李轶的书信，李轶被朱鲔派人刺杀。\n3. 将领们多次劝说刘秀称帝，不从。耿纯将其说服，刘秀称帝。邓禹为大司徒。根据《赤伏符》任命王梁为大司空，再想以此任命大司马，被部下反对，吴汉被任命为大司马。\n4. 邓禹平定河东。\n5. 刘玄军内乱，刘玄诛杀了多位亲信。\n6. 赤眉军拥立刘盆子为帝。实际上，刘盆子只是挂名而已。赤眉军攻入长安。刘玄被刘恭、严本、谢禄等保护。但刘玄最终被谢禄勒死。其亲属被宛王刘赐收留。\n7. 刘秀军围攻洛阳几个月而未攻下，于是派岑彭说服守将朱鲔，朱鲔投降，被封侯（后来，封爵世代相传）。刘秀便定都洛阳\n8. 梁王刘永在睢阳称帝。刘秀派盖延、马武等打败了刘永，将其围困在睢阳城，苏茂反叛，投降刘永。盖延再次打败来援的苏茂、周建等人。刘永等逃亡。\n9. 隗嚣从刘玄处逃回天水，便招募部众，马援也来投奔，于是威震西方。\n10. 窦融被推举为河西五郡代理大将军。其为政宽和，属地安定富足，兵强马壮。\n11. 卢芳在安定称雄，以匈奴为依靠。\n12. 张步抗拒刘玄任命的琅邪太守王闳（hong），后两人和好。由王闳掌握郡务。后张步接受了刘秀使臣伏隆册封的东莱太守职。\n13. 真定王刘扬制造谶（chen）文，谋取称帝。刘秀派其亲戚耿纯，让其暗中将其逮捕。耿纯设计杀死了刘扬。\n14. 渔阳彭宠因为心怀怨恨，再加上蓟城朱浮逼迫而起兵反叛。\n15. 延岑再次反叛，汉中王刘嘉战败逃亡。公孙述乘机占领汉中。进而占领了益州全境。\n16. 盖延、马武等打败刘永，将其围困在睢阳城，苏茂反叛，投降刘永。盖延再次打败来援的苏茂、周建等人。刘永等逃亡。\n17. 吴汉攻打宛城刘赐，刘赐带着刘玄的亲属投降刘秀，被封侯。\n18. 阴丽华谦让，郭贵人被立为皇后，其子刘强为太子。\n19. 邓奉因为吴汉抢掠其新野家乡而反叛。击溃了吴汉军，并与各路贼军联合。\n20. 赤眉军因为长安军粮吃完而西向。被隗嚣的部将杨广打败；赤眉军逢安攻打延岑，被延岑打得打败；赤眉军18万攻打汉中王刘嘉，也被刘嘉打得大败。后刘嘉依靠姐夫来歙的关系，在邓禹处向刘秀投降\n21. 赤眉军和延岑军在长安地区作乱，而邓禹无能为力，于是，冯异受命接替邓禹。\n22. 长安地区发生饥荒，出现人吃人，于是，20万赤眉军东归。与冯异在华阴相遇，双方对抗60多天。有5000赤眉军将士投降。\n## 卷41卷\n\n1. 邓禹因为身受重任却无功劳，多次率领饥饿的士兵攻打赤眉军，次次失败。冯异劝说无效，也被牵累兵败。\n\n2. 冯异设计，大败赤眉军，收降8万人，残部在宜阳遇到刘秀大军，于是投降。后来，樊崇、逢安因为谋反被诛杀。徐宣在故乡去世，刘盆子以收地租为生。刘恭杀死谢禄，为刘玄报了仇，被刘秀赦免。 3. 齐地张步因贪图刘永的王爵而杀死了刘秀的使臣伏隆，张步占领12郡，称霸齐地。 4. 涿（zhuo）郡张丰反叛，与渔阳彭宠联合。\n\n5. 朱浮因为粮食吃尽而被耿况救走，蓟城于是向彭宠投降。彭宠自称燕王，夺取上谷等地，并联合贼军，依靠匈奴。后彭宠被奴仆子密等3人杀死，首级送往长安。祭遵将彭宠的家族全部杀死。 6. 刘秀亲征，大败邓奉。因为朱祜（hu）调和，邓奉投降。岑彭、耿弇劝说，邓奉被杀。 7. 冯异打败延岑，并在赵臣粮草援助下，打败了境内贼军，基本平定关中（长安）。\n\n8. 吴汉攻打苏茂、周建，先败后胜。睢阳叛乱，迎接刘永进城，吴汉协助盖延包围了睢阳。盖延包围睢阳100天，刘永等突围，刘永被部下庆吾杀死。苏茂、周建拥立刘永的儿子刘纡为梁王。王霸、马武打败了苏茂、周建。周建侄子周诵（song）献出垂惠城投降，周建死于逃亡中，刘纡、苏茂逃到下邳与董宪会合。 9. 延岑攻打南阳，被耿弇打得大败。延岑便与黎丘联合，又被朱祜打败。朱祜与岑彭汇合。\n\n10. 岑彭攻打秦丰，将其包围在黎丘。同时岑彭派傅俊平定了扬州。岑彭围攻秦丰三年，斩杀了9万人，秦丰剩余军队仅1000人，而且粮草将尽。刘秀命朱祜围攻秦丰，岑彭、傅俊则被派去攻打田戎。朱祜猛攻秦丰，秦丰投降，被刘秀处死。 11. 李宪在庐江称帝，部众10万。\n\n12. 来歙出使天水隗嚣处，隗嚣来长安进见刘秀。但后来，隗嚣并不想归顺刘秀，又谋划称帝。 13. 延岑攻打顺阳，又被邓禹打败，于是逃往汉中被公孙述封为大司马。\n\n14. 夷陵田戎打算投降岑彭，但姐夫辛臣抄小路先投降，田戎起疑，于是又反叛。与秦丰联合，被打败后又返回夷陵。后岑彭攻打夷陵，田戎逃到公孙述处。 15. 祭遵猛攻涿郡张丰，生擒张丰。\n\n16.  东海郡董宪部将贲休献出兰陵县向刘秀投降，盖延等不听刘秀谋划，兵败，董宪攻陷兰陵县，诛杀了贲休。刘秀亲征董宪联军，苏茂投奔齐地张步，董宪、庞萌逃亡，被追杀。 17. 成都公孙述多次攻打长安地区，冯异和隗嚣联合，打败了公孙述。\n\n18. 吴汉、耿弇、王常在平原郡打败富平、获索军，追击到渤海，有4万人投降。 19. 庞萌怀疑盖延在刘秀处说了坏话，于是反叛，打败了盖延，与董宪联合，自称东平王。 20. 河西窦融归顺刘秀，被任命为凉州牧。\n\n21. 耿弇斩杀张步大将费邑，平定济南郡。后又多次打败张步，平定齐地。耿弇为将，一共平定46个郡，攻占了300座城，未尝一败。\n\n22. 五原人李兴等从匈奴迎回卢芳，定都九原。夺取了北方几座城。 23. 冯异治理长安，功效显著。 24. 岑彭劝降，湖广投降。\n\n25. 窦融封莎车王康为西域大都尉，西域55国全隶属于莎车。\n\n## 卷42卷\n\n1. 吴汉斩杀董宪、庞萌，崤山以东平定。\n2. 隗嚣不听从劝说，对抗刘秀军，大将王元打败东汉军队。马武断后，军队得以返回。\n3. 冯异抢先占领要地，打败隗嚣大将行巡，后又击败卢芳部将和匈奴的军队。占领了北地郡、安定等地。\n4. 窦融率军攻打隗嚣同党先零羌首领封何等，大破羌族。 5. 刘秀让马援招降隗嚣将领，没有成效。 6. 隗嚣向公孙述称臣。\n7. 卢芳诛杀了五原太守李兴，朔方、云中献城投降。\n8. 来歙（xi）突袭，攻下隗嚣心腹之地略阳。隗嚣来攻，几个月不下。\n9. 刘秀亲征，命王遵招降了隗嚣部下，隗嚣逃亡。隗嚣逃亡西域，投奔部下杨广。不久，杨广去世，隗嚣穷途末路。\n10. 张步逃亡，被陈俊斩首。\n11. 吴汉因为贪图军队多而导致粮草日减，王元、行巡、周宗带领公孙述援军攻来，刘秀军撤退。岑彭断后，全军保全。隗嚣又夺取了陇西，北地、安定等地。 12. 高句（gou）丽王派使者来朝贡。\n13. 隗嚣患病，愤恨而死。王元等拥立其子隗纯为王。据守翼县。 14. 来歙统帅冯异等5位将军讨伐隗纯。\n15. 吴汉攻打卢芳部将贾览，匈奴来援。吴汉处于劣势。 16. 祭遵去世，冯异接管军队。不久，冯异在攻打隗纯时去世。\n17. 耿弇围攻隗嚣部将高俊据守的高平城。一年未下，光武帝派寇询劝降，寇询杀死高俊军师兼使者皇甫文，高俊投降。\n18. 来歙攻陷落门。周宗、行巡献出隗纯投降，王元投奔公孙述。\n19. 岑彭打败田戎，田戎据守江州。\n20. 马援被来歙举荐为陇西太守，进击羌族，大获全胜。 21. 公孙述派人刺杀了来歙，马武接管了其军队。 \n22. 岑彭攻打公孙述，攻势如暴风骤雨，势不可挡。\n23. 藏宫打败公孙述部将延岑，收降了十万军队，王元也来投降。 24. 公孙述派人刺杀了岑彭，监军郑兴暂领军队，等吴汉赶到后接替。 25. 马成平定武都，马成马援讨伐羌人。将投降的羌人迁徙到陇西。\n\n## 卷43\n\n1. 吴汉进攻成都公孙述，占领其要害之地广都。又一次不听刘秀劝告，兵败，后八战八胜。进入成都外城。 2. 冯骏攻陷江州，俘获田戎。\n\n3. 藏宫攻陷涪（fu）城，斩杀公孙恢，与吴汉在成都会师。\n\n4. 延岑招募敢死队，打败了吴汉，又打败了藏宫。公孙述在交战中受重伤，当夜去世。将军队交给延岑，延岑投降。吴汉将公孙述和延岑灭族。 5. 参狼羌等侵犯武都，被陇西太守马援击败。\n\n6. 卢芳联合匈奴、乌桓攻打北方边境，守将杜茂多次与之战斗，无法取胜。九原留守随昱（yu）投降，卢芳逃走。\n\n7. 耿弇等将领交出兵权，以侯爵身份离开朝廷。只有邓禹、贾复、李通留在朝廷。 8. 窦融被任命为大司空，几次辞官，不准。\n\n9. 大司徒韩歆（xin）因为激烈直率，刘秀无法忍受，将其免官。后又逼死了他。\n\n10. 匈奴因为贪图赏赐而让卢芳投降。卢芳自请降不提匈奴，匈奴因为得不到赏赐，大恨，侵犯更胜。卢芳投降后又叛归匈奴，十多年后，在匈奴去世\n\n11. 郭皇后因受宠而怨恨，被废，阴贵人被立为皇后。\n\n12. 交趾女子征侧、征贰反叛，蛮人响应，共攻占了65座城。马援、伏隆奉命征讨，斩杀了征侧姐妹。岭南平定。\n\n## 卷44\n\n1. 南郡蛮人反叛，刘尚将其击败。武陵蛮人相单程等反叛，刘尚讨伐，因轻敌而全军覆没。马援自请讨伐，在壶头受阻，军队遭遇瘟疫，不久马援去世，梁松等人便诬陷马援，光武帝大怒，唯有被马援轻视的朱勃上书鸣冤。马援监军假传诏旨，蛮人杀死其首领，投降。蛮人之乱平定。\n\n2. 匈奴单于舆杀死应当继位的兄弟知牙师，而立其子蒲奴即位。前单于乌珠留的儿子比统领南方八部落，非常愤怒，被拥立为呼韩邪单于，投降汉朝，是为南单于。汉朝设立匈奴中郎将。 3. 东汉设立乌桓校尉。\n\n4. 北匈奴请求和亲，不被允许。北匈奴多次讨好汉朝。\n\n5. 光武帝因为谶（chen）文去泰山封禅。桓（huang）谭因为反对谶（chen）文被贬官，病死途中。 6. 南匈奴比去世，弟弟莫继位，汉朝授玺成为常例。不久，莫去世，弟弟汉继位。不久，汉去世，前单于比的儿子适继位。\n\n7. 光武帝去世，皇太子刘庄即位，是为汉明帝。\n\n8. 汉明帝同母弟山阳王刘荆写匿名信劝东海王刘强造反，被汉明帝掩盖起来。不久，东海王因病去世，汉明帝悲痛。刘荆又招引占星家谋划变乱，汉明帝又宽恕了他。\n\n9. 西羌烧当部强盛，首领滇（dian）吾入侵陇西，汉朝军队多次战败，窦固、马武奉命讨伐。马武击败烧当羌，余皆降散。\n\n10. 辽东郡太守祭彤派鲜卑首领偏何讨伐赤山乌桓，杀其首领，塞外各部落纷纷归附鲜卑，东汉屯边部队全部撤走。\n\n11. 窦融家族富贵无人能比。其子护羌校尉窦林因为贪赃枉法被处死，批准窦融回家养病。 12. 马援之女马氏被立为皇后，皇子刘立被立为太子，马皇后贤明，可惜无子。\n\n13. 莎车王贤用武力强占了于阗（tian）等三国，于阗人杀死了守将，拥立休莫霸为王，并打败了贤的军队，并包围莎车，休莫霸中流箭而死。于阗于是拥立广德为王，莎车和于阗恢复了和亲关系。\n\n## 卷45\n\n1. 梁松因为怨恨朝廷被处死。\n\n2. 于阗王广德率领西域各国将莎车王杀死，匈奴攻击，广德投降。后广德又杀死了匈奴所立的莎车王不居徵，改立齐黎为莎车王。\n\n3. 南匈奴打退侵犯云中郡的北匈奴军队。南匈奴适去世，苏继位，不久，苏去世，单于适的弟弟长继位。 4. 阴太后去世。\n\n5. 北匈奴实力仍旧强盛，汉明帝同意双边贸易。郑众出使北匈奴，坚决不行叩拜之礼。北匈奴仍旧侵犯边境，南匈奴也因为汉朝与北匈奴通好而怨恨，与北匈奴沟通，汉朝为防备，设立度辽营。 6. 汉明帝从天竺国引入了佛教。\n\n7. 广陵王刘荆相面谋叛被告发，不久自杀。\n\n8. 王景治理汴渠，用水闸调节水流，耗费百亿钱财。 9. 此时，天下太平，百姓富足。\n\n10. 最信佛教的楚王刘英谋划叛乱，被废掉王位。刘英自杀。受牵连者众多，马皇后等乘久旱下雨劝谏，汉明帝醒悟。\n\n11. 耿秉上书进攻北匈奴，汉朝四路大军讨伐北匈奴，只有窦固有功，祭彤无功获罪，愧恨而死，辽东百姓四季祭祀他。\n\n12. 窦固部下班超在鄯善率36人杀死北匈奴使者团，鄯善归顺汉朝；随后出使于阗，杀死巫师，于阗归顺；西域各国与汉朝中断了65年后，又开始交往。\n\n13. 北匈奴攻打云中郡，太守廉范虚张声势，以少胜多，北匈奴从此不敢进犯云中。 14. 益州刺史朱辅宝扬汉朝德政，西南夷归顺的很多。\n\n15. 班超派部下田虑劫持了匈奴所立的疏勒王，立忠为疏勒王。疏勒国归顺。 16. 窦固、耿秉出兵西域，打败北匈奴。耿秉平定车师，设立西域都护和戊、己校尉。\n\n17. 北匈奴杀死车师后王安得，又攻打戊校尉耿恭，被耿恭用毒箭吓退。不久，耿恭在疏勒城用泉水惊退北匈奴。\n\n18. 汉明帝去世，太子即位，是为汉章帝。\n\n19. 焉耆（qi）和龟兹进攻西域都护陈睦，陈睦全军覆没。北匈奴在柳中城围攻己校尉关宠。车师也反叛，与北匈奴一起攻打戊校尉耿恭。耿恭兵少粮尽，仍旧坚守。汉朝征发7000人前往救援。\n\n## 卷46\n\n1. 司徒鲍昱进谏，汉章帝同意楚王案中流放人员返回家乡。\n\n2. 酒泉太守段彭率军攻打车师，北匈奴惊慌而逃，车师投降。范羌率军2000，营救耿恭，最终仅13人返回。汉章帝撤销了西域都护和戊、己校尉。班超也被征召回国，但由于疏勒于阗等国的哭劝而留了下来。 3. 汉章帝打算封舅父为侯，被马太后阻止。\n\n4. 安夷县官吏强抢羌族妇女，被其夫杀死。官吏追查，该部落因为害怕而反叛。烧当羌首领迷吾联合其他部落一同反叛，马防、耿恭讨伐，羌人投降。耿恭因得罪马防被免官。 5. 窦勋的儿女被封为皇后。 6. 宋大贵人的儿子刘庆被封为太子。\n\n7. 马防、马光、马廖被封侯，马太后生气，三人辞官被批准。马太后去世。\n\n8. 班超请求平定西域，汉章帝派徐干率领1000人支援。但西域反复无常，班超四处攻打，汉朝也不时派点军队支援。\n\n9. 窦皇后无子，收养梁小贵人的儿子刘肇（zhao）为子。于是陷害宋贵人姐妹，太子刘庆被废，刘肇被立为太子。宋贵人姐妹自杀。\n\n10. 窦皇后为使窦家成为太子刘庆的唯一舅家而陷害梁家，梁贵人姐妹自杀。\n\n11. 马家因为骄纵而获罪，窦家更加兴盛，也更加放纵。窦皇后的哥哥窦宪掌管禁军，他依仗皇后强占了公主的庄园，被查后未被治罪。\n\n## 卷47\n\n1. 北匈奴四方受敌，一部分人投降汉朝，大部被迫向远方迁徙。\n\n2. 南匈奴长去世，前单于汗的儿子宣继位。不久，宣去世，前单于长的弟弟屯屠何继位。\n\n3. 烧当羌迷吾等再次反叛，攻打陇西郡。其弟号吾被生擒。太守张纡（yu）同意释放号吾，烧当羌撤军。 4. 疏勒王忠诈降，被班超斩首。西域南道畅通。\n\n5. 护羌校尉傅育招惹羌人，离间羌人与胡人的关系被识破。羌人反叛，归附迷吾。傅育追击被杀死。张纡被任命为护羌校尉。迷吾战败依附张纡，迷吾极其800首领被毒死。迷吾儿子迷唐与其他部落解除仇怨，在大、小榆谷反叛，实力强盛，张纡无法制服。 6. 班超声东击西，莎车投降、龟兹等莎车援军撤走。\n\n7. 汉章帝去世，仅31岁，太子即位，是为汉和帝，窦太后摄政。窦宪掌握机要，窦氏兄弟掌握要职。 8. 根据汉章帝遗诏，取消盐铁专卖制度。\n\n9. 窦宪因为怕刘畅分其权势而将其暗杀，不久，事情败露，窦宪因为害怕被杀而自动请求攻打北匈奴。 10. 张掖太守邓训接替张纡被任命为护羌校尉，他优待胡人，招降羌人，并派任尚打败了迷唐。迷唐部众离散。\n\n11. 窦宪、耿秉等和南匈奴一起攻打北匈奴，斩杀1万多人。窦宪又诱使北匈奴投降，看到其势弱，再加上南匈奴想一统匈奴，于是便又偷袭北匈奴。北匈奴单于逃亡不知所踪。窦宪因功被封为大将军。南匈奴则日益强盛，拥兵5万。\n\n12. 窦宪派人偷袭了西域伊吾的北匈奴守军，车师前后国投降。\n\n13. 月氏因求娶公主不得而发兵7万攻打班超。班超坚壁清野，月氏军被打败，月氏投降，年年进贡。 14. 窦氏专权，只有窦喜修身自好，上下都依赖袁安。\n\n15. 龟兹等国向汉朝投降，汉朝重新设立西域都护、戊、己校尉和骑都尉。班超被任命为西域都护，驻守龟兹。徐干被任命为长史，驻守疏勒。西域仅焉耆等三国没有归附汉朝。\n\n16. 汉和帝最终不顾袁安的激烈反对，同意了窦宪另封北匈奴于除为单于的建议。\n\n## 卷48\n\n1. 汉和帝派人授予北匈奴于除印信，一如南匈奴先例。 2. 袁安去世。\n\n3. 窦氏党羽谋划杀害和帝，和帝与中常侍郑众、清河王刘庆等谋划，窦宪等被逼自杀，党羽全部罢官。和帝论功行赏，刘庆一向行为谨慎，郑众也谦让，和帝认为郑众是贤臣，于是常与他商量政事。宦官掌权，从此开始。\n\n4. 班固因为奴仆辱骂洛阳令，而被陷害致死。《汉书》由其妹班昭续写完成。 5. 护羌校尉邓训去世，官民夷族深切怀念。\n\n6. 北匈奴于除叛逃回北方，被汉军斩杀，其部众也被消灭。鲜卑占据了原北匈奴故地，接受了残余的北匈奴人，鲜卑日益强盛。\n\n7. 护羌校尉贯友离间羌人关系，并派兵打败了迷唐，迷唐向远方迁徙。\n\n8. 匈奴单于屯屠何去世，前单于宣的弟弟安国继位，投降的北匈奴人归附，但族人归心前单于适的儿子师子。汉朝边将也阻碍安国与朝廷的通信。不久，安国被其舅父杀死，师子被拥立为单于。 9. 西域都护班超征发龟兹等八国军队，杀死了焉耆王广等。\n\n10. 20万投降的北匈奴人反叛，拥立封侯为单于，被汉军打败，于是逃亡塞外。 11. 阴识的曾孙女阴贵人被立为皇后。\n\n12. 车师后王攻打车师前王，俘获了其妻儿。西域长史王林出兵斩杀了后王。\n\n13. 窦太后去世，汉和帝知道了其母梁小贵人冤死的经过，宽恕了窦太后。和帝厚待梁氏家族，梁氏从此兴盛。\n\n14. 刘庆请求为其母宋大贵人扫墓，被批准。\n\n15. 班超派属官甘英出使大秦和条支王国，甘英走遍了西海。\n\n16. 汉朝招降了不少羌人，迷唐因为恐惧而投降，并进京朝贡。后又再次反叛，被候霸打败，于是投靠发羌部落，多年后去世，其子前来投降，部众只剩下几十户。 17. 南匈奴单于师子去世，前单于长的儿子檀（tan）继位。 18. 鲜卑攻打右北平，又攻打渔阳，被汉军打败。 19. 阴皇后嫉妒心强，因为失宠而怨恨，被废。\n\n20. 班超年老思乡，多次申请回朝，被批准。不久，去世。戊己校尉任尚接替西域都护，不听班超忠告，终于断送了西域的和平。\n\n21. 邓禹的女儿邓贵人被立为皇后。邓皇后贤明。 22. 汉和帝打破常例，封宦官郑众为侯。\n\n23. 高句（gou）丽入侵辽东，被太守耿夔（kui）打败。\n\n24. 汉和帝去世，婴儿刘隆继位，邓太后摄政。 25. 北匈奴逢侯多次请求归附，不准。 \n\n## 卷49\n\n1. 汉殇帝去世，刘庆的儿子刘祜被邓氏家族迎立为帝，是为汉安帝，邓太后仍旧摄政 2. 清河王刘庆去世。\n\n3. 西域反叛，汉朝撤销西域都护，并将屯田官兵接回了汉朝本土。 4. 因为征兵和官吏的欺压，羌人再次反叛。\n\n5. 鲜卑首领燕荔阳来汉朝朝见，汉朝开通边塞贸易，鲜卑送来人质。但鲜卑的入侵仍旧不止。\n\n6. 任尚与羌人大战，大败，8000人战死。邓骘（zhi）领兵经常战败，但邓太后仍旧任命邓骘为大将军。但邓骘在位上也能推举贤能。\n\n7. 羌人首领滇零在北地称帝。招纳羌人并攻打益州。被梁慬（jin）打败。 8. 京城洛阳发生饥荒，出现人吃人现象。\n\n9. 乌桓、鲜卑、南匈奴联合，出兵7000攻打五原郡，汉军大败。南匈奴单于也攻打耿仲，被梁慬、耿夔打败，南匈奴投降，梁慬被任命为度辽将军。\n\n10. 虞诩因为阻止了邓骘放弃凉州的计划而被派到叛乱的朝歌县做县长。虞诩以内应+埋伏平定了朝歌县。 11. 海匪张伯路多次攻打青州，法雄将其打败，最终被辽东人斩杀，青州平定。\n\n12. 羌人势力转强，前线修堡垒防守。羌人首领滇零去世，儿子零昌继位。护羌校尉候霸、骑都尉马贤多次打败羌军。\n\n13. 虞诩建议任尚集资买马追击羌人，被同意，任尚打败敌人\n\n14. 邓太后听说虞诩的才华，任命他为武都郡太守，虞诩多用诈术，以少胜多打败了羌人。 \n\n## 卷50卷\n\n1. 任尚多次打败羌人首领零昌，俘获了其妻儿。并派人刺杀了杜季贡。又收买号封刺杀了零昌，号封被封为羌王。攻打先零羌人首领狼莫，狼莫战败而逃。羌族虞人部落向邓遵投降，陇右平定。\n\n2. 邓遵收买羌人雕何刺杀了狼莫，羌人于是瓦解，为平定三辅和益州的羌人叛乱，朝廷共耗费军费240多亿，国库为之枯竭，百姓死伤无数。\n\n3. 任尚与邓遵争功，再加上贪赃枉法，被处死。\n\n4. 班勇与官员辩论西域的取舍意义，其意见被采纳，汉朝在敦煌驻军500以控制西域 5. 汉安帝已经成年，官员凡是劝邓太后还政的，都被判罪。\n\n6. 邓太后去世，汉安帝将邓氏家族全部免官，邓遵等人自杀。汉安帝奶妈王圣，中常侍江京、攀丰等人乘机掌权，阎皇后家族也被封官，他们都骄横不法，司徒杨震多次上书告发，无效。 7. 高句丽多次入侵边境，后遂成继位为国王，前来归顺，东部边境平静。\n\n8. 班勇被任命为西域长史，率军800驻守柳中城。班勇征调龟兹等国军队，赶跑了匈奴，车师前国归附。 9. 攀丰等人借天相陷害太尉杨震，杨震被免官，服毒而死。\n\n10. 南匈奴单于檀去世，弟弟拔继位。因为度辽将军耿夔征调频繁，新归降的部落首领阿族等人反叛，被马翼率胡人骑兵将其全部斩获。\n\n11. 王圣、攀丰等人又陷害太子等人，太子刘保被废，大臣反抗无效。\n\n## 卷51\n\n1. 汉安帝在巡行途中突然去世，年仅32岁。阎氏家族和宦官江京等人不立原太子济阴王刘保，而立年幼的北乡侯刘懿继位。\n\n2. 阎显指使人弹劾，攀丰等人被处死，大将军耿宝自杀，王圣母子被流放，阎氏家族掌权，作威作福。 3. 班勇率军生擒车师后王军就和匈奴使者，在索班阵亡处斩首。\n\n4. 北乡侯刘懿去世，宦官孙程等人斩杀江京，拥立11岁的济阴王刘保为帝，是为汉顺帝。阎氏家族覆灭，孙程等人被封侯，宦官势力更盛。\n\n5. 陇西钟羌反叛，被马贤斩杀1000人，钟羌投降，凉州安定。\n\n6. 司隶校尉虞诩多次弹劾贪赃枉法的官员和宦官，险些获罪。后弹劾宦官张防弄权，入狱，险些被害死，宦官孙程和宦官高梵联合救援，张防被流放，同犯尚书贾朗等被处死，虞诩升为尚书仆射（ye） 7. 虞诩举荐左雄，左雄被任命为尚书。\n\n8. 西域所有国家归顺汉朝，只有焉耆王元孟没有投降，于是班勇和敦煌太守张朗分南北两路攻打。张朗为赎罪抢先攻打，元孟投降，班勇因为“迟到”被免官。 9. 南匈奴拔去世，其弟休利继位。\n\n10. 班超孙子班始，因妻子阴城公主骄横荒淫，久积怨怒爆发，杀死了公主，班始极其兄弟姐妹被处死。 11. 梁商的女儿梁贵人被立为皇后。\n\n12. 汉顺帝给奶妈宋娥封爵，左雄、李固等激烈反对，于是，宋娥被迫搬出皇宫，宦官也被迫请罪。于是，宋娥和宦官陷害李固，幸亏有人救助，得救。李固辞官回乡。 13. 太史令张衡才华盖世，发明了浑天仪。\n\n14. 鲜卑首领其至犍去世，鲜卑对汉朝的抢掠减少。\n\n## 卷52\n\n1. 汉顺帝允许宦官以养子继承爵位。\n\n2. 梁商被任命为大将军，梁商能洁身自好，李固、周举辅佐他。但其子梁翼则暴虐不法。 3. 汉顺帝不听虞诩的劝告，同意增加武陵蛮人的赋税，武陵蛮人反叛，被武陵太守李进平定。 4. 山阳君宋娥因诬陷罪被遣送回乡，与之勾结的宦官九侯也被遣回封国。\n\n5. 李固的建议被采纳，祝良被任命为九真郡太守，张乔被任命为交趾州刺史，两人招抚了叛军和反叛的蛮人，于是，岭外安定。\n\n6. 宦官张逵等人因为妒忌宦官曹腾等人与梁商联合，而向汉顺帝诬陷他们，张逵等被处死，因为梁商劝说，才没有被大范围牵连。\n\n7. 南匈奴吾斯和车纽反叛，单于休利被匈奴中郎将陈龟逼杀。吾斯拥立车纽为单于，车纽投降。后汉朝立在京城洛阳的兜楼储为单于，吾斯被匈奴中郎将派人刺杀。\n\n8. 马贤不忧虑军事，射姑山大战，马贤阵亡，东、西羌大规模汇合，烧杀抢掠不断。 9. 梁商去世，其子梁翼被任命为大将军，梁不疑为河南尹。 10. 皇子刘炳被立为太子。\n\n11. 汉顺帝去世，2岁太子刘炳继位，是为汉冲帝，梁太后主政。\n\n12. 汉冲帝去世，梁氏家族不听李固的劝告，立8岁的刘缵（zuan）为帝，是为汉质帝。梁太后主政，李固等人的建议多被采纳，但梁翼等人陷害李固等人，因梁太后反对而没有成功。 13. 藤抚平定了东南地区的盗贼。\n\n## 卷53\n\n1. 汉质帝聪明外露，被梁翼毒死。\n\n2. 梁翼胁迫大臣，蠡吾候刘志被迎立为帝，是为汉桓帝。李固因为劝阻，被免官。 3. 藤抚因得罪宦官，不但没有因功封侯，反而被罢官，后死于家中。 4. 汉桓帝迎立梁翼的妹妹为皇后。\n\n5. 杜乔因多次直言，被梁翼忌恨，不久，因为天灾被免官。\n\n6. 梁翼深感李固、杜乔的声名太盛，恐于己不利，于是，两人都被害死于狱中。 7. 南匈奴单于兜楼储去世，车儿继位。 8. 梁太后还政于汉桓帝，不久，梁太后去世。\n\n## 卷54\n\n1. 南匈奴各部落同时反叛，并与乌桓、鲜卑联合进犯沿边九郡。陈龟被任命为度辽将军，上书建议任贤弃恶，被采纳，朝廷每年节省数亿经费。\n\n2. 张奂被任命为北中郎将，招降了乌桓，并让其斩杀了匈奴部落首领，匈奴人全部投降。请求废掉无法服众的车儿单于而立左谷蠡王为单于，不准。\n\n3. 陈龟一向与梁翼不和，又多次请求诛杀梁翼，终被陷害，回乡后绝食而死。 4. 梁皇后仗势欺人，嫉妒成性，失宠，忧愤而死。\n\n5. 梁翼专权20年，汉桓帝终于无法忍受，于是，与单超等五宦官谋划，出兵包围了梁翼住处，梁氏、孙氏覆灭。抄卖梁翼财产，收入30多亿。五宦官因功被封侯。 6. 邓贵人被立为皇后。\n\n7. 八部羌人入侵陇西金城塞，被护羌校尉段击败。段多次打败羌人，后被凉州刺史郭闳陷害，罚做苦役。皇甫规主动请求招降羌人，被任命为中郎将，几十万羌人归降。\n\n8. 冯绲（gun）率军10万讨伐武陵蛮人。打败了蛮人，10万人归降。荆州平定，冯绲将功劳让与他人。回乡后上书弹劾贪官，被宦官怨恨，结果被罚做苦役，遇赦后回家。\n\n9. 皇甫规被任命为度辽将军，他上书请求让张奂接替自己而做其副手，被批准。 10. 尚书朱穆刚直，痛恨宦官专横，多次上书罢黜宦官，不被采纳，后生毒疮而死。\n\n## 卷55\n\n1. 荆州刺史度尚暗中派人烧毁了将士的珠宝以激励将士的讨贼之心，于是，平定盗贼，度尚因功被封侯。 2. 寇恂的曾孙侍中寇荣清高，为权贵所憎恨，被上下官员陷害而死。寇家从此衰落。 3. 邓皇后因为嫉妒被废，忧愤而死，亲族被诛杀。 4. 太尉杨秉弹劾宦官成功，宦官势力被打击。\n\n5. 司隶校尉李膺等因为诛杀和弹劾奸臣而被罚做苦役。后被太尉陈蕃等人救下，重新被任命为司隶校尉，继续打击权贵，声望日高。\n\n6. 度尚为自保而陷害交趾刺史张磐（pan），查明后，因功未受惩处。 7. 段对西羌穷追猛打，从春到冬不停歇，羌人于是溃散，段因功被封侯。\n\n8. 汉桓帝想立采女田圣为皇后，太尉陈蕃（fan）等人反对，不得已，立窦融玄孙窦武的女儿窦贵人为皇后。 9. 鲜卑听说张奂被调回京都洛阳，便联合乌桓、南匈奴、东羌反叛，侵犯沿边九郡。于是，张奂被再次任命为护匈奴中郎将，20万人投降，只有鲜卑首领檀石槐不投降。\n\n10. 郭泰、贾彪是三万太学生的首领，他们与陈蕃、李膺等人互相标榜，评议朝政得失，官员害怕被非议，因此都与之交往。\n\n11. 汉桓帝信奉佛教，佛教越发盛行。\n\n12. 李膺不顾赦令，斩杀了精通占卜的张成父子，引发了党人之狱，被牵连者多为天下贤士。皇甫规也想入狱，不可得。\n\n## 卷56\n\n1. 护羌校尉段平定西羌。\n\n2. 贾彪、窦武等人营救，再加上宦官也害怕事态扩大牵连其子弟，于是，党人全部被赦免，遣回故乡，终身不许做官。\n\n3. 张奂派司马董卓等大败先零羌人，幽州、并州、凉州平定。因为张奂不肯奉承宦官，没有被封侯。 4. 汉桓帝去世，窦太后主政，处死了采女田圣。12岁的刘宏被迎立为帝，是为汉灵帝。窦武被任命为大将军、陈蕃为太傅。\n\n5. 段率军1万讨伐先零等东羌部落，穷追猛打，誓要斩草除根。张奂上书请求招降，段上书坚持己见，终于平定东羌。为此耗费44亿，阵亡400人。\n\n6. 窦武和陈蕃主持朝政，灵帝奶妈赵娆（rao）和宦官干扰朝政，于是，窦武、陈蕃出兵，用武力诛杀宦官，可惜兵败身死，窦太后被软禁。张奂因为被宦官利用而被封侯，张奂因悔恨而不接受。 7. 汉灵帝迎接其母到京都洛阳，是为董太后。\n\n8. 李膺、范滂（pang）等党人互起称号，评议朝政，被宦官诬陷，党人相继而死，读书人大批被杀害。 9. 高句丽国王伯固侵犯辽东郡，玄菟郡太守耿临出兵讨伐，伯固投降。\n\n10. 孟佗因为宦官而被封为凉州刺史。他派任涉率领西域联军3万人攻打疏勒王国，四个月不克，被迫撤退，朝廷无法再控制疏勒。 11. 宋贵人被封为皇后。\n\n## 卷57\n\n1. 太傅胡广去世，享年82岁。他侍奉过安、顺、冲、质、桓、灵等六个皇帝。因为没有忠直之风，而被天下看轻。\n\n2. 窦太后因为母亲去世，思念成疾，也去世。\n\n3. 司隶校尉段打算驱逐张奂后将其杀害，后因张奂苦苦哀求而幸免于难。 4. 吴郡司马孙坚招募勇士，帮助州郡讨伐起兵的许生，后许生被斩杀。 5. 蔡邕（yong）多次上书，声望很高，刺客也不忍刺杀他。\n\n6. 护乌桓校尉夏育请求讨伐鲜卑檀石槐，被批准。三路大军惨败，夏育等出钱赎罪，被贬为民。 7. 宋皇后被宦官陷害，在狱中忧郁而死。亲族被诛杀。 8. 汉灵帝设立机构，公开买官。以聚敛私财。\n\n9. 宦官王甫（fu）、曹节专权，养子遍布天下，掌握着重要官职。太尉段也迎合顺从他们。司隶校尉阳球痛恨他们专横，于是，乘机将王甫、段等逮捕，王甫等被活活打死，段自杀。阳球还想打击豪强，被迁官。后因为诛杀曹节等的计划外泄而被处死。 10. 中常侍吕强清廉忠直。\n\n11. 何贵人生下皇子刘辩，被立为皇后。其兄何进被任命为侍中。\n\n## 卷58\n\n1. 朱俊平定交趾叛乱。\n\n2. 鲜卑首领檀石槐去世，儿子和连继位，在进攻北地时被射死。其兄的儿子魁头继位。和连的儿子骞曼成人后与魁头争权，鲜卑部众离散。魁头去世后，其弟步度根继位 3. 汉灵帝在后宫修建商铺，令宫女贩卖货物。\n\n4. 何皇后嫉妒心强，毒死了生下皇子刘协的王美人。汉灵帝要废后，被宦官劝阻。 5. 大长秋宦官曹节去世，由宦官赵忠代理大长秋。\n\n6. 巴郡（重庆）板族人英武善战，为汉朝多次平定叛乱立下汗马功劳。但地方官府对他们征收重税，板人于是造反。朝廷招降，于是全部投降。\n\n7. 张角建立“太平道”弟子几十万，遍布四方。不久，张角发动了黄巾军起义。 8. 何进被任命为大将军。卢植征讨张角，皇甫嵩、朱俊也奉命征讨颍川黄巾军。 9. 宦官吕强因为匡扶汉室而被宦官赵忠等人陷害，自杀而死。\n\n10. 皇甫嵩、朱俊和援军曹操一起平定了颍川、汝南、陈国等三郡的黄巾军。皇甫嵩谦让功劳，朱俊被封侯 11. 卢植多次打败黄巾军，在广宗，因为没有贿赂小黄门左丰而被陷害，仅被免死。董卓接替了卢植。 12. 皇甫嵩在广宗斩杀张梁，又在下曲阳斩杀张宝，张角先前已经去世，于是，黄巾主力覆灭。皇甫嵩被封侯。后因为没有答应宦官索贿而被陷害，险些身死。\n\n13. 朱俊、孙坚等在宛城先后斩杀黄巾军统帅赵弘、韩忠、孙夏。宛城多次被黄巾军占领，又被官军夺回。 14. 张燕率领百万黑山军投降朝廷。\n\n15. 张温率领董卓、孙坚讨伐以韩遂、边章为首的西羌军，双方各有胜负。后韩遂杀死边章，吞并了其军队。张温因未能平定叛乱而被免职。\n\n16. 凉州司马马腾率军造反，与韩遂联盟，共同推举王国为首领。 17. 长沙太守孙坚因为镇压长沙贼帅区星有功而被封侯。\n\n## 卷59\n\n1. 太常刘焉上书请设置州牧加强地方权力，于是，任命刘焉为益州牧，刘虞为幽州牧\n\n到任后，刘焉为政宽和，以收买人心。刘虞也招降了乌桓首领丘力居，并请求解散军队，只留下公孙瓒的一支军队驻扎在右北平。公孙瓒因为请求消灭丘力居不得而与刘虞结仇。刘虞将幽州治理得很好。 2. 皇甫嵩率领董卓等讨伐王国，王国战败。韩遂等废掉王国首领地位，后为了争权夺利而相互攻杀，势力开始衰落。\n\n3. 汉灵帝去世，宦官蹇（jian）硕诛杀何进不成。皇子刘辩即位，是为汉少帝，其母何太后主政。大将军何进和太傅袁隗（kui）主持尚书事务。\n\n4. 袁绍建议何进杀尽宦官，并征召地方军队入朝做外援，何进不顾反对声，予以采纳\n\n5. 宦官张让等杀死何进，司隶校尉袁绍带兵入宫尽杀宦官。张让挟持汉少帝出逃，途中被迫投河而死。董卓挟持汉少帝收降了吕布，何进的部下也来投靠，于是，董卓实力强盛。 6. 董卓废汉少帝，立刘协为帝，是为汉献帝。后毒杀了何太后和汉少帝。 7. 董卓为党人平反，并任用贤才，董卓的亲信全都没有担任高官，只在军中任职。\n\n8. 董卓开始烧杀抢掠，地方割据势力共同推举袁绍为盟主，起兵讨伐董卓。曹操、袁术也是联军一员。 9. 董卓火烧洛阳，迁都长安。司徒王允曲意逢迎董卓。 10. 孙坚兵进南阳，与袁术合兵，袁术占领南阳。\n\n11. 刘表被任命为荆州刺史，他单人匹马，在名士蒯越、蒯良的帮助下，平定了荆州。\n\n12. 袁绍等联军畏惧董卓，坐吃粮草，曹操独自出兵，被董卓部将徐荣打败。联军因为粮草吃完而离散。不久，便相互攻杀。\n\n13. 公孙度得到徐荣的推荐，担任辽东太守，他东征高句丽，西征乌桓，自立为辽东侯。\n\n## 卷60\n\n1. 孙坚被徐荣打败。后孙坚打败来犯的胡轸（zhen）、吕布，斩杀华雄。董卓亲自攻打，也被打败。孙坚进入洛阳，吕布败走。孙坚找到传国玉玺后回到南阳所属的鲁阳。后袁术派孙坚攻打刘表，孙坚围困了襄阳城，在追击黄祖途中遇伏，中箭而死，余部投靠了袁术。 2. 袁绍采纳逢纪的计谋，收降了冀州（州治所邺城）\n\n3. 曹操采纳鲍信建议，攻打兖州贼军。袁绍举荐曹操为东郡太守，曹操继续追击黄巾军，30万兵士投降，曹操选择其中精锐，组建“青州兵”。\n\n4. 公孙瓒因为弟弟公孙越之死而讨伐袁绍，冀州所属大多数城池投降，袁绍恐惧。刘备率领关羽、张飞、赵云也帮助公孙瓒，驻守平原郡。后麴（qu）义率领800精兵，界桥之战，大败公孙瓒，公孙瓒逃回幽州。 5. 董卓残暴，以致人人自危。王允等人与吕布一起谋划，董卓被吕布杀死。汉献帝命令王允和吕布主持朝政。蔡邕因为同情董卓，入狱而死。王允骄傲，部属离心。\n\n6. 董卓余部恐惧，贾诩建议李催（cui）、郭汜（si）等联合进军长安。吕布属下的蜀郡士兵打开长安城，长安失陷。王允等人被处死，李催、郭汜、樊稠、张济等被封侯。吕布先后投降袁术--张扬--袁绍--张扬。 7. 袁术受到刘表的逼迫，又被兖州曹操打败，最终占据了寿春。\n\n8. 徐州牧陶谦亲近小人，残害贤才。其部下为钱财杀死了曹操之父曹嵩。于是，曹操出兵攻打陶谦 9. 公孙瓒逼杀了幽州牧刘虞，刘虞仁爱，百姓悲痛。田畴发誓为之报仇。\n\n## 卷61\n\n1. 平原相刘备奉青州刺史田楷之命，救援徐州牧陶谦。曹操粮尽撤走。\n\n2. 陈留太守张邈(miao)、东郡留守陈宫反叛曹操，迎接吕布入兖州。仅甄城、范县、东阿县没有归顺。曹操急忙从第二次攻徐州之战中撤回。与吕布交战，因为粮尽而各自撤退。\n\n3. 益州牧刘焉因背生毒疮而死，属下因为其子刘璋温和而立为益州牧。部下甘宁等反叛失败，逃往荆州。 4. 徐州牧陶谦病死，死前推举刘备为徐州牧，刘备谦让后同意。\n\n5. 孙坚之子孙策帮助袁术攻城略地，但袁术不信任他。后孙策在朱治的劝说下，带兵征讨曲阿的扬州刺史刘繇，势如破竹。\n\n6. 李催等人内乱，先杀死了樊稠，后李催又与郭汜相互攻打。一人挟持天子，一人质公卿。李催势力衰落后，在张济的调和下，两人和好。后在汉献帝迁都弘农时，又有一番大混战。 7. 曹操打败吕布，吕布投靠徐州牧刘备。\n\n8. 曹操攻陷了张超镇守的雍丘，东郡太守藏洪因为袁绍阻止其救援旧主而反叛。袁绍攻打藏洪一年多，无法攻下。东郡城内粮尽，饿死8000人，而军民始终没有背叛藏洪。城陷后，臧洪被杀。\n\n9. 公孙瓒占据幽州全境后，睚眦必报，嫉贤妒能。刘虞部下鲜于辅、阎柔为给刘虞报仇，联合乌桓、鲜卑和袁绍部下麴义，10万联军攻打公孙瓒。公孙瓒屡战屡败，退守易县，作茧自闭，部下离散。\n\n## 卷62\n\n1. 刘备迎战袁术，各有胜负。吕布乘机占领了张飞驻守的下邳( pi)。刘备军中缺粮，以致人吃人，于是，刘备投靠了吕布，驻守小沛。吕布自称徐州牧。\n\n2. 杨奉等人护送汉献帝进入洛阳。后董承招引曹操大军进入洛阳。于是，再次迁都许县，改名许都。杨奉等阻扰迁都，被曹操打败。杨奉等投靠袁术。 3. 孙策打败会稽(kuaiji)太守王朗，王朗投降。\n\n4. 袁绍之子，青州刺史袁谭攻下了孔融驻守的北海郡，孔融投奔曹操。袁谭前期励精图治，后来亲近小人，便没有大成就。\n\n5. 曹操部下枣袛（di）、任峻建立了屯田制度，曹军于是粮草充足。\n\n6. 袁术大将纪灵攻打刘备，吕布营门射戟，救下刘备。后刘备兵日益增多，吕布便攻打刘备，刘备投靠了曹操。\n\n7. 张济攻打刘表的襄城，中箭而死。余部由族侄张绣接管，驻守宛城，贾诩来投。\n\n8. 曹操攻打张绣，张绣投降。曹操纳张济妻子为妾，又收买其大将胡车儿。张绣反叛，曹操长子曹昂、典韦等战死，于禁整顿军队，打退了张绣。 9. 曹操打败袁术，袁术从此衰落。 10. 刘备设鸿门宴，杀死来结盟的杨奉等。\n\n11. 吕布大将高顺率领精锐的“陷军营”攻陷了刘备驻守的小沛。刘备只身逃走。\n\n12. 曹操攻打吕布，侯成等背叛，抓住陈宫、高顺送给曹操。吕布也在白门楼被俘。刘备说服曹操，吕布、陈宫、高顺被绞杀，张辽投降。\n\n13. 周瑜、鲁肃离开袁术，投靠孙策。孙策率军先后打败祖郎和太史慈，两人归顺。\n\n## 卷63\n\n1. 袁绍出兵斩杀公孙瓒，田楷也战死。 2. 袁术窘迫，愤恨而死。 3. 贾诩劝说张绣投降了曹操。\n\n4. 孙策用计夺取了庐江郡，又派虞翻说服豫章郡太守华歆（xin）献上了豫章郡。\n\n5. 刘备再次占领了徐州的下邳和小沛，背叛了曹操。曹操亲征，刘备战败投奔袁绍，关羽被俘。 6. 袁绍不顾田丰等人的反对，攻打曹操。\n\n7. 关羽斩杀了袁绍大将颜良，解除了袁军对东郡的白马之围。关羽离开曹操，投奔刘备。 8. 鲜于辅、阎柔向曹操投降。\n\n9. 孙策被已故吴郡太守许贡的门客杀死，年仅26岁，其弟孙权接任。当时，孙策已经占据了会稽、吴郡、丹阳、豫章、庐江、庐陵共6郡，不过，偏远处并没有完全归顺。\n\n10. 许攸背叛袁绍投降了曹操。曹操率轻骑奔袭乌巢，斩杀淳于琼，烧毁了袁绍的粮草。袁绍大将张颌、高览率领重兵攻打曹操军营也始终不下，再加上郭图乘机陷害，两人投降了曹操。于是，袁绍全军溃散。余部投降曹操被活埋。官渡之战以曹操大胜袁绍大败而告终。 11. 刘表平定了长沙、零陵、桂阳，拥兵十万，不再向朝廷进贡。\n\n12. 刘璋懦弱无能，张鲁占据汉中反叛。赵韪（wei)也因为益州人民对外来东州兵的仇恨而反叛。\n\n## 卷64\n\n1. 曹操攻打刘备占据的汝南，刘备战败投奔刘表，驻守在新野。\n\n2. 赵韪围攻成都刘璋，东州兵害怕被杀，拼死作战，追击到江州（巴郡），杀死赵韪。 3. 张鲁以天师道管理汉中。天师道首领称祭酒。\n\n4. 袁绍因为官渡之战战败，愤恨而死。袁谭与袁尚各带党羽相互攻杀。袁谭处于劣势，于是向曹操投降。曹操出兵攻打审配镇守的邺城，攻破城池，斩杀了审配。袁尚部下李孚在传信邺城中智勇惊人。 5. 袁谭打败袁尚，袁尚投奔幽州袁熙。袁谭背叛曹操。\n\n6. 孙权忙于平定内乱。丹阳太守孙翊被杀，其妻徐氏设计为夫报了仇。 \n7. 曹操攻陷南皮，袁谭出逃，被杀死。\n8. 幽州袁熙的部下反叛投降曹操，袁熙与袁尚投奔乌桓。 9. 黑山军首领张燕率兵十万归降了曹操。\n10. 并州高干先降后反叛曹操，河东郡地方豪强卫固等响应，曹操任命的新太守杜畿（ji）设计瓦解了豪强，平定了河东。杜畿治理河东政绩常常天下第一。\n\n## 卷65\n\n1. 曹操亲征并州刺史高干，高干在逃亡中被杀。梁习被任命为并州刺史，百姓认为没有并州刺史的功绩超过梁习。\n2. 曹操在来降的田畴帮助下，奇袭了乌桓，斩杀了单于蹋（ta）顿，20万人投降。袁尚、袁熙投降辽东，被公孙康杀死，人头献给了曹操。\n3. 刘备在襄阳隆中，三顾茅庐，请出了诸葛亮。 4. 黄祖部下甘宁在苏飞的帮助下，投奔了孙权。\n5. 孙权西征江夏郡黄祖，攻陷了夏口城，斩杀了黄祖。甘宁救下了苏飞。 \n6. 朝廷撤除三公职位，以曹操为丞相。\n7. 曹操征聘司马懿为僚属，司马懿称病，受胁迫后才接受。 8. 马腾解除了军权，到朝廷担任卫尉。其子马超接管了其军队。 \n9. 孔融全家被曹操杀死。\n10. 刘琦接任黄祖担任江夏郡太守。\n11. 刘表去世，蔡瑁、张允拥立刘琮为荆州牧。\n\n\n## 卷66\n\n1. 孙权攻打合肥，久攻不下而撤军而还。张辽、李典、乐进等屯驻合肥。 2. 周瑜率军围攻江陵，曹仁防守一年多后弃城撤走。 3. 孙权将其妹孙尚香嫁予刘备。 4. 曹操派蒋干来劝降，周瑜不为所动。\n\n5. 周瑜去世，鲁肃继任。劝说孙权，孙权同意借荆州。 6. 刘备以诸葛亮和庞统为军师。\n\n7. 孙权任命歩骘（zhi）为交州刺史，岭南开始归属孙权。\n\n8. 曹操派司隶校尉钟繇（yao）和夏侯渊讨伐张鲁，马超、韩遂等十部疑心图己而反叛，曹操亲征，马超、韩遂逃亡凉州。安定被曹操围攻，杨秋献城投降。\n\n9. 张松劝说刘璋接刘备入蜀以攻张鲁，黄权、王累劝说无效，刘备入川，在葭（jia）萌关收买人心，不攻张鲁。\n\n10. 孙尚香回吴，赵云、张飞夺回刘禅。 11. 曹操诛杀了卫尉马腾，灭其三族。\n\n12. 荀彧因为反对给曹操加九赐，曹操非常不满，荀彧服毒而死。\n\n13. 张松被其兄出卖而死，刘备攻打刘璋，节节胜利。刘璋部下李严等人投降，大将张任战死。 14. 曹操率大军攻打孙权的濡(ru)须口，两军相持不下，孙权劝说，曹操撤军。\n\n15. 马超全部兼并了陇西的军队，联合张鲁军队攻打凉州，凉州刺史韦康无法抵挡，献城投降，被马超杀死，并打败了夏侯渊的援军。杨阜（fu）等人起兵为韦康报仇，打败了马超，杀死了马超的妻儿，马超投奔了张鲁。杨阜因功被封侯。\n\n## 卷67\n\n1. 夏侯渊打退了马超的进攻，又出兵打败了韩遂，最终平定了陇右地区。 2. 吕蒙出谋，甘宁出力，孙权攻取了皖城，以吕蒙为庐江太守，回军驻守在寻阳。\n\n3. 诸葛亮率领张飞、赵云攻取了巴东（建安、白帝城），后在巴郡（江州、重庆）生擒了严颜，与刘备在成都会师。期间，庞统雒（luo）县中箭而死。 4. 刘备派李恢説降了马超。\n\n5. 刘璋投降，刘备占领了益州，大封功臣，收降人才，益州安定。\n\n6. 伏皇后被曹操害死，亲属被杀者一百多人。曹操的女儿曹贵人被立为皇后。\n\n7. 曹操攻打张鲁，受阻于阳平关，因为部下迷路而找到出路，得以攻陷阳平关，张鲁逃亡，曹操占领汉中。主簿司马懿和刘晔劝说曹操乘机攻占益州，不准，后又后悔。后来，张鲁率领庞德等投降了曹操。 \n8. 孙权索要荆州，刘备不还。于是，吕蒙出兵，长沙、桂阳投降，零陵也用计夺取。刘备求和，双方划分了荆州。\n9. 孙权率军十万攻打合肥，张辽威震逍遥津，孙权狼狈而逃。\n\n## 卷68\n\n1. 曹操攻打濡须口，孙权防守。曹操撤退，孙权投降，双方议和。周泰率领朱然、徐盛驻守濡须口。 \n2. 曹丕被立为太子后暗自高兴，辛毗（pi）之女辛宪英叹息魏将不昌。\n3. 刘备率军攻打汉中，驻扎在阳平关。\n\n4. 鲁肃去世，吕蒙接任。\n \n5. 陆逊扫灭了东部三郡的盗贼。\n\n6. 曹操派其子曹彰讨伐代郡的乌桓叛军。曹彰作战勇猛，所向披靡。鲜卑首领轲（ke）比能也请求投降，于是，北方全部平定。\n\n7. 黄忠在法正的指挥下，在定军山斩杀夏侯渊。曹操亲自对抗刘备，赵云用空营计，打败曹军。曹操率领全军撤退，刘备占据汉中。\n\n8. 关羽率军攻打襄阳郡的樊城，于禁被俘、庞德被杀，曹仁死守樊城。徐晃前来救援，打败了关羽。吕蒙设计，糜芳投降，江陵失陷，关羽士兵离散，败走麦城，被马忠杀死。不久，吕蒙突然去世。\n\n","slug":"資治通鑑/资治通鉴小结009-068卷-汉纪","published":1,"updated":"2018-06-07T14:00:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjaobrim0023j5ly80qiifv1","content":"<h1><span id=\"资治通鉴小结-009-068-卷-汉纪\"> 资治通鉴小结 009 - 068 卷 汉纪</span></h1>\n<h2><span id=\"卷9\"> 卷9</span></h2>\n<ol>\n<li>秦三世子婴投降刘邦，秦朝灭亡。刘邦与秦地百姓约法三章。</li>\n<li>楚国项羽在新安城活埋了投降的20万秦军。</li>\n<li>曹无伤出卖刘邦，项羽摆鸿门宴。刘邦在张良项伯等人的帮助下逃回军营。</li>\n<li>项羽杀死子婴，火烧秦宫室，大火3个月不绝。</li>\n<li>项羽分封诸侯，自封为“西楚霸王”</li>\n<li>田荣收编彭越，兼并了三齐。</li>\n<li>夏侯婴举荐韩信，不被重用；萧何月下追韩信，刘邦拜韩信为大将军</li>\n<li>张良用计调动项羽攻打田荣，刘邦乘机扩张。项羽打败田荣，立田假为齐王。田荣被百姓杀死。因为项羽抢掠齐国，齐国百姓反叛。后田横打败田假，平定三齐。</li>\n<li>陈平叛楚投汉，刘邦宠爱陈平，让他监督诸将。</li>\n<li>刘邦率领几十万联军突袭了项羽的彭城，项羽轻骑回救，彭城之战，项羽以少胜多，杀得刘邦联军尸横遍野。</li>\n<li>韩信俘获魏王魏豹，平定魏国；随后俘获代相夏说，平定代国；刘邦随后调走韩信的精兵去荥（xing）阳防守楚军。在荥阳战场，汉将灌婴带领的骑兵打败了楚军骑兵。</li>\n</ol>\n<h2><span id=\"卷10\"> 卷10</span></h2>\n<ol>\n<li>韩信和张耳攻打赵国，背水一战，虚张声势，杀死陈馀，俘获赵王，赵国平定。随后，韩信采用李左车的计策，燕国投降。</li>\n<li>刘邦使者随何说服九江王黥（qing）布叛楚归汉。楚国派龙且（ju）打败黥布，派项伯收编了九江的军队。</li>\n<li>陈平离间楚国君臣关系，项羽猜忌手下，范增被气死。</li>\n<li>项羽攻破荥阳，刘邦逃走。辕生献耗敌计，不与项羽交战。项羽攻打彭越，刘邦又占领成皋。项羽打跑彭越后，又攻下荥阳成皋，刘邦逃到韩信的赵国驻地，收缴了其军队，刘邦又重整士气。</li>\n<li>汉臣郦食其说降齐国。韩信听从蒯彻劝说，乘机攻下了齐都临淄。郦食其被煮杀。楚国龙且来援，被韩信在澭水用水攻打败，龙且被杀，齐王被俘获。不久，三齐平定。韩信请求代理齐王，刘邦听从张良等人意见，封韩信为齐王。</li>\n<li>项羽又去攻打梁地的彭越，曹咎失守成皋，项羽被迫返回，与刘邦在广武对持。项羽深感缺乏外援，说降韩信失败，便要求与刘邦单挑，被拒绝。但项羽的气势吓退了汉军神射手楼烦。</li>\n<li>楚汉议和成功，楚军解阵回归，张良又劝说刘邦乘机偷袭楚军。</li>\n</ol>\n<h2><span id=\"卷11\"> 卷11</span></h2>\n<ol>\n<li>汉军追击楚军被打败。刘邦听从张良劝说，分封韩信彭越，俩人便率兵前来。联军包围项羽，楚军粮尽，垓（gai）下之战项羽冲出包围，但心灰意冷，自刎乌江。汉军5人因为分尸而封侯。</li>\n<li>刘邦回军到定陶县，便接管了韩信的军队，封韩信为楚王，彭越为梁王。</li>\n<li>刘邦即皇帝位，是为汉高祖。</li>\n<li>齐王田横被招安，田横及其五百宾客自杀。</li>\n<li>齐人楼敬说服汉高祖迁都长安，封为逢春君，赐姓刘，是为刘敬。</li>\n<li>张良辟谷求仙。</li>\n<li>燕王藏荼（tu）反叛，被讨灭，汉高祖封宠臣卢绾（wan）为燕王。</li>\n<li>韩信杀好友楚将钟离昧表清白，仍旧被汉高祖软禁，后被释放，封为淮阴侯。</li>\n<li>汉高祖分封诸侯，大赏功臣。</li>\n<li>匈奴冒顿杀父，自立为单于。不久，灭掉东胡，赶跑月氏（zhi）。乘楚汉之争时，扩张势力，有精兵30万。</li>\n<li>叔孙通受命制定礼仪。</li>\n<li>汉高祖不听刘敬劝说攻打匈奴，被冒顿40万精兵围困在白登山，后采用陈平的计策，得以逃出。</li>\n<li>萧何大修宫室，汉高祖大怒，萧何却说是为了显示威严。</li>\n</ol>\n<h2><span id=\"卷12\"> 卷12</span></h2>\n<ol>\n<li>刘敬劝说汉高祖用公主和亲匈奴，吕后反对，用平民女子封为公主和亲。</li>\n<li>戚夫人劝说汉高祖立儿子赵如意为太子，汉高祖本身也有意，但是大臣大多反对，周昌口吃说服汉高祖。</li>\n<li>陈希反叛，联合匈奴，汉高祖亲征，采用收买分化策略，予以平定。韩信想响应，被诱杀。汉高祖要煮杀蒯彻，被蒯彻说服。</li>\n<li>彭越被控告谋反，被废为平民。向吕后求情，被杀死。汉高祖又要煮杀栾（luan）布，栾布辩解得以自由。</li>\n<li>汉朝派陆贾说服赵佗，封赵佗为南越王。陆贾还写了《新语》。</li>\n<li>淮南王黥布造反，汉高祖带病亲征，黥布败退，被农民杀死。</li>\n<li>汉高祖在讨伐黥布过程中又中流箭，不久病情加重，去世。太子刘盈即位，是为汉惠帝。吕后掌权。</li>\n<li>吕后乘汉惠帝不在，毒死赵王刘如意，并将其母戚夫人弄成“人猪”。汉惠帝得知后，很伤心，每天饮酒淫乐，不理政事。</li>\n<li>相国萧何去世，曹参继任相国，“萧规曹随”，百姓安心。几年后，曹参去世，以王陵为右丞相，陈平为左丞相。和汉高祖临终遗言一样。</li>\n<li>留侯张良去世。</li>\n<li>汉惠帝去世，吕太后令张皇后收养子即位为帝，吕太后掌权。</li>\n</ol>\n<h2><span id=\"卷13\"> 卷13</span></h2>\n<ol>\n<li>吕太后分封吕氏为王。陈平等人隐忍负重。</li>\n<li>汉少帝得知身世真相后想报仇，被吕太后杀死。立刘弘为帝。</li>\n<li>诸吕把持朝政，刘章行酒杀吕氏，朝臣倚重刘章，刘氏势力有所回复。</li>\n<li>在陆贾的帮助下，陈平和周勃文武联合，吕氏窃位的野心渐减。</li>\n<li>吕太后去世，刘章暗中让其兄齐王刘襄起兵西征。朝廷派灌婴讨伐，两者暗中联合。陈平命郦寄夺取吕后侄子赵王吕禄的兵权，吕氏一族灭亡。</li>\n<li>大臣商量皇位人选，最后确立代王刘恒，是为汉文帝。汉朝历史上最有才华的一位皇帝诞生，开启了“文景之治”</li>\n<li>贾谊，袁盎才华显露。</li>\n</ol>\n<h2><span id=\"卷14\"> 卷14</span></h2>\n<ol>\n<li>淮南王刘长的母亲愤恨而死，刘长也是愤恨而死。前者是无权无势，而后者则靠着文帝的宠爱，杀恩人审其食，后更加骄横，竟然造反。被抓后仍旧不服，愤恨而死。袁盎则因为刘长的死而建议杀丞相、御史大夫赎罪，最后杀了些县令</li>\n<li>张释之按法办案，为此多次惹汉文帝愤怒。但周勃还是含冤被关进大牢，幸得作为儿媳的公主相救得出。</li>\n<li>贾谊未雨绸缪，提出将大诸侯分成多个小诸侯的推恩令，可惜汉文帝并未重视。但是他提出的以礼治国却得到了文帝的重视。</li>\n<li>匈奴冒顿（modu）去世，儿子老上单于即位。文帝强迫中行说辅佐下嫁的翁主。中行说投降单于，教匈奴识字和对汉朝傲慢。</li>\n</ol>\n<h2><span id=\"卷15\"> 卷15</span></h2>\n<ol>\n<li>汉文帝听从贾谊节制诸侯的意见，改淮阳王刘武为梁王，梁国辽阔，有大县40多个。一年后，贾谊去世，年仅33岁。</li>\n<li>颍川人晁错上书得到赏识，很多意见被采纳。</li>\n<li>缇萦代父受刑，感动文帝，文帝废去肉刑。</li>\n<li>冯唐易老，李广难封。</li>\n<li>新恒平的欺诈被拆穿，汉文帝不再热心祭祀鬼神。</li>\n<li>匈奴连年入侵，汉文帝恢复了和匈奴的和亲关系。这年，老上单于去世，其子车臣单于即位。</li>\n<li>匈奴又入侵，周亚夫因为军纪严明而被汉文帝重用。</li>\n<li>汉文帝去世，汉文帝在位23年，自身节俭谦逊，国家安定，百姓富裕，后世很少能够做到。</li>\n<li>太子刘启即位，是为汉景帝。丞相申屠佳因景帝多采用晁错的意见而被气死。晁错越发尊贵。</li>\n<li>梁王因为是窦太后的小儿子，受到太后和景帝的宠爱。而自身也不收敛，大修宫室。</li>\n</ol>\n<h2><span id=\"卷16\"> 卷16</span></h2>\n<ol>\n<li>晁错上书削藩，吴王、胶西王、胶东王、川王、济南王、楚王、赵王反叛，史称“七王之乱”。</li>\n<li>袁盎建议杀晁错平息叛乱，汉景帝同意了。晁错身死而叛乱不息，汉景帝又后悔了。</li>\n<li>周亚夫不受君命，不顾梁王的求援，按照原计划切断了围攻梁国睢阳（今河南商丘南）的，吴楚联军的粮草运输线，吴楚联军因为缺粮大败。同时栾布也打败胶西、胶东、川王等叛军，解救了齐国国都临淄之围；随后水淹了叛军赵国的国都邯郸。七国之乱平定。</li>\n<li>燕王臧荼的孙女藏儿的大女儿王夫人生下后来的汉武帝刘彻。</li>\n<li>梁王派人刺死袁盎，汉景帝迫于窦太后不吃饭而宽恕了梁王，表面上维持和好关系，不久，梁王去世。</li>\n<li>匈奴经常入侵，李广勇猛超人。</li>\n<li>长公主刘嫖要嫁女给太子刘荣，被栗姬拒绝。便嫁给了王夫人的儿子刘彻。长公主用计，太子刘荣被废，刘彻被立为太子。</li>\n<li>周亚夫因为购买殉葬用的盔甲被捕入狱，绝食而死。</li>\n<li>汉景帝去世，太子刘彻即位，是为汉武帝。</li>\n</ol>\n<h2><span id=\"卷17\"> 卷17</span></h2>\n<ol>\n<li>汉武帝出题选拨人才，董仲舒脱颖而出，被重用。董提出“罢黜百家，独尊儒术”。</li>\n<li>汉武帝喜爱儒家学说，而窦太后则喜爱黄老学说。</li>\n<li>外戚窦婴人情冷落，外戚田汾则门庭若市。</li>\n<li>馆陶公主刘嫖因为拥立汉武帝有功，多次干预国政，引起汉武帝不满。而其女儿陈皇后独占宠爱却没有生育，越加被汉武帝冷落。</li>\n<li>汉武帝在其姐平阳公主处遇到歌女卫子夫，接入宫中，对其宠爱有加，并重用其同母弟卫青。</li>\n<li>汉武帝多次微服出游，司马相如、东方朔劝谏，不听。</li>\n<li>闽越王郢发兵攻打南越国，南越国求援，汉武帝派王恢和韩安国分兵二路攻打闽越国。郢的弟弟余善和贵族杀死郢，向王恢投降。汉武帝封立丑为越繇王。后余善自立，汉武帝被迫封余善为东越王。</li>\n<li>汲黯（an）治理东海郡，抓大放小，无为而治。百姓交口称赞。汉武帝将其升为朝官，汲黯直言劝谏，多次惹怒汉武帝。但汉武帝称汲黯为社稷之臣。</li>\n</ol>\n<h2><span id=\"卷18\"> 卷18</span></h2>\n<ol>\n<li>李少君以长生之术而被汉武帝尊敬，他死后，燕齐之地神仙之术蜂起。</li>\n<li>王恢献计，引诱匈奴入马邑包围圈而歼灭之。韩安国反对在和亲期间挑衅匈奴。结果，在最后时刻，匈奴发觉，汉朝劳民伤财，王恢被逼自杀。从此，匈奴频繁入侵。</li>\n<li>黄河决口，汲黯奉命征发十万劳工堵塞决口，始终没有成功。丞相田汾为了提高自己封地的收入而上书不必治理，汉武帝同意了。</li>\n<li>窦婴失去权势后，只有灌夫没有离开。灌夫多次醉酒冒犯丞相田汾，田汾便告发灌夫违法事，窦婴援救，在王太后的坚持下，窦婴、灌夫被处死。几个月后，田汾去世。</li>\n<li>唐蒙出访南越返回，建议从夜郎出兵，出其不意的攻打南越。汉武帝为此用军士修通往西南夷的道路。结果，军士死伤、巴蜀不安，最终没有成功。</li>\n<li>陈皇后因为女巫师楚服诅咒案而被废，但因为窦太主刘嫖的关系，仍旧受到优待。后来，卫夫人生下皇子刘据，被立为皇后。</li>\n<li>张汤与赵禹共同制定严厉的法令，从此用法更加严苛。</li>\n<li>卫青、李广等攻打匈奴，卫青因功被封侯，李广兵败被俘后逃脱，出钱赎罪后成为平民。不久，因为战事又被启用，匈奴人很害怕李广，称之为“飞将军”</li>\n<li>公孙弘、主父偃等人因为上书而得到汉武帝的宠爱。主父偃提出推恩令，被采纳，从此诸侯被分割。提出建筑朔方城也被采纳。因为他的告发，燕齐两国覆灭，赵王害怕成为下一个，便告发主父偃，在公孙弘的坚持下，主父偃被灭族。汲黯多次告发公孙弘的奸诈，但汉武帝却更加信任他。</li>\n<li>匈奴军臣单于去世，其弟自立为单于，军臣单于的儿子投奔汉朝被封侯，不久去世。</li>\n<li>张骞奉命出使月氏（zhi），想联合攻打匈奴，没有达成目标。</li>\n</ol>\n<h2><span id=\"卷19\"> 卷19</span></h2>\n<ol>\n<li>卫青多次带兵讨伐匈奴，被拜为大将军。期间部下赵信战败被匈奴诱降。</li>\n<li>淮南王刘安和衡山王刘赐消除以往的矛盾，约定一起反叛朝廷. 事情败露，被赐死，受牵连者多达万人。其中，因为张汤的坚持，伍被和庄助也被杀死。</li>\n<li>霍仲儒与卫青的姐姐卫少私通，生下霍去病。霍去病跟随卫青征战，经常带领精兵脱离大部队去寻找战绩，结果军功居首，汉武帝封其为冠军侯。</li>\n<li>汉朝多次与匈奴作战，杀敌1千，自损八百，以致财政枯竭。汉武帝下令可以用钱买官和免罪。</li>\n<li>张骞从月氏归来，得知有商路可以到达西域。汉武帝下令打通道路，可惜没有成功。</li>\n<li>霍去病带兵攻打匈奴，斩杀很多，部下立功很快，但却不爱惜部下。卫青谦和，但部下很难立功，因此卫青的部下大多投向霍去病。而汉武帝也看重他。</li>\n<li>李广跟随卫青霍去病攻打匈奴，汉武帝说他运气差，因此没有得到卫青的重用，再加上没有向导，导致迷路。卫青传唤，李广自杀。李广带兵40年，始终没有升官。他死时，军民都痛哭。</li>\n<li>匈奴浑邪王和休屠王向汉朝投降，霍去病奉命接应，休屠王反悔，被浑邪王杀死，浑邪王部下反叛，被霍去病杀死。汉武帝为迎接浑邪王，向百姓强借马匹，以粉饰繁华。不久休屠王的儿子因为养马被汉武帝宠爱，赐名:金日。</li>\n<li>汉朝多次出动大军攻打匈奴，匈奴终于无法承受而北逃，而汉朝也无力再次征战。针对财政的紧张的现状，汉武帝一方面任用桑弘羊等商才管理财政，一方面任用赵禹、张汤等酷吏巧立名目，搜刮钱财。而义纵、王温舒更是杀人如麻，但汉武帝却重用他们。汲黯则很早被罢免。</li>\n</ol>\n<h2><span id=\"卷20\"> 卷20</span></h2>\n<ol>\n<li>义纵因为阻扰告密之事被处死；张汤同党鲁谒居的弟弟因为误会其心意，而告发张汤，张汤在政敌设计下自杀而死，死时家财不过五百金，其政敌被汉武帝杀死；赵禹晚年一改严苛，用法宽和；王温舒仍旧严苛执法。</li>\n<li>霍仲儒回乡娶妻生下霍光，霍去病将其带入京城，保荐其做官</li>\n<li>李敢因为其父抱恨而死而将卫青打伤，卫青将此事隐瞒了起来。霍去病乘打猎之际射死李敢，汉武帝替霍去病隐瞒。不久，霍去病也去世。</li>\n<li>张骞再次建议拉拢西域的乌孙国，汉武帝同意，张骞出塞仍旧没有达到目标。但西域很多国家开始随同使者来到大汉。汉武帝派出很多使者带着厚礼出使西域，效果反而下降。为保护使臣，汉朝先后设立酒泉、武威、敦煌、张掖四郡。从汉朝到西域有 2条线路，以后成为丝绸之路。</li>\n<li>匈奴单于伊稚斜（一只鞋）去世，其子乌维接任单于。</li>\n<li>汉武帝又迷信方士栾（luan）大，被封侯拜将，贵族也大力与之交结，这样，燕齐之地神仙之术更盛。后来发觉其欺诈，将其处死，但方士公孙卿仍旧未暴露</li>\n<li>南越王赵胡去世，在汉朝充任侍卫的赵婴齐即位；赵婴齐去世，其子赵兴即位。汉朝派人说服了南越王和王太后入朝，丞相吕嘉反叛，朝廷派路博德、杨朴等讨伐，吕嘉被活捉。西南夷也大多投降汉朝，朝廷在南越和西南夷处设置郡县管理。东越王余善反叛，杨朴等人奉命讨伐，余善被部下杀死。朝廷将东越居民迁往江淮，于是，闽越成为荒芜之地。</li>\n<li>自己跳起来捐献财产给朝廷，后来被汉武帝扶持的带头榜样:卜式，已经无法影响平民。后来卜式上书反对盐铁专卖，汉武帝开始不满。</li>\n<li>桑弘羊管理财政，做起官商，没有增加百姓赋税，而天下财物却变得富饶，汉武帝封其为左庶长。</li>\n</ol>\n<h2><span id=\"卷21\"> 卷21</span></h2>\n<ol>\n<li>朝鲜王卫右渠不但不朝见汉朝，还阻止他国朝见，并杀死了汉使。汉武帝派杨朴、 荀彘（zhi）分兵两路攻打。开始不利，两位将领不和，后卫右渠被手下杀死。汉朝在朝鲜设立四郡。班师回朝，杨朴赎罪为民，荀彘被处死。</li>\n<li>赵破奴生擒楼兰王，攻破车师国，因为这两个国家多次抢掠汉使。</li>\n<li>乌孙国与汉朝和亲，乌孙王昆莫去世，其孙军须靡即位，是为昆弥王。</li>\n<li>卫青去世。</li>\n<li>王温舒被指控，他自杀而死。王温舒五族同灭。</li>\n<li>匈奴乌维单于去世，其子即位，称为儿单于；匈奴开始向西北迁徙。不久，儿单于去世，其叔父湖即位，不久，湖单于去世，其弟且候即位。汉朝与匈奴又开战。</li>\n<li>汉武帝经常巡视各地，仍旧迷信神仙。</li>\n<li>大宛国不献宝马，还杀死汉使。汉武帝派宠幸的李夫人的弟弟李广利为帅征讨。第一次带兵几千，西域各国不供应粮草，兵败而回。第二次大兵压境，西域各国都捐献粮草。大宛王被手下杀死。汉朝立与汉亲近的昧察即位。不久，贵族杀死昧察，蝉封被立为王，得到汉朝的承认。这次后，西域各国更加尊敬汉朝。</li>\n<li>李广的孙子李陵率领几千人攻打匈奴，被单于率大军包围。李陵边打边退，杀伤上万匈奴军，最后弹尽粮绝，李陵投降。司马迁为之辩解，被汉武帝施以宫刑。后来汉武帝原谅了李陵的孤立无援。</li>\n</ol>\n<h2><span id=\"卷22\"> 卷22</span></h2>\n<ol>\n<li>匈奴且候单于去世，孤鹿姑单于即位。弟弟的儿子被封为日逐王。</li>\n<li>公孙贺抓住大侠客朱安世，巫蛊(gu)案爆发，公孙贺被灭族。</li>\n<li>太子执法宽和，为此得罪了执法严苛辈。卫青去世，卫皇后也失宠。汉武帝怀疑周围人用巫蛊害他，江充等人便陷害太子。太子杀死江充，起兵与丞相刘屈牦率领的军队作战，民间传说太子造反，因此人们不依附太子。太子兵败，追捕中自杀，卫皇后先前也自杀。</li>\n<li>匈奴多次入侵，汉朝经常派李广利统兵对抗，互有胜负。诅咒案爆发，丞相刘屈牦被处死，李广利与匈奴作战失利后投降。不久，卫律忌恨李广利的尊宠超过自己，便设计害死了李广利。</li>\n<li>官民以巫蛊害人罪相互告发，被查多不属实，汉武帝终于醒悟，造思子宫，天下为之悲伤。</li>\n<li>汉武帝将神仙方士之士全部驱散，还下令浪费天下财力的事一律废止。</li>\n<li>马何罗造反，金日救驾。</li>\n<li>汉武帝赐死钩戈夫人，立其子刘弗陵为太子。汉武帝去世，汉昭帝即位，大将军霍光等人辅政。</li>\n</ol>\n<h2><span id=\"卷23\"> 卷23</span></h2>\n<ol>\n<li>益州24个夷人村塞全部反叛，汉朝将其镇压。</li>\n<li>燕王刘旦、齐王刘泽密谋反叛，泄密，隽不疑逮捕了刘泽，刘泽被处死，刘旦因为是至亲免予追究。</li>\n<li>金日去世。</li>\n<li>匈奴孤鹿姑单于去世，卫律和阏氏（yanzi）伪造遗嘱，壶衍单于即位，左贤王、右谷蠡王离去，匈奴从此衰落。于是开始讨好汉使，以求和亲。</li>\n<li>桑弘羊与贤良等辩论盐铁酒专卖制度和均输措施，《盐铁论》产生。后，汉昭帝废除了酒类专卖。</li>\n<li>常惠设计，苏武回归汉朝。</li>\n<li>盖长公主、上官桀父子、桑弘羊与刘旦密谋除掉霍光，14岁汉昭帝明察，保住了霍光。燕苍、杜延年上告密谋，上官桀父子、桑弘羊等被灭族，盖长公主、刘旦自杀。多人因功封侯。</li>\n<li>辽东乌桓（huan）部落逐渐强大，于是起兵反叛匈奴和汉朝，被两者打击。</li>\n<li>霍光命傅介子诱杀了匈奴所立的楼兰王，立尉图耆（qi）为王，改国名为鄯善，并派了40多人在伊循屯田，以镇抚。</li>\n</ol>\n<h2><span id=\"卷24\"> 卷24</span></h2>\n<ol>\n<li>汉昭帝突然去世，霍光舍不法的广陵王刘胥，而立昌邑王刘贺为帝。刘贺荒淫无道，霍光与张安世密谋，田延年当众拔剑威胁，刘贺被废黜。卫太子刘据的孙子刘病己得到丙吉和杜延年的推荐，被迎立为帝，是谓汉宣帝。许广汉的女儿许氏被立为皇后。</li>\n<li>田延年因为贪污，霍光等人打算为之开脱，田延年却畏罪自杀。</li>\n<li>大儒夏侯胜、为政宽和的黄霸因为非议汉武帝而被下狱。“朝闻道，夕死可矣”发生。</li>\n<li>乌孙请求讨伐匈奴，汉朝派赵充国等5位将军分兵出征，匈奴不战而逃，田顺和田广明因为逗留不前而畏罪自杀。常惠引导的乌孙军则大获全胜，常惠被封侯。</li>\n<li>京兆尹赵广汉明察，政治清明胜以往；于定国担任廷尉，执法公正。</li>\n<li>霍光夫人背着霍光，命女医生淳于衍毒死许皇后。霍光得知后，犹豫非常，最终批示淳于衍无罪。其女霍成君被立为皇后。霍后用度奢华。</li>\n<li>霍光去世，汉宣帝开始亲政。汉朝良史，以此世最多，号称“中兴”</li>\n<li>匈奴壶衍单于去世，其弟虚闾权渠单于即位。废黜前阏氏得罪左大且渠，因此和亲大计被破坏。同时发生饥荒，匈奴人和畜牧死去大半。所属的西族部落武力回归汉朝。</li>\n</ol>\n<h2><span id=\"卷25\"> 卷25</span></h2>\n<ol>\n<li>霍氏家族因为权势被逐渐削弱，阴谋造反，事泄，霍皇后被废，霍氏被灭族。</li>\n<li>龚遂治理饥荒的渤海，不费一兵一卒，平息了盗贼，百姓家中也有了积蓄。</li>\n<li>京兆尹赵广汉因为私怨杀人，并威胁丞相魏相，即使有官民为之请求，仍旧被汉宣帝处死。</li>\n<li>莎车王的弟弟联合邻国势力，杀死莎车王自立，汉使冯奉世征调西域军队，攻破莎车，并平息西域南路的反叛，威震西域。</li>\n<li>汉宣帝知道原昌邑王刘贺不足为虑后，封其为海昏侯。</li>\n<li>汉宣帝终于得之丙吉等人对己的恩德，便用封侯等来回报。当时丙吉病重，夏侯胜断定有阴德的人不会未享功德而死，果然，不久，丙吉痊愈。</li>\n<li>张安世不居功，爱荐才。但和其子张延寿都为侯，内心不自安。汉宣帝很敬重他。不久，张安世去世。</li>\n<li>颍川太守黄霸治理政绩，天下第一。</li>\n<li>羌人解除了内部仇怨，联合起来。首领狼何向匈奴借兵。赵充国洞察，为汉宣帝设谋献策</li>\n</ol>\n<h2><span id=\"卷26\"> 卷26</span></h2>\n<ol>\n<li>义渠安国激怒羌人，羌人反叛。再次破坏安羌大计。70多岁的赵充国自荐征羌，他采用分化策略，汉宣帝群臣辩难，赵充国耐心的予以说服。羌人最终不战而降，先零首领杨玉等也被羌人杀死，羌乱平定。汉宣帝最终不听赵充国的意见，后任命的辛汤虐待羌人，羌人再度反叛，辛武贤也因为私怨害死赵充国儿子。</li>\n<li>盖宽饶上书劝谏宦官当政，被汉宣帝逼死。</li>\n<li>匈奴虚闾权渠单于去世，被废的前阏氏和其弟左大将拥立右贤王为握衍朐鞮（qudi ）单于，单于凶残，日逐王率众投降汉朝。</li>\n</ol>\n<h2><span id=\"卷27\"> 卷27</span></h2>\n<ol>\n<li>匈奴东部贵族拥立呼韩邪单于，征兵打败了握衍朐鞮单于，后者自杀。呼韩邪单于于是解散军队，后被屠耆单于打败。匈奴混乱，出现五单于并世。后来，郅支单于打败呼韩邪单于，呼韩邪单于归附汉朝。</li>\n<li>韩延寿与萧望之相互告发，韩延寿被处死。百姓争相献酒肉，韩延寿自言死而无恨。</li>\n<li>丞相丙吉去世，黄霸被任命为丞相，做了几件荒唐事后便不敢再建议。</li>\n<li>乌孙刘解忧的侍女冯夫人擅长外交。汉朝派她划乌孙为大小昆弥。分别以元贵靡和乌就屠为王。元贵靡因病去世，儿子星靡（mi）即位。冯夫人自荐镇抚乌孙，被批准。</li>\n<li>汉宣帝去世，以史高、萧望之、周堪为辅政大臣。太子即位，是为汉元帝。</li>\n<li>王政君被选入太子宫，生下汉成帝。</li>\n</ol>\n<h2><span id=\"卷28\"> 卷28</span></h2>\n<ol>\n<li>王政君被立为皇后。</li>\n<li>萧望之、刘更生、周堪、金敞四人辅佐汉元帝，史高被冷落。于是与宦官石显等联合，萧望之被逼死。汉元帝易欺又不明忠奸，石显等人专权，以后刘更生、周堪也被罢官。</li>\n<li>匈奴呼韩邪单于开始强盛，于是北迁。</li>\n<li>陇西羌人反叛，汉成帝不听冯奉世出兵4万的建议，只出1万2的兵马，结果兵败后又出兵6万，羌人被打败。</li>\n</ol>\n<h2><span id=\"卷29\"> 卷29</span></h2>\n<ol>\n<li>因为朝廷财政不足，又恢复了盐铁专卖制度。同时，废除了祭庙。汉元帝对汉宣帝的法令制度也多有改变。</li>\n<li>冯奉世的女儿冯婕妤舍身喂虎，汉元帝感叹，受宠的傅婕妤不满。</li>\n<li>京房因为天象之术被汉元帝宠爱，京房劝说汉元帝远离石显，道理说得很透切，汉元帝也认为很对但是不想改变。最终，京房被石显害死。</li>\n<li>陈汤胁迫甘延寿，假传圣旨，征发了西域15国的军队，分南北两路，斩杀了在康居国的郅支单于。首级送入京城，满朝庆贺。但因为甘延寿得罪石显，两人被弹劾，最后虽然得到刘向（原名刘更生）等人的维护，但官职反而只是校尉。</li>\n<li>匈奴呼韩邪单于来朝见，请求和亲，昭君出塞。另外上书请求撤销边防，被侯应以十大理由制止。</li>\n<li>汉元帝去世，太子即位，是为汉成帝，以舅父王凤为大将军，管理朝政。</li>\n</ol>\n<h2><span id=\"卷30\"> 卷30</span></h2>\n<ol>\n<li>石显失去靠山，被免官，绝食而死。其党羽也被罢黜。</li>\n<li>汉成帝大封王氏家族。王氏五侯奢侈，专权。许嘉的女儿徐氏被立为皇后。</li>\n<li>呼韩邪单于去世，两位阏氏谦让继承权，复株累若单于即位。再娶王昭君为妻。</li>\n<li>匡衡失势，便告发陈汤盗用康居王的财物。陈汤被免官。进入王凤幕府，被重用。</li>\n<li>杜钦辅佐大将军王凤，多有善政。杜钦推荐王延世治理黄河。成功，王延世被封侯。后王延世再次堵塞决口成功被赏赐。</li>\n<li>西夷夜郎国王兴反叛，被新上任的柯郡太守陈立斩杀。后其岳父翁指反叛，被陈立讨伐，翁指被部下杀死。西夷平定。</li>\n<li>刘向写《洪范五行传论》，劝谏王凤兄弟专权。汉成帝不改。</li>\n<li>王商因为得罪王凤，在王凤坚持下，被免官，吐血而死。</li>\n<li>王章劝说汉成帝用冯野王代替王凤，被王音探知，告诉王凤。汉成帝最终没有废黜王凤，王章被处死，冯野王被罢官。杜钦多次劝说王凤收敛，不被采纳。王凤更加专权，汉成帝被架空。</li>\n</ol>\n<h2><span id=\"卷31\"> 卷31</span></h2>\n<ol>\n<li>王凤在职11年去世，建议王音接替自己。汉成帝同意。</li>\n<li>匈奴复株累单于去世，弟弟搜谐单于继位。</li>\n<li>王氏五侯竞相奢华，汉成帝故意大怒，以恐吓他们。</li>\n<li>汉成帝微服出行，在阳河公主处得到歌舞女赵飞燕，后又征召其妹入宫，对其非常宠爱，许皇后被废，班请求到太后处以自保。</li>\n<li>王莽为博取名声不择手段。</li>\n<li>汉成帝终于封赵飞燕为皇后，其妹为赵昭仪。赵飞燕公开淫乱，然而汉成帝不相信，赵飞燕也始终无子。</li>\n</ol>\n<h2><span id=\"卷32\"> 卷32</span></h2>\n<ol>\n<li>匈奴搜谐单于在朝见途中去世，其弟车牙单于继位。</li>\n<li>定陶王刘欣被立为太子，只有孔光认为应该立中山王刘兴，孔光被贬官。</li>\n<li>宠臣淳于长戏弄前废后许氏，王莽首先告发，淳于长被免官，党羽被清洗。</li>\n<li>王音在职7年，王商接替大司马辅政。三年后去世，由王根接替大司马辅政，在职4年，王莽接替大司马辅政。</li>\n</ol>\n<h2><span id=\"卷33\"> 卷33</span></h2>\n<ol>\n<li>汉成帝逼死丞相崔方进以承天变。</li>\n<li>汉成帝突然去世，赵昭仪被逼自杀，太子即位，是为汉哀帝。 定陶傅太后专横，傅氏与王氏争权，太皇太后王政君隐忍，王莽辞去大司马。</li>\n<li>张由为求自己脱罪，陷害中山冯太后（为汉元帝挡熊），史立和傅太后都是帮凶，冯太后自杀。在傅太后的怒气下，汉哀帝顺从，孙宝、唐林、傅喜等人无法为冯氏案平反</li>\n</ol>\n<h2><span id=\"卷34\"> 卷34</span></h2>\n<ol>\n<li>汉哀帝外戚丁、傅两族骄奢，看不惯傅喜节俭，于是攻击诽谤，傅喜被免官。孔光也因为不被傅太后所喜，也被免官。此外，王莽、师丹等人也或贬官或被送回封国。</li>\n<li>汉哀帝母亲丁氏去世。</li>\n<li>函谷关以东地区民众无故惊走，传递王母书，从春季到秋季，影响26个郡国。</li>\n<li>汉哀帝为宠臣董贤修宅院，造墓室，并大封其亲属，宠爱董贤胜于爱自己，连丁、傅两族都嫉恨。</li>\n<li>郑崇被赵昌进谗害死，孙宝劝谏被贬为民。</li>\n<li>乱世惑众之臣息夫躬、傅喜献计，故意招惹匈奴。</li>\n</ol>\n<h2><span id=\"卷35\"> 卷35</span></h2>\n<ol>\n<li>发生日食，孔光再次被启用，王莽等也返回京城。董贤则借日食，阻止了息夫躬等人挑衅匈奴的计策。</li>\n<li>傅太后去世，息夫躬等人遭弹劾，被免官。</li>\n<li>大儒鲍宣上书，何武、彭宣被再次启用。</li>\n<li>孔光弹劾丞相王嘉，王嘉入狱，吐血而死。死前后悔没有启用孔光等人。</li>\n<li>孔光被任命为丞相。傅喜被贬为平民。何武、彭宣再次启用。鲍宣却因为折辱丞相获罪服役。董贤位列三公，主管尚书事务，孔光迎合董贤。</li>\n<li>汉哀帝去世。汉朝的大业从汉哀帝时，开始衰落。</li>\n<li>太皇太后王政君收走玉玺，启用王莽。董贤被罢免后自杀。王莽被推举为大司马，主管尚书事务。孔光又迎合王莽。丁氏、傅氏、董氏覆灭。</li>\n<li>中山冯太后案平反，郑崇案平反。</li>\n<li>中山王刘箕（ji）子即位，是为汉平帝，年9岁，王莽把持国政，排除异己，欺世盗名。</li>\n</ol>\n<h2><span id=\"卷36\"> 卷36</span></h2>\n<ol>\n<li>王莽的女儿被推举为汉平帝的皇后。</li>\n<li>吕宽事件爆发，汉平帝的母族被屠杀的只剩下卫太后一人。王莽长子王宇被逼服毒而死。王莽乘机牵连，不归附者全被处决。其中包括何武、鲍宣、王立、王仁等。</li>\n<li>孔光越来越恐惧，不久，去世。葬礼盛大。</li>\n<li>汉平帝因为母亲卫太后的事而怨恨王莽，被毒死。王莽代行皇帝职务。</li>\n<li>刘崇造反被杀，东郡太守崔义拥立刘信为帝，起兵造反。有十多万人。京城各县盗贼爆发，赵明势力最强。也有十多万人。不久，崔义被杀、刘信逃亡，赵明也被杀。各地恢复秩序。王莽策划做真皇帝。</li>\n</ol>\n<h2><span id=\"卷37\"> 卷37</span></h2>\n<ol>\n<li>王莽称帝，建立新朝，乱改名称，国家没有制度，管理混乱。</li>\n<li>匈奴因换印等事而与中国决裂，派兵攻打边境。戊己校尉属员杀死校尉投降匈奴。西域焉耆首先反叛，杀死西域都护，西域与新朝决裂。益州蛮夷也反叛。</li>\n<li>王莽集结兵粮，12路将军讨伐匈奴，各地盗贼蜂起。</li>\n<li>王莽改革币制，全国经济崩溃。</li>\n</ol>\n<h2><span id=\"卷38\"> 卷38</span></h2>\n<ol>\n<li>匈奴栾提咸因为王莽的财物而勉强与新朝和好，但掳掠如故。不久，栾提咸去世，其弟栾提舆继位。王莽继续招惹匈奴，双方关系更加恶化。</li>\n<li>王莽提防臣下，事事过问，以致政事大量堆积。军人因为得不到吃穿而做盗贼。政事琐碎，官吏因领不到俸禄而贪赃枉法。富人不能保财，穷人不能活命，于是盗贼蜂起。王匡、王凤领导绿林军，樊崇领导赤眉军。声势浩大。</li>\n<li>新朝几十万大军攻打益州蛮夷，军队中毒气损失惨重，民众也疲惫。</li>\n<li>廉丹等率精兵十万讨伐赤眉军，被赤眉董宪部打败。</li>\n<li>绿林军遭遇瘟疫，死亡近半。于是，王常等人的下江兵进入南郡；王凤等人的新市兵进入南阳。</li>\n<li>南阳刘演刘秀兄弟在舂（chong）陵起兵，派刘嘉说服了新市兵、平林兵，3方联合。</li>\n<li>刘演进攻宛城甄阜失败，刘秀亲属很多被杀。后刘秀兄弟说服下江兵王常，4方联合，夺取了甄阜的物资。</li>\n</ol>\n<h2><span id=\"卷39\"> 卷39</span></h2>\n<ol>\n<li>刘演联军斩杀甄阜，又打败严尤军，于是包围宛城。青、徐两州义军也声讨王莽，于是，王莽害怕。</li>\n<li>。新市兵、平林兵抢先立刘玄为更始帝，大封亲近之人，豪杰失望。</li>\n<li>宛城守将岑（cen）彭粮食吃完，率全城投降了刘玄军，因为刘演说情，岑彭得以保全。</li>\n<li>王寻几十万大军包围昆阳，刘秀征兵归来，率领3000敢死军冲击王寻主账，王寻轻敌，不准其他部队帮忙，因此，王寻被杀。王莽大军溃散。昆阳之战，天下震动，拥护刘玄。</li>\n<li>冯异在巾车乡被擒，投降了刘秀，并说服父城投降。</li>\n<li>李轶、朱鲔（wei）劝说刘玄，刘演被杀。刘秀主动前往宛城请罪，忍辱负重，得以幸存。</li>\n<li>天水隗嚣起兵，以方望为军师。攻占了平襄、陇西、敦煌等地。</li>\n<li>成都公孙述假冒刘玄诏书，打败了宗成，兼并了其军队。</li>\n<li>刘玄军攻入长安，王莽被分尸，新朝灭亡。</li>\n<li>刘秀奉命修复洛阳，其属下官员仪表威武，有见识的人都归心刘秀。</li>\n<li>刘玄迁都洛阳，并派使者巡行各郡国。刘赐说服更始帝，刘秀代理大司马，巡行河北。</li>\n<li>上谷寇询，从刘玄使者手中夺回印信，保全了太守耿况；彭宠、吴汉靠同乡关系，分别被任命为代理渔阳太守和安乐县令；赤眉军樊崇晋见刘玄，大失所望，于是逃回；刘永被封为梁王，首府睢（sui）阳。</li>\n<li>南阳邓禹千里投奔刘秀，邺城对策，深得刘秀欢心。。主薄冯异献策，让属员巡行郡县，被采纳。</li>\n<li>耿纯感于刘秀法令与众不同，与刘秀结交</li>\n<li>刘林等在邯郸拥护王朗称帝，燕赵响应。</li>\n<li>刘玄命丞相刘赐修复长安，又迁都长安。娶赵萌女儿，赵萌专权，滥封亲信，于是，关中离心，全国怨恨。</li>\n<li>耿况的儿子耿弇（yan）进见刘秀，蓟城献计：只要征发上谷、渔阳弓骑1万，便可对抗王朗。恰好此时蓟城变乱，响应王朗，刘秀逃亡到信都。和戎太守邳彤（pitong）说服刘秀不回长安，而留在河北。于是信都太守任光、邳彤等人征募了精兵4000，虚张声势，攻打王朗。耿弇在蓟城与刘秀离散后，便回到上谷。上谷渔阳联合，耿弇、吴汉等各率领3000步骑联合攻打王朗，所向披靡，在广阿与刘秀会合。</li>\n<li>刘秀与拥兵10万的真定王刘扬联姻，团结起来，一起攻打王朗。</li>\n<li>刘秀在巨鹿受阻，耿纯献计，绕开巨鹿，主力直捣邯郸，李立开城，邯郸陷落，王朗被王霸杀死。</li>\n<li>汉中王刘嘉打败延岑，延岑投降，刘嘉于是拥兵10万。贾复、陈俊被他推荐到刘秀处。</li>\n<li>刘玄下令让刘秀解散军队回朝，刘秀被耿弇说服，并不听从，于是，两方离心。</li>\n<li>耿弇、吴汉又到幽州征调突骑，刘秀军力强盛。于是打败铜马等义军。于是，部众达到几十万。</li>\n<li>刘秀假意与刘玄派来的援军谢躬亲善，后乘机派岑彭占领了邺城，吴汉斩杀了谢躬。于是，刘秀兼并了谢躬的部众。</li>\n<li>公孙述打败了刘玄来犯的李宝、李忠军，自称蜀王。建都成都。当地百姓和夷族归附。</li>\n<li>赤眉军厌战，于是，樊崇、徐宣分二路攻打长安。</li>\n<li>刘秀派邓禹攻打长安，冯异对抗洛阳，寇询保证军需，而刘秀自己则夺取燕赵。</li>\n<li>隗嚣检举亲人隗崔、隗义的反叛密谋，两人被杀，隗嚣被提升为御史大夫。</li>\n<li>梁王刘永大量招募豪杰，并以周建等为统帅，攻占了28城。同时封董宪、张步等义军为大将军，于是，称霸青、徐两州</li>\n<li>秦丰在黎丘起兵，自称楚黎王，有几万人。</li>\n<li>汝南人田戎攻陷夷陵，自称扫地大将军，也有几万人。</li>\n</ol>\n<h2><span id=\"卷40\"> 卷40</span></h2>\n<ol>\n<li>刘秀攻打尤来、大枪等贼军，因为轻敌冒进被打败。陈俊献计：坚壁清野。贼军因抢掠不到粮草而溃散。</li>\n<li>冯异劝降驻守洛阳的李轶，奏效。但刘秀却公开李轶的书信，李轶被朱鲔派人刺杀。</li>\n<li>将领们多次劝说刘秀称帝，不从。耿纯将其说服，刘秀称帝。邓禹为大司徒。根据《赤伏符》任命王梁为大司空，再想以此任命大司马，被部下反对，吴汉被任命为大司马。</li>\n<li>邓禹平定河东。</li>\n<li>刘玄军内乱，刘玄诛杀了多位亲信。</li>\n<li>赤眉军拥立刘盆子为帝。实际上，刘盆子只是挂名而已。赤眉军攻入长安。刘玄被刘恭、严本、谢禄等保护。但刘玄最终被谢禄勒死。其亲属被宛王刘赐收留。</li>\n<li>刘秀军围攻洛阳几个月而未攻下，于是派岑彭说服守将朱鲔，朱鲔投降，被封侯（后来，封爵世代相传）。刘秀便定都洛阳</li>\n<li>梁王刘永在睢阳称帝。刘秀派盖延、马武等打败了刘永，将其围困在睢阳城，苏茂反叛，投降刘永。盖延再次打败来援的苏茂、周建等人。刘永等逃亡。</li>\n<li>隗嚣从刘玄处逃回天水，便招募部众，马援也来投奔，于是威震西方。</li>\n<li>窦融被推举为河西五郡代理大将军。其为政宽和，属地安定富足，兵强马壮。</li>\n<li>卢芳在安定称雄，以匈奴为依靠。</li>\n<li>张步抗拒刘玄任命的琅邪太守王闳（hong），后两人和好。由王闳掌握郡务。后张步接受了刘秀使臣伏隆册封的东莱太守职。</li>\n<li>真定王刘扬制造谶（chen）文，谋取称帝。刘秀派其亲戚耿纯，让其暗中将其逮捕。耿纯设计杀死了刘扬。</li>\n<li>渔阳彭宠因为心怀怨恨，再加上蓟城朱浮逼迫而起兵反叛。</li>\n<li>延岑再次反叛，汉中王刘嘉战败逃亡。公孙述乘机占领汉中。进而占领了益州全境。</li>\n<li>盖延、马武等打败刘永，将其围困在睢阳城，苏茂反叛，投降刘永。盖延再次打败来援的苏茂、周建等人。刘永等逃亡。</li>\n<li>吴汉攻打宛城刘赐，刘赐带着刘玄的亲属投降刘秀，被封侯。</li>\n<li>阴丽华谦让，郭贵人被立为皇后，其子刘强为太子。</li>\n<li>邓奉因为吴汉抢掠其新野家乡而反叛。击溃了吴汉军，并与各路贼军联合。</li>\n<li>赤眉军因为长安军粮吃完而西向。被隗嚣的部将杨广打败；赤眉军逢安攻打延岑，被延岑打得打败；赤眉军18万攻打汉中王刘嘉，也被刘嘉打得大败。后刘嘉依靠姐夫来歙的关系，在邓禹处向刘秀投降</li>\n<li>赤眉军和延岑军在长安地区作乱，而邓禹无能为力，于是，冯异受命接替邓禹。</li>\n<li>长安地区发生饥荒，出现人吃人，于是，20万赤眉军东归。与冯异在华阴相遇，双方对抗60多天。有5000赤眉军将士投降。</li>\n</ol>\n<h2><span id=\"卷41卷\"> 卷41卷</span></h2>\n<ol>\n<li>\n<p>邓禹因为身受重任却无功劳，多次率领饥饿的士兵攻打赤眉军，次次失败。冯异劝说无效，也被牵累兵败。</p>\n</li>\n<li>\n<p>冯异设计，大败赤眉军，收降8万人，残部在宜阳遇到刘秀大军，于是投降。后来，樊崇、逢安因为谋反被诛杀。徐宣在故乡去世，刘盆子以收地租为生。刘恭杀死谢禄，为刘玄报了仇，被刘秀赦免。 3. 齐地张步因贪图刘永的王爵而杀死了刘秀的使臣伏隆，张步占领12郡，称霸齐地。 4. 涿（zhuo）郡张丰反叛，与渔阳彭宠联合。</p>\n</li>\n<li>\n<p>朱浮因为粮食吃尽而被耿况救走，蓟城于是向彭宠投降。彭宠自称燕王，夺取上谷等地，并联合贼军，依靠匈奴。后彭宠被奴仆子密等3人杀死，首级送往长安。祭遵将彭宠的家族全部杀死。 6. 刘秀亲征，大败邓奉。因为朱祜（hu）调和，邓奉投降。岑彭、耿弇劝说，邓奉被杀。 7. 冯异打败延岑，并在赵臣粮草援助下，打败了境内贼军，基本平定关中（长安）。</p>\n</li>\n<li>\n<p>吴汉攻打苏茂、周建，先败后胜。睢阳叛乱，迎接刘永进城，吴汉协助盖延包围了睢阳。盖延包围睢阳100天，刘永等突围，刘永被部下庆吾杀死。苏茂、周建拥立刘永的儿子刘纡为梁王。王霸、马武打败了苏茂、周建。周建侄子周诵（song）献出垂惠城投降，周建死于逃亡中，刘纡、苏茂逃到下邳与董宪会合。 9. 延岑攻打南阳，被耿弇打得大败。延岑便与黎丘联合，又被朱祜打败。朱祜与岑彭汇合。</p>\n</li>\n<li>\n<p>岑彭攻打秦丰，将其包围在黎丘。同时岑彭派傅俊平定了扬州。岑彭围攻秦丰三年，斩杀了9万人，秦丰剩余军队仅1000人，而且粮草将尽。刘秀命朱祜围攻秦丰，岑彭、傅俊则被派去攻打田戎。朱祜猛攻秦丰，秦丰投降，被刘秀处死。 11. 李宪在庐江称帝，部众10万。</p>\n</li>\n<li>\n<p>来歙出使天水隗嚣处，隗嚣来长安进见刘秀。但后来，隗嚣并不想归顺刘秀，又谋划称帝。 13. 延岑攻打顺阳，又被邓禹打败，于是逃往汉中被公孙述封为大司马。</p>\n</li>\n<li>\n<p>夷陵田戎打算投降岑彭，但姐夫辛臣抄小路先投降，田戎起疑，于是又反叛。与秦丰联合，被打败后又返回夷陵。后岑彭攻打夷陵，田戎逃到公孙述处。 15. 祭遵猛攻涿郡张丰，生擒张丰。</p>\n</li>\n<li>\n<p>东海郡董宪部将贲休献出兰陵县向刘秀投降，盖延等不听刘秀谋划，兵败，董宪攻陷兰陵县，诛杀了贲休。刘秀亲征董宪联军，苏茂投奔齐地张步，董宪、庞萌逃亡，被追杀。 17. 成都公孙述多次攻打长安地区，冯异和隗嚣联合，打败了公孙述。</p>\n</li>\n<li>\n<p>吴汉、耿弇、王常在平原郡打败富平、获索军，追击到渤海，有4万人投降。 19. 庞萌怀疑盖延在刘秀处说了坏话，于是反叛，打败了盖延，与董宪联合，自称东平王。 20. 河西窦融归顺刘秀，被任命为凉州牧。</p>\n</li>\n<li>\n<p>耿弇斩杀张步大将费邑，平定济南郡。后又多次打败张步，平定齐地。耿弇为将，一共平定46个郡，攻占了300座城，未尝一败。</p>\n</li>\n<li>\n<p>五原人李兴等从匈奴迎回卢芳，定都九原。夺取了北方几座城。 23. 冯异治理长安，功效显著。 24. 岑彭劝降，湖广投降。</p>\n</li>\n<li>\n<p>窦融封莎车王康为西域大都尉，西域55国全隶属于莎车。</p>\n</li>\n</ol>\n<h2><span id=\"卷42卷\"> 卷42卷</span></h2>\n<ol>\n<li>吴汉斩杀董宪、庞萌，崤山以东平定。</li>\n<li>隗嚣不听从劝说，对抗刘秀军，大将王元打败东汉军队。马武断后，军队得以返回。</li>\n<li>冯异抢先占领要地，打败隗嚣大将行巡，后又击败卢芳部将和匈奴的军队。占领了北地郡、安定等地。</li>\n<li>窦融率军攻打隗嚣同党先零羌首领封何等，大破羌族。 5. 刘秀让马援招降隗嚣将领，没有成效。 6. 隗嚣向公孙述称臣。</li>\n<li>卢芳诛杀了五原太守李兴，朔方、云中献城投降。</li>\n<li>来歙（xi）突袭，攻下隗嚣心腹之地略阳。隗嚣来攻，几个月不下。</li>\n<li>刘秀亲征，命王遵招降了隗嚣部下，隗嚣逃亡。隗嚣逃亡西域，投奔部下杨广。不久，杨广去世，隗嚣穷途末路。</li>\n<li>张步逃亡，被陈俊斩首。</li>\n<li>吴汉因为贪图军队多而导致粮草日减，王元、行巡、周宗带领公孙述援军攻来，刘秀军撤退。岑彭断后，全军保全。隗嚣又夺取了陇西，北地、安定等地。 12. 高句（gou）丽王派使者来朝贡。</li>\n<li>隗嚣患病，愤恨而死。王元等拥立其子隗纯为王。据守翼县。 14. 来歙统帅冯异等5位将军讨伐隗纯。</li>\n<li>吴汉攻打卢芳部将贾览，匈奴来援。吴汉处于劣势。 16. 祭遵去世，冯异接管军队。不久，冯异在攻打隗纯时去世。</li>\n<li>耿弇围攻隗嚣部将高俊据守的高平城。一年未下，光武帝派寇询劝降，寇询杀死高俊军师兼使者皇甫文，高俊投降。</li>\n<li>来歙攻陷落门。周宗、行巡献出隗纯投降，王元投奔公孙述。</li>\n<li>岑彭打败田戎，田戎据守江州。</li>\n<li>马援被来歙举荐为陇西太守，进击羌族，大获全胜。 21. 公孙述派人刺杀了来歙，马武接管了其军队。</li>\n<li>岑彭攻打公孙述，攻势如暴风骤雨，势不可挡。</li>\n<li>藏宫打败公孙述部将延岑，收降了十万军队，王元也来投降。 24. 公孙述派人刺杀了岑彭，监军郑兴暂领军队，等吴汉赶到后接替。 25. 马成平定武都，马成马援讨伐羌人。将投降的羌人迁徙到陇西。</li>\n</ol>\n<h2><span id=\"卷43\"> 卷43</span></h2>\n<ol>\n<li>\n<p>吴汉进攻成都公孙述，占领其要害之地广都。又一次不听刘秀劝告，兵败，后八战八胜。进入成都外城。 2. 冯骏攻陷江州，俘获田戎。</p>\n</li>\n<li>\n<p>藏宫攻陷涪（fu）城，斩杀公孙恢，与吴汉在成都会师。</p>\n</li>\n<li>\n<p>延岑招募敢死队，打败了吴汉，又打败了藏宫。公孙述在交战中受重伤，当夜去世。将军队交给延岑，延岑投降。吴汉将公孙述和延岑灭族。 5. 参狼羌等侵犯武都，被陇西太守马援击败。</p>\n</li>\n<li>\n<p>卢芳联合匈奴、乌桓攻打北方边境，守将杜茂多次与之战斗，无法取胜。九原留守随昱（yu）投降，卢芳逃走。</p>\n</li>\n<li>\n<p>耿弇等将领交出兵权，以侯爵身份离开朝廷。只有邓禹、贾复、李通留在朝廷。 8. 窦融被任命为大司空，几次辞官，不准。</p>\n</li>\n<li>\n<p>大司徒韩歆（xin）因为激烈直率，刘秀无法忍受，将其免官。后又逼死了他。</p>\n</li>\n<li>\n<p>匈奴因为贪图赏赐而让卢芳投降。卢芳自请降不提匈奴，匈奴因为得不到赏赐，大恨，侵犯更胜。卢芳投降后又叛归匈奴，十多年后，在匈奴去世</p>\n</li>\n<li>\n<p>郭皇后因受宠而怨恨，被废，阴贵人被立为皇后。</p>\n</li>\n<li>\n<p>交趾女子征侧、征贰反叛，蛮人响应，共攻占了65座城。马援、伏隆奉命征讨，斩杀了征侧姐妹。岭南平定。</p>\n</li>\n</ol>\n<h2><span id=\"卷44\"> 卷44</span></h2>\n<ol>\n<li>\n<p>南郡蛮人反叛，刘尚将其击败。武陵蛮人相单程等反叛，刘尚讨伐，因轻敌而全军覆没。马援自请讨伐，在壶头受阻，军队遭遇瘟疫，不久马援去世，梁松等人便诬陷马援，光武帝大怒，唯有被马援轻视的朱勃上书鸣冤。马援监军假传诏旨，蛮人杀死其首领，投降。蛮人之乱平定。</p>\n</li>\n<li>\n<p>匈奴单于舆杀死应当继位的兄弟知牙师，而立其子蒲奴即位。前单于乌珠留的儿子比统领南方八部落，非常愤怒，被拥立为呼韩邪单于，投降汉朝，是为南单于。汉朝设立匈奴中郎将。 3. 东汉设立乌桓校尉。</p>\n</li>\n<li>\n<p>北匈奴请求和亲，不被允许。北匈奴多次讨好汉朝。</p>\n</li>\n<li>\n<p>光武帝因为谶（chen）文去泰山封禅。桓（huang）谭因为反对谶（chen）文被贬官，病死途中。 6. 南匈奴比去世，弟弟莫继位，汉朝授玺成为常例。不久，莫去世，弟弟汉继位。不久，汉去世，前单于比的儿子适继位。</p>\n</li>\n<li>\n<p>光武帝去世，皇太子刘庄即位，是为汉明帝。</p>\n</li>\n<li>\n<p>汉明帝同母弟山阳王刘荆写匿名信劝东海王刘强造反，被汉明帝掩盖起来。不久，东海王因病去世，汉明帝悲痛。刘荆又招引占星家谋划变乱，汉明帝又宽恕了他。</p>\n</li>\n<li>\n<p>西羌烧当部强盛，首领滇（dian）吾入侵陇西，汉朝军队多次战败，窦固、马武奉命讨伐。马武击败烧当羌，余皆降散。</p>\n</li>\n<li>\n<p>辽东郡太守祭彤派鲜卑首领偏何讨伐赤山乌桓，杀其首领，塞外各部落纷纷归附鲜卑，东汉屯边部队全部撤走。</p>\n</li>\n<li>\n<p>窦融家族富贵无人能比。其子护羌校尉窦林因为贪赃枉法被处死，批准窦融回家养病。 12. 马援之女马氏被立为皇后，皇子刘立被立为太子，马皇后贤明，可惜无子。</p>\n</li>\n<li>\n<p>莎车王贤用武力强占了于阗（tian）等三国，于阗人杀死了守将，拥立休莫霸为王，并打败了贤的军队，并包围莎车，休莫霸中流箭而死。于阗于是拥立广德为王，莎车和于阗恢复了和亲关系。</p>\n</li>\n</ol>\n<h2><span id=\"卷45\"> 卷45</span></h2>\n<ol>\n<li>\n<p>梁松因为怨恨朝廷被处死。</p>\n</li>\n<li>\n<p>于阗王广德率领西域各国将莎车王杀死，匈奴攻击，广德投降。后广德又杀死了匈奴所立的莎车王不居徵，改立齐黎为莎车王。</p>\n</li>\n<li>\n<p>南匈奴打退侵犯云中郡的北匈奴军队。南匈奴适去世，苏继位，不久，苏去世，单于适的弟弟长继位。 4. 阴太后去世。</p>\n</li>\n<li>\n<p>北匈奴实力仍旧强盛，汉明帝同意双边贸易。郑众出使北匈奴，坚决不行叩拜之礼。北匈奴仍旧侵犯边境，南匈奴也因为汉朝与北匈奴通好而怨恨，与北匈奴沟通，汉朝为防备，设立度辽营。 6. 汉明帝从天竺国引入了佛教。</p>\n</li>\n<li>\n<p>广陵王刘荆相面谋叛被告发，不久自杀。</p>\n</li>\n<li>\n<p>王景治理汴渠，用水闸调节水流，耗费百亿钱财。 9. 此时，天下太平，百姓富足。</p>\n</li>\n<li>\n<p>最信佛教的楚王刘英谋划叛乱，被废掉王位。刘英自杀。受牵连者众多，马皇后等乘久旱下雨劝谏，汉明帝醒悟。</p>\n</li>\n<li>\n<p>耿秉上书进攻北匈奴，汉朝四路大军讨伐北匈奴，只有窦固有功，祭彤无功获罪，愧恨而死，辽东百姓四季祭祀他。</p>\n</li>\n<li>\n<p>窦固部下班超在鄯善率36人杀死北匈奴使者团，鄯善归顺汉朝；随后出使于阗，杀死巫师，于阗归顺；西域各国与汉朝中断了65年后，又开始交往。</p>\n</li>\n<li>\n<p>北匈奴攻打云中郡，太守廉范虚张声势，以少胜多，北匈奴从此不敢进犯云中。 14. 益州刺史朱辅宝扬汉朝德政，西南夷归顺的很多。</p>\n</li>\n<li>\n<p>班超派部下田虑劫持了匈奴所立的疏勒王，立忠为疏勒王。疏勒国归顺。 16. 窦固、耿秉出兵西域，打败北匈奴。耿秉平定车师，设立西域都护和戊、己校尉。</p>\n</li>\n<li>\n<p>北匈奴杀死车师后王安得，又攻打戊校尉耿恭，被耿恭用毒箭吓退。不久，耿恭在疏勒城用泉水惊退北匈奴。</p>\n</li>\n<li>\n<p>汉明帝去世，太子即位，是为汉章帝。</p>\n</li>\n<li>\n<p>焉耆（qi）和龟兹进攻西域都护陈睦，陈睦全军覆没。北匈奴在柳中城围攻己校尉关宠。车师也反叛，与北匈奴一起攻打戊校尉耿恭。耿恭兵少粮尽，仍旧坚守。汉朝征发7000人前往救援。</p>\n</li>\n</ol>\n<h2><span id=\"卷46\"> 卷46</span></h2>\n<ol>\n<li>\n<p>司徒鲍昱进谏，汉章帝同意楚王案中流放人员返回家乡。</p>\n</li>\n<li>\n<p>酒泉太守段彭率军攻打车师，北匈奴惊慌而逃，车师投降。范羌率军2000，营救耿恭，最终仅13人返回。汉章帝撤销了西域都护和戊、己校尉。班超也被征召回国，但由于疏勒于阗等国的哭劝而留了下来。 3. 汉章帝打算封舅父为侯，被马太后阻止。</p>\n</li>\n<li>\n<p>安夷县官吏强抢羌族妇女，被其夫杀死。官吏追查，该部落因为害怕而反叛。烧当羌首领迷吾联合其他部落一同反叛，马防、耿恭讨伐，羌人投降。耿恭因得罪马防被免官。 5. 窦勋的儿女被封为皇后。 6. 宋大贵人的儿子刘庆被封为太子。</p>\n</li>\n<li>\n<p>马防、马光、马廖被封侯，马太后生气，三人辞官被批准。马太后去世。</p>\n</li>\n<li>\n<p>班超请求平定西域，汉章帝派徐干率领1000人支援。但西域反复无常，班超四处攻打，汉朝也不时派点军队支援。</p>\n</li>\n<li>\n<p>窦皇后无子，收养梁小贵人的儿子刘肇（zhao）为子。于是陷害宋贵人姐妹，太子刘庆被废，刘肇被立为太子。宋贵人姐妹自杀。</p>\n</li>\n<li>\n<p>窦皇后为使窦家成为太子刘庆的唯一舅家而陷害梁家，梁贵人姐妹自杀。</p>\n</li>\n<li>\n<p>马家因为骄纵而获罪，窦家更加兴盛，也更加放纵。窦皇后的哥哥窦宪掌管禁军，他依仗皇后强占了公主的庄园，被查后未被治罪。</p>\n</li>\n</ol>\n<h2><span id=\"卷47\"> 卷47</span></h2>\n<ol>\n<li>\n<p>北匈奴四方受敌，一部分人投降汉朝，大部被迫向远方迁徙。</p>\n</li>\n<li>\n<p>南匈奴长去世，前单于汗的儿子宣继位。不久，宣去世，前单于长的弟弟屯屠何继位。</p>\n</li>\n<li>\n<p>烧当羌迷吾等再次反叛，攻打陇西郡。其弟号吾被生擒。太守张纡（yu）同意释放号吾，烧当羌撤军。 4. 疏勒王忠诈降，被班超斩首。西域南道畅通。</p>\n</li>\n<li>\n<p>护羌校尉傅育招惹羌人，离间羌人与胡人的关系被识破。羌人反叛，归附迷吾。傅育追击被杀死。张纡被任命为护羌校尉。迷吾战败依附张纡，迷吾极其800首领被毒死。迷吾儿子迷唐与其他部落解除仇怨，在大、小榆谷反叛，实力强盛，张纡无法制服。 6. 班超声东击西，莎车投降、龟兹等莎车援军撤走。</p>\n</li>\n<li>\n<p>汉章帝去世，仅31岁，太子即位，是为汉和帝，窦太后摄政。窦宪掌握机要，窦氏兄弟掌握要职。 8. 根据汉章帝遗诏，取消盐铁专卖制度。</p>\n</li>\n<li>\n<p>窦宪因为怕刘畅分其权势而将其暗杀，不久，事情败露，窦宪因为害怕被杀而自动请求攻打北匈奴。 10. 张掖太守邓训接替张纡被任命为护羌校尉，他优待胡人，招降羌人，并派任尚打败了迷唐。迷唐部众离散。</p>\n</li>\n<li>\n<p>窦宪、耿秉等和南匈奴一起攻打北匈奴，斩杀1万多人。窦宪又诱使北匈奴投降，看到其势弱，再加上南匈奴想一统匈奴，于是便又偷袭北匈奴。北匈奴单于逃亡不知所踪。窦宪因功被封为大将军。南匈奴则日益强盛，拥兵5万。</p>\n</li>\n<li>\n<p>窦宪派人偷袭了西域伊吾的北匈奴守军，车师前后国投降。</p>\n</li>\n<li>\n<p>月氏因求娶公主不得而发兵7万攻打班超。班超坚壁清野，月氏军被打败，月氏投降，年年进贡。 14. 窦氏专权，只有窦喜修身自好，上下都依赖袁安。</p>\n</li>\n<li>\n<p>龟兹等国向汉朝投降，汉朝重新设立西域都护、戊、己校尉和骑都尉。班超被任命为西域都护，驻守龟兹。徐干被任命为长史，驻守疏勒。西域仅焉耆等三国没有归附汉朝。</p>\n</li>\n<li>\n<p>汉和帝最终不顾袁安的激烈反对，同意了窦宪另封北匈奴于除为单于的建议。</p>\n</li>\n</ol>\n<h2><span id=\"卷48\"> 卷48</span></h2>\n<ol>\n<li>\n<p>汉和帝派人授予北匈奴于除印信，一如南匈奴先例。 2. 袁安去世。</p>\n</li>\n<li>\n<p>窦氏党羽谋划杀害和帝，和帝与中常侍郑众、清河王刘庆等谋划，窦宪等被逼自杀，党羽全部罢官。和帝论功行赏，刘庆一向行为谨慎，郑众也谦让，和帝认为郑众是贤臣，于是常与他商量政事。宦官掌权，从此开始。</p>\n</li>\n<li>\n<p>班固因为奴仆辱骂洛阳令，而被陷害致死。《汉书》由其妹班昭续写完成。 5. 护羌校尉邓训去世，官民夷族深切怀念。</p>\n</li>\n<li>\n<p>北匈奴于除叛逃回北方，被汉军斩杀，其部众也被消灭。鲜卑占据了原北匈奴故地，接受了残余的北匈奴人，鲜卑日益强盛。</p>\n</li>\n<li>\n<p>护羌校尉贯友离间羌人关系，并派兵打败了迷唐，迷唐向远方迁徙。</p>\n</li>\n<li>\n<p>匈奴单于屯屠何去世，前单于宣的弟弟安国继位，投降的北匈奴人归附，但族人归心前单于适的儿子师子。汉朝边将也阻碍安国与朝廷的通信。不久，安国被其舅父杀死，师子被拥立为单于。 9. 西域都护班超征发龟兹等八国军队，杀死了焉耆王广等。</p>\n</li>\n<li>\n<p>20万投降的北匈奴人反叛，拥立封侯为单于，被汉军打败，于是逃亡塞外。 11. 阴识的曾孙女阴贵人被立为皇后。</p>\n</li>\n<li>\n<p>车师后王攻打车师前王，俘获了其妻儿。西域长史王林出兵斩杀了后王。</p>\n</li>\n<li>\n<p>窦太后去世，汉和帝知道了其母梁小贵人冤死的经过，宽恕了窦太后。和帝厚待梁氏家族，梁氏从此兴盛。</p>\n</li>\n<li>\n<p>刘庆请求为其母宋大贵人扫墓，被批准。</p>\n</li>\n<li>\n<p>班超派属官甘英出使大秦和条支王国，甘英走遍了西海。</p>\n</li>\n<li>\n<p>汉朝招降了不少羌人，迷唐因为恐惧而投降，并进京朝贡。后又再次反叛，被候霸打败，于是投靠发羌部落，多年后去世，其子前来投降，部众只剩下几十户。 17. 南匈奴单于师子去世，前单于长的儿子檀（tan）继位。 18. 鲜卑攻打右北平，又攻打渔阳，被汉军打败。 19. 阴皇后嫉妒心强，因为失宠而怨恨，被废。</p>\n</li>\n<li>\n<p>班超年老思乡，多次申请回朝，被批准。不久，去世。戊己校尉任尚接替西域都护，不听班超忠告，终于断送了西域的和平。</p>\n</li>\n<li>\n<p>邓禹的女儿邓贵人被立为皇后。邓皇后贤明。 22. 汉和帝打破常例，封宦官郑众为侯。</p>\n</li>\n<li>\n<p>高句（gou）丽入侵辽东，被太守耿夔（kui）打败。</p>\n</li>\n<li>\n<p>汉和帝去世，婴儿刘隆继位，邓太后摄政。 25. 北匈奴逢侯多次请求归附，不准。</p>\n</li>\n</ol>\n<h2><span id=\"卷49\"> 卷49</span></h2>\n<ol>\n<li>\n<p>汉殇帝去世，刘庆的儿子刘祜被邓氏家族迎立为帝，是为汉安帝，邓太后仍旧摄政 2. 清河王刘庆去世。</p>\n</li>\n<li>\n<p>西域反叛，汉朝撤销西域都护，并将屯田官兵接回了汉朝本土。 4. 因为征兵和官吏的欺压，羌人再次反叛。</p>\n</li>\n<li>\n<p>鲜卑首领燕荔阳来汉朝朝见，汉朝开通边塞贸易，鲜卑送来人质。但鲜卑的入侵仍旧不止。</p>\n</li>\n<li>\n<p>任尚与羌人大战，大败，8000人战死。邓骘（zhi）领兵经常战败，但邓太后仍旧任命邓骘为大将军。但邓骘在位上也能推举贤能。</p>\n</li>\n<li>\n<p>羌人首领滇零在北地称帝。招纳羌人并攻打益州。被梁慬（jin）打败。 8. 京城洛阳发生饥荒，出现人吃人现象。</p>\n</li>\n<li>\n<p>乌桓、鲜卑、南匈奴联合，出兵7000攻打五原郡，汉军大败。南匈奴单于也攻打耿仲，被梁慬、耿夔打败，南匈奴投降，梁慬被任命为度辽将军。</p>\n</li>\n<li>\n<p>虞诩因为阻止了邓骘放弃凉州的计划而被派到叛乱的朝歌县做县长。虞诩以内应+埋伏平定了朝歌县。 11. 海匪张伯路多次攻打青州，法雄将其打败，最终被辽东人斩杀，青州平定。</p>\n</li>\n<li>\n<p>羌人势力转强，前线修堡垒防守。羌人首领滇零去世，儿子零昌继位。护羌校尉候霸、骑都尉马贤多次打败羌军。</p>\n</li>\n<li>\n<p>虞诩建议任尚集资买马追击羌人，被同意，任尚打败敌人</p>\n</li>\n<li>\n<p>邓太后听说虞诩的才华，任命他为武都郡太守，虞诩多用诈术，以少胜多打败了羌人。</p>\n</li>\n</ol>\n<h2><span id=\"卷50卷\"> 卷50卷</span></h2>\n<ol>\n<li>\n<p>任尚多次打败羌人首领零昌，俘获了其妻儿。并派人刺杀了杜季贡。又收买号封刺杀了零昌，号封被封为羌王。攻打先零羌人首领狼莫，狼莫战败而逃。羌族虞人部落向邓遵投降，陇右平定。</p>\n</li>\n<li>\n<p>邓遵收买羌人雕何刺杀了狼莫，羌人于是瓦解，为平定三辅和益州的羌人叛乱，朝廷共耗费军费240多亿，国库为之枯竭，百姓死伤无数。</p>\n</li>\n<li>\n<p>任尚与邓遵争功，再加上贪赃枉法，被处死。</p>\n</li>\n<li>\n<p>班勇与官员辩论西域的取舍意义，其意见被采纳，汉朝在敦煌驻军500以控制西域 5. 汉安帝已经成年，官员凡是劝邓太后还政的，都被判罪。</p>\n</li>\n<li>\n<p>邓太后去世，汉安帝将邓氏家族全部免官，邓遵等人自杀。汉安帝奶妈王圣，中常侍江京、攀丰等人乘机掌权，阎皇后家族也被封官，他们都骄横不法，司徒杨震多次上书告发，无效。 7. 高句丽多次入侵边境，后遂成继位为国王，前来归顺，东部边境平静。</p>\n</li>\n<li>\n<p>班勇被任命为西域长史，率军800驻守柳中城。班勇征调龟兹等国军队，赶跑了匈奴，车师前国归附。 9. 攀丰等人借天相陷害太尉杨震，杨震被免官，服毒而死。</p>\n</li>\n<li>\n<p>南匈奴单于檀去世，弟弟拔继位。因为度辽将军耿夔征调频繁，新归降的部落首领阿族等人反叛，被马翼率胡人骑兵将其全部斩获。</p>\n</li>\n<li>\n<p>王圣、攀丰等人又陷害太子等人，太子刘保被废，大臣反抗无效。</p>\n</li>\n</ol>\n<h2><span id=\"卷51\"> 卷51</span></h2>\n<ol>\n<li>\n<p>汉安帝在巡行途中突然去世，年仅32岁。阎氏家族和宦官江京等人不立原太子济阴王刘保，而立年幼的北乡侯刘懿继位。</p>\n</li>\n<li>\n<p>阎显指使人弹劾，攀丰等人被处死，大将军耿宝自杀，王圣母子被流放，阎氏家族掌权，作威作福。 3. 班勇率军生擒车师后王军就和匈奴使者，在索班阵亡处斩首。</p>\n</li>\n<li>\n<p>北乡侯刘懿去世，宦官孙程等人斩杀江京，拥立11岁的济阴王刘保为帝，是为汉顺帝。阎氏家族覆灭，孙程等人被封侯，宦官势力更盛。</p>\n</li>\n<li>\n<p>陇西钟羌反叛，被马贤斩杀1000人，钟羌投降，凉州安定。</p>\n</li>\n<li>\n<p>司隶校尉虞诩多次弹劾贪赃枉法的官员和宦官，险些获罪。后弹劾宦官张防弄权，入狱，险些被害死，宦官孙程和宦官高梵联合救援，张防被流放，同犯尚书贾朗等被处死，虞诩升为尚书仆射（ye） 7. 虞诩举荐左雄，左雄被任命为尚书。</p>\n</li>\n<li>\n<p>西域所有国家归顺汉朝，只有焉耆王元孟没有投降，于是班勇和敦煌太守张朗分南北两路攻打。张朗为赎罪抢先攻打，元孟投降，班勇因为“迟到”被免官。 9. 南匈奴拔去世，其弟休利继位。</p>\n</li>\n<li>\n<p>班超孙子班始，因妻子阴城公主骄横荒淫，久积怨怒爆发，杀死了公主，班始极其兄弟姐妹被处死。 11. 梁商的女儿梁贵人被立为皇后。</p>\n</li>\n<li>\n<p>汉顺帝给奶妈宋娥封爵，左雄、李固等激烈反对，于是，宋娥被迫搬出皇宫，宦官也被迫请罪。于是，宋娥和宦官陷害李固，幸亏有人救助，得救。李固辞官回乡。 13. 太史令张衡才华盖世，发明了浑天仪。</p>\n</li>\n<li>\n<p>鲜卑首领其至犍去世，鲜卑对汉朝的抢掠减少。</p>\n</li>\n</ol>\n<h2><span id=\"卷52\"> 卷52</span></h2>\n<ol>\n<li>\n<p>汉顺帝允许宦官以养子继承爵位。</p>\n</li>\n<li>\n<p>梁商被任命为大将军，梁商能洁身自好，李固、周举辅佐他。但其子梁翼则暴虐不法。 3. 汉顺帝不听虞诩的劝告，同意增加武陵蛮人的赋税，武陵蛮人反叛，被武陵太守李进平定。 4. 山阳君宋娥因诬陷罪被遣送回乡，与之勾结的宦官九侯也被遣回封国。</p>\n</li>\n<li>\n<p>李固的建议被采纳，祝良被任命为九真郡太守，张乔被任命为交趾州刺史，两人招抚了叛军和反叛的蛮人，于是，岭外安定。</p>\n</li>\n<li>\n<p>宦官张逵等人因为妒忌宦官曹腾等人与梁商联合，而向汉顺帝诬陷他们，张逵等被处死，因为梁商劝说，才没有被大范围牵连。</p>\n</li>\n<li>\n<p>南匈奴吾斯和车纽反叛，单于休利被匈奴中郎将陈龟逼杀。吾斯拥立车纽为单于，车纽投降。后汉朝立在京城洛阳的兜楼储为单于，吾斯被匈奴中郎将派人刺杀。</p>\n</li>\n<li>\n<p>马贤不忧虑军事，射姑山大战，马贤阵亡，东、西羌大规模汇合，烧杀抢掠不断。 9. 梁商去世，其子梁翼被任命为大将军，梁不疑为河南尹。 10. 皇子刘炳被立为太子。</p>\n</li>\n<li>\n<p>汉顺帝去世，2岁太子刘炳继位，是为汉冲帝，梁太后主政。</p>\n</li>\n<li>\n<p>汉冲帝去世，梁氏家族不听李固的劝告，立8岁的刘缵（zuan）为帝，是为汉质帝。梁太后主政，李固等人的建议多被采纳，但梁翼等人陷害李固等人，因梁太后反对而没有成功。 13. 藤抚平定了东南地区的盗贼。</p>\n</li>\n</ol>\n<h2><span id=\"卷53\"> 卷53</span></h2>\n<ol>\n<li>\n<p>汉质帝聪明外露，被梁翼毒死。</p>\n</li>\n<li>\n<p>梁翼胁迫大臣，蠡吾候刘志被迎立为帝，是为汉桓帝。李固因为劝阻，被免官。 3. 藤抚因得罪宦官，不但没有因功封侯，反而被罢官，后死于家中。 4. 汉桓帝迎立梁翼的妹妹为皇后。</p>\n</li>\n<li>\n<p>杜乔因多次直言，被梁翼忌恨，不久，因为天灾被免官。</p>\n</li>\n<li>\n<p>梁翼深感李固、杜乔的声名太盛，恐于己不利，于是，两人都被害死于狱中。 7. 南匈奴单于兜楼储去世，车儿继位。 8. 梁太后还政于汉桓帝，不久，梁太后去世。</p>\n</li>\n</ol>\n<h2><span id=\"卷54\"> 卷54</span></h2>\n<ol>\n<li>\n<p>南匈奴各部落同时反叛，并与乌桓、鲜卑联合进犯沿边九郡。陈龟被任命为度辽将军，上书建议任贤弃恶，被采纳，朝廷每年节省数亿经费。</p>\n</li>\n<li>\n<p>张奂被任命为北中郎将，招降了乌桓，并让其斩杀了匈奴部落首领，匈奴人全部投降。请求废掉无法服众的车儿单于而立左谷蠡王为单于，不准。</p>\n</li>\n<li>\n<p>陈龟一向与梁翼不和，又多次请求诛杀梁翼，终被陷害，回乡后绝食而死。 4. 梁皇后仗势欺人，嫉妒成性，失宠，忧愤而死。</p>\n</li>\n<li>\n<p>梁翼专权20年，汉桓帝终于无法忍受，于是，与单超等五宦官谋划，出兵包围了梁翼住处，梁氏、孙氏覆灭。抄卖梁翼财产，收入30多亿。五宦官因功被封侯。 6. 邓贵人被立为皇后。</p>\n</li>\n<li>\n<p>八部羌人入侵陇西金城塞，被护羌校尉段击败。段多次打败羌人，后被凉州刺史郭闳陷害，罚做苦役。皇甫规主动请求招降羌人，被任命为中郎将，几十万羌人归降。</p>\n</li>\n<li>\n<p>冯绲（gun）率军10万讨伐武陵蛮人。打败了蛮人，10万人归降。荆州平定，冯绲将功劳让与他人。回乡后上书弹劾贪官，被宦官怨恨，结果被罚做苦役，遇赦后回家。</p>\n</li>\n<li>\n<p>皇甫规被任命为度辽将军，他上书请求让张奂接替自己而做其副手，被批准。 10. 尚书朱穆刚直，痛恨宦官专横，多次上书罢黜宦官，不被采纳，后生毒疮而死。</p>\n</li>\n</ol>\n<h2><span id=\"卷55\"> 卷55</span></h2>\n<ol>\n<li>\n<p>荆州刺史度尚暗中派人烧毁了将士的珠宝以激励将士的讨贼之心，于是，平定盗贼，度尚因功被封侯。 2. 寇恂的曾孙侍中寇荣清高，为权贵所憎恨，被上下官员陷害而死。寇家从此衰落。 3. 邓皇后因为嫉妒被废，忧愤而死，亲族被诛杀。 4. 太尉杨秉弹劾宦官成功，宦官势力被打击。</p>\n</li>\n<li>\n<p>司隶校尉李膺等因为诛杀和弹劾奸臣而被罚做苦役。后被太尉陈蕃等人救下，重新被任命为司隶校尉，继续打击权贵，声望日高。</p>\n</li>\n<li>\n<p>度尚为自保而陷害交趾刺史张磐（pan），查明后，因功未受惩处。 7. 段对西羌穷追猛打，从春到冬不停歇，羌人于是溃散，段因功被封侯。</p>\n</li>\n<li>\n<p>汉桓帝想立采女田圣为皇后，太尉陈蕃（fan）等人反对，不得已，立窦融玄孙窦武的女儿窦贵人为皇后。 9. 鲜卑听说张奂被调回京都洛阳，便联合乌桓、南匈奴、东羌反叛，侵犯沿边九郡。于是，张奂被再次任命为护匈奴中郎将，20万人投降，只有鲜卑首领檀石槐不投降。</p>\n</li>\n<li>\n<p>郭泰、贾彪是三万太学生的首领，他们与陈蕃、李膺等人互相标榜，评议朝政得失，官员害怕被非议，因此都与之交往。</p>\n</li>\n<li>\n<p>汉桓帝信奉佛教，佛教越发盛行。</p>\n</li>\n<li>\n<p>李膺不顾赦令，斩杀了精通占卜的张成父子，引发了党人之狱，被牵连者多为天下贤士。皇甫规也想入狱，不可得。</p>\n</li>\n</ol>\n<h2><span id=\"卷56\"> 卷56</span></h2>\n<ol>\n<li>\n<p>护羌校尉段平定西羌。</p>\n</li>\n<li>\n<p>贾彪、窦武等人营救，再加上宦官也害怕事态扩大牵连其子弟，于是，党人全部被赦免，遣回故乡，终身不许做官。</p>\n</li>\n<li>\n<p>张奂派司马董卓等大败先零羌人，幽州、并州、凉州平定。因为张奂不肯奉承宦官，没有被封侯。 4. 汉桓帝去世，窦太后主政，处死了采女田圣。12岁的刘宏被迎立为帝，是为汉灵帝。窦武被任命为大将军、陈蕃为太傅。</p>\n</li>\n<li>\n<p>段率军1万讨伐先零等东羌部落，穷追猛打，誓要斩草除根。张奂上书请求招降，段上书坚持己见，终于平定东羌。为此耗费44亿，阵亡400人。</p>\n</li>\n<li>\n<p>窦武和陈蕃主持朝政，灵帝奶妈赵娆（rao）和宦官干扰朝政，于是，窦武、陈蕃出兵，用武力诛杀宦官，可惜兵败身死，窦太后被软禁。张奂因为被宦官利用而被封侯，张奂因悔恨而不接受。 7. 汉灵帝迎接其母到京都洛阳，是为董太后。</p>\n</li>\n<li>\n<p>李膺、范滂（pang）等党人互起称号，评议朝政，被宦官诬陷，党人相继而死，读书人大批被杀害。 9. 高句丽国王伯固侵犯辽东郡，玄菟郡太守耿临出兵讨伐，伯固投降。</p>\n</li>\n<li>\n<p>孟佗因为宦官而被封为凉州刺史。他派任涉率领西域联军3万人攻打疏勒王国，四个月不克，被迫撤退，朝廷无法再控制疏勒。 11. 宋贵人被封为皇后。</p>\n</li>\n</ol>\n<h2><span id=\"卷57\"> 卷57</span></h2>\n<ol>\n<li>\n<p>太傅胡广去世，享年82岁。他侍奉过安、顺、冲、质、桓、灵等六个皇帝。因为没有忠直之风，而被天下看轻。</p>\n</li>\n<li>\n<p>窦太后因为母亲去世，思念成疾，也去世。</p>\n</li>\n<li>\n<p>司隶校尉段打算驱逐张奂后将其杀害，后因张奂苦苦哀求而幸免于难。 4. 吴郡司马孙坚招募勇士，帮助州郡讨伐起兵的许生，后许生被斩杀。 5. 蔡邕（yong）多次上书，声望很高，刺客也不忍刺杀他。</p>\n</li>\n<li>\n<p>护乌桓校尉夏育请求讨伐鲜卑檀石槐，被批准。三路大军惨败，夏育等出钱赎罪，被贬为民。 7. 宋皇后被宦官陷害，在狱中忧郁而死。亲族被诛杀。 8. 汉灵帝设立机构，公开买官。以聚敛私财。</p>\n</li>\n<li>\n<p>宦官王甫（fu）、曹节专权，养子遍布天下，掌握着重要官职。太尉段也迎合顺从他们。司隶校尉阳球痛恨他们专横，于是，乘机将王甫、段等逮捕，王甫等被活活打死，段自杀。阳球还想打击豪强，被迁官。后因为诛杀曹节等的计划外泄而被处死。 10. 中常侍吕强清廉忠直。</p>\n</li>\n<li>\n<p>何贵人生下皇子刘辩，被立为皇后。其兄何进被任命为侍中。</p>\n</li>\n</ol>\n<h2><span id=\"卷58\"> 卷58</span></h2>\n<ol>\n<li>\n<p>朱俊平定交趾叛乱。</p>\n</li>\n<li>\n<p>鲜卑首领檀石槐去世，儿子和连继位，在进攻北地时被射死。其兄的儿子魁头继位。和连的儿子骞曼成人后与魁头争权，鲜卑部众离散。魁头去世后，其弟步度根继位 3. 汉灵帝在后宫修建商铺，令宫女贩卖货物。</p>\n</li>\n<li>\n<p>何皇后嫉妒心强，毒死了生下皇子刘协的王美人。汉灵帝要废后，被宦官劝阻。 5. 大长秋宦官曹节去世，由宦官赵忠代理大长秋。</p>\n</li>\n<li>\n<p>巴郡（重庆）板族人英武善战，为汉朝多次平定叛乱立下汗马功劳。但地方官府对他们征收重税，板人于是造反。朝廷招降，于是全部投降。</p>\n</li>\n<li>\n<p>张角建立“太平道”弟子几十万，遍布四方。不久，张角发动了黄巾军起义。 8. 何进被任命为大将军。卢植征讨张角，皇甫嵩、朱俊也奉命征讨颍川黄巾军。 9. 宦官吕强因为匡扶汉室而被宦官赵忠等人陷害，自杀而死。</p>\n</li>\n<li>\n<p>皇甫嵩、朱俊和援军曹操一起平定了颍川、汝南、陈国等三郡的黄巾军。皇甫嵩谦让功劳，朱俊被封侯 11. 卢植多次打败黄巾军，在广宗，因为没有贿赂小黄门左丰而被陷害，仅被免死。董卓接替了卢植。 12. 皇甫嵩在广宗斩杀张梁，又在下曲阳斩杀张宝，张角先前已经去世，于是，黄巾主力覆灭。皇甫嵩被封侯。后因为没有答应宦官索贿而被陷害，险些身死。</p>\n</li>\n<li>\n<p>朱俊、孙坚等在宛城先后斩杀黄巾军统帅赵弘、韩忠、孙夏。宛城多次被黄巾军占领，又被官军夺回。 14. 张燕率领百万黑山军投降朝廷。</p>\n</li>\n<li>\n<p>张温率领董卓、孙坚讨伐以韩遂、边章为首的西羌军，双方各有胜负。后韩遂杀死边章，吞并了其军队。张温因未能平定叛乱而被免职。</p>\n</li>\n<li>\n<p>凉州司马马腾率军造反，与韩遂联盟，共同推举王国为首领。 17. 长沙太守孙坚因为镇压长沙贼帅区星有功而被封侯。</p>\n</li>\n</ol>\n<h2><span id=\"卷59\"> 卷59</span></h2>\n<ol>\n<li>太常刘焉上书请设置州牧加强地方权力，于是，任命刘焉为益州牧，刘虞为幽州牧</li>\n</ol>\n<p>到任后，刘焉为政宽和，以收买人心。刘虞也招降了乌桓首领丘力居，并请求解散军队，只留下公孙瓒的一支军队驻扎在右北平。公孙瓒因为请求消灭丘力居不得而与刘虞结仇。刘虞将幽州治理得很好。 2. 皇甫嵩率领董卓等讨伐王国，王国战败。韩遂等废掉王国首领地位，后为了争权夺利而相互攻杀，势力开始衰落。</p>\n<ol start=\"3\">\n<li>\n<p>汉灵帝去世，宦官蹇（jian）硕诛杀何进不成。皇子刘辩即位，是为汉少帝，其母何太后主政。大将军何进和太傅袁隗（kui）主持尚书事务。</p>\n</li>\n<li>\n<p>袁绍建议何进杀尽宦官，并征召地方军队入朝做外援，何进不顾反对声，予以采纳</p>\n</li>\n<li>\n<p>宦官张让等杀死何进，司隶校尉袁绍带兵入宫尽杀宦官。张让挟持汉少帝出逃，途中被迫投河而死。董卓挟持汉少帝收降了吕布，何进的部下也来投靠，于是，董卓实力强盛。 6. 董卓废汉少帝，立刘协为帝，是为汉献帝。后毒杀了何太后和汉少帝。 7. 董卓为党人平反，并任用贤才，董卓的亲信全都没有担任高官，只在军中任职。</p>\n</li>\n<li>\n<p>董卓开始烧杀抢掠，地方割据势力共同推举袁绍为盟主，起兵讨伐董卓。曹操、袁术也是联军一员。 9. 董卓火烧洛阳，迁都长安。司徒王允曲意逢迎董卓。 10. 孙坚兵进南阳，与袁术合兵，袁术占领南阳。</p>\n</li>\n<li>\n<p>刘表被任命为荆州刺史，他单人匹马，在名士蒯越、蒯良的帮助下，平定了荆州。</p>\n</li>\n<li>\n<p>袁绍等联军畏惧董卓，坐吃粮草，曹操独自出兵，被董卓部将徐荣打败。联军因为粮草吃完而离散。不久，便相互攻杀。</p>\n</li>\n<li>\n<p>公孙度得到徐荣的推荐，担任辽东太守，他东征高句丽，西征乌桓，自立为辽东侯。</p>\n</li>\n</ol>\n<h2><span id=\"卷60\"> 卷60</span></h2>\n<ol>\n<li>\n<p>孙坚被徐荣打败。后孙坚打败来犯的胡轸（zhen）、吕布，斩杀华雄。董卓亲自攻打，也被打败。孙坚进入洛阳，吕布败走。孙坚找到传国玉玺后回到南阳所属的鲁阳。后袁术派孙坚攻打刘表，孙坚围困了襄阳城，在追击黄祖途中遇伏，中箭而死，余部投靠了袁术。 2. 袁绍采纳逢纪的计谋，收降了冀州（州治所邺城）</p>\n</li>\n<li>\n<p>曹操采纳鲍信建议，攻打兖州贼军。袁绍举荐曹操为东郡太守，曹操继续追击黄巾军，30万兵士投降，曹操选择其中精锐，组建“青州兵”。</p>\n</li>\n<li>\n<p>公孙瓒因为弟弟公孙越之死而讨伐袁绍，冀州所属大多数城池投降，袁绍恐惧。刘备率领关羽、张飞、赵云也帮助公孙瓒，驻守平原郡。后麴（qu）义率领800精兵，界桥之战，大败公孙瓒，公孙瓒逃回幽州。 5. 董卓残暴，以致人人自危。王允等人与吕布一起谋划，董卓被吕布杀死。汉献帝命令王允和吕布主持朝政。蔡邕因为同情董卓，入狱而死。王允骄傲，部属离心。</p>\n</li>\n<li>\n<p>董卓余部恐惧，贾诩建议李催（cui）、郭汜（si）等联合进军长安。吕布属下的蜀郡士兵打开长安城，长安失陷。王允等人被处死，李催、郭汜、樊稠、张济等被封侯。吕布先后投降袁术–张扬–袁绍–张扬。 7. 袁术受到刘表的逼迫，又被兖州曹操打败，最终占据了寿春。</p>\n</li>\n<li>\n<p>徐州牧陶谦亲近小人，残害贤才。其部下为钱财杀死了曹操之父曹嵩。于是，曹操出兵攻打陶谦 9. 公孙瓒逼杀了幽州牧刘虞，刘虞仁爱，百姓悲痛。田畴发誓为之报仇。</p>\n</li>\n</ol>\n<h2><span id=\"卷61\"> 卷61</span></h2>\n<ol>\n<li>\n<p>平原相刘备奉青州刺史田楷之命，救援徐州牧陶谦。曹操粮尽撤走。</p>\n</li>\n<li>\n<p>陈留太守张邈(miao)、东郡留守陈宫反叛曹操，迎接吕布入兖州。仅甄城、范县、东阿县没有归顺。曹操急忙从第二次攻徐州之战中撤回。与吕布交战，因为粮尽而各自撤退。</p>\n</li>\n<li>\n<p>益州牧刘焉因背生毒疮而死，属下因为其子刘璋温和而立为益州牧。部下甘宁等反叛失败，逃往荆州。 4. 徐州牧陶谦病死，死前推举刘备为徐州牧，刘备谦让后同意。</p>\n</li>\n<li>\n<p>孙坚之子孙策帮助袁术攻城略地，但袁术不信任他。后孙策在朱治的劝说下，带兵征讨曲阿的扬州刺史刘繇，势如破竹。</p>\n</li>\n<li>\n<p>李催等人内乱，先杀死了樊稠，后李催又与郭汜相互攻打。一人挟持天子，一人质公卿。李催势力衰落后，在张济的调和下，两人和好。后在汉献帝迁都弘农时，又有一番大混战。 7. 曹操打败吕布，吕布投靠徐州牧刘备。</p>\n</li>\n<li>\n<p>曹操攻陷了张超镇守的雍丘，东郡太守藏洪因为袁绍阻止其救援旧主而反叛。袁绍攻打藏洪一年多，无法攻下。东郡城内粮尽，饿死8000人，而军民始终没有背叛藏洪。城陷后，臧洪被杀。</p>\n</li>\n<li>\n<p>公孙瓒占据幽州全境后，睚眦必报，嫉贤妒能。刘虞部下鲜于辅、阎柔为给刘虞报仇，联合乌桓、鲜卑和袁绍部下麴义，10万联军攻打公孙瓒。公孙瓒屡战屡败，退守易县，作茧自闭，部下离散。</p>\n</li>\n</ol>\n<h2><span id=\"卷62\"> 卷62</span></h2>\n<ol>\n<li>\n<p>刘备迎战袁术，各有胜负。吕布乘机占领了张飞驻守的下邳( pi)。刘备军中缺粮，以致人吃人，于是，刘备投靠了吕布，驻守小沛。吕布自称徐州牧。</p>\n</li>\n<li>\n<p>杨奉等人护送汉献帝进入洛阳。后董承招引曹操大军进入洛阳。于是，再次迁都许县，改名许都。杨奉等阻扰迁都，被曹操打败。杨奉等投靠袁术。 3. 孙策打败会稽(kuaiji)太守王朗，王朗投降。</p>\n</li>\n<li>\n<p>袁绍之子，青州刺史袁谭攻下了孔融驻守的北海郡，孔融投奔曹操。袁谭前期励精图治，后来亲近小人，便没有大成就。</p>\n</li>\n<li>\n<p>曹操部下枣袛（di）、任峻建立了屯田制度，曹军于是粮草充足。</p>\n</li>\n<li>\n<p>袁术大将纪灵攻打刘备，吕布营门射戟，救下刘备。后刘备兵日益增多，吕布便攻打刘备，刘备投靠了曹操。</p>\n</li>\n<li>\n<p>张济攻打刘表的襄城，中箭而死。余部由族侄张绣接管，驻守宛城，贾诩来投。</p>\n</li>\n<li>\n<p>曹操攻打张绣，张绣投降。曹操纳张济妻子为妾，又收买其大将胡车儿。张绣反叛，曹操长子曹昂、典韦等战死，于禁整顿军队，打退了张绣。 9. 曹操打败袁术，袁术从此衰落。 10. 刘备设鸿门宴，杀死来结盟的杨奉等。</p>\n</li>\n<li>\n<p>吕布大将高顺率领精锐的“陷军营”攻陷了刘备驻守的小沛。刘备只身逃走。</p>\n</li>\n<li>\n<p>曹操攻打吕布，侯成等背叛，抓住陈宫、高顺送给曹操。吕布也在白门楼被俘。刘备说服曹操，吕布、陈宫、高顺被绞杀，张辽投降。</p>\n</li>\n<li>\n<p>周瑜、鲁肃离开袁术，投靠孙策。孙策率军先后打败祖郎和太史慈，两人归顺。</p>\n</li>\n</ol>\n<h2><span id=\"卷63\"> 卷63</span></h2>\n<ol>\n<li>\n<p>袁绍出兵斩杀公孙瓒，田楷也战死。 2. 袁术窘迫，愤恨而死。 3. 贾诩劝说张绣投降了曹操。</p>\n</li>\n<li>\n<p>孙策用计夺取了庐江郡，又派虞翻说服豫章郡太守华歆（xin）献上了豫章郡。</p>\n</li>\n<li>\n<p>刘备再次占领了徐州的下邳和小沛，背叛了曹操。曹操亲征，刘备战败投奔袁绍，关羽被俘。 6. 袁绍不顾田丰等人的反对，攻打曹操。</p>\n</li>\n<li>\n<p>关羽斩杀了袁绍大将颜良，解除了袁军对东郡的白马之围。关羽离开曹操，投奔刘备。 8. 鲜于辅、阎柔向曹操投降。</p>\n</li>\n<li>\n<p>孙策被已故吴郡太守许贡的门客杀死，年仅26岁，其弟孙权接任。当时，孙策已经占据了会稽、吴郡、丹阳、豫章、庐江、庐陵共6郡，不过，偏远处并没有完全归顺。</p>\n</li>\n<li>\n<p>许攸背叛袁绍投降了曹操。曹操率轻骑奔袭乌巢，斩杀淳于琼，烧毁了袁绍的粮草。袁绍大将张颌、高览率领重兵攻打曹操军营也始终不下，再加上郭图乘机陷害，两人投降了曹操。于是，袁绍全军溃散。余部投降曹操被活埋。官渡之战以曹操大胜袁绍大败而告终。 11. 刘表平定了长沙、零陵、桂阳，拥兵十万，不再向朝廷进贡。</p>\n</li>\n<li>\n<p>刘璋懦弱无能，张鲁占据汉中反叛。赵韪（wei)也因为益州人民对外来东州兵的仇恨而反叛。</p>\n</li>\n</ol>\n<h2><span id=\"卷64\"> 卷64</span></h2>\n<ol>\n<li>\n<p>曹操攻打刘备占据的汝南，刘备战败投奔刘表，驻守在新野。</p>\n</li>\n<li>\n<p>赵韪围攻成都刘璋，东州兵害怕被杀，拼死作战，追击到江州（巴郡），杀死赵韪。 3. 张鲁以天师道管理汉中。天师道首领称祭酒。</p>\n</li>\n<li>\n<p>袁绍因为官渡之战战败，愤恨而死。袁谭与袁尚各带党羽相互攻杀。袁谭处于劣势，于是向曹操投降。曹操出兵攻打审配镇守的邺城，攻破城池，斩杀了审配。袁尚部下李孚在传信邺城中智勇惊人。 5. 袁谭打败袁尚，袁尚投奔幽州袁熙。袁谭背叛曹操。</p>\n</li>\n<li>\n<p>孙权忙于平定内乱。丹阳太守孙翊被杀，其妻徐氏设计为夫报了仇。</p>\n</li>\n<li>\n<p>曹操攻陷南皮，袁谭出逃，被杀死。</p>\n</li>\n<li>\n<p>幽州袁熙的部下反叛投降曹操，袁熙与袁尚投奔乌桓。 9. 黑山军首领张燕率兵十万归降了曹操。</p>\n</li>\n<li>\n<p>并州高干先降后反叛曹操，河东郡地方豪强卫固等响应，曹操任命的新太守杜畿（ji）设计瓦解了豪强，平定了河东。杜畿治理河东政绩常常天下第一。</p>\n</li>\n</ol>\n<h2><span id=\"卷65\"> 卷65</span></h2>\n<ol>\n<li>曹操亲征并州刺史高干，高干在逃亡中被杀。梁习被任命为并州刺史，百姓认为没有并州刺史的功绩超过梁习。</li>\n<li>曹操在来降的田畴帮助下，奇袭了乌桓，斩杀了单于蹋（ta）顿，20万人投降。袁尚、袁熙投降辽东，被公孙康杀死，人头献给了曹操。</li>\n<li>刘备在襄阳隆中，三顾茅庐，请出了诸葛亮。 4. 黄祖部下甘宁在苏飞的帮助下，投奔了孙权。</li>\n<li>孙权西征江夏郡黄祖，攻陷了夏口城，斩杀了黄祖。甘宁救下了苏飞。</li>\n<li>朝廷撤除三公职位，以曹操为丞相。</li>\n<li>曹操征聘司马懿为僚属，司马懿称病，受胁迫后才接受。 8. 马腾解除了军权，到朝廷担任卫尉。其子马超接管了其军队。</li>\n<li>孔融全家被曹操杀死。</li>\n<li>刘琦接任黄祖担任江夏郡太守。</li>\n<li>刘表去世，蔡瑁、张允拥立刘琮为荆州牧。</li>\n</ol>\n<h2><span id=\"卷66\"> 卷66</span></h2>\n<ol>\n<li>\n<p>孙权攻打合肥，久攻不下而撤军而还。张辽、李典、乐进等屯驻合肥。 2. 周瑜率军围攻江陵，曹仁防守一年多后弃城撤走。 3. 孙权将其妹孙尚香嫁予刘备。 4. 曹操派蒋干来劝降，周瑜不为所动。</p>\n</li>\n<li>\n<p>周瑜去世，鲁肃继任。劝说孙权，孙权同意借荆州。 6. 刘备以诸葛亮和庞统为军师。</p>\n</li>\n<li>\n<p>孙权任命歩骘（zhi）为交州刺史，岭南开始归属孙权。</p>\n</li>\n<li>\n<p>曹操派司隶校尉钟繇（yao）和夏侯渊讨伐张鲁，马超、韩遂等十部疑心图己而反叛，曹操亲征，马超、韩遂逃亡凉州。安定被曹操围攻，杨秋献城投降。</p>\n</li>\n<li>\n<p>张松劝说刘璋接刘备入蜀以攻张鲁，黄权、王累劝说无效，刘备入川，在葭（jia）萌关收买人心，不攻张鲁。</p>\n</li>\n<li>\n<p>孙尚香回吴，赵云、张飞夺回刘禅。 11. 曹操诛杀了卫尉马腾，灭其三族。</p>\n</li>\n<li>\n<p>荀彧因为反对给曹操加九赐，曹操非常不满，荀彧服毒而死。</p>\n</li>\n<li>\n<p>张松被其兄出卖而死，刘备攻打刘璋，节节胜利。刘璋部下李严等人投降，大将张任战死。 14. 曹操率大军攻打孙权的濡(ru)须口，两军相持不下，孙权劝说，曹操撤军。</p>\n</li>\n<li>\n<p>马超全部兼并了陇西的军队，联合张鲁军队攻打凉州，凉州刺史韦康无法抵挡，献城投降，被马超杀死，并打败了夏侯渊的援军。杨阜（fu）等人起兵为韦康报仇，打败了马超，杀死了马超的妻儿，马超投奔了张鲁。杨阜因功被封侯。</p>\n</li>\n</ol>\n<h2><span id=\"卷67\"> 卷67</span></h2>\n<ol>\n<li>\n<p>夏侯渊打退了马超的进攻，又出兵打败了韩遂，最终平定了陇右地区。 2. 吕蒙出谋，甘宁出力，孙权攻取了皖城，以吕蒙为庐江太守，回军驻守在寻阳。</p>\n</li>\n<li>\n<p>诸葛亮率领张飞、赵云攻取了巴东（建安、白帝城），后在巴郡（江州、重庆）生擒了严颜，与刘备在成都会师。期间，庞统雒（luo）县中箭而死。 4. 刘备派李恢説降了马超。</p>\n</li>\n<li>\n<p>刘璋投降，刘备占领了益州，大封功臣，收降人才，益州安定。</p>\n</li>\n<li>\n<p>伏皇后被曹操害死，亲属被杀者一百多人。曹操的女儿曹贵人被立为皇后。</p>\n</li>\n<li>\n<p>曹操攻打张鲁，受阻于阳平关，因为部下迷路而找到出路，得以攻陷阳平关，张鲁逃亡，曹操占领汉中。主簿司马懿和刘晔劝说曹操乘机攻占益州，不准，后又后悔。后来，张鲁率领庞德等投降了曹操。</p>\n</li>\n<li>\n<p>孙权索要荆州，刘备不还。于是，吕蒙出兵，长沙、桂阳投降，零陵也用计夺取。刘备求和，双方划分了荆州。</p>\n</li>\n<li>\n<p>孙权率军十万攻打合肥，张辽威震逍遥津，孙权狼狈而逃。</p>\n</li>\n</ol>\n<h2><span id=\"卷68\"> 卷68</span></h2>\n<ol>\n<li>\n<p>曹操攻打濡须口，孙权防守。曹操撤退，孙权投降，双方议和。周泰率领朱然、徐盛驻守濡须口。</p>\n</li>\n<li>\n<p>曹丕被立为太子后暗自高兴，辛毗（pi）之女辛宪英叹息魏将不昌。</p>\n</li>\n<li>\n<p>刘备率军攻打汉中，驻扎在阳平关。</p>\n</li>\n<li>\n<p>鲁肃去世，吕蒙接任。</p>\n</li>\n<li>\n<p>陆逊扫灭了东部三郡的盗贼。</p>\n</li>\n<li>\n<p>曹操派其子曹彰讨伐代郡的乌桓叛军。曹彰作战勇猛，所向披靡。鲜卑首领轲（ke）比能也请求投降，于是，北方全部平定。</p>\n</li>\n<li>\n<p>黄忠在法正的指挥下，在定军山斩杀夏侯渊。曹操亲自对抗刘备，赵云用空营计，打败曹军。曹操率领全军撤退，刘备占据汉中。</p>\n</li>\n<li>\n<p>关羽率军攻打襄阳郡的樊城，于禁被俘、庞德被杀，曹仁死守樊城。徐晃前来救援，打败了关羽。吕蒙设计，糜芳投降，江陵失陷，关羽士兵离散，败走麦城，被马忠杀死。不久，吕蒙突然去世。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"资治通鉴小结-009-068-卷-汉纪\"><a class=\"markdownIt-Anchor\" href=\"#资治通鉴小结-009-068-卷-汉纪\"></a> 资治通鉴小结 009 - 068 卷 汉纪</h1>\n<h2 id=\"卷9\"><a class=\"markdownIt-Anchor\" href=\"#卷9\"></a> 卷9</h2>\n<ol>\n<li>秦三世子婴投降刘邦，秦朝灭亡。刘邦与秦地百姓约法三章。</li>\n<li>楚国项羽在新安城活埋了投降的20万秦军。</li>\n<li>曹无伤出卖刘邦，项羽摆鸿门宴。刘邦在张良项伯等人的帮助下逃回军营。</li>\n<li>项羽杀死子婴，火烧秦宫室，大火3个月不绝。</li>\n<li>项羽分封诸侯，自封为“西楚霸王”</li>\n<li>田荣收编彭越，兼并了三齐。</li>\n<li>夏侯婴举荐韩信，不被重用；萧何月下追韩信，刘邦拜韩信为大将军</li>\n<li>张良用计调动项羽攻打田荣，刘邦乘机扩张。项羽打败田荣，立田假为齐王。田荣被百姓杀死。因为项羽抢掠齐国，齐国百姓反叛。后田横打败田假，平定三齐。</li>\n<li>陈平叛楚投汉，刘邦宠爱陈平，让他监督诸将。</li>\n<li>刘邦率领几十万联军突袭了项羽的彭城，项羽轻骑回救，彭城之战，项羽以少胜多，杀得刘邦联军尸横遍野。</li>\n<li>韩信俘获魏王魏豹，平定魏国；随后俘获代相夏说，平定代国；刘邦随后调走韩信的精兵去荥（xing）阳防守楚军。在荥阳战场，汉将灌婴带领的骑兵打败了楚军骑兵。</li>\n</ol>\n<h2 id=\"卷10\"><a class=\"markdownIt-Anchor\" href=\"#卷10\"></a> 卷10</h2>\n<ol>\n<li>韩信和张耳攻打赵国，背水一战，虚张声势，杀死陈馀，俘获赵王，赵国平定。随后，韩信采用李左车的计策，燕国投降。</li>\n<li>刘邦使者随何说服九江王黥（qing）布叛楚归汉。楚国派龙且（ju）打败黥布，派项伯收编了九江的军队。</li>\n<li>陈平离间楚国君臣关系，项羽猜忌手下，范增被气死。</li>\n<li>项羽攻破荥阳，刘邦逃走。辕生献耗敌计，不与项羽交战。项羽攻打彭越，刘邦又占领成皋。项羽打跑彭越后，又攻下荥阳成皋，刘邦逃到韩信的赵国驻地，收缴了其军队，刘邦又重整士气。</li>\n<li>汉臣郦食其说降齐国。韩信听从蒯彻劝说，乘机攻下了齐都临淄。郦食其被煮杀。楚国龙且来援，被韩信在澭水用水攻打败，龙且被杀，齐王被俘获。不久，三齐平定。韩信请求代理齐王，刘邦听从张良等人意见，封韩信为齐王。</li>\n<li>项羽又去攻打梁地的彭越，曹咎失守成皋，项羽被迫返回，与刘邦在广武对持。项羽深感缺乏外援，说降韩信失败，便要求与刘邦单挑，被拒绝。但项羽的气势吓退了汉军神射手楼烦。</li>\n<li>楚汉议和成功，楚军解阵回归，张良又劝说刘邦乘机偷袭楚军。</li>\n</ol>\n<h2 id=\"卷11\"><a class=\"markdownIt-Anchor\" href=\"#卷11\"></a> 卷11</h2>\n<ol>\n<li>汉军追击楚军被打败。刘邦听从张良劝说，分封韩信彭越，俩人便率兵前来。联军包围项羽，楚军粮尽，垓（gai）下之战项羽冲出包围，但心灰意冷，自刎乌江。汉军5人因为分尸而封侯。</li>\n<li>刘邦回军到定陶县，便接管了韩信的军队，封韩信为楚王，彭越为梁王。</li>\n<li>刘邦即皇帝位，是为汉高祖。</li>\n<li>齐王田横被招安，田横及其五百宾客自杀。</li>\n<li>齐人楼敬说服汉高祖迁都长安，封为逢春君，赐姓刘，是为刘敬。</li>\n<li>张良辟谷求仙。</li>\n<li>燕王藏荼（tu）反叛，被讨灭，汉高祖封宠臣卢绾（wan）为燕王。</li>\n<li>韩信杀好友楚将钟离昧表清白，仍旧被汉高祖软禁，后被释放，封为淮阴侯。</li>\n<li>汉高祖分封诸侯，大赏功臣。</li>\n<li>匈奴冒顿杀父，自立为单于。不久，灭掉东胡，赶跑月氏（zhi）。乘楚汉之争时，扩张势力，有精兵30万。</li>\n<li>叔孙通受命制定礼仪。</li>\n<li>汉高祖不听刘敬劝说攻打匈奴，被冒顿40万精兵围困在白登山，后采用陈平的计策，得以逃出。</li>\n<li>萧何大修宫室，汉高祖大怒，萧何却说是为了显示威严。</li>\n</ol>\n<h2 id=\"卷12\"><a class=\"markdownIt-Anchor\" href=\"#卷12\"></a> 卷12</h2>\n<ol>\n<li>刘敬劝说汉高祖用公主和亲匈奴，吕后反对，用平民女子封为公主和亲。</li>\n<li>戚夫人劝说汉高祖立儿子赵如意为太子，汉高祖本身也有意，但是大臣大多反对，周昌口吃说服汉高祖。</li>\n<li>陈希反叛，联合匈奴，汉高祖亲征，采用收买分化策略，予以平定。韩信想响应，被诱杀。汉高祖要煮杀蒯彻，被蒯彻说服。</li>\n<li>彭越被控告谋反，被废为平民。向吕后求情，被杀死。汉高祖又要煮杀栾（luan）布，栾布辩解得以自由。</li>\n<li>汉朝派陆贾说服赵佗，封赵佗为南越王。陆贾还写了《新语》。</li>\n<li>淮南王黥布造反，汉高祖带病亲征，黥布败退，被农民杀死。</li>\n<li>汉高祖在讨伐黥布过程中又中流箭，不久病情加重，去世。太子刘盈即位，是为汉惠帝。吕后掌权。</li>\n<li>吕后乘汉惠帝不在，毒死赵王刘如意，并将其母戚夫人弄成“人猪”。汉惠帝得知后，很伤心，每天饮酒淫乐，不理政事。</li>\n<li>相国萧何去世，曹参继任相国，“萧规曹随”，百姓安心。几年后，曹参去世，以王陵为右丞相，陈平为左丞相。和汉高祖临终遗言一样。</li>\n<li>留侯张良去世。</li>\n<li>汉惠帝去世，吕太后令张皇后收养子即位为帝，吕太后掌权。</li>\n</ol>\n<h2 id=\"卷13\"><a class=\"markdownIt-Anchor\" href=\"#卷13\"></a> 卷13</h2>\n<ol>\n<li>吕太后分封吕氏为王。陈平等人隐忍负重。</li>\n<li>汉少帝得知身世真相后想报仇，被吕太后杀死。立刘弘为帝。</li>\n<li>诸吕把持朝政，刘章行酒杀吕氏，朝臣倚重刘章，刘氏势力有所回复。</li>\n<li>在陆贾的帮助下，陈平和周勃文武联合，吕氏窃位的野心渐减。</li>\n<li>吕太后去世，刘章暗中让其兄齐王刘襄起兵西征。朝廷派灌婴讨伐，两者暗中联合。陈平命郦寄夺取吕后侄子赵王吕禄的兵权，吕氏一族灭亡。</li>\n<li>大臣商量皇位人选，最后确立代王刘恒，是为汉文帝。汉朝历史上最有才华的一位皇帝诞生，开启了“文景之治”</li>\n<li>贾谊，袁盎才华显露。</li>\n</ol>\n<h2 id=\"卷14\"><a class=\"markdownIt-Anchor\" href=\"#卷14\"></a> 卷14</h2>\n<ol>\n<li>淮南王刘长的母亲愤恨而死，刘长也是愤恨而死。前者是无权无势，而后者则靠着文帝的宠爱，杀恩人审其食，后更加骄横，竟然造反。被抓后仍旧不服，愤恨而死。袁盎则因为刘长的死而建议杀丞相、御史大夫赎罪，最后杀了些县令</li>\n<li>张释之按法办案，为此多次惹汉文帝愤怒。但周勃还是含冤被关进大牢，幸得作为儿媳的公主相救得出。</li>\n<li>贾谊未雨绸缪，提出将大诸侯分成多个小诸侯的推恩令，可惜汉文帝并未重视。但是他提出的以礼治国却得到了文帝的重视。</li>\n<li>匈奴冒顿（modu）去世，儿子老上单于即位。文帝强迫中行说辅佐下嫁的翁主。中行说投降单于，教匈奴识字和对汉朝傲慢。</li>\n</ol>\n<h2 id=\"卷15\"><a class=\"markdownIt-Anchor\" href=\"#卷15\"></a> 卷15</h2>\n<ol>\n<li>汉文帝听从贾谊节制诸侯的意见，改淮阳王刘武为梁王，梁国辽阔，有大县40多个。一年后，贾谊去世，年仅33岁。</li>\n<li>颍川人晁错上书得到赏识，很多意见被采纳。</li>\n<li>缇萦代父受刑，感动文帝，文帝废去肉刑。</li>\n<li>冯唐易老，李广难封。</li>\n<li>新恒平的欺诈被拆穿，汉文帝不再热心祭祀鬼神。</li>\n<li>匈奴连年入侵，汉文帝恢复了和匈奴的和亲关系。这年，老上单于去世，其子车臣单于即位。</li>\n<li>匈奴又入侵，周亚夫因为军纪严明而被汉文帝重用。</li>\n<li>汉文帝去世，汉文帝在位23年，自身节俭谦逊，国家安定，百姓富裕，后世很少能够做到。</li>\n<li>太子刘启即位，是为汉景帝。丞相申屠佳因景帝多采用晁错的意见而被气死。晁错越发尊贵。</li>\n<li>梁王因为是窦太后的小儿子，受到太后和景帝的宠爱。而自身也不收敛，大修宫室。</li>\n</ol>\n<h2 id=\"卷16\"><a class=\"markdownIt-Anchor\" href=\"#卷16\"></a> 卷16</h2>\n<ol>\n<li>晁错上书削藩，吴王、胶西王、胶东王、川王、济南王、楚王、赵王反叛，史称“七王之乱”。</li>\n<li>袁盎建议杀晁错平息叛乱，汉景帝同意了。晁错身死而叛乱不息，汉景帝又后悔了。</li>\n<li>周亚夫不受君命，不顾梁王的求援，按照原计划切断了围攻梁国睢阳（今河南商丘南）的，吴楚联军的粮草运输线，吴楚联军因为缺粮大败。同时栾布也打败胶西、胶东、川王等叛军，解救了齐国国都临淄之围；随后水淹了叛军赵国的国都邯郸。七国之乱平定。</li>\n<li>燕王臧荼的孙女藏儿的大女儿王夫人生下后来的汉武帝刘彻。</li>\n<li>梁王派人刺死袁盎，汉景帝迫于窦太后不吃饭而宽恕了梁王，表面上维持和好关系，不久，梁王去世。</li>\n<li>匈奴经常入侵，李广勇猛超人。</li>\n<li>长公主刘嫖要嫁女给太子刘荣，被栗姬拒绝。便嫁给了王夫人的儿子刘彻。长公主用计，太子刘荣被废，刘彻被立为太子。</li>\n<li>周亚夫因为购买殉葬用的盔甲被捕入狱，绝食而死。</li>\n<li>汉景帝去世，太子刘彻即位，是为汉武帝。</li>\n</ol>\n<h2 id=\"卷17\"><a class=\"markdownIt-Anchor\" href=\"#卷17\"></a> 卷17</h2>\n<ol>\n<li>汉武帝出题选拨人才，董仲舒脱颖而出，被重用。董提出“罢黜百家，独尊儒术”。</li>\n<li>汉武帝喜爱儒家学说，而窦太后则喜爱黄老学说。</li>\n<li>外戚窦婴人情冷落，外戚田汾则门庭若市。</li>\n<li>馆陶公主刘嫖因为拥立汉武帝有功，多次干预国政，引起汉武帝不满。而其女儿陈皇后独占宠爱却没有生育，越加被汉武帝冷落。</li>\n<li>汉武帝在其姐平阳公主处遇到歌女卫子夫，接入宫中，对其宠爱有加，并重用其同母弟卫青。</li>\n<li>汉武帝多次微服出游，司马相如、东方朔劝谏，不听。</li>\n<li>闽越王郢发兵攻打南越国，南越国求援，汉武帝派王恢和韩安国分兵二路攻打闽越国。郢的弟弟余善和贵族杀死郢，向王恢投降。汉武帝封立丑为越繇王。后余善自立，汉武帝被迫封余善为东越王。</li>\n<li>汲黯（an）治理东海郡，抓大放小，无为而治。百姓交口称赞。汉武帝将其升为朝官，汲黯直言劝谏，多次惹怒汉武帝。但汉武帝称汲黯为社稷之臣。</li>\n</ol>\n<h2 id=\"卷18\"><a class=\"markdownIt-Anchor\" href=\"#卷18\"></a> 卷18</h2>\n<ol>\n<li>李少君以长生之术而被汉武帝尊敬，他死后，燕齐之地神仙之术蜂起。</li>\n<li>王恢献计，引诱匈奴入马邑包围圈而歼灭之。韩安国反对在和亲期间挑衅匈奴。结果，在最后时刻，匈奴发觉，汉朝劳民伤财，王恢被逼自杀。从此，匈奴频繁入侵。</li>\n<li>黄河决口，汲黯奉命征发十万劳工堵塞决口，始终没有成功。丞相田汾为了提高自己封地的收入而上书不必治理，汉武帝同意了。</li>\n<li>窦婴失去权势后，只有灌夫没有离开。灌夫多次醉酒冒犯丞相田汾，田汾便告发灌夫违法事，窦婴援救，在王太后的坚持下，窦婴、灌夫被处死。几个月后，田汾去世。</li>\n<li>唐蒙出访南越返回，建议从夜郎出兵，出其不意的攻打南越。汉武帝为此用军士修通往西南夷的道路。结果，军士死伤、巴蜀不安，最终没有成功。</li>\n<li>陈皇后因为女巫师楚服诅咒案而被废，但因为窦太主刘嫖的关系，仍旧受到优待。后来，卫夫人生下皇子刘据，被立为皇后。</li>\n<li>张汤与赵禹共同制定严厉的法令，从此用法更加严苛。</li>\n<li>卫青、李广等攻打匈奴，卫青因功被封侯，李广兵败被俘后逃脱，出钱赎罪后成为平民。不久，因为战事又被启用，匈奴人很害怕李广，称之为“飞将军”</li>\n<li>公孙弘、主父偃等人因为上书而得到汉武帝的宠爱。主父偃提出推恩令，被采纳，从此诸侯被分割。提出建筑朔方城也被采纳。因为他的告发，燕齐两国覆灭，赵王害怕成为下一个，便告发主父偃，在公孙弘的坚持下，主父偃被灭族。汲黯多次告发公孙弘的奸诈，但汉武帝却更加信任他。</li>\n<li>匈奴军臣单于去世，其弟自立为单于，军臣单于的儿子投奔汉朝被封侯，不久去世。</li>\n<li>张骞奉命出使月氏（zhi），想联合攻打匈奴，没有达成目标。</li>\n</ol>\n<h2 id=\"卷19\"><a class=\"markdownIt-Anchor\" href=\"#卷19\"></a> 卷19</h2>\n<ol>\n<li>卫青多次带兵讨伐匈奴，被拜为大将军。期间部下赵信战败被匈奴诱降。</li>\n<li>淮南王刘安和衡山王刘赐消除以往的矛盾，约定一起反叛朝廷. 事情败露，被赐死，受牵连者多达万人。其中，因为张汤的坚持，伍被和庄助也被杀死。</li>\n<li>霍仲儒与卫青的姐姐卫少私通，生下霍去病。霍去病跟随卫青征战，经常带领精兵脱离大部队去寻找战绩，结果军功居首，汉武帝封其为冠军侯。</li>\n<li>汉朝多次与匈奴作战，杀敌1千，自损八百，以致财政枯竭。汉武帝下令可以用钱买官和免罪。</li>\n<li>张骞从月氏归来，得知有商路可以到达西域。汉武帝下令打通道路，可惜没有成功。</li>\n<li>霍去病带兵攻打匈奴，斩杀很多，部下立功很快，但却不爱惜部下。卫青谦和，但部下很难立功，因此卫青的部下大多投向霍去病。而汉武帝也看重他。</li>\n<li>李广跟随卫青霍去病攻打匈奴，汉武帝说他运气差，因此没有得到卫青的重用，再加上没有向导，导致迷路。卫青传唤，李广自杀。李广带兵40年，始终没有升官。他死时，军民都痛哭。</li>\n<li>匈奴浑邪王和休屠王向汉朝投降，霍去病奉命接应，休屠王反悔，被浑邪王杀死，浑邪王部下反叛，被霍去病杀死。汉武帝为迎接浑邪王，向百姓强借马匹，以粉饰繁华。不久休屠王的儿子因为养马被汉武帝宠爱，赐名:金日。</li>\n<li>汉朝多次出动大军攻打匈奴，匈奴终于无法承受而北逃，而汉朝也无力再次征战。针对财政的紧张的现状，汉武帝一方面任用桑弘羊等商才管理财政，一方面任用赵禹、张汤等酷吏巧立名目，搜刮钱财。而义纵、王温舒更是杀人如麻，但汉武帝却重用他们。汲黯则很早被罢免。</li>\n</ol>\n<h2 id=\"卷20\"><a class=\"markdownIt-Anchor\" href=\"#卷20\"></a> 卷20</h2>\n<ol>\n<li>义纵因为阻扰告密之事被处死；张汤同党鲁谒居的弟弟因为误会其心意，而告发张汤，张汤在政敌设计下自杀而死，死时家财不过五百金，其政敌被汉武帝杀死；赵禹晚年一改严苛，用法宽和；王温舒仍旧严苛执法。</li>\n<li>霍仲儒回乡娶妻生下霍光，霍去病将其带入京城，保荐其做官</li>\n<li>李敢因为其父抱恨而死而将卫青打伤，卫青将此事隐瞒了起来。霍去病乘打猎之际射死李敢，汉武帝替霍去病隐瞒。不久，霍去病也去世。</li>\n<li>张骞再次建议拉拢西域的乌孙国，汉武帝同意，张骞出塞仍旧没有达到目标。但西域很多国家开始随同使者来到大汉。汉武帝派出很多使者带着厚礼出使西域，效果反而下降。为保护使臣，汉朝先后设立酒泉、武威、敦煌、张掖四郡。从汉朝到西域有 2条线路，以后成为丝绸之路。</li>\n<li>匈奴单于伊稚斜（一只鞋）去世，其子乌维接任单于。</li>\n<li>汉武帝又迷信方士栾（luan）大，被封侯拜将，贵族也大力与之交结，这样，燕齐之地神仙之术更盛。后来发觉其欺诈，将其处死，但方士公孙卿仍旧未暴露</li>\n<li>南越王赵胡去世，在汉朝充任侍卫的赵婴齐即位；赵婴齐去世，其子赵兴即位。汉朝派人说服了南越王和王太后入朝，丞相吕嘉反叛，朝廷派路博德、杨朴等讨伐，吕嘉被活捉。西南夷也大多投降汉朝，朝廷在南越和西南夷处设置郡县管理。东越王余善反叛，杨朴等人奉命讨伐，余善被部下杀死。朝廷将东越居民迁往江淮，于是，闽越成为荒芜之地。</li>\n<li>自己跳起来捐献财产给朝廷，后来被汉武帝扶持的带头榜样:卜式，已经无法影响平民。后来卜式上书反对盐铁专卖，汉武帝开始不满。</li>\n<li>桑弘羊管理财政，做起官商，没有增加百姓赋税，而天下财物却变得富饶，汉武帝封其为左庶长。</li>\n</ol>\n<h2 id=\"卷21\"><a class=\"markdownIt-Anchor\" href=\"#卷21\"></a> 卷21</h2>\n<ol>\n<li>朝鲜王卫右渠不但不朝见汉朝，还阻止他国朝见，并杀死了汉使。汉武帝派杨朴、 荀彘（zhi）分兵两路攻打。开始不利，两位将领不和，后卫右渠被手下杀死。汉朝在朝鲜设立四郡。班师回朝，杨朴赎罪为民，荀彘被处死。</li>\n<li>赵破奴生擒楼兰王，攻破车师国，因为这两个国家多次抢掠汉使。</li>\n<li>乌孙国与汉朝和亲，乌孙王昆莫去世，其孙军须靡即位，是为昆弥王。</li>\n<li>卫青去世。</li>\n<li>王温舒被指控，他自杀而死。王温舒五族同灭。</li>\n<li>匈奴乌维单于去世，其子即位，称为儿单于；匈奴开始向西北迁徙。不久，儿单于去世，其叔父湖即位，不久，湖单于去世，其弟且候即位。汉朝与匈奴又开战。</li>\n<li>汉武帝经常巡视各地，仍旧迷信神仙。</li>\n<li>大宛国不献宝马，还杀死汉使。汉武帝派宠幸的李夫人的弟弟李广利为帅征讨。第一次带兵几千，西域各国不供应粮草，兵败而回。第二次大兵压境，西域各国都捐献粮草。大宛王被手下杀死。汉朝立与汉亲近的昧察即位。不久，贵族杀死昧察，蝉封被立为王，得到汉朝的承认。这次后，西域各国更加尊敬汉朝。</li>\n<li>李广的孙子李陵率领几千人攻打匈奴，被单于率大军包围。李陵边打边退，杀伤上万匈奴军，最后弹尽粮绝，李陵投降。司马迁为之辩解，被汉武帝施以宫刑。后来汉武帝原谅了李陵的孤立无援。</li>\n</ol>\n<h2 id=\"卷22\"><a class=\"markdownIt-Anchor\" href=\"#卷22\"></a> 卷22</h2>\n<ol>\n<li>匈奴且候单于去世，孤鹿姑单于即位。弟弟的儿子被封为日逐王。</li>\n<li>公孙贺抓住大侠客朱安世，巫蛊(gu)案爆发，公孙贺被灭族。</li>\n<li>太子执法宽和，为此得罪了执法严苛辈。卫青去世，卫皇后也失宠。汉武帝怀疑周围人用巫蛊害他，江充等人便陷害太子。太子杀死江充，起兵与丞相刘屈牦率领的军队作战，民间传说太子造反，因此人们不依附太子。太子兵败，追捕中自杀，卫皇后先前也自杀。</li>\n<li>匈奴多次入侵，汉朝经常派李广利统兵对抗，互有胜负。诅咒案爆发，丞相刘屈牦被处死，李广利与匈奴作战失利后投降。不久，卫律忌恨李广利的尊宠超过自己，便设计害死了李广利。</li>\n<li>官民以巫蛊害人罪相互告发，被查多不属实，汉武帝终于醒悟，造思子宫，天下为之悲伤。</li>\n<li>汉武帝将神仙方士之士全部驱散，还下令浪费天下财力的事一律废止。</li>\n<li>马何罗造反，金日救驾。</li>\n<li>汉武帝赐死钩戈夫人，立其子刘弗陵为太子。汉武帝去世，汉昭帝即位，大将军霍光等人辅政。</li>\n</ol>\n<h2 id=\"卷23\"><a class=\"markdownIt-Anchor\" href=\"#卷23\"></a> 卷23</h2>\n<ol>\n<li>益州24个夷人村塞全部反叛，汉朝将其镇压。</li>\n<li>燕王刘旦、齐王刘泽密谋反叛，泄密，隽不疑逮捕了刘泽，刘泽被处死，刘旦因为是至亲免予追究。</li>\n<li>金日去世。</li>\n<li>匈奴孤鹿姑单于去世，卫律和阏氏（yanzi）伪造遗嘱，壶衍单于即位，左贤王、右谷蠡王离去，匈奴从此衰落。于是开始讨好汉使，以求和亲。</li>\n<li>桑弘羊与贤良等辩论盐铁酒专卖制度和均输措施，《盐铁论》产生。后，汉昭帝废除了酒类专卖。</li>\n<li>常惠设计，苏武回归汉朝。</li>\n<li>盖长公主、上官桀父子、桑弘羊与刘旦密谋除掉霍光，14岁汉昭帝明察，保住了霍光。燕苍、杜延年上告密谋，上官桀父子、桑弘羊等被灭族，盖长公主、刘旦自杀。多人因功封侯。</li>\n<li>辽东乌桓（huan）部落逐渐强大，于是起兵反叛匈奴和汉朝，被两者打击。</li>\n<li>霍光命傅介子诱杀了匈奴所立的楼兰王，立尉图耆（qi）为王，改国名为鄯善，并派了40多人在伊循屯田，以镇抚。</li>\n</ol>\n<h2 id=\"卷24\"><a class=\"markdownIt-Anchor\" href=\"#卷24\"></a> 卷24</h2>\n<ol>\n<li>汉昭帝突然去世，霍光舍不法的广陵王刘胥，而立昌邑王刘贺为帝。刘贺荒淫无道，霍光与张安世密谋，田延年当众拔剑威胁，刘贺被废黜。卫太子刘据的孙子刘病己得到丙吉和杜延年的推荐，被迎立为帝，是谓汉宣帝。许广汉的女儿许氏被立为皇后。</li>\n<li>田延年因为贪污，霍光等人打算为之开脱，田延年却畏罪自杀。</li>\n<li>大儒夏侯胜、为政宽和的黄霸因为非议汉武帝而被下狱。“朝闻道，夕死可矣”发生。</li>\n<li>乌孙请求讨伐匈奴，汉朝派赵充国等5位将军分兵出征，匈奴不战而逃，田顺和田广明因为逗留不前而畏罪自杀。常惠引导的乌孙军则大获全胜，常惠被封侯。</li>\n<li>京兆尹赵广汉明察，政治清明胜以往；于定国担任廷尉，执法公正。</li>\n<li>霍光夫人背着霍光，命女医生淳于衍毒死许皇后。霍光得知后，犹豫非常，最终批示淳于衍无罪。其女霍成君被立为皇后。霍后用度奢华。</li>\n<li>霍光去世，汉宣帝开始亲政。汉朝良史，以此世最多，号称“中兴”</li>\n<li>匈奴壶衍单于去世，其弟虚闾权渠单于即位。废黜前阏氏得罪左大且渠，因此和亲大计被破坏。同时发生饥荒，匈奴人和畜牧死去大半。所属的西族部落武力回归汉朝。</li>\n</ol>\n<h2 id=\"卷25\"><a class=\"markdownIt-Anchor\" href=\"#卷25\"></a> 卷25</h2>\n<ol>\n<li>霍氏家族因为权势被逐渐削弱，阴谋造反，事泄，霍皇后被废，霍氏被灭族。</li>\n<li>龚遂治理饥荒的渤海，不费一兵一卒，平息了盗贼，百姓家中也有了积蓄。</li>\n<li>京兆尹赵广汉因为私怨杀人，并威胁丞相魏相，即使有官民为之请求，仍旧被汉宣帝处死。</li>\n<li>莎车王的弟弟联合邻国势力，杀死莎车王自立，汉使冯奉世征调西域军队，攻破莎车，并平息西域南路的反叛，威震西域。</li>\n<li>汉宣帝知道原昌邑王刘贺不足为虑后，封其为海昏侯。</li>\n<li>汉宣帝终于得之丙吉等人对己的恩德，便用封侯等来回报。当时丙吉病重，夏侯胜断定有阴德的人不会未享功德而死，果然，不久，丙吉痊愈。</li>\n<li>张安世不居功，爱荐才。但和其子张延寿都为侯，内心不自安。汉宣帝很敬重他。不久，张安世去世。</li>\n<li>颍川太守黄霸治理政绩，天下第一。</li>\n<li>羌人解除了内部仇怨，联合起来。首领狼何向匈奴借兵。赵充国洞察，为汉宣帝设谋献策</li>\n</ol>\n<h2 id=\"卷26\"><a class=\"markdownIt-Anchor\" href=\"#卷26\"></a> 卷26</h2>\n<ol>\n<li>义渠安国激怒羌人，羌人反叛。再次破坏安羌大计。70多岁的赵充国自荐征羌，他采用分化策略，汉宣帝群臣辩难，赵充国耐心的予以说服。羌人最终不战而降，先零首领杨玉等也被羌人杀死，羌乱平定。汉宣帝最终不听赵充国的意见，后任命的辛汤虐待羌人，羌人再度反叛，辛武贤也因为私怨害死赵充国儿子。</li>\n<li>盖宽饶上书劝谏宦官当政，被汉宣帝逼死。</li>\n<li>匈奴虚闾权渠单于去世，被废的前阏氏和其弟左大将拥立右贤王为握衍朐鞮（qudi ）单于，单于凶残，日逐王率众投降汉朝。</li>\n</ol>\n<h2 id=\"卷27\"><a class=\"markdownIt-Anchor\" href=\"#卷27\"></a> 卷27</h2>\n<ol>\n<li>匈奴东部贵族拥立呼韩邪单于，征兵打败了握衍朐鞮单于，后者自杀。呼韩邪单于于是解散军队，后被屠耆单于打败。匈奴混乱，出现五单于并世。后来，郅支单于打败呼韩邪单于，呼韩邪单于归附汉朝。</li>\n<li>韩延寿与萧望之相互告发，韩延寿被处死。百姓争相献酒肉，韩延寿自言死而无恨。</li>\n<li>丞相丙吉去世，黄霸被任命为丞相，做了几件荒唐事后便不敢再建议。</li>\n<li>乌孙刘解忧的侍女冯夫人擅长外交。汉朝派她划乌孙为大小昆弥。分别以元贵靡和乌就屠为王。元贵靡因病去世，儿子星靡（mi）即位。冯夫人自荐镇抚乌孙，被批准。</li>\n<li>汉宣帝去世，以史高、萧望之、周堪为辅政大臣。太子即位，是为汉元帝。</li>\n<li>王政君被选入太子宫，生下汉成帝。</li>\n</ol>\n<h2 id=\"卷28\"><a class=\"markdownIt-Anchor\" href=\"#卷28\"></a> 卷28</h2>\n<ol>\n<li>王政君被立为皇后。</li>\n<li>萧望之、刘更生、周堪、金敞四人辅佐汉元帝，史高被冷落。于是与宦官石显等联合，萧望之被逼死。汉元帝易欺又不明忠奸，石显等人专权，以后刘更生、周堪也被罢官。</li>\n<li>匈奴呼韩邪单于开始强盛，于是北迁。</li>\n<li>陇西羌人反叛，汉成帝不听冯奉世出兵4万的建议，只出1万2的兵马，结果兵败后又出兵6万，羌人被打败。</li>\n</ol>\n<h2 id=\"卷29\"><a class=\"markdownIt-Anchor\" href=\"#卷29\"></a> 卷29</h2>\n<ol>\n<li>因为朝廷财政不足，又恢复了盐铁专卖制度。同时，废除了祭庙。汉元帝对汉宣帝的法令制度也多有改变。</li>\n<li>冯奉世的女儿冯婕妤舍身喂虎，汉元帝感叹，受宠的傅婕妤不满。</li>\n<li>京房因为天象之术被汉元帝宠爱，京房劝说汉元帝远离石显，道理说得很透切，汉元帝也认为很对但是不想改变。最终，京房被石显害死。</li>\n<li>陈汤胁迫甘延寿，假传圣旨，征发了西域15国的军队，分南北两路，斩杀了在康居国的郅支单于。首级送入京城，满朝庆贺。但因为甘延寿得罪石显，两人被弹劾，最后虽然得到刘向（原名刘更生）等人的维护，但官职反而只是校尉。</li>\n<li>匈奴呼韩邪单于来朝见，请求和亲，昭君出塞。另外上书请求撤销边防，被侯应以十大理由制止。</li>\n<li>汉元帝去世，太子即位，是为汉成帝，以舅父王凤为大将军，管理朝政。</li>\n</ol>\n<h2 id=\"卷30\"><a class=\"markdownIt-Anchor\" href=\"#卷30\"></a> 卷30</h2>\n<ol>\n<li>石显失去靠山，被免官，绝食而死。其党羽也被罢黜。</li>\n<li>汉成帝大封王氏家族。王氏五侯奢侈，专权。许嘉的女儿徐氏被立为皇后。</li>\n<li>呼韩邪单于去世，两位阏氏谦让继承权，复株累若单于即位。再娶王昭君为妻。</li>\n<li>匡衡失势，便告发陈汤盗用康居王的财物。陈汤被免官。进入王凤幕府，被重用。</li>\n<li>杜钦辅佐大将军王凤，多有善政。杜钦推荐王延世治理黄河。成功，王延世被封侯。后王延世再次堵塞决口成功被赏赐。</li>\n<li>西夷夜郎国王兴反叛，被新上任的柯郡太守陈立斩杀。后其岳父翁指反叛，被陈立讨伐，翁指被部下杀死。西夷平定。</li>\n<li>刘向写《洪范五行传论》，劝谏王凤兄弟专权。汉成帝不改。</li>\n<li>王商因为得罪王凤，在王凤坚持下，被免官，吐血而死。</li>\n<li>王章劝说汉成帝用冯野王代替王凤，被王音探知，告诉王凤。汉成帝最终没有废黜王凤，王章被处死，冯野王被罢官。杜钦多次劝说王凤收敛，不被采纳。王凤更加专权，汉成帝被架空。</li>\n</ol>\n<h2 id=\"卷31\"><a class=\"markdownIt-Anchor\" href=\"#卷31\"></a> 卷31</h2>\n<ol>\n<li>王凤在职11年去世，建议王音接替自己。汉成帝同意。</li>\n<li>匈奴复株累单于去世，弟弟搜谐单于继位。</li>\n<li>王氏五侯竞相奢华，汉成帝故意大怒，以恐吓他们。</li>\n<li>汉成帝微服出行，在阳河公主处得到歌舞女赵飞燕，后又征召其妹入宫，对其非常宠爱，许皇后被废，班请求到太后处以自保。</li>\n<li>王莽为博取名声不择手段。</li>\n<li>汉成帝终于封赵飞燕为皇后，其妹为赵昭仪。赵飞燕公开淫乱，然而汉成帝不相信，赵飞燕也始终无子。</li>\n</ol>\n<h2 id=\"卷32\"><a class=\"markdownIt-Anchor\" href=\"#卷32\"></a> 卷32</h2>\n<ol>\n<li>匈奴搜谐单于在朝见途中去世，其弟车牙单于继位。</li>\n<li>定陶王刘欣被立为太子，只有孔光认为应该立中山王刘兴，孔光被贬官。</li>\n<li>宠臣淳于长戏弄前废后许氏，王莽首先告发，淳于长被免官，党羽被清洗。</li>\n<li>王音在职7年，王商接替大司马辅政。三年后去世，由王根接替大司马辅政，在职4年，王莽接替大司马辅政。</li>\n</ol>\n<h2 id=\"卷33\"><a class=\"markdownIt-Anchor\" href=\"#卷33\"></a> 卷33</h2>\n<ol>\n<li>汉成帝逼死丞相崔方进以承天变。</li>\n<li>汉成帝突然去世，赵昭仪被逼自杀，太子即位，是为汉哀帝。 定陶傅太后专横，傅氏与王氏争权，太皇太后王政君隐忍，王莽辞去大司马。</li>\n<li>张由为求自己脱罪，陷害中山冯太后（为汉元帝挡熊），史立和傅太后都是帮凶，冯太后自杀。在傅太后的怒气下，汉哀帝顺从，孙宝、唐林、傅喜等人无法为冯氏案平反</li>\n</ol>\n<h2 id=\"卷34\"><a class=\"markdownIt-Anchor\" href=\"#卷34\"></a> 卷34</h2>\n<ol>\n<li>汉哀帝外戚丁、傅两族骄奢，看不惯傅喜节俭，于是攻击诽谤，傅喜被免官。孔光也因为不被傅太后所喜，也被免官。此外，王莽、师丹等人也或贬官或被送回封国。</li>\n<li>汉哀帝母亲丁氏去世。</li>\n<li>函谷关以东地区民众无故惊走，传递王母书，从春季到秋季，影响26个郡国。</li>\n<li>汉哀帝为宠臣董贤修宅院，造墓室，并大封其亲属，宠爱董贤胜于爱自己，连丁、傅两族都嫉恨。</li>\n<li>郑崇被赵昌进谗害死，孙宝劝谏被贬为民。</li>\n<li>乱世惑众之臣息夫躬、傅喜献计，故意招惹匈奴。</li>\n</ol>\n<h2 id=\"卷35\"><a class=\"markdownIt-Anchor\" href=\"#卷35\"></a> 卷35</h2>\n<ol>\n<li>发生日食，孔光再次被启用，王莽等也返回京城。董贤则借日食，阻止了息夫躬等人挑衅匈奴的计策。</li>\n<li>傅太后去世，息夫躬等人遭弹劾，被免官。</li>\n<li>大儒鲍宣上书，何武、彭宣被再次启用。</li>\n<li>孔光弹劾丞相王嘉，王嘉入狱，吐血而死。死前后悔没有启用孔光等人。</li>\n<li>孔光被任命为丞相。傅喜被贬为平民。何武、彭宣再次启用。鲍宣却因为折辱丞相获罪服役。董贤位列三公，主管尚书事务，孔光迎合董贤。</li>\n<li>汉哀帝去世。汉朝的大业从汉哀帝时，开始衰落。</li>\n<li>太皇太后王政君收走玉玺，启用王莽。董贤被罢免后自杀。王莽被推举为大司马，主管尚书事务。孔光又迎合王莽。丁氏、傅氏、董氏覆灭。</li>\n<li>中山冯太后案平反，郑崇案平反。</li>\n<li>中山王刘箕（ji）子即位，是为汉平帝，年9岁，王莽把持国政，排除异己，欺世盗名。</li>\n</ol>\n<h2 id=\"卷36\"><a class=\"markdownIt-Anchor\" href=\"#卷36\"></a> 卷36</h2>\n<ol>\n<li>王莽的女儿被推举为汉平帝的皇后。</li>\n<li>吕宽事件爆发，汉平帝的母族被屠杀的只剩下卫太后一人。王莽长子王宇被逼服毒而死。王莽乘机牵连，不归附者全被处决。其中包括何武、鲍宣、王立、王仁等。</li>\n<li>孔光越来越恐惧，不久，去世。葬礼盛大。</li>\n<li>汉平帝因为母亲卫太后的事而怨恨王莽，被毒死。王莽代行皇帝职务。</li>\n<li>刘崇造反被杀，东郡太守崔义拥立刘信为帝，起兵造反。有十多万人。京城各县盗贼爆发，赵明势力最强。也有十多万人。不久，崔义被杀、刘信逃亡，赵明也被杀。各地恢复秩序。王莽策划做真皇帝。</li>\n</ol>\n<h2 id=\"卷37\"><a class=\"markdownIt-Anchor\" href=\"#卷37\"></a> 卷37</h2>\n<ol>\n<li>王莽称帝，建立新朝，乱改名称，国家没有制度，管理混乱。</li>\n<li>匈奴因换印等事而与中国决裂，派兵攻打边境。戊己校尉属员杀死校尉投降匈奴。西域焉耆首先反叛，杀死西域都护，西域与新朝决裂。益州蛮夷也反叛。</li>\n<li>王莽集结兵粮，12路将军讨伐匈奴，各地盗贼蜂起。</li>\n<li>王莽改革币制，全国经济崩溃。</li>\n</ol>\n<h2 id=\"卷38\"><a class=\"markdownIt-Anchor\" href=\"#卷38\"></a> 卷38</h2>\n<ol>\n<li>匈奴栾提咸因为王莽的财物而勉强与新朝和好，但掳掠如故。不久，栾提咸去世，其弟栾提舆继位。王莽继续招惹匈奴，双方关系更加恶化。</li>\n<li>王莽提防臣下，事事过问，以致政事大量堆积。军人因为得不到吃穿而做盗贼。政事琐碎，官吏因领不到俸禄而贪赃枉法。富人不能保财，穷人不能活命，于是盗贼蜂起。王匡、王凤领导绿林军，樊崇领导赤眉军。声势浩大。</li>\n<li>新朝几十万大军攻打益州蛮夷，军队中毒气损失惨重，民众也疲惫。</li>\n<li>廉丹等率精兵十万讨伐赤眉军，被赤眉董宪部打败。</li>\n<li>绿林军遭遇瘟疫，死亡近半。于是，王常等人的下江兵进入南郡；王凤等人的新市兵进入南阳。</li>\n<li>南阳刘演刘秀兄弟在舂（chong）陵起兵，派刘嘉说服了新市兵、平林兵，3方联合。</li>\n<li>刘演进攻宛城甄阜失败，刘秀亲属很多被杀。后刘秀兄弟说服下江兵王常，4方联合，夺取了甄阜的物资。</li>\n</ol>\n<h2 id=\"卷39\"><a class=\"markdownIt-Anchor\" href=\"#卷39\"></a> 卷39</h2>\n<ol>\n<li>刘演联军斩杀甄阜，又打败严尤军，于是包围宛城。青、徐两州义军也声讨王莽，于是，王莽害怕。</li>\n<li>。新市兵、平林兵抢先立刘玄为更始帝，大封亲近之人，豪杰失望。</li>\n<li>宛城守将岑（cen）彭粮食吃完，率全城投降了刘玄军，因为刘演说情，岑彭得以保全。</li>\n<li>王寻几十万大军包围昆阳，刘秀征兵归来，率领3000敢死军冲击王寻主账，王寻轻敌，不准其他部队帮忙，因此，王寻被杀。王莽大军溃散。昆阳之战，天下震动，拥护刘玄。</li>\n<li>冯异在巾车乡被擒，投降了刘秀，并说服父城投降。</li>\n<li>李轶、朱鲔（wei）劝说刘玄，刘演被杀。刘秀主动前往宛城请罪，忍辱负重，得以幸存。</li>\n<li>天水隗嚣起兵，以方望为军师。攻占了平襄、陇西、敦煌等地。</li>\n<li>成都公孙述假冒刘玄诏书，打败了宗成，兼并了其军队。</li>\n<li>刘玄军攻入长安，王莽被分尸，新朝灭亡。</li>\n<li>刘秀奉命修复洛阳，其属下官员仪表威武，有见识的人都归心刘秀。</li>\n<li>刘玄迁都洛阳，并派使者巡行各郡国。刘赐说服更始帝，刘秀代理大司马，巡行河北。</li>\n<li>上谷寇询，从刘玄使者手中夺回印信，保全了太守耿况；彭宠、吴汉靠同乡关系，分别被任命为代理渔阳太守和安乐县令；赤眉军樊崇晋见刘玄，大失所望，于是逃回；刘永被封为梁王，首府睢（sui）阳。</li>\n<li>南阳邓禹千里投奔刘秀，邺城对策，深得刘秀欢心。。主薄冯异献策，让属员巡行郡县，被采纳。</li>\n<li>耿纯感于刘秀法令与众不同，与刘秀结交</li>\n<li>刘林等在邯郸拥护王朗称帝，燕赵响应。</li>\n<li>刘玄命丞相刘赐修复长安，又迁都长安。娶赵萌女儿，赵萌专权，滥封亲信，于是，关中离心，全国怨恨。</li>\n<li>耿况的儿子耿弇（yan）进见刘秀，蓟城献计：只要征发上谷、渔阳弓骑1万，便可对抗王朗。恰好此时蓟城变乱，响应王朗，刘秀逃亡到信都。和戎太守邳彤（pitong）说服刘秀不回长安，而留在河北。于是信都太守任光、邳彤等人征募了精兵4000，虚张声势，攻打王朗。耿弇在蓟城与刘秀离散后，便回到上谷。上谷渔阳联合，耿弇、吴汉等各率领3000步骑联合攻打王朗，所向披靡，在广阿与刘秀会合。</li>\n<li>刘秀与拥兵10万的真定王刘扬联姻，团结起来，一起攻打王朗。</li>\n<li>刘秀在巨鹿受阻，耿纯献计，绕开巨鹿，主力直捣邯郸，李立开城，邯郸陷落，王朗被王霸杀死。</li>\n<li>汉中王刘嘉打败延岑，延岑投降，刘嘉于是拥兵10万。贾复、陈俊被他推荐到刘秀处。</li>\n<li>刘玄下令让刘秀解散军队回朝，刘秀被耿弇说服，并不听从，于是，两方离心。</li>\n<li>耿弇、吴汉又到幽州征调突骑，刘秀军力强盛。于是打败铜马等义军。于是，部众达到几十万。</li>\n<li>刘秀假意与刘玄派来的援军谢躬亲善，后乘机派岑彭占领了邺城，吴汉斩杀了谢躬。于是，刘秀兼并了谢躬的部众。</li>\n<li>公孙述打败了刘玄来犯的李宝、李忠军，自称蜀王。建都成都。当地百姓和夷族归附。</li>\n<li>赤眉军厌战，于是，樊崇、徐宣分二路攻打长安。</li>\n<li>刘秀派邓禹攻打长安，冯异对抗洛阳，寇询保证军需，而刘秀自己则夺取燕赵。</li>\n<li>隗嚣检举亲人隗崔、隗义的反叛密谋，两人被杀，隗嚣被提升为御史大夫。</li>\n<li>梁王刘永大量招募豪杰，并以周建等为统帅，攻占了28城。同时封董宪、张步等义军为大将军，于是，称霸青、徐两州</li>\n<li>秦丰在黎丘起兵，自称楚黎王，有几万人。</li>\n<li>汝南人田戎攻陷夷陵，自称扫地大将军，也有几万人。</li>\n</ol>\n<h2 id=\"卷40\"><a class=\"markdownIt-Anchor\" href=\"#卷40\"></a> 卷40</h2>\n<ol>\n<li>刘秀攻打尤来、大枪等贼军，因为轻敌冒进被打败。陈俊献计：坚壁清野。贼军因抢掠不到粮草而溃散。</li>\n<li>冯异劝降驻守洛阳的李轶，奏效。但刘秀却公开李轶的书信，李轶被朱鲔派人刺杀。</li>\n<li>将领们多次劝说刘秀称帝，不从。耿纯将其说服，刘秀称帝。邓禹为大司徒。根据《赤伏符》任命王梁为大司空，再想以此任命大司马，被部下反对，吴汉被任命为大司马。</li>\n<li>邓禹平定河东。</li>\n<li>刘玄军内乱，刘玄诛杀了多位亲信。</li>\n<li>赤眉军拥立刘盆子为帝。实际上，刘盆子只是挂名而已。赤眉军攻入长安。刘玄被刘恭、严本、谢禄等保护。但刘玄最终被谢禄勒死。其亲属被宛王刘赐收留。</li>\n<li>刘秀军围攻洛阳几个月而未攻下，于是派岑彭说服守将朱鲔，朱鲔投降，被封侯（后来，封爵世代相传）。刘秀便定都洛阳</li>\n<li>梁王刘永在睢阳称帝。刘秀派盖延、马武等打败了刘永，将其围困在睢阳城，苏茂反叛，投降刘永。盖延再次打败来援的苏茂、周建等人。刘永等逃亡。</li>\n<li>隗嚣从刘玄处逃回天水，便招募部众，马援也来投奔，于是威震西方。</li>\n<li>窦融被推举为河西五郡代理大将军。其为政宽和，属地安定富足，兵强马壮。</li>\n<li>卢芳在安定称雄，以匈奴为依靠。</li>\n<li>张步抗拒刘玄任命的琅邪太守王闳（hong），后两人和好。由王闳掌握郡务。后张步接受了刘秀使臣伏隆册封的东莱太守职。</li>\n<li>真定王刘扬制造谶（chen）文，谋取称帝。刘秀派其亲戚耿纯，让其暗中将其逮捕。耿纯设计杀死了刘扬。</li>\n<li>渔阳彭宠因为心怀怨恨，再加上蓟城朱浮逼迫而起兵反叛。</li>\n<li>延岑再次反叛，汉中王刘嘉战败逃亡。公孙述乘机占领汉中。进而占领了益州全境。</li>\n<li>盖延、马武等打败刘永，将其围困在睢阳城，苏茂反叛，投降刘永。盖延再次打败来援的苏茂、周建等人。刘永等逃亡。</li>\n<li>吴汉攻打宛城刘赐，刘赐带着刘玄的亲属投降刘秀，被封侯。</li>\n<li>阴丽华谦让，郭贵人被立为皇后，其子刘强为太子。</li>\n<li>邓奉因为吴汉抢掠其新野家乡而反叛。击溃了吴汉军，并与各路贼军联合。</li>\n<li>赤眉军因为长安军粮吃完而西向。被隗嚣的部将杨广打败；赤眉军逢安攻打延岑，被延岑打得打败；赤眉军18万攻打汉中王刘嘉，也被刘嘉打得大败。后刘嘉依靠姐夫来歙的关系，在邓禹处向刘秀投降</li>\n<li>赤眉军和延岑军在长安地区作乱，而邓禹无能为力，于是，冯异受命接替邓禹。</li>\n<li>长安地区发生饥荒，出现人吃人，于是，20万赤眉军东归。与冯异在华阴相遇，双方对抗60多天。有5000赤眉军将士投降。</li>\n</ol>\n<h2 id=\"卷41卷\"><a class=\"markdownIt-Anchor\" href=\"#卷41卷\"></a> 卷41卷</h2>\n<ol>\n<li>\n<p>邓禹因为身受重任却无功劳，多次率领饥饿的士兵攻打赤眉军，次次失败。冯异劝说无效，也被牵累兵败。</p>\n</li>\n<li>\n<p>冯异设计，大败赤眉军，收降8万人，残部在宜阳遇到刘秀大军，于是投降。后来，樊崇、逢安因为谋反被诛杀。徐宣在故乡去世，刘盆子以收地租为生。刘恭杀死谢禄，为刘玄报了仇，被刘秀赦免。 3. 齐地张步因贪图刘永的王爵而杀死了刘秀的使臣伏隆，张步占领12郡，称霸齐地。 4. 涿（zhuo）郡张丰反叛，与渔阳彭宠联合。</p>\n</li>\n<li>\n<p>朱浮因为粮食吃尽而被耿况救走，蓟城于是向彭宠投降。彭宠自称燕王，夺取上谷等地，并联合贼军，依靠匈奴。后彭宠被奴仆子密等3人杀死，首级送往长安。祭遵将彭宠的家族全部杀死。 6. 刘秀亲征，大败邓奉。因为朱祜（hu）调和，邓奉投降。岑彭、耿弇劝说，邓奉被杀。 7. 冯异打败延岑，并在赵臣粮草援助下，打败了境内贼军，基本平定关中（长安）。</p>\n</li>\n<li>\n<p>吴汉攻打苏茂、周建，先败后胜。睢阳叛乱，迎接刘永进城，吴汉协助盖延包围了睢阳。盖延包围睢阳100天，刘永等突围，刘永被部下庆吾杀死。苏茂、周建拥立刘永的儿子刘纡为梁王。王霸、马武打败了苏茂、周建。周建侄子周诵（song）献出垂惠城投降，周建死于逃亡中，刘纡、苏茂逃到下邳与董宪会合。 9. 延岑攻打南阳，被耿弇打得大败。延岑便与黎丘联合，又被朱祜打败。朱祜与岑彭汇合。</p>\n</li>\n<li>\n<p>岑彭攻打秦丰，将其包围在黎丘。同时岑彭派傅俊平定了扬州。岑彭围攻秦丰三年，斩杀了9万人，秦丰剩余军队仅1000人，而且粮草将尽。刘秀命朱祜围攻秦丰，岑彭、傅俊则被派去攻打田戎。朱祜猛攻秦丰，秦丰投降，被刘秀处死。 11. 李宪在庐江称帝，部众10万。</p>\n</li>\n<li>\n<p>来歙出使天水隗嚣处，隗嚣来长安进见刘秀。但后来，隗嚣并不想归顺刘秀，又谋划称帝。 13. 延岑攻打顺阳，又被邓禹打败，于是逃往汉中被公孙述封为大司马。</p>\n</li>\n<li>\n<p>夷陵田戎打算投降岑彭，但姐夫辛臣抄小路先投降，田戎起疑，于是又反叛。与秦丰联合，被打败后又返回夷陵。后岑彭攻打夷陵，田戎逃到公孙述处。 15. 祭遵猛攻涿郡张丰，生擒张丰。</p>\n</li>\n<li>\n<p>东海郡董宪部将贲休献出兰陵县向刘秀投降，盖延等不听刘秀谋划，兵败，董宪攻陷兰陵县，诛杀了贲休。刘秀亲征董宪联军，苏茂投奔齐地张步，董宪、庞萌逃亡，被追杀。 17. 成都公孙述多次攻打长安地区，冯异和隗嚣联合，打败了公孙述。</p>\n</li>\n<li>\n<p>吴汉、耿弇、王常在平原郡打败富平、获索军，追击到渤海，有4万人投降。 19. 庞萌怀疑盖延在刘秀处说了坏话，于是反叛，打败了盖延，与董宪联合，自称东平王。 20. 河西窦融归顺刘秀，被任命为凉州牧。</p>\n</li>\n<li>\n<p>耿弇斩杀张步大将费邑，平定济南郡。后又多次打败张步，平定齐地。耿弇为将，一共平定46个郡，攻占了300座城，未尝一败。</p>\n</li>\n<li>\n<p>五原人李兴等从匈奴迎回卢芳，定都九原。夺取了北方几座城。 23. 冯异治理长安，功效显著。 24. 岑彭劝降，湖广投降。</p>\n</li>\n<li>\n<p>窦融封莎车王康为西域大都尉，西域55国全隶属于莎车。</p>\n</li>\n</ol>\n<h2 id=\"卷42卷\"><a class=\"markdownIt-Anchor\" href=\"#卷42卷\"></a> 卷42卷</h2>\n<ol>\n<li>吴汉斩杀董宪、庞萌，崤山以东平定。</li>\n<li>隗嚣不听从劝说，对抗刘秀军，大将王元打败东汉军队。马武断后，军队得以返回。</li>\n<li>冯异抢先占领要地，打败隗嚣大将行巡，后又击败卢芳部将和匈奴的军队。占领了北地郡、安定等地。</li>\n<li>窦融率军攻打隗嚣同党先零羌首领封何等，大破羌族。 5. 刘秀让马援招降隗嚣将领，没有成效。 6. 隗嚣向公孙述称臣。</li>\n<li>卢芳诛杀了五原太守李兴，朔方、云中献城投降。</li>\n<li>来歙（xi）突袭，攻下隗嚣心腹之地略阳。隗嚣来攻，几个月不下。</li>\n<li>刘秀亲征，命王遵招降了隗嚣部下，隗嚣逃亡。隗嚣逃亡西域，投奔部下杨广。不久，杨广去世，隗嚣穷途末路。</li>\n<li>张步逃亡，被陈俊斩首。</li>\n<li>吴汉因为贪图军队多而导致粮草日减，王元、行巡、周宗带领公孙述援军攻来，刘秀军撤退。岑彭断后，全军保全。隗嚣又夺取了陇西，北地、安定等地。 12. 高句（gou）丽王派使者来朝贡。</li>\n<li>隗嚣患病，愤恨而死。王元等拥立其子隗纯为王。据守翼县。 14. 来歙统帅冯异等5位将军讨伐隗纯。</li>\n<li>吴汉攻打卢芳部将贾览，匈奴来援。吴汉处于劣势。 16. 祭遵去世，冯异接管军队。不久，冯异在攻打隗纯时去世。</li>\n<li>耿弇围攻隗嚣部将高俊据守的高平城。一年未下，光武帝派寇询劝降，寇询杀死高俊军师兼使者皇甫文，高俊投降。</li>\n<li>来歙攻陷落门。周宗、行巡献出隗纯投降，王元投奔公孙述。</li>\n<li>岑彭打败田戎，田戎据守江州。</li>\n<li>马援被来歙举荐为陇西太守，进击羌族，大获全胜。 21. 公孙述派人刺杀了来歙，马武接管了其军队。</li>\n<li>岑彭攻打公孙述，攻势如暴风骤雨，势不可挡。</li>\n<li>藏宫打败公孙述部将延岑，收降了十万军队，王元也来投降。 24. 公孙述派人刺杀了岑彭，监军郑兴暂领军队，等吴汉赶到后接替。 25. 马成平定武都，马成马援讨伐羌人。将投降的羌人迁徙到陇西。</li>\n</ol>\n<h2 id=\"卷43\"><a class=\"markdownIt-Anchor\" href=\"#卷43\"></a> 卷43</h2>\n<ol>\n<li>\n<p>吴汉进攻成都公孙述，占领其要害之地广都。又一次不听刘秀劝告，兵败，后八战八胜。进入成都外城。 2. 冯骏攻陷江州，俘获田戎。</p>\n</li>\n<li>\n<p>藏宫攻陷涪（fu）城，斩杀公孙恢，与吴汉在成都会师。</p>\n</li>\n<li>\n<p>延岑招募敢死队，打败了吴汉，又打败了藏宫。公孙述在交战中受重伤，当夜去世。将军队交给延岑，延岑投降。吴汉将公孙述和延岑灭族。 5. 参狼羌等侵犯武都，被陇西太守马援击败。</p>\n</li>\n<li>\n<p>卢芳联合匈奴、乌桓攻打北方边境，守将杜茂多次与之战斗，无法取胜。九原留守随昱（yu）投降，卢芳逃走。</p>\n</li>\n<li>\n<p>耿弇等将领交出兵权，以侯爵身份离开朝廷。只有邓禹、贾复、李通留在朝廷。 8. 窦融被任命为大司空，几次辞官，不准。</p>\n</li>\n<li>\n<p>大司徒韩歆（xin）因为激烈直率，刘秀无法忍受，将其免官。后又逼死了他。</p>\n</li>\n<li>\n<p>匈奴因为贪图赏赐而让卢芳投降。卢芳自请降不提匈奴，匈奴因为得不到赏赐，大恨，侵犯更胜。卢芳投降后又叛归匈奴，十多年后，在匈奴去世</p>\n</li>\n<li>\n<p>郭皇后因受宠而怨恨，被废，阴贵人被立为皇后。</p>\n</li>\n<li>\n<p>交趾女子征侧、征贰反叛，蛮人响应，共攻占了65座城。马援、伏隆奉命征讨，斩杀了征侧姐妹。岭南平定。</p>\n</li>\n</ol>\n<h2 id=\"卷44\"><a class=\"markdownIt-Anchor\" href=\"#卷44\"></a> 卷44</h2>\n<ol>\n<li>\n<p>南郡蛮人反叛，刘尚将其击败。武陵蛮人相单程等反叛，刘尚讨伐，因轻敌而全军覆没。马援自请讨伐，在壶头受阻，军队遭遇瘟疫，不久马援去世，梁松等人便诬陷马援，光武帝大怒，唯有被马援轻视的朱勃上书鸣冤。马援监军假传诏旨，蛮人杀死其首领，投降。蛮人之乱平定。</p>\n</li>\n<li>\n<p>匈奴单于舆杀死应当继位的兄弟知牙师，而立其子蒲奴即位。前单于乌珠留的儿子比统领南方八部落，非常愤怒，被拥立为呼韩邪单于，投降汉朝，是为南单于。汉朝设立匈奴中郎将。 3. 东汉设立乌桓校尉。</p>\n</li>\n<li>\n<p>北匈奴请求和亲，不被允许。北匈奴多次讨好汉朝。</p>\n</li>\n<li>\n<p>光武帝因为谶（chen）文去泰山封禅。桓（huang）谭因为反对谶（chen）文被贬官，病死途中。 6. 南匈奴比去世，弟弟莫继位，汉朝授玺成为常例。不久，莫去世，弟弟汉继位。不久，汉去世，前单于比的儿子适继位。</p>\n</li>\n<li>\n<p>光武帝去世，皇太子刘庄即位，是为汉明帝。</p>\n</li>\n<li>\n<p>汉明帝同母弟山阳王刘荆写匿名信劝东海王刘强造反，被汉明帝掩盖起来。不久，东海王因病去世，汉明帝悲痛。刘荆又招引占星家谋划变乱，汉明帝又宽恕了他。</p>\n</li>\n<li>\n<p>西羌烧当部强盛，首领滇（dian）吾入侵陇西，汉朝军队多次战败，窦固、马武奉命讨伐。马武击败烧当羌，余皆降散。</p>\n</li>\n<li>\n<p>辽东郡太守祭彤派鲜卑首领偏何讨伐赤山乌桓，杀其首领，塞外各部落纷纷归附鲜卑，东汉屯边部队全部撤走。</p>\n</li>\n<li>\n<p>窦融家族富贵无人能比。其子护羌校尉窦林因为贪赃枉法被处死，批准窦融回家养病。 12. 马援之女马氏被立为皇后，皇子刘立被立为太子，马皇后贤明，可惜无子。</p>\n</li>\n<li>\n<p>莎车王贤用武力强占了于阗（tian）等三国，于阗人杀死了守将，拥立休莫霸为王，并打败了贤的军队，并包围莎车，休莫霸中流箭而死。于阗于是拥立广德为王，莎车和于阗恢复了和亲关系。</p>\n</li>\n</ol>\n<h2 id=\"卷45\"><a class=\"markdownIt-Anchor\" href=\"#卷45\"></a> 卷45</h2>\n<ol>\n<li>\n<p>梁松因为怨恨朝廷被处死。</p>\n</li>\n<li>\n<p>于阗王广德率领西域各国将莎车王杀死，匈奴攻击，广德投降。后广德又杀死了匈奴所立的莎车王不居徵，改立齐黎为莎车王。</p>\n</li>\n<li>\n<p>南匈奴打退侵犯云中郡的北匈奴军队。南匈奴适去世，苏继位，不久，苏去世，单于适的弟弟长继位。 4. 阴太后去世。</p>\n</li>\n<li>\n<p>北匈奴实力仍旧强盛，汉明帝同意双边贸易。郑众出使北匈奴，坚决不行叩拜之礼。北匈奴仍旧侵犯边境，南匈奴也因为汉朝与北匈奴通好而怨恨，与北匈奴沟通，汉朝为防备，设立度辽营。 6. 汉明帝从天竺国引入了佛教。</p>\n</li>\n<li>\n<p>广陵王刘荆相面谋叛被告发，不久自杀。</p>\n</li>\n<li>\n<p>王景治理汴渠，用水闸调节水流，耗费百亿钱财。 9. 此时，天下太平，百姓富足。</p>\n</li>\n<li>\n<p>最信佛教的楚王刘英谋划叛乱，被废掉王位。刘英自杀。受牵连者众多，马皇后等乘久旱下雨劝谏，汉明帝醒悟。</p>\n</li>\n<li>\n<p>耿秉上书进攻北匈奴，汉朝四路大军讨伐北匈奴，只有窦固有功，祭彤无功获罪，愧恨而死，辽东百姓四季祭祀他。</p>\n</li>\n<li>\n<p>窦固部下班超在鄯善率36人杀死北匈奴使者团，鄯善归顺汉朝；随后出使于阗，杀死巫师，于阗归顺；西域各国与汉朝中断了65年后，又开始交往。</p>\n</li>\n<li>\n<p>北匈奴攻打云中郡，太守廉范虚张声势，以少胜多，北匈奴从此不敢进犯云中。 14. 益州刺史朱辅宝扬汉朝德政，西南夷归顺的很多。</p>\n</li>\n<li>\n<p>班超派部下田虑劫持了匈奴所立的疏勒王，立忠为疏勒王。疏勒国归顺。 16. 窦固、耿秉出兵西域，打败北匈奴。耿秉平定车师，设立西域都护和戊、己校尉。</p>\n</li>\n<li>\n<p>北匈奴杀死车师后王安得，又攻打戊校尉耿恭，被耿恭用毒箭吓退。不久，耿恭在疏勒城用泉水惊退北匈奴。</p>\n</li>\n<li>\n<p>汉明帝去世，太子即位，是为汉章帝。</p>\n</li>\n<li>\n<p>焉耆（qi）和龟兹进攻西域都护陈睦，陈睦全军覆没。北匈奴在柳中城围攻己校尉关宠。车师也反叛，与北匈奴一起攻打戊校尉耿恭。耿恭兵少粮尽，仍旧坚守。汉朝征发7000人前往救援。</p>\n</li>\n</ol>\n<h2 id=\"卷46\"><a class=\"markdownIt-Anchor\" href=\"#卷46\"></a> 卷46</h2>\n<ol>\n<li>\n<p>司徒鲍昱进谏，汉章帝同意楚王案中流放人员返回家乡。</p>\n</li>\n<li>\n<p>酒泉太守段彭率军攻打车师，北匈奴惊慌而逃，车师投降。范羌率军2000，营救耿恭，最终仅13人返回。汉章帝撤销了西域都护和戊、己校尉。班超也被征召回国，但由于疏勒于阗等国的哭劝而留了下来。 3. 汉章帝打算封舅父为侯，被马太后阻止。</p>\n</li>\n<li>\n<p>安夷县官吏强抢羌族妇女，被其夫杀死。官吏追查，该部落因为害怕而反叛。烧当羌首领迷吾联合其他部落一同反叛，马防、耿恭讨伐，羌人投降。耿恭因得罪马防被免官。 5. 窦勋的儿女被封为皇后。 6. 宋大贵人的儿子刘庆被封为太子。</p>\n</li>\n<li>\n<p>马防、马光、马廖被封侯，马太后生气，三人辞官被批准。马太后去世。</p>\n</li>\n<li>\n<p>班超请求平定西域，汉章帝派徐干率领1000人支援。但西域反复无常，班超四处攻打，汉朝也不时派点军队支援。</p>\n</li>\n<li>\n<p>窦皇后无子，收养梁小贵人的儿子刘肇（zhao）为子。于是陷害宋贵人姐妹，太子刘庆被废，刘肇被立为太子。宋贵人姐妹自杀。</p>\n</li>\n<li>\n<p>窦皇后为使窦家成为太子刘庆的唯一舅家而陷害梁家，梁贵人姐妹自杀。</p>\n</li>\n<li>\n<p>马家因为骄纵而获罪，窦家更加兴盛，也更加放纵。窦皇后的哥哥窦宪掌管禁军，他依仗皇后强占了公主的庄园，被查后未被治罪。</p>\n</li>\n</ol>\n<h2 id=\"卷47\"><a class=\"markdownIt-Anchor\" href=\"#卷47\"></a> 卷47</h2>\n<ol>\n<li>\n<p>北匈奴四方受敌，一部分人投降汉朝，大部被迫向远方迁徙。</p>\n</li>\n<li>\n<p>南匈奴长去世，前单于汗的儿子宣继位。不久，宣去世，前单于长的弟弟屯屠何继位。</p>\n</li>\n<li>\n<p>烧当羌迷吾等再次反叛，攻打陇西郡。其弟号吾被生擒。太守张纡（yu）同意释放号吾，烧当羌撤军。 4. 疏勒王忠诈降，被班超斩首。西域南道畅通。</p>\n</li>\n<li>\n<p>护羌校尉傅育招惹羌人，离间羌人与胡人的关系被识破。羌人反叛，归附迷吾。傅育追击被杀死。张纡被任命为护羌校尉。迷吾战败依附张纡，迷吾极其800首领被毒死。迷吾儿子迷唐与其他部落解除仇怨，在大、小榆谷反叛，实力强盛，张纡无法制服。 6. 班超声东击西，莎车投降、龟兹等莎车援军撤走。</p>\n</li>\n<li>\n<p>汉章帝去世，仅31岁，太子即位，是为汉和帝，窦太后摄政。窦宪掌握机要，窦氏兄弟掌握要职。 8. 根据汉章帝遗诏，取消盐铁专卖制度。</p>\n</li>\n<li>\n<p>窦宪因为怕刘畅分其权势而将其暗杀，不久，事情败露，窦宪因为害怕被杀而自动请求攻打北匈奴。 10. 张掖太守邓训接替张纡被任命为护羌校尉，他优待胡人，招降羌人，并派任尚打败了迷唐。迷唐部众离散。</p>\n</li>\n<li>\n<p>窦宪、耿秉等和南匈奴一起攻打北匈奴，斩杀1万多人。窦宪又诱使北匈奴投降，看到其势弱，再加上南匈奴想一统匈奴，于是便又偷袭北匈奴。北匈奴单于逃亡不知所踪。窦宪因功被封为大将军。南匈奴则日益强盛，拥兵5万。</p>\n</li>\n<li>\n<p>窦宪派人偷袭了西域伊吾的北匈奴守军，车师前后国投降。</p>\n</li>\n<li>\n<p>月氏因求娶公主不得而发兵7万攻打班超。班超坚壁清野，月氏军被打败，月氏投降，年年进贡。 14. 窦氏专权，只有窦喜修身自好，上下都依赖袁安。</p>\n</li>\n<li>\n<p>龟兹等国向汉朝投降，汉朝重新设立西域都护、戊、己校尉和骑都尉。班超被任命为西域都护，驻守龟兹。徐干被任命为长史，驻守疏勒。西域仅焉耆等三国没有归附汉朝。</p>\n</li>\n<li>\n<p>汉和帝最终不顾袁安的激烈反对，同意了窦宪另封北匈奴于除为单于的建议。</p>\n</li>\n</ol>\n<h2 id=\"卷48\"><a class=\"markdownIt-Anchor\" href=\"#卷48\"></a> 卷48</h2>\n<ol>\n<li>\n<p>汉和帝派人授予北匈奴于除印信，一如南匈奴先例。 2. 袁安去世。</p>\n</li>\n<li>\n<p>窦氏党羽谋划杀害和帝，和帝与中常侍郑众、清河王刘庆等谋划，窦宪等被逼自杀，党羽全部罢官。和帝论功行赏，刘庆一向行为谨慎，郑众也谦让，和帝认为郑众是贤臣，于是常与他商量政事。宦官掌权，从此开始。</p>\n</li>\n<li>\n<p>班固因为奴仆辱骂洛阳令，而被陷害致死。《汉书》由其妹班昭续写完成。 5. 护羌校尉邓训去世，官民夷族深切怀念。</p>\n</li>\n<li>\n<p>北匈奴于除叛逃回北方，被汉军斩杀，其部众也被消灭。鲜卑占据了原北匈奴故地，接受了残余的北匈奴人，鲜卑日益强盛。</p>\n</li>\n<li>\n<p>护羌校尉贯友离间羌人关系，并派兵打败了迷唐，迷唐向远方迁徙。</p>\n</li>\n<li>\n<p>匈奴单于屯屠何去世，前单于宣的弟弟安国继位，投降的北匈奴人归附，但族人归心前单于适的儿子师子。汉朝边将也阻碍安国与朝廷的通信。不久，安国被其舅父杀死，师子被拥立为单于。 9. 西域都护班超征发龟兹等八国军队，杀死了焉耆王广等。</p>\n</li>\n<li>\n<p>20万投降的北匈奴人反叛，拥立封侯为单于，被汉军打败，于是逃亡塞外。 11. 阴识的曾孙女阴贵人被立为皇后。</p>\n</li>\n<li>\n<p>车师后王攻打车师前王，俘获了其妻儿。西域长史王林出兵斩杀了后王。</p>\n</li>\n<li>\n<p>窦太后去世，汉和帝知道了其母梁小贵人冤死的经过，宽恕了窦太后。和帝厚待梁氏家族，梁氏从此兴盛。</p>\n</li>\n<li>\n<p>刘庆请求为其母宋大贵人扫墓，被批准。</p>\n</li>\n<li>\n<p>班超派属官甘英出使大秦和条支王国，甘英走遍了西海。</p>\n</li>\n<li>\n<p>汉朝招降了不少羌人，迷唐因为恐惧而投降，并进京朝贡。后又再次反叛，被候霸打败，于是投靠发羌部落，多年后去世，其子前来投降，部众只剩下几十户。 17. 南匈奴单于师子去世，前单于长的儿子檀（tan）继位。 18. 鲜卑攻打右北平，又攻打渔阳，被汉军打败。 19. 阴皇后嫉妒心强，因为失宠而怨恨，被废。</p>\n</li>\n<li>\n<p>班超年老思乡，多次申请回朝，被批准。不久，去世。戊己校尉任尚接替西域都护，不听班超忠告，终于断送了西域的和平。</p>\n</li>\n<li>\n<p>邓禹的女儿邓贵人被立为皇后。邓皇后贤明。 22. 汉和帝打破常例，封宦官郑众为侯。</p>\n</li>\n<li>\n<p>高句（gou）丽入侵辽东，被太守耿夔（kui）打败。</p>\n</li>\n<li>\n<p>汉和帝去世，婴儿刘隆继位，邓太后摄政。 25. 北匈奴逢侯多次请求归附，不准。</p>\n</li>\n</ol>\n<h2 id=\"卷49\"><a class=\"markdownIt-Anchor\" href=\"#卷49\"></a> 卷49</h2>\n<ol>\n<li>\n<p>汉殇帝去世，刘庆的儿子刘祜被邓氏家族迎立为帝，是为汉安帝，邓太后仍旧摄政 2. 清河王刘庆去世。</p>\n</li>\n<li>\n<p>西域反叛，汉朝撤销西域都护，并将屯田官兵接回了汉朝本土。 4. 因为征兵和官吏的欺压，羌人再次反叛。</p>\n</li>\n<li>\n<p>鲜卑首领燕荔阳来汉朝朝见，汉朝开通边塞贸易，鲜卑送来人质。但鲜卑的入侵仍旧不止。</p>\n</li>\n<li>\n<p>任尚与羌人大战，大败，8000人战死。邓骘（zhi）领兵经常战败，但邓太后仍旧任命邓骘为大将军。但邓骘在位上也能推举贤能。</p>\n</li>\n<li>\n<p>羌人首领滇零在北地称帝。招纳羌人并攻打益州。被梁慬（jin）打败。 8. 京城洛阳发生饥荒，出现人吃人现象。</p>\n</li>\n<li>\n<p>乌桓、鲜卑、南匈奴联合，出兵7000攻打五原郡，汉军大败。南匈奴单于也攻打耿仲，被梁慬、耿夔打败，南匈奴投降，梁慬被任命为度辽将军。</p>\n</li>\n<li>\n<p>虞诩因为阻止了邓骘放弃凉州的计划而被派到叛乱的朝歌县做县长。虞诩以内应+埋伏平定了朝歌县。 11. 海匪张伯路多次攻打青州，法雄将其打败，最终被辽东人斩杀，青州平定。</p>\n</li>\n<li>\n<p>羌人势力转强，前线修堡垒防守。羌人首领滇零去世，儿子零昌继位。护羌校尉候霸、骑都尉马贤多次打败羌军。</p>\n</li>\n<li>\n<p>虞诩建议任尚集资买马追击羌人，被同意，任尚打败敌人</p>\n</li>\n<li>\n<p>邓太后听说虞诩的才华，任命他为武都郡太守，虞诩多用诈术，以少胜多打败了羌人。</p>\n</li>\n</ol>\n<h2 id=\"卷50卷\"><a class=\"markdownIt-Anchor\" href=\"#卷50卷\"></a> 卷50卷</h2>\n<ol>\n<li>\n<p>任尚多次打败羌人首领零昌，俘获了其妻儿。并派人刺杀了杜季贡。又收买号封刺杀了零昌，号封被封为羌王。攻打先零羌人首领狼莫，狼莫战败而逃。羌族虞人部落向邓遵投降，陇右平定。</p>\n</li>\n<li>\n<p>邓遵收买羌人雕何刺杀了狼莫，羌人于是瓦解，为平定三辅和益州的羌人叛乱，朝廷共耗费军费240多亿，国库为之枯竭，百姓死伤无数。</p>\n</li>\n<li>\n<p>任尚与邓遵争功，再加上贪赃枉法，被处死。</p>\n</li>\n<li>\n<p>班勇与官员辩论西域的取舍意义，其意见被采纳，汉朝在敦煌驻军500以控制西域 5. 汉安帝已经成年，官员凡是劝邓太后还政的，都被判罪。</p>\n</li>\n<li>\n<p>邓太后去世，汉安帝将邓氏家族全部免官，邓遵等人自杀。汉安帝奶妈王圣，中常侍江京、攀丰等人乘机掌权，阎皇后家族也被封官，他们都骄横不法，司徒杨震多次上书告发，无效。 7. 高句丽多次入侵边境，后遂成继位为国王，前来归顺，东部边境平静。</p>\n</li>\n<li>\n<p>班勇被任命为西域长史，率军800驻守柳中城。班勇征调龟兹等国军队，赶跑了匈奴，车师前国归附。 9. 攀丰等人借天相陷害太尉杨震，杨震被免官，服毒而死。</p>\n</li>\n<li>\n<p>南匈奴单于檀去世，弟弟拔继位。因为度辽将军耿夔征调频繁，新归降的部落首领阿族等人反叛，被马翼率胡人骑兵将其全部斩获。</p>\n</li>\n<li>\n<p>王圣、攀丰等人又陷害太子等人，太子刘保被废，大臣反抗无效。</p>\n</li>\n</ol>\n<h2 id=\"卷51\"><a class=\"markdownIt-Anchor\" href=\"#卷51\"></a> 卷51</h2>\n<ol>\n<li>\n<p>汉安帝在巡行途中突然去世，年仅32岁。阎氏家族和宦官江京等人不立原太子济阴王刘保，而立年幼的北乡侯刘懿继位。</p>\n</li>\n<li>\n<p>阎显指使人弹劾，攀丰等人被处死，大将军耿宝自杀，王圣母子被流放，阎氏家族掌权，作威作福。 3. 班勇率军生擒车师后王军就和匈奴使者，在索班阵亡处斩首。</p>\n</li>\n<li>\n<p>北乡侯刘懿去世，宦官孙程等人斩杀江京，拥立11岁的济阴王刘保为帝，是为汉顺帝。阎氏家族覆灭，孙程等人被封侯，宦官势力更盛。</p>\n</li>\n<li>\n<p>陇西钟羌反叛，被马贤斩杀1000人，钟羌投降，凉州安定。</p>\n</li>\n<li>\n<p>司隶校尉虞诩多次弹劾贪赃枉法的官员和宦官，险些获罪。后弹劾宦官张防弄权，入狱，险些被害死，宦官孙程和宦官高梵联合救援，张防被流放，同犯尚书贾朗等被处死，虞诩升为尚书仆射（ye） 7. 虞诩举荐左雄，左雄被任命为尚书。</p>\n</li>\n<li>\n<p>西域所有国家归顺汉朝，只有焉耆王元孟没有投降，于是班勇和敦煌太守张朗分南北两路攻打。张朗为赎罪抢先攻打，元孟投降，班勇因为“迟到”被免官。 9. 南匈奴拔去世，其弟休利继位。</p>\n</li>\n<li>\n<p>班超孙子班始，因妻子阴城公主骄横荒淫，久积怨怒爆发，杀死了公主，班始极其兄弟姐妹被处死。 11. 梁商的女儿梁贵人被立为皇后。</p>\n</li>\n<li>\n<p>汉顺帝给奶妈宋娥封爵，左雄、李固等激烈反对，于是，宋娥被迫搬出皇宫，宦官也被迫请罪。于是，宋娥和宦官陷害李固，幸亏有人救助，得救。李固辞官回乡。 13. 太史令张衡才华盖世，发明了浑天仪。</p>\n</li>\n<li>\n<p>鲜卑首领其至犍去世，鲜卑对汉朝的抢掠减少。</p>\n</li>\n</ol>\n<h2 id=\"卷52\"><a class=\"markdownIt-Anchor\" href=\"#卷52\"></a> 卷52</h2>\n<ol>\n<li>\n<p>汉顺帝允许宦官以养子继承爵位。</p>\n</li>\n<li>\n<p>梁商被任命为大将军，梁商能洁身自好，李固、周举辅佐他。但其子梁翼则暴虐不法。 3. 汉顺帝不听虞诩的劝告，同意增加武陵蛮人的赋税，武陵蛮人反叛，被武陵太守李进平定。 4. 山阳君宋娥因诬陷罪被遣送回乡，与之勾结的宦官九侯也被遣回封国。</p>\n</li>\n<li>\n<p>李固的建议被采纳，祝良被任命为九真郡太守，张乔被任命为交趾州刺史，两人招抚了叛军和反叛的蛮人，于是，岭外安定。</p>\n</li>\n<li>\n<p>宦官张逵等人因为妒忌宦官曹腾等人与梁商联合，而向汉顺帝诬陷他们，张逵等被处死，因为梁商劝说，才没有被大范围牵连。</p>\n</li>\n<li>\n<p>南匈奴吾斯和车纽反叛，单于休利被匈奴中郎将陈龟逼杀。吾斯拥立车纽为单于，车纽投降。后汉朝立在京城洛阳的兜楼储为单于，吾斯被匈奴中郎将派人刺杀。</p>\n</li>\n<li>\n<p>马贤不忧虑军事，射姑山大战，马贤阵亡，东、西羌大规模汇合，烧杀抢掠不断。 9. 梁商去世，其子梁翼被任命为大将军，梁不疑为河南尹。 10. 皇子刘炳被立为太子。</p>\n</li>\n<li>\n<p>汉顺帝去世，2岁太子刘炳继位，是为汉冲帝，梁太后主政。</p>\n</li>\n<li>\n<p>汉冲帝去世，梁氏家族不听李固的劝告，立8岁的刘缵（zuan）为帝，是为汉质帝。梁太后主政，李固等人的建议多被采纳，但梁翼等人陷害李固等人，因梁太后反对而没有成功。 13. 藤抚平定了东南地区的盗贼。</p>\n</li>\n</ol>\n<h2 id=\"卷53\"><a class=\"markdownIt-Anchor\" href=\"#卷53\"></a> 卷53</h2>\n<ol>\n<li>\n<p>汉质帝聪明外露，被梁翼毒死。</p>\n</li>\n<li>\n<p>梁翼胁迫大臣，蠡吾候刘志被迎立为帝，是为汉桓帝。李固因为劝阻，被免官。 3. 藤抚因得罪宦官，不但没有因功封侯，反而被罢官，后死于家中。 4. 汉桓帝迎立梁翼的妹妹为皇后。</p>\n</li>\n<li>\n<p>杜乔因多次直言，被梁翼忌恨，不久，因为天灾被免官。</p>\n</li>\n<li>\n<p>梁翼深感李固、杜乔的声名太盛，恐于己不利，于是，两人都被害死于狱中。 7. 南匈奴单于兜楼储去世，车儿继位。 8. 梁太后还政于汉桓帝，不久，梁太后去世。</p>\n</li>\n</ol>\n<h2 id=\"卷54\"><a class=\"markdownIt-Anchor\" href=\"#卷54\"></a> 卷54</h2>\n<ol>\n<li>\n<p>南匈奴各部落同时反叛，并与乌桓、鲜卑联合进犯沿边九郡。陈龟被任命为度辽将军，上书建议任贤弃恶，被采纳，朝廷每年节省数亿经费。</p>\n</li>\n<li>\n<p>张奂被任命为北中郎将，招降了乌桓，并让其斩杀了匈奴部落首领，匈奴人全部投降。请求废掉无法服众的车儿单于而立左谷蠡王为单于，不准。</p>\n</li>\n<li>\n<p>陈龟一向与梁翼不和，又多次请求诛杀梁翼，终被陷害，回乡后绝食而死。 4. 梁皇后仗势欺人，嫉妒成性，失宠，忧愤而死。</p>\n</li>\n<li>\n<p>梁翼专权20年，汉桓帝终于无法忍受，于是，与单超等五宦官谋划，出兵包围了梁翼住处，梁氏、孙氏覆灭。抄卖梁翼财产，收入30多亿。五宦官因功被封侯。 6. 邓贵人被立为皇后。</p>\n</li>\n<li>\n<p>八部羌人入侵陇西金城塞，被护羌校尉段击败。段多次打败羌人，后被凉州刺史郭闳陷害，罚做苦役。皇甫规主动请求招降羌人，被任命为中郎将，几十万羌人归降。</p>\n</li>\n<li>\n<p>冯绲（gun）率军10万讨伐武陵蛮人。打败了蛮人，10万人归降。荆州平定，冯绲将功劳让与他人。回乡后上书弹劾贪官，被宦官怨恨，结果被罚做苦役，遇赦后回家。</p>\n</li>\n<li>\n<p>皇甫规被任命为度辽将军，他上书请求让张奂接替自己而做其副手，被批准。 10. 尚书朱穆刚直，痛恨宦官专横，多次上书罢黜宦官，不被采纳，后生毒疮而死。</p>\n</li>\n</ol>\n<h2 id=\"卷55\"><a class=\"markdownIt-Anchor\" href=\"#卷55\"></a> 卷55</h2>\n<ol>\n<li>\n<p>荆州刺史度尚暗中派人烧毁了将士的珠宝以激励将士的讨贼之心，于是，平定盗贼，度尚因功被封侯。 2. 寇恂的曾孙侍中寇荣清高，为权贵所憎恨，被上下官员陷害而死。寇家从此衰落。 3. 邓皇后因为嫉妒被废，忧愤而死，亲族被诛杀。 4. 太尉杨秉弹劾宦官成功，宦官势力被打击。</p>\n</li>\n<li>\n<p>司隶校尉李膺等因为诛杀和弹劾奸臣而被罚做苦役。后被太尉陈蕃等人救下，重新被任命为司隶校尉，继续打击权贵，声望日高。</p>\n</li>\n<li>\n<p>度尚为自保而陷害交趾刺史张磐（pan），查明后，因功未受惩处。 7. 段对西羌穷追猛打，从春到冬不停歇，羌人于是溃散，段因功被封侯。</p>\n</li>\n<li>\n<p>汉桓帝想立采女田圣为皇后，太尉陈蕃（fan）等人反对，不得已，立窦融玄孙窦武的女儿窦贵人为皇后。 9. 鲜卑听说张奂被调回京都洛阳，便联合乌桓、南匈奴、东羌反叛，侵犯沿边九郡。于是，张奂被再次任命为护匈奴中郎将，20万人投降，只有鲜卑首领檀石槐不投降。</p>\n</li>\n<li>\n<p>郭泰、贾彪是三万太学生的首领，他们与陈蕃、李膺等人互相标榜，评议朝政得失，官员害怕被非议，因此都与之交往。</p>\n</li>\n<li>\n<p>汉桓帝信奉佛教，佛教越发盛行。</p>\n</li>\n<li>\n<p>李膺不顾赦令，斩杀了精通占卜的张成父子，引发了党人之狱，被牵连者多为天下贤士。皇甫规也想入狱，不可得。</p>\n</li>\n</ol>\n<h2 id=\"卷56\"><a class=\"markdownIt-Anchor\" href=\"#卷56\"></a> 卷56</h2>\n<ol>\n<li>\n<p>护羌校尉段平定西羌。</p>\n</li>\n<li>\n<p>贾彪、窦武等人营救，再加上宦官也害怕事态扩大牵连其子弟，于是，党人全部被赦免，遣回故乡，终身不许做官。</p>\n</li>\n<li>\n<p>张奂派司马董卓等大败先零羌人，幽州、并州、凉州平定。因为张奂不肯奉承宦官，没有被封侯。 4. 汉桓帝去世，窦太后主政，处死了采女田圣。12岁的刘宏被迎立为帝，是为汉灵帝。窦武被任命为大将军、陈蕃为太傅。</p>\n</li>\n<li>\n<p>段率军1万讨伐先零等东羌部落，穷追猛打，誓要斩草除根。张奂上书请求招降，段上书坚持己见，终于平定东羌。为此耗费44亿，阵亡400人。</p>\n</li>\n<li>\n<p>窦武和陈蕃主持朝政，灵帝奶妈赵娆（rao）和宦官干扰朝政，于是，窦武、陈蕃出兵，用武力诛杀宦官，可惜兵败身死，窦太后被软禁。张奂因为被宦官利用而被封侯，张奂因悔恨而不接受。 7. 汉灵帝迎接其母到京都洛阳，是为董太后。</p>\n</li>\n<li>\n<p>李膺、范滂（pang）等党人互起称号，评议朝政，被宦官诬陷，党人相继而死，读书人大批被杀害。 9. 高句丽国王伯固侵犯辽东郡，玄菟郡太守耿临出兵讨伐，伯固投降。</p>\n</li>\n<li>\n<p>孟佗因为宦官而被封为凉州刺史。他派任涉率领西域联军3万人攻打疏勒王国，四个月不克，被迫撤退，朝廷无法再控制疏勒。 11. 宋贵人被封为皇后。</p>\n</li>\n</ol>\n<h2 id=\"卷57\"><a class=\"markdownIt-Anchor\" href=\"#卷57\"></a> 卷57</h2>\n<ol>\n<li>\n<p>太傅胡广去世，享年82岁。他侍奉过安、顺、冲、质、桓、灵等六个皇帝。因为没有忠直之风，而被天下看轻。</p>\n</li>\n<li>\n<p>窦太后因为母亲去世，思念成疾，也去世。</p>\n</li>\n<li>\n<p>司隶校尉段打算驱逐张奂后将其杀害，后因张奂苦苦哀求而幸免于难。 4. 吴郡司马孙坚招募勇士，帮助州郡讨伐起兵的许生，后许生被斩杀。 5. 蔡邕（yong）多次上书，声望很高，刺客也不忍刺杀他。</p>\n</li>\n<li>\n<p>护乌桓校尉夏育请求讨伐鲜卑檀石槐，被批准。三路大军惨败，夏育等出钱赎罪，被贬为民。 7. 宋皇后被宦官陷害，在狱中忧郁而死。亲族被诛杀。 8. 汉灵帝设立机构，公开买官。以聚敛私财。</p>\n</li>\n<li>\n<p>宦官王甫（fu）、曹节专权，养子遍布天下，掌握着重要官职。太尉段也迎合顺从他们。司隶校尉阳球痛恨他们专横，于是，乘机将王甫、段等逮捕，王甫等被活活打死，段自杀。阳球还想打击豪强，被迁官。后因为诛杀曹节等的计划外泄而被处死。 10. 中常侍吕强清廉忠直。</p>\n</li>\n<li>\n<p>何贵人生下皇子刘辩，被立为皇后。其兄何进被任命为侍中。</p>\n</li>\n</ol>\n<h2 id=\"卷58\"><a class=\"markdownIt-Anchor\" href=\"#卷58\"></a> 卷58</h2>\n<ol>\n<li>\n<p>朱俊平定交趾叛乱。</p>\n</li>\n<li>\n<p>鲜卑首领檀石槐去世，儿子和连继位，在进攻北地时被射死。其兄的儿子魁头继位。和连的儿子骞曼成人后与魁头争权，鲜卑部众离散。魁头去世后，其弟步度根继位 3. 汉灵帝在后宫修建商铺，令宫女贩卖货物。</p>\n</li>\n<li>\n<p>何皇后嫉妒心强，毒死了生下皇子刘协的王美人。汉灵帝要废后，被宦官劝阻。 5. 大长秋宦官曹节去世，由宦官赵忠代理大长秋。</p>\n</li>\n<li>\n<p>巴郡（重庆）板族人英武善战，为汉朝多次平定叛乱立下汗马功劳。但地方官府对他们征收重税，板人于是造反。朝廷招降，于是全部投降。</p>\n</li>\n<li>\n<p>张角建立“太平道”弟子几十万，遍布四方。不久，张角发动了黄巾军起义。 8. 何进被任命为大将军。卢植征讨张角，皇甫嵩、朱俊也奉命征讨颍川黄巾军。 9. 宦官吕强因为匡扶汉室而被宦官赵忠等人陷害，自杀而死。</p>\n</li>\n<li>\n<p>皇甫嵩、朱俊和援军曹操一起平定了颍川、汝南、陈国等三郡的黄巾军。皇甫嵩谦让功劳，朱俊被封侯 11. 卢植多次打败黄巾军，在广宗，因为没有贿赂小黄门左丰而被陷害，仅被免死。董卓接替了卢植。 12. 皇甫嵩在广宗斩杀张梁，又在下曲阳斩杀张宝，张角先前已经去世，于是，黄巾主力覆灭。皇甫嵩被封侯。后因为没有答应宦官索贿而被陷害，险些身死。</p>\n</li>\n<li>\n<p>朱俊、孙坚等在宛城先后斩杀黄巾军统帅赵弘、韩忠、孙夏。宛城多次被黄巾军占领，又被官军夺回。 14. 张燕率领百万黑山军投降朝廷。</p>\n</li>\n<li>\n<p>张温率领董卓、孙坚讨伐以韩遂、边章为首的西羌军，双方各有胜负。后韩遂杀死边章，吞并了其军队。张温因未能平定叛乱而被免职。</p>\n</li>\n<li>\n<p>凉州司马马腾率军造反，与韩遂联盟，共同推举王国为首领。 17. 长沙太守孙坚因为镇压长沙贼帅区星有功而被封侯。</p>\n</li>\n</ol>\n<h2 id=\"卷59\"><a class=\"markdownIt-Anchor\" href=\"#卷59\"></a> 卷59</h2>\n<ol>\n<li>太常刘焉上书请设置州牧加强地方权力，于是，任命刘焉为益州牧，刘虞为幽州牧</li>\n</ol>\n<p>到任后，刘焉为政宽和，以收买人心。刘虞也招降了乌桓首领丘力居，并请求解散军队，只留下公孙瓒的一支军队驻扎在右北平。公孙瓒因为请求消灭丘力居不得而与刘虞结仇。刘虞将幽州治理得很好。 2. 皇甫嵩率领董卓等讨伐王国，王国战败。韩遂等废掉王国首领地位，后为了争权夺利而相互攻杀，势力开始衰落。</p>\n<ol start=\"3\">\n<li>\n<p>汉灵帝去世，宦官蹇（jian）硕诛杀何进不成。皇子刘辩即位，是为汉少帝，其母何太后主政。大将军何进和太傅袁隗（kui）主持尚书事务。</p>\n</li>\n<li>\n<p>袁绍建议何进杀尽宦官，并征召地方军队入朝做外援，何进不顾反对声，予以采纳</p>\n</li>\n<li>\n<p>宦官张让等杀死何进，司隶校尉袁绍带兵入宫尽杀宦官。张让挟持汉少帝出逃，途中被迫投河而死。董卓挟持汉少帝收降了吕布，何进的部下也来投靠，于是，董卓实力强盛。 6. 董卓废汉少帝，立刘协为帝，是为汉献帝。后毒杀了何太后和汉少帝。 7. 董卓为党人平反，并任用贤才，董卓的亲信全都没有担任高官，只在军中任职。</p>\n</li>\n<li>\n<p>董卓开始烧杀抢掠，地方割据势力共同推举袁绍为盟主，起兵讨伐董卓。曹操、袁术也是联军一员。 9. 董卓火烧洛阳，迁都长安。司徒王允曲意逢迎董卓。 10. 孙坚兵进南阳，与袁术合兵，袁术占领南阳。</p>\n</li>\n<li>\n<p>刘表被任命为荆州刺史，他单人匹马，在名士蒯越、蒯良的帮助下，平定了荆州。</p>\n</li>\n<li>\n<p>袁绍等联军畏惧董卓，坐吃粮草，曹操独自出兵，被董卓部将徐荣打败。联军因为粮草吃完而离散。不久，便相互攻杀。</p>\n</li>\n<li>\n<p>公孙度得到徐荣的推荐，担任辽东太守，他东征高句丽，西征乌桓，自立为辽东侯。</p>\n</li>\n</ol>\n<h2 id=\"卷60\"><a class=\"markdownIt-Anchor\" href=\"#卷60\"></a> 卷60</h2>\n<ol>\n<li>\n<p>孙坚被徐荣打败。后孙坚打败来犯的胡轸（zhen）、吕布，斩杀华雄。董卓亲自攻打，也被打败。孙坚进入洛阳，吕布败走。孙坚找到传国玉玺后回到南阳所属的鲁阳。后袁术派孙坚攻打刘表，孙坚围困了襄阳城，在追击黄祖途中遇伏，中箭而死，余部投靠了袁术。 2. 袁绍采纳逢纪的计谋，收降了冀州（州治所邺城）</p>\n</li>\n<li>\n<p>曹操采纳鲍信建议，攻打兖州贼军。袁绍举荐曹操为东郡太守，曹操继续追击黄巾军，30万兵士投降，曹操选择其中精锐，组建“青州兵”。</p>\n</li>\n<li>\n<p>公孙瓒因为弟弟公孙越之死而讨伐袁绍，冀州所属大多数城池投降，袁绍恐惧。刘备率领关羽、张飞、赵云也帮助公孙瓒，驻守平原郡。后麴（qu）义率领800精兵，界桥之战，大败公孙瓒，公孙瓒逃回幽州。 5. 董卓残暴，以致人人自危。王允等人与吕布一起谋划，董卓被吕布杀死。汉献帝命令王允和吕布主持朝政。蔡邕因为同情董卓，入狱而死。王允骄傲，部属离心。</p>\n</li>\n<li>\n<p>董卓余部恐惧，贾诩建议李催（cui）、郭汜（si）等联合进军长安。吕布属下的蜀郡士兵打开长安城，长安失陷。王允等人被处死，李催、郭汜、樊稠、张济等被封侯。吕布先后投降袁术–张扬–袁绍–张扬。 7. 袁术受到刘表的逼迫，又被兖州曹操打败，最终占据了寿春。</p>\n</li>\n<li>\n<p>徐州牧陶谦亲近小人，残害贤才。其部下为钱财杀死了曹操之父曹嵩。于是，曹操出兵攻打陶谦 9. 公孙瓒逼杀了幽州牧刘虞，刘虞仁爱，百姓悲痛。田畴发誓为之报仇。</p>\n</li>\n</ol>\n<h2 id=\"卷61\"><a class=\"markdownIt-Anchor\" href=\"#卷61\"></a> 卷61</h2>\n<ol>\n<li>\n<p>平原相刘备奉青州刺史田楷之命，救援徐州牧陶谦。曹操粮尽撤走。</p>\n</li>\n<li>\n<p>陈留太守张邈(miao)、东郡留守陈宫反叛曹操，迎接吕布入兖州。仅甄城、范县、东阿县没有归顺。曹操急忙从第二次攻徐州之战中撤回。与吕布交战，因为粮尽而各自撤退。</p>\n</li>\n<li>\n<p>益州牧刘焉因背生毒疮而死，属下因为其子刘璋温和而立为益州牧。部下甘宁等反叛失败，逃往荆州。 4. 徐州牧陶谦病死，死前推举刘备为徐州牧，刘备谦让后同意。</p>\n</li>\n<li>\n<p>孙坚之子孙策帮助袁术攻城略地，但袁术不信任他。后孙策在朱治的劝说下，带兵征讨曲阿的扬州刺史刘繇，势如破竹。</p>\n</li>\n<li>\n<p>李催等人内乱，先杀死了樊稠，后李催又与郭汜相互攻打。一人挟持天子，一人质公卿。李催势力衰落后，在张济的调和下，两人和好。后在汉献帝迁都弘农时，又有一番大混战。 7. 曹操打败吕布，吕布投靠徐州牧刘备。</p>\n</li>\n<li>\n<p>曹操攻陷了张超镇守的雍丘，东郡太守藏洪因为袁绍阻止其救援旧主而反叛。袁绍攻打藏洪一年多，无法攻下。东郡城内粮尽，饿死8000人，而军民始终没有背叛藏洪。城陷后，臧洪被杀。</p>\n</li>\n<li>\n<p>公孙瓒占据幽州全境后，睚眦必报，嫉贤妒能。刘虞部下鲜于辅、阎柔为给刘虞报仇，联合乌桓、鲜卑和袁绍部下麴义，10万联军攻打公孙瓒。公孙瓒屡战屡败，退守易县，作茧自闭，部下离散。</p>\n</li>\n</ol>\n<h2 id=\"卷62\"><a class=\"markdownIt-Anchor\" href=\"#卷62\"></a> 卷62</h2>\n<ol>\n<li>\n<p>刘备迎战袁术，各有胜负。吕布乘机占领了张飞驻守的下邳( pi)。刘备军中缺粮，以致人吃人，于是，刘备投靠了吕布，驻守小沛。吕布自称徐州牧。</p>\n</li>\n<li>\n<p>杨奉等人护送汉献帝进入洛阳。后董承招引曹操大军进入洛阳。于是，再次迁都许县，改名许都。杨奉等阻扰迁都，被曹操打败。杨奉等投靠袁术。 3. 孙策打败会稽(kuaiji)太守王朗，王朗投降。</p>\n</li>\n<li>\n<p>袁绍之子，青州刺史袁谭攻下了孔融驻守的北海郡，孔融投奔曹操。袁谭前期励精图治，后来亲近小人，便没有大成就。</p>\n</li>\n<li>\n<p>曹操部下枣袛（di）、任峻建立了屯田制度，曹军于是粮草充足。</p>\n</li>\n<li>\n<p>袁术大将纪灵攻打刘备，吕布营门射戟，救下刘备。后刘备兵日益增多，吕布便攻打刘备，刘备投靠了曹操。</p>\n</li>\n<li>\n<p>张济攻打刘表的襄城，中箭而死。余部由族侄张绣接管，驻守宛城，贾诩来投。</p>\n</li>\n<li>\n<p>曹操攻打张绣，张绣投降。曹操纳张济妻子为妾，又收买其大将胡车儿。张绣反叛，曹操长子曹昂、典韦等战死，于禁整顿军队，打退了张绣。 9. 曹操打败袁术，袁术从此衰落。 10. 刘备设鸿门宴，杀死来结盟的杨奉等。</p>\n</li>\n<li>\n<p>吕布大将高顺率领精锐的“陷军营”攻陷了刘备驻守的小沛。刘备只身逃走。</p>\n</li>\n<li>\n<p>曹操攻打吕布，侯成等背叛，抓住陈宫、高顺送给曹操。吕布也在白门楼被俘。刘备说服曹操，吕布、陈宫、高顺被绞杀，张辽投降。</p>\n</li>\n<li>\n<p>周瑜、鲁肃离开袁术，投靠孙策。孙策率军先后打败祖郎和太史慈，两人归顺。</p>\n</li>\n</ol>\n<h2 id=\"卷63\"><a class=\"markdownIt-Anchor\" href=\"#卷63\"></a> 卷63</h2>\n<ol>\n<li>\n<p>袁绍出兵斩杀公孙瓒，田楷也战死。 2. 袁术窘迫，愤恨而死。 3. 贾诩劝说张绣投降了曹操。</p>\n</li>\n<li>\n<p>孙策用计夺取了庐江郡，又派虞翻说服豫章郡太守华歆（xin）献上了豫章郡。</p>\n</li>\n<li>\n<p>刘备再次占领了徐州的下邳和小沛，背叛了曹操。曹操亲征，刘备战败投奔袁绍，关羽被俘。 6. 袁绍不顾田丰等人的反对，攻打曹操。</p>\n</li>\n<li>\n<p>关羽斩杀了袁绍大将颜良，解除了袁军对东郡的白马之围。关羽离开曹操，投奔刘备。 8. 鲜于辅、阎柔向曹操投降。</p>\n</li>\n<li>\n<p>孙策被已故吴郡太守许贡的门客杀死，年仅26岁，其弟孙权接任。当时，孙策已经占据了会稽、吴郡、丹阳、豫章、庐江、庐陵共6郡，不过，偏远处并没有完全归顺。</p>\n</li>\n<li>\n<p>许攸背叛袁绍投降了曹操。曹操率轻骑奔袭乌巢，斩杀淳于琼，烧毁了袁绍的粮草。袁绍大将张颌、高览率领重兵攻打曹操军营也始终不下，再加上郭图乘机陷害，两人投降了曹操。于是，袁绍全军溃散。余部投降曹操被活埋。官渡之战以曹操大胜袁绍大败而告终。 11. 刘表平定了长沙、零陵、桂阳，拥兵十万，不再向朝廷进贡。</p>\n</li>\n<li>\n<p>刘璋懦弱无能，张鲁占据汉中反叛。赵韪（wei)也因为益州人民对外来东州兵的仇恨而反叛。</p>\n</li>\n</ol>\n<h2 id=\"卷64\"><a class=\"markdownIt-Anchor\" href=\"#卷64\"></a> 卷64</h2>\n<ol>\n<li>\n<p>曹操攻打刘备占据的汝南，刘备战败投奔刘表，驻守在新野。</p>\n</li>\n<li>\n<p>赵韪围攻成都刘璋，东州兵害怕被杀，拼死作战，追击到江州（巴郡），杀死赵韪。 3. 张鲁以天师道管理汉中。天师道首领称祭酒。</p>\n</li>\n<li>\n<p>袁绍因为官渡之战战败，愤恨而死。袁谭与袁尚各带党羽相互攻杀。袁谭处于劣势，于是向曹操投降。曹操出兵攻打审配镇守的邺城，攻破城池，斩杀了审配。袁尚部下李孚在传信邺城中智勇惊人。 5. 袁谭打败袁尚，袁尚投奔幽州袁熙。袁谭背叛曹操。</p>\n</li>\n<li>\n<p>孙权忙于平定内乱。丹阳太守孙翊被杀，其妻徐氏设计为夫报了仇。</p>\n</li>\n<li>\n<p>曹操攻陷南皮，袁谭出逃，被杀死。</p>\n</li>\n<li>\n<p>幽州袁熙的部下反叛投降曹操，袁熙与袁尚投奔乌桓。 9. 黑山军首领张燕率兵十万归降了曹操。</p>\n</li>\n<li>\n<p>并州高干先降后反叛曹操，河东郡地方豪强卫固等响应，曹操任命的新太守杜畿（ji）设计瓦解了豪强，平定了河东。杜畿治理河东政绩常常天下第一。</p>\n</li>\n</ol>\n<h2 id=\"卷65\"><a class=\"markdownIt-Anchor\" href=\"#卷65\"></a> 卷65</h2>\n<ol>\n<li>曹操亲征并州刺史高干，高干在逃亡中被杀。梁习被任命为并州刺史，百姓认为没有并州刺史的功绩超过梁习。</li>\n<li>曹操在来降的田畴帮助下，奇袭了乌桓，斩杀了单于蹋（ta）顿，20万人投降。袁尚、袁熙投降辽东，被公孙康杀死，人头献给了曹操。</li>\n<li>刘备在襄阳隆中，三顾茅庐，请出了诸葛亮。 4. 黄祖部下甘宁在苏飞的帮助下，投奔了孙权。</li>\n<li>孙权西征江夏郡黄祖，攻陷了夏口城，斩杀了黄祖。甘宁救下了苏飞。</li>\n<li>朝廷撤除三公职位，以曹操为丞相。</li>\n<li>曹操征聘司马懿为僚属，司马懿称病，受胁迫后才接受。 8. 马腾解除了军权，到朝廷担任卫尉。其子马超接管了其军队。</li>\n<li>孔融全家被曹操杀死。</li>\n<li>刘琦接任黄祖担任江夏郡太守。</li>\n<li>刘表去世，蔡瑁、张允拥立刘琮为荆州牧。</li>\n</ol>\n<h2 id=\"卷66\"><a class=\"markdownIt-Anchor\" href=\"#卷66\"></a> 卷66</h2>\n<ol>\n<li>\n<p>孙权攻打合肥，久攻不下而撤军而还。张辽、李典、乐进等屯驻合肥。 2. 周瑜率军围攻江陵，曹仁防守一年多后弃城撤走。 3. 孙权将其妹孙尚香嫁予刘备。 4. 曹操派蒋干来劝降，周瑜不为所动。</p>\n</li>\n<li>\n<p>周瑜去世，鲁肃继任。劝说孙权，孙权同意借荆州。 6. 刘备以诸葛亮和庞统为军师。</p>\n</li>\n<li>\n<p>孙权任命歩骘（zhi）为交州刺史，岭南开始归属孙权。</p>\n</li>\n<li>\n<p>曹操派司隶校尉钟繇（yao）和夏侯渊讨伐张鲁，马超、韩遂等十部疑心图己而反叛，曹操亲征，马超、韩遂逃亡凉州。安定被曹操围攻，杨秋献城投降。</p>\n</li>\n<li>\n<p>张松劝说刘璋接刘备入蜀以攻张鲁，黄权、王累劝说无效，刘备入川，在葭（jia）萌关收买人心，不攻张鲁。</p>\n</li>\n<li>\n<p>孙尚香回吴，赵云、张飞夺回刘禅。 11. 曹操诛杀了卫尉马腾，灭其三族。</p>\n</li>\n<li>\n<p>荀彧因为反对给曹操加九赐，曹操非常不满，荀彧服毒而死。</p>\n</li>\n<li>\n<p>张松被其兄出卖而死，刘备攻打刘璋，节节胜利。刘璋部下李严等人投降，大将张任战死。 14. 曹操率大军攻打孙权的濡(ru)须口，两军相持不下，孙权劝说，曹操撤军。</p>\n</li>\n<li>\n<p>马超全部兼并了陇西的军队，联合张鲁军队攻打凉州，凉州刺史韦康无法抵挡，献城投降，被马超杀死，并打败了夏侯渊的援军。杨阜（fu）等人起兵为韦康报仇，打败了马超，杀死了马超的妻儿，马超投奔了张鲁。杨阜因功被封侯。</p>\n</li>\n</ol>\n<h2 id=\"卷67\"><a class=\"markdownIt-Anchor\" href=\"#卷67\"></a> 卷67</h2>\n<ol>\n<li>\n<p>夏侯渊打退了马超的进攻，又出兵打败了韩遂，最终平定了陇右地区。 2. 吕蒙出谋，甘宁出力，孙权攻取了皖城，以吕蒙为庐江太守，回军驻守在寻阳。</p>\n</li>\n<li>\n<p>诸葛亮率领张飞、赵云攻取了巴东（建安、白帝城），后在巴郡（江州、重庆）生擒了严颜，与刘备在成都会师。期间，庞统雒（luo）县中箭而死。 4. 刘备派李恢説降了马超。</p>\n</li>\n<li>\n<p>刘璋投降，刘备占领了益州，大封功臣，收降人才，益州安定。</p>\n</li>\n<li>\n<p>伏皇后被曹操害死，亲属被杀者一百多人。曹操的女儿曹贵人被立为皇后。</p>\n</li>\n<li>\n<p>曹操攻打张鲁，受阻于阳平关，因为部下迷路而找到出路，得以攻陷阳平关，张鲁逃亡，曹操占领汉中。主簿司马懿和刘晔劝说曹操乘机攻占益州，不准，后又后悔。后来，张鲁率领庞德等投降了曹操。</p>\n</li>\n<li>\n<p>孙权索要荆州，刘备不还。于是，吕蒙出兵，长沙、桂阳投降，零陵也用计夺取。刘备求和，双方划分了荆州。</p>\n</li>\n<li>\n<p>孙权率军十万攻打合肥，张辽威震逍遥津，孙权狼狈而逃。</p>\n</li>\n</ol>\n<h2 id=\"卷68\"><a class=\"markdownIt-Anchor\" href=\"#卷68\"></a> 卷68</h2>\n<ol>\n<li>\n<p>曹操攻打濡须口，孙权防守。曹操撤退，孙权投降，双方议和。周泰率领朱然、徐盛驻守濡须口。</p>\n</li>\n<li>\n<p>曹丕被立为太子后暗自高兴，辛毗（pi）之女辛宪英叹息魏将不昌。</p>\n</li>\n<li>\n<p>刘备率军攻打汉中，驻扎在阳平关。</p>\n</li>\n<li>\n<p>鲁肃去世，吕蒙接任。</p>\n</li>\n<li>\n<p>陆逊扫灭了东部三郡的盗贼。</p>\n</li>\n<li>\n<p>曹操派其子曹彰讨伐代郡的乌桓叛军。曹彰作战勇猛，所向披靡。鲜卑首领轲（ke）比能也请求投降，于是，北方全部平定。</p>\n</li>\n<li>\n<p>黄忠在法正的指挥下，在定军山斩杀夏侯渊。曹操亲自对抗刘备，赵云用空营计，打败曹军。曹操率领全军撤退，刘备占据汉中。</p>\n</li>\n<li>\n<p>关羽率军攻打襄阳郡的樊城，于禁被俘、庞德被杀，曹仁死守樊城。徐晃前来救援，打败了关羽。吕蒙设计，糜芳投降，江陵失陷，关羽士兵离散，败走麦城，被马忠杀死。不久，吕蒙突然去世。</p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjjaobrh10007j5lyxk103uqx","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrh4000aj5ly3eqt0z2k"},{"post_id":"cjjaobrgq0003j5lysfd8yxjp","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrh5000cj5ly7c372xt6"},{"post_id":"cjjaobrh20008j5ly2jq32e0b","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrh7000fj5lyedg2hioe"},{"post_id":"cjjaobrh4000bj5lya6ba0qdw","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrh7000hj5lyvcb1jwdh"},{"post_id":"cjjaobrgx0004j5ly44lh2b0u","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrh8000jj5lyf7nf4skn"},{"post_id":"cjjaobrh6000dj5lyep7kvh4h","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrh9000lj5lym0xb3tt4"},{"post_id":"cjjaobrh7000gj5lyijxofj01","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrha000nj5lyj2h4hpqz"},{"post_id":"cjjaobrh00006j5lypfafm5t8","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrhb000qj5lyrxx08z2i"},{"post_id":"cjjaobrh8000ij5lywm0iuram","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrhb000sj5ly2xahh1r3"},{"post_id":"cjjaobrh8000kj5lycbfxqhfz","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobrhc000uj5lyfyo0dbl0"},{"post_id":"cjjaobrhc000tj5ly3ysjv5ww","tag_id":"cjjaobrhb000pj5lyn0m51r0h","_id":"cjjaobrhd000xj5ly8i7r5rar"},{"post_id":"cjjaobrh9000mj5ly63p3ce86","tag_id":"cjjaobrhb000pj5lyn0m51r0h","_id":"cjjaobrhe000zj5lymr6m7wo8"},{"post_id":"cjjaobrha000oj5lyzh8k05lj","tag_id":"cjjaobrhb000pj5lyn0m51r0h","_id":"cjjaobrhg0012j5lyf2lye68x"},{"post_id":"cjjaobrhb000rj5lyghcicac1","tag_id":"cjjaobrhb000pj5lyn0m51r0h","_id":"cjjaobrhi0016j5lymwwlqybn"},{"post_id":"cjjaobrhc000vj5lyhgvjl75i","tag_id":"cjjaobrhi0015j5lyw43qfekx","_id":"cjjaobrhk001bj5lyzu3ry6u0"},{"post_id":"cjjaobrhd000yj5lygqu7f0lf","tag_id":"cjjaobrhj0019j5lyu2lhp2np","_id":"cjjaobrhm001fj5lyn0n9agcs"},{"post_id":"cjjaobrhf0010j5lymhub0zs6","tag_id":"cjjaobrhj0019j5lyu2lhp2np","_id":"cjjaobrhn001hj5ly33jdqe7o"},{"post_id":"cjjaobrhg0013j5ly42ghq1ti","tag_id":"cjjaobrhm001gj5lyb8krme3c","_id":"cjjaobrhn001jj5lyjneqp1ki"},{"post_id":"cjjaobrhh0014j5lyc3sp0hmr","tag_id":"cjjaobrhm001gj5lyb8krme3c","_id":"cjjaobrhn001lj5lyel32tq68"},{"post_id":"cjjaobrhi0017j5lyerxb7klw","tag_id":"cjjaobrhm001gj5lyb8krme3c","_id":"cjjaobrho001nj5ly1mm20fvv"},{"post_id":"cjjaobrhj0018j5lyiu9pqq7v","tag_id":"cjjaobrho001mj5ly0ytwcjih","_id":"cjjaobrho001pj5lykuqeifsx"},{"post_id":"cjjaobrhk001aj5ly15dy92r0","tag_id":"cjjaobrho001oj5lyab3wh0iq","_id":"cjjaobrho001rj5lyd9tptmbq"},{"post_id":"cjjaobrhl001cj5ly6l78t8xq","tag_id":"cjjaobrho001oj5lyab3wh0iq","_id":"cjjaobrhp001tj5lyzaoss7q9"},{"post_id":"cjjaobrhm001ej5lyo2xjy19t","tag_id":"cjjaobrho001oj5lyab3wh0iq","_id":"cjjaobrhp001uj5lyeiyy7jbc"},{"post_id":"cjjaobrhz001vj5lytxco4vq8","tag_id":"cjjaobrgz0005j5lyiy5m1o22","_id":"cjjaobri5001xj5lyqltfbf12"},{"post_id":"cjjaobri2001wj5lypzw6sqh1","tag_id":"cjjaobrhb000pj5lyn0m51r0h","_id":"cjjaobri7001zj5lygdlk93ks"},{"post_id":"cjjaobri5001yj5ly3e6p29gl","tag_id":"cjjaobrho001oj5lyab3wh0iq","_id":"cjjaobri70020j5ly2q9b47ch"},{"post_id":"cjjaobric0021j5lyj72mes75","tag_id":"cjjaobrho001oj5lyab3wh0iq","_id":"cjjaobrid0022j5lyqru7krla"},{"post_id":"cjjaobrim0023j5ly80qiifv1","tag_id":"cjjaobrho001oj5lyab3wh0iq","_id":"cjjaobrin0024j5lyrg6kg3gm"}],"Tag":[{"name":"scala","_id":"cjjaobrgz0005j5lyiy5m1o22"},{"name":"书法","_id":"cjjaobrhb000pj5lyn0m51r0h"},{"name":"八卦","_id":"cjjaobrhi0015j5lyw43qfekx"},{"name":"数学","_id":"cjjaobrhj0019j5lyu2lhp2np"},{"name":"深入理解计算机系统","_id":"cjjaobrhm001gj5lyb8krme3c"},{"name":"游记","_id":"cjjaobrho001mj5ly0ytwcjih"},{"name":"資治通鑑","_id":"cjjaobrho001oj5lyab3wh0iq"}]}}